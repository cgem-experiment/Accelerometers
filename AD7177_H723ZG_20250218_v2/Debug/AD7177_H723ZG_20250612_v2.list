
AD7177_H723ZG_20250612_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b4f8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  0801b7c8  0801b7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e630  0801e630  0001f630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e638  0801e638  0001f638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e63c  0801e63c  0001f63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000009c  24004984  0801e640  0001f984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .lwip_sec     00004983  24000000  24000000  00020000  2**2
                  ALLOC
  8 .bss          00010408  24004a20  0801e6dc  0001fa20  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  24014e28  0801e6dc  0001fe28  2**0
                  ALLOC
 10 .lwip_sec     00000160  30000000  30000000  00020000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001fa20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037c38  00000000  00000000  0001fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000080f3  00000000  00000000  00057686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b8  00000000  00000000  0005f780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f4b  00000000  00000000  00061f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d27  00000000  00000000  00063e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d814  00000000  00000000  00076baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00171d3a  00000000  00000000  000b43be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002260f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae00  00000000  00000000  0022613c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00230f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004a20 	.word	0x24004a20
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801b7b0 	.word	0x0801b7b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004a24 	.word	0x24004a24
 800030c:	0801b7b0 	.word	0x0801b7b0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 febd 	bl	8001134 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b4e      	ldr	r3, [pc, #312]	@ (80004f4 <main+0x144>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b48      	ldr	r3, [pc, #288]	@ (80004f4 <main+0x144>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b43      	ldr	r3, [pc, #268]	@ (80004f4 <main+0x144>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a42      	ldr	r2, [pc, #264]	@ (80004f4 <main+0x144>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b3c      	ldr	r3, [pc, #240]	@ (80004f4 <main+0x144>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b39      	ldr	r3, [pc, #228]	@ (80004f4 <main+0x144>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b36      	ldr	r3, [pc, #216]	@ (80004f4 <main+0x144>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	492b      	ldr	r1, [pc, #172]	@ (80004f4 <main+0x144>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b23      	ldr	r3, [pc, #140]	@ (80004f4 <main+0x144>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a22      	ldr	r2, [pc, #136]	@ (80004f4 <main+0x144>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f001 fc5a 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f84a 	bl	800051c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000488:	f000 f8ba 	bl	8000600 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fb2c 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000490:	f000 faf2 	bl	8000a78 <MX_DMA_Init>
  MX_TIM2_Init();
 8000494:	f000 fa2c 	bl	80008f0 <MX_TIM2_Init>
  MX_SPI4_Init();
 8000498:	f000 f928 	bl	80006ec <MX_SPI4_Init>
  MX_TIM23_Init();
 800049c:	f000 fa9c 	bl	80009d8 <MX_TIM23_Init>
  MX_TIM1_Init();
 80004a0:	f000 f97c 	bl	800079c <MX_TIM1_Init>
  MX_SPI1_Init();
 80004a4:	f000 f8ca 	bl	800063c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2140      	movs	r1, #64	@ 0x40
 80004ac:	4812      	ldr	r0, [pc, #72]	@ (80004f8 <main+0x148>)
 80004ae:	f005 fc75 	bl	8005d9c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)resetSequence, 8, 50);
 80004b2:	2332      	movs	r3, #50	@ 0x32
 80004b4:	2208      	movs	r2, #8
 80004b6:	4911      	ldr	r1, [pc, #68]	@ (80004fc <main+0x14c>)
 80004b8:	4811      	ldr	r0, [pc, #68]	@ (8000500 <main+0x150>)
 80004ba:	f008 f897 	bl	80085ec <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2140      	movs	r1, #64	@ 0x40
 80004c2:	480d      	ldr	r0, [pc, #52]	@ (80004f8 <main+0x148>)
 80004c4:	f005 fc6a 	bl	8005d9c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004c8:	f00b fbee 	bl	800bca8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000504 <main+0x154>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <main+0x158>)
 80004d2:	f00b fc48 	bl	800bd66 <osThreadNew>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <main+0x15c>)
 80004da:	6013      	str	r3, [r2, #0]

  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(startEthernetTask, NULL, &ethernetTask_attributes);
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <main+0x160>)
 80004de:	2100      	movs	r1, #0
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <main+0x164>)
 80004e2:	f00b fc40 	bl	800bd66 <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <main+0x168>)
 80004ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004ec:	f00b fc00 	bl	800bcf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <main+0x140>
 80004f4:	e000ed00 	.word	0xe000ed00
 80004f8:	58020400 	.word	0x58020400
 80004fc:	24004984 	.word	0x24004984
 8000500:	24004a3c 	.word	0x24004a3c
 8000504:	0801e3b4 	.word	0x0801e3b4
 8000508:	08001019 	.word	0x08001019
 800050c:	24004e10 	.word	0x24004e10
 8000510:	0801e3d8 	.word	0x0801e3d8
 8000514:	08001029 	.word	0x08001029
 8000518:	24004e14 	.word	0x24004e14

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09c      	sub	sp, #112	@ 0x70
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000526:	224c      	movs	r2, #76	@ 0x4c
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f01a fa3f 	bl	801a9ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2220      	movs	r2, #32
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f01a fa39 	bl	801a9ae <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800053c:	2002      	movs	r0, #2
 800053e:	f005 fc61 	bl	8005e04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <SystemClock_Config+0xe0>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a2c      	ldr	r2, [pc, #176]	@ (80005fc <SystemClock_Config+0xe0>)
 800054c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <SystemClock_Config+0xe0>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800055e:	bf00      	nop
 8000560:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <SystemClock_Config+0xe0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800056c:	d1f8      	bne.n	8000560 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800056e:	2303      	movs	r3, #3
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000572:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000578:	2301      	movs	r3, #1
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800057c:	2340      	movs	r3, #64	@ 0x40
 800057e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	2302      	movs	r3, #2
 8000586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800058c:	f240 1313 	movw	r3, #275	@ 0x113
 8000590:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000596:	2304      	movs	r3, #4
 8000598:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800059e:	2304      	movs	r3, #4
 80005a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fc62 	bl	8005e78 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005ba:	f000 fe1d 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	233f      	movs	r3, #63	@ 0x3f
 80005c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005ca:	2308      	movs	r3, #8
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005ce:	2340      	movs	r3, #64	@ 0x40
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005d2:	2340      	movs	r3, #64	@ 0x40
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80005d6:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005dc:	2340      	movs	r3, #64	@ 0x40
 80005de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2103      	movs	r1, #3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 f821 	bl	800662c <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80005f0:	f000 fe02 	bl	80011f8 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3770      	adds	r7, #112	@ 0x70
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	58024800 	.word	0x58024800

08000600 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0ae      	sub	sp, #184	@ 0xb8
 8000604:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	22b8      	movs	r2, #184	@ 0xb8
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f01a f9ce 	bl	801a9ae <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000612:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800061e:	2300      	movs	r3, #0
 8000620:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4618      	mov	r0, r3
 8000626:	f006 fbb9 	bl	8006d9c <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000630:	f000 fde2 	bl	80011f8 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	37b8      	adds	r7, #184	@ 0xb8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <MX_SPI1_Init+0xac>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000648:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800064c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000656:	2207      	movs	r2, #7
 8000658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800065c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000660:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000664:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066a:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800066c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006d2:	f007 fe67 	bl	80083a4 <HAL_SPI_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80006dc:	f000 fd8c 	bl	80011f8 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */
  //HAL_NVIC_EnableIRQ(SPI1_IRQn);
//
  /* USER CODE END SPI1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	24004a3c 	.word	0x24004a3c
 80006e8:	40013000 	.word	0x40013000

080006ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <MX_SPI4_Init+0xa8>)
 80006f2:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <MX_SPI4_Init+0xac>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <MX_SPI4_Init+0xa8>)
 80006f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000706:	2207      	movs	r2, #7
 8000708:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800070a:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800070c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000710:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000718:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800071c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000720:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000724:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000728:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000748:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800074c:	2200      	movs	r2, #0
 800074e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000752:	2200      	movs	r2, #0
 8000754:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000758:	2200      	movs	r2, #0
 800075a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800075e:	2200      	movs	r2, #0
 8000760:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000764:	2200      	movs	r2, #0
 8000766:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800076a:	2200      	movs	r2, #0
 800076c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000770:	2200      	movs	r2, #0
 8000772:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000776:	2200      	movs	r2, #0
 8000778:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800077c:	2200      	movs	r2, #0
 800077e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000782:	f007 fe0f 	bl	80083a4 <HAL_SPI_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 800078c:	f000 fd34 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	24004ac4 	.word	0x24004ac4
 8000798:	40013400 	.word	0x40013400

0800079c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	@ 0x70
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2234      	movs	r2, #52	@ 0x34
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f01a f8e9 	bl	801a9ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007dc:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007de:	4a43      	ldr	r2, [pc, #268]	@ (80008ec <MX_TIM1_Init+0x150>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1375-1;
 80007e2:	4b41      	ldr	r3, [pc, #260]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007e4:	f240 525e 	movw	r2, #1374	@ 0x55e
 80007e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b3f      	ldr	r3, [pc, #252]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007f0:	4b3d      	ldr	r3, [pc, #244]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fe:	4b3a      	ldr	r3, [pc, #232]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080a:	4837      	ldr	r0, [pc, #220]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 800080c:	f009 f86d 	bl	80098ea <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000816:	f000 fcef 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000824:	4619      	mov	r1, r3
 8000826:	4830      	ldr	r0, [pc, #192]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000828:	f009 fd12 	bl	800a250 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000832:	f000 fce1 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000836:	482c      	ldr	r0, [pc, #176]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000838:	f009 f9b2 	bl	8009ba0 <HAL_TIM_OC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000842:	f000 fcd9 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000852:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000856:	4619      	mov	r1, r3
 8000858:	4823      	ldr	r0, [pc, #140]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 800085a:	f00a fa39 	bl	800acd0 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000864:	f000 fcc8 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4816      	ldr	r0, [pc, #88]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 800088e:	f009 fb51 	bl	8009f34 <HAL_TIM_OC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000898:	f000 fcae 	bl	80011f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80008d2:	f00a fa99 	bl	800ae08 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008dc:	f000 fc8c 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3770      	adds	r7, #112	@ 0x70
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	24004d2c 	.word	0x24004d2c
 80008ec:	40010000 	.word	0x40010000

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	@ 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000922:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 275-1;
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800092c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000938:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800093a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094c:	4821      	ldr	r0, [pc, #132]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800094e:	f008 ffcc 	bl	80098ea <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000958:	f000 fc4e 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000966:	4619      	mov	r1, r3
 8000968:	481a      	ldr	r0, [pc, #104]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800096a:	f009 fc71 	bl	800a250 <HAL_TIM_ConfigClockSource>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000974:	f000 fc40 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000978:	4816      	ldr	r0, [pc, #88]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800097a:	f009 f972 	bl	8009c62 <HAL_TIM_PWM_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000984:	f000 fc38 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000998:	f00a f99a 	bl	800acd0 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80009a2:	f000 fc29 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	2360      	movs	r3, #96	@ 0x60
 80009a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 80009be:	f009 fb33 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009c8:	f000 fc16 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	@ 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	24004d78 	.word	0x24004d78

080009d8 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_TIM23_Init+0x98>)
 80009f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <MX_TIM23_Init+0x9c>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_TIM23_Init+0x98>)
 80009fe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000a02:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000a1e:	4814      	ldr	r0, [pc, #80]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a20:	f008 ff63 	bl	80098ea <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000a2a:	f000 fbe5 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a3c:	f009 fc08 	bl	800a250 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000a46:	f000 fbd7 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a58:	f00a f93a 	bl	800acd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000a62:	f000 fbc9 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24004dc4 	.word	0x24004dc4
 8000a74:	4000e000 	.word	0x4000e000

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_DMA_Init+0x6c>)
 8000a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a84:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <MX_DMA_Init+0x6c>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_DMA_Init+0x6c>)
 8000a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f001 fab9 	bl	8002018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aa6:	200b      	movs	r0, #11
 8000aa8:	f001 fad0 	bl	800204c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2105      	movs	r1, #5
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f001 fab1 	bl	8002018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f001 fac8 	bl	800204c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	200d      	movs	r0, #13
 8000ac2:	f001 faa9 	bl	8002018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ac6:	200d      	movs	r0, #13
 8000ac8:	f001 fac0 	bl	800204c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2105      	movs	r1, #5
 8000ad0:	200e      	movs	r0, #14
 8000ad2:	f001 faa1 	bl	8002018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ad6:	200e      	movs	r0, #14
 8000ad8:	f001 fab8 	bl	800204c <HAL_NVIC_EnableIRQ>

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	4b42      	ldr	r3, [pc, #264]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a40      	ldr	r2, [pc, #256]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	4a39      	ldr	r2, [pc, #228]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2c:	4b36      	ldr	r3, [pc, #216]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	4a31      	ldr	r2, [pc, #196]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	@ 0x40
 8000bb6:	4815      	ldr	r0, [pc, #84]	@ (8000c0c <MX_GPIO_Init+0x124>)
 8000bb8:	f005 f8f0 	bl	8005d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bbc:	2340      	movs	r3, #64	@ 0x40
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <MX_GPIO_Init+0x124>)
 8000bd4:	f004 ff3a 	bl	8005a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <MX_GPIO_Init+0x124>)
 8000bf0:	f004 ff2c 	bl	8005a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2105      	movs	r1, #5
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f001 fa0d 	bl	8002018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  //remove HAL_NVIC_EnableIRQ above
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020400 	.word	0x58020400

08000c10 <HAL_GPIO_EXTI_Callback>:


// EXTI Line8 External Interrupt ISR Handler CallBackFun

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_8) // If The INT Source Is EXTI Line8 (PB8 Pin)
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c20:	d117      	bne.n	8000c52 <HAL_GPIO_EXTI_Callback+0x42>
    {
      // Disable EXTI to prevent re-entry during SPI
      HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000c22:	2017      	movs	r0, #23
 8000c24:	f001 fa20 	bl	8002068 <HAL_NVIC_DisableIRQ>

      uint8_t txBuffer24bit[5] = {AD7177_READ_DATA_REG, 0x00, 0x00, 0x00, 0x00};
 8000c28:	2344      	movs	r3, #68	@ 0x44
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	733b      	strb	r3, [r7, #12]

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2140      	movs	r1, #64	@ 0x40
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c36:	f005 f8b1 	bl	8005d9c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txBuffer24bit, (uint8_t *)rxBuffer24bit, 5);
 8000c3a:	f107 0108 	add.w	r1, r7, #8
 8000c3e:	2305      	movs	r3, #5
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c42:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c44:	f008 f932 	bl	8008eac <HAL_SPI_TransmitReceive_IT>
	  timer23val = __HAL_TIM_GET_COUNTER(&htim23);
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c4e:	4a07      	ldr	r2, [pc, #28]	@ (8000c6c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c50:	6013      	str	r3, [r2, #0]
    }
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	58020400 	.word	0x58020400
 8000c60:	24005844 	.word	0x24005844
 8000c64:	24004a3c 	.word	0x24004a3c
 8000c68:	24004dc4 	.word	0x24004dc4
 8000c6c:	24005864 	.word	0x24005864

08000c70 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a81      	ldr	r2, [pc, #516]	@ (8000e84 <HAL_SPI_TxRxCpltCallback+0x214>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	f040 80fc 	bne.w	8000e7c <HAL_SPI_TxRxCpltCallback+0x20c>
  {
	  // Deselect CS
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2140      	movs	r1, #64	@ 0x40
 8000c88:	487f      	ldr	r0, [pc, #508]	@ (8000e88 <HAL_SPI_TxRxCpltCallback+0x218>)
 8000c8a:	f005 f887 	bl	8005d9c <HAL_GPIO_WritePin>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); //re-enable interrupts
 8000c8e:	2017      	movs	r0, #23
 8000c90:	f001 f9dc 	bl	800204c <HAL_NVIC_EnableIRQ>

	  uint32_t value_24Bit =
	              (rxBuffer24bit[1] << 16) |
 8000c94:	4b7d      	ldr	r3, [pc, #500]	@ (8000e8c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	041a      	lsls	r2, r3, #16
	              (rxBuffer24bit[2] << 8) |
 8000c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e8c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	021b      	lsls	r3, r3, #8
	              (rxBuffer24bit[1] << 16) |
 8000ca0:	4313      	orrs	r3, r2
	               rxBuffer24bit[3];
 8000ca2:	4a7a      	ldr	r2, [pc, #488]	@ (8000e8c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8000ca4:	78d2      	ldrb	r2, [r2, #3]
	              (rxBuffer24bit[2] << 8) |
 8000ca6:	4313      	orrs	r3, r2
	  uint32_t value_24Bit =
 8000ca8:	617b      	str	r3, [r7, #20]

	  uint8_t  status       = rxBuffer24bit[4];              // Bottom byte = status
 8000caa:	4b78      	ldr	r3, [pc, #480]	@ (8000e8c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8000cac:	791b      	ldrb	r3, [r3, #4]
 8000cae:	74fb      	strb	r3, [r7, #19]

	  		bool rdy        = !(status & 0x80);   // Bit 7: 0 = data ready
 8000cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	09db      	lsrs	r3, r3, #7
 8000cba:	74bb      	strb	r3, [r7, #18]
	  		bool adc_error  =  (status & 0x40);   // Bit 6: 1 = ADC error
 8000cbc:	7cfb      	ldrb	r3, [r7, #19]
 8000cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bf14      	ite	ne
 8000cc6:	2301      	movne	r3, #1
 8000cc8:	2300      	moveq	r3, #0
 8000cca:	747b      	strb	r3, [r7, #17]
	  		bool crc_error  =  (status & 0x20);   // Bit 5: 1 = CRC error
 8000ccc:	7cfb      	ldrb	r3, [r7, #19]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	743b      	strb	r3, [r7, #16]
	  		uint8_t channel_id = status & 0x0F;   // Bits 3:0 = Channel ID
 8000cdc:	7cfb      	ldrb	r3, [r7, #19]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	73fb      	strb	r3, [r7, #15]

	  		/* Check that the data is fresh and without error */
	  		if (rdy && !adc_error && !crc_error && channel_id < NUM_CH_ENABLED) {
 8000ce4:	7cbb      	ldrb	r3, [r7, #18]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d017      	beq.n	8000d1a <HAL_SPI_TxRxCpltCallback+0xaa>
 8000cea:	7c7b      	ldrb	r3, [r7, #17]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d011      	beq.n	8000d1a <HAL_SPI_TxRxCpltCallback+0xaa>
 8000cf6:	7c3b      	ldrb	r3, [r7, #16]
 8000cf8:	f083 0301 	eor.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <HAL_SPI_TxRxCpltCallback+0xaa>
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d808      	bhi.n	8000d1a <HAL_SPI_TxRxCpltCallback+0xaa>
	  			channel_data[channel_id] = value_24Bit;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4961      	ldr	r1, [pc, #388]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x220>)
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			channel_ready[channel_id] = 1; //set that channel's ready flag high (this is different from rdy)
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	4a5f      	ldr	r2, [pc, #380]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0x224>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	54d1      	strb	r1, [r2, r3]
	  		}

	  		// Once all 4 channels have been read, build and store packet
	  		if (channel_ready[0] && channel_ready[1] && channel_ready[2]) {
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0x224>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 80ab 	beq.w	8000e7c <HAL_SPI_TxRxCpltCallback+0x20c>
 8000d26:	4b5b      	ldr	r3, [pc, #364]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0x224>)
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80a5 	beq.w	8000e7c <HAL_SPI_TxRxCpltCallback+0x20c>
 8000d32:	4b58      	ldr	r3, [pc, #352]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0x224>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 809f 	beq.w	8000e7c <HAL_SPI_TxRxCpltCallback+0x20c>

	  			// Clear ready flags
	  			for (int i = 0; i < NUM_CH_ENABLED; i++) channel_ready[i] = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e007      	b.n	8000d54 <HAL_SPI_TxRxCpltCallback+0xe4>
 8000d44:	4a53      	ldr	r2, [pc, #332]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0x224>)
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	4413      	add	r3, r2
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3301      	adds	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	ddf4      	ble.n	8000d44 <HAL_SPI_TxRxCpltCallback+0xd4>

	  			// Fill spiData
	  			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	e028      	b.n	8000db2 <HAL_SPI_TxRxCpltCallback+0x142>
	  				spiData[spiIndex + (i * 2)]     = channel_data[i] & 0xFFFF; // bits 15:0
 8000d60:	4a4b      	ldr	r2, [pc, #300]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x220>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d68:	4b4b      	ldr	r3, [pc, #300]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4619      	mov	r1, r3
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	b291      	uxth	r1, r2
 8000d78:	4a48      	ldr	r2, [pc, #288]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000d7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  				spiData[spiIndex + (i * 2) + 1] = (channel_data[i] >> 16) << 8 | i; // bits 23:16 + channel id
 8000d7e:	4a44      	ldr	r2, [pc, #272]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x220>)
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b299      	uxth	r1, r3
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b41      	ldr	r3, [pc, #260]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4403      	add	r3, r0
 8000da0:	3301      	adds	r3, #1
 8000da2:	430a      	orrs	r2, r1
 8000da4:	b291      	uxth	r1, r2
 8000da6:	4a3d      	ldr	r2, [pc, #244]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	3301      	adds	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	ddd3      	ble.n	8000d60 <HAL_SPI_TxRxCpltCallback+0xf0>
	  			}

	  			// Add timestamp
	  			spiData[spiIndex + 6]  = timer23val & 0xFFFF;
 8000db8:	4b39      	ldr	r3, [pc, #228]	@ (8000ea0 <HAL_SPI_TxRxCpltCallback+0x230>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3306      	adds	r3, #6
 8000dc4:	b291      	uxth	r1, r2
 8000dc6:	4a35      	ldr	r2, [pc, #212]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			spiData[spiIndex + 7]  = (timer23val >> 16) & 0xFFFF;
 8000dcc:	4b34      	ldr	r3, [pc, #208]	@ (8000ea0 <HAL_SPI_TxRxCpltCallback+0x230>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	0c1a      	lsrs	r2, r3, #16
 8000dd2:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3307      	adds	r3, #7
 8000dda:	b291      	uxth	r1, r2
 8000ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000dde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	  			//spacers (may change this later)
	  			spiData[spiIndex + 8] = 0xAB89;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3308      	adds	r3, #8
 8000dea:	4a2c      	ldr	r2, [pc, #176]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000dec:	f64a 3189 	movw	r1, #43913	@ 0xab89
 8000df0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			spiData[spiIndex + 9] = 0xEFCD;
 8000df4:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	3309      	adds	r3, #9
 8000dfc:	4a27      	ldr	r2, [pc, #156]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000dfe:	f64e 71cd 	movw	r1, #61389	@ 0xefcd
 8000e02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	  			// Advance index
	  			spiIndex += 10;
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000e12:	801a      	strh	r2, [r3, #0]

	  			if (spiIndex >= 700) {
 8000e14:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000e1e:	d303      	bcc.n	8000e28 <HAL_SPI_TxRxCpltCallback+0x1b8>
	  				spiIndex = 0;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	801a      	strh	r2, [r3, #0]
	  				vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
	  				portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
	  			}
	  		}
  }
}
 8000e26:	e029      	b.n	8000e7c <HAL_SPI_TxRxCpltCallback+0x20c>
	  			else if (spiIndex == 600) {
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e32:	d123      	bne.n	8000e7c <HAL_SPI_TxRxCpltCallback+0x20c>
	  				spiData[spiIndex] = sampleNum++;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0x234>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	491a      	ldr	r1, [pc, #104]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0x234>)
 8000e3c:	600a      	str	r2, [r1, #0]
 8000e3e:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000e40:	8812      	ldrh	r2, [r2, #0]
 8000e42:	b292      	uxth	r2, r2
 8000e44:	b299      	uxth	r1, r3
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000e48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				spiIndex = 0;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
	  				BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
	  				vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00d fe21 	bl	800eaa8 <vTaskNotifyGiveFromISR>
	  				portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d007      	beq.n	8000e7c <HAL_SPI_TxRxCpltCallback+0x20c>
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	f3bf 8f6f 	isb	sy
}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40013000 	.word	0x40013000
 8000e88:	58020400 	.word	0x58020400
 8000e8c:	24005844 	.word	0x24005844
 8000e90:	24005850 	.word	0x24005850
 8000e94:	24005860 	.word	0x24005860
 8000e98:	2400584a 	.word	0x2400584a
 8000e9c:	24004e18 	.word	0x24004e18
 8000ea0:	24005864 	.word	0x24005864
 8000ea4:	2400584c 	.word	0x2400584c
 8000ea8:	24004e14 	.word	0x24004e14
 8000eac:	e000ed04 	.word	0xe000ed04

08000eb0 <AD7177_WriteRegister>:
void AD7177_WriteRegister(uint8_t reg, uint32_t value, uint8_t num_bytes){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = (reg & 0x3F);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ec6:	73fb      	strb	r3, [r7, #15]
    uint8_t tx[4] = { cmd, 0, 0, 0 };
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	723b      	strb	r3, [r7, #8]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	727b      	strb	r3, [r7, #9]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	72bb      	strb	r3, [r7, #10]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	72fb      	strb	r3, [r7, #11]
    if (num_bytes == 3) {
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d10b      	bne.n	8000ef6 <AD7177_WriteRegister+0x46>
        tx[1] = (value >> 16) & 0xFF;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	727b      	strb	r3, [r7, #9]
        tx[2] = (value >> 8) & 0xFF;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	72bb      	strb	r3, [r7, #10]
        tx[3] = value & 0xFF;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	72fb      	strb	r3, [r7, #11]
 8000ef4:	e010      	b.n	8000f18 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 2) {
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d107      	bne.n	8000f0c <AD7177_WriteRegister+0x5c>
        tx[1] = (value >> 8) & 0xFF;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	727b      	strb	r3, [r7, #9]
        tx[2] = value & 0xFF;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	72bb      	strb	r3, [r7, #10]
 8000f0a:	e005      	b.n	8000f18 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 1) {
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d102      	bne.n	8000f18 <AD7177_WriteRegister+0x68>
        tx[1] = value & 0xFF;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	727b      	strb	r3, [r7, #9]
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <AD7177_WriteRegister+0x9c>)
 8000f1e:	f004 ff3d 	bl	8005d9c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tx, num_bytes + 1, HAL_MAX_DELAY);
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3301      	adds	r3, #1
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f107 0108 	add.w	r1, r7, #8
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <AD7177_WriteRegister+0xa0>)
 8000f34:	f007 fb5a 	bl	80085ec <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	@ 0x40
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <AD7177_WriteRegister+0x9c>)
 8000f3e:	f004 ff2d 	bl	8005d9c <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	58020400 	.word	0x58020400
 8000f50:	24004a3c 	.word	0x24004a3c

08000f54 <initializeAD7177Board>:
        result = (result << 8) | rx[i + 1];
    }
    return result;
}

void initializeAD7177Board() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    // Reset
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	@ 0x40
 8000f5c:	4829      	ldr	r0, [pc, #164]	@ (8001004 <initializeAD7177Board+0xb0>)
 8000f5e:	f004 ff1d 	bl	8005d9c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)resetSequence, 8, HAL_MAX_DELAY);
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	2208      	movs	r2, #8
 8000f68:	4927      	ldr	r1, [pc, #156]	@ (8001008 <initializeAD7177Board+0xb4>)
 8000f6a:	4828      	ldr	r0, [pc, #160]	@ (800100c <initializeAD7177Board+0xb8>)
 8000f6c:	f007 fb3e 	bl	80085ec <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2140      	movs	r1, #64	@ 0x40
 8000f74:	4823      	ldr	r0, [pc, #140]	@ (8001004 <initializeAD7177Board+0xb0>)
 8000f76:	f004 ff11 	bl	8005d9c <HAL_GPIO_WritePin>

    HAL_Delay(5);
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	f000 ff38 	bl	8001df0 <HAL_Delay>


    // Check for functionality
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	@ 0x40
 8000f84:	481f      	ldr	r0, [pc, #124]	@ (8001004 <initializeAD7177Board+0xb0>)
 8000f86:	f004 ff09 	bl	8005d9c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)checkTransmit, 1, HAL_MAX_DELAY);
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2201      	movs	r2, #1
 8000f90:	491f      	ldr	r1, [pc, #124]	@ (8001010 <initializeAD7177Board+0xbc>)
 8000f92:	481e      	ldr	r0, [pc, #120]	@ (800100c <initializeAD7177Board+0xb8>)
 8000f94:	f007 fb2a 	bl	80085ec <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)checkReceive, 2, HAL_MAX_DELAY);
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	491d      	ldr	r1, [pc, #116]	@ (8001014 <initializeAD7177Board+0xc0>)
 8000fa0:	481a      	ldr	r0, [pc, #104]	@ (800100c <initializeAD7177Board+0xb8>)
 8000fa2:	f007 fd11 	bl	80089c8 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	@ 0x40
 8000faa:	4816      	ldr	r0, [pc, #88]	@ (8001004 <initializeAD7177Board+0xb0>)
 8000fac:	f004 fef6 	bl	8005d9c <HAL_GPIO_WritePin>
    } else {
        // Unexpected ID
    }

    // set up ADC Mode
    AD7177_WriteRegister(AD7177_REG_ADCMODE, AD7177_ADCMODE, 2);
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff ff7a 	bl	8000eb0 <AD7177_WriteRegister>

    // set up IF Mode, enable DATA_STAT byte, and continuous conversion mode
    AD7177_WriteRegister(AD7177_REG_IFMODE, AD7177_IFMODE, 2);
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	2140      	movs	r1, #64	@ 0x40
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff ff75 	bl	8000eb0 <AD7177_WriteRegister>

    // Configure filter mode 0
    AD7177_WriteRegister(AD7177_REG_FILTCON0, AD7177_FILTCON0, 2);
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	2109      	movs	r1, #9
 8000fca:	2028      	movs	r0, #40	@ 0x28
 8000fcc:	f7ff ff70 	bl	8000eb0 <AD7177_WriteRegister>

    // Configure setup mode 0
    AD7177_WriteRegister(AD7177_REG_SETUPCON0, AD7177_SETUPCON0, 2);
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8000fd6:	2020      	movs	r0, #32
 8000fd8:	f7ff ff6a 	bl	8000eb0 <AD7177_WriteRegister>

    // Setup channels 0 to 2
    AD7177_WriteRegister(AD7177_REG_CH0, AD7177_CH0_SETUP0, 2);
 8000fdc:	2202      	movs	r2, #2
 8000fde:	f248 0104 	movw	r1, #32772	@ 0x8004
 8000fe2:	2010      	movs	r0, #16
 8000fe4:	f7ff ff64 	bl	8000eb0 <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH1, AD7177_CH1_SETUP0, 2);
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f248 0124 	movw	r1, #32804	@ 0x8024
 8000fee:	2011      	movs	r0, #17
 8000ff0:	f7ff ff5e 	bl	8000eb0 <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH2, AD7177_CH2_SETUP0, 2);
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	f248 0144 	movw	r1, #32836	@ 0x8044
 8000ffa:	2012      	movs	r0, #18
 8000ffc:	f7ff ff58 	bl	8000eb0 <AD7177_WriteRegister>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58020400 	.word	0x58020400
 8001008:	24004984 	.word	0x24004984
 800100c:	24004a3c 	.word	0x24004a3c
 8001010:	2400498c 	.word	0x2400498c
 8001014:	24005868 	.word	0x24005868

08001018 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// MAKE SURE TO DELETE ANY "MX_LWIP_Init()" ABOVE
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelete(NULL); //deletes task
 8001020:	2000      	movs	r0, #0
 8001022:	f00c fe37 	bl	800dc94 <vTaskDelete>
 8001026:	e7fb      	b.n	8001020 <StartDefaultTask+0x8>

08001028 <startEthernetTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEthernetTask */
void startEthernetTask(void *argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEthernetTask */
	MX_LWIP_Init();
 8001030:	f009 ff94 	bl	800af5c <MX_LWIP_Init>
	osDelay(100); // let LWIP be initialized
 8001034:	2064      	movs	r0, #100	@ 0x64
 8001036:	f00a ff28 	bl	800be8a <osDelay>

	extern struct netif gnetif;
	netif_set_up(&gnetif);
 800103a:	4834      	ldr	r0, [pc, #208]	@ (800110c <startEthernetTask+0xe4>)
 800103c:	f00f ff5c 	bl	8010ef8 <netif_set_up>
	netif_set_link_up(&gnetif); // Forces link status if not auto-detected
 8001040:	4832      	ldr	r0, [pc, #200]	@ (800110c <startEthernetTask+0xe4>)
 8001042:	f00f fff7 	bl	8011034 <netif_set_link_up>

	// Own IP
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 10, 20, 3, 3);
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <startEthernetTask+0xe8>)
 8001048:	60fb      	str	r3, [r7, #12]
	// Computer IP
	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 10, 20, 1, 3);
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <startEthernetTask+0xec>)
 800104c:	60bb      	str	r3, [r7, #8]
	struct udp_pcb* my_udp = udp_new();
 800104e:	f016 ff17 	bl	8017e80 <udp_new>
 8001052:	6178      	str	r0, [r7, #20]

	udp_bind(my_udp, &myIPaddr, 8);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2208      	movs	r2, #8
 800105a:	4619      	mov	r1, r3
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f016 fe19 	bl	8017c94 <udp_bind>
	udp_connect(my_udp, &PC_IPADDR, 12345);
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	f243 0239 	movw	r2, #12345	@ 0x3039
 800106a:	4619      	mov	r1, r3
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f016 fe99 	bl	8017da4 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]

	// Start timer 23
	HAL_TIM_Base_Start(&htim23);
 8001076:	4828      	ldr	r0, [pc, #160]	@ (8001118 <startEthernetTask+0xf0>)
 8001078:	f008 fc8e 	bl	8009998 <HAL_TIM_Base_Start>
	// Start timer 1
	HAL_TIM_Base_Start(&htim1);
 800107c:	4827      	ldr	r0, [pc, #156]	@ (800111c <startEthernetTask+0xf4>)
 800107e:	f008 fc8b 	bl	8009998 <HAL_TIM_Base_Start>
	// Start timer 2 with 1ms interrupts
	HAL_TIM_Base_Start_IT(&htim2);
 8001082:	4827      	ldr	r0, [pc, #156]	@ (8001120 <startEthernetTask+0xf8>)
 8001084:	f008 fd06 	bl	8009a94 <HAL_TIM_Base_Start_IT>

	initializeAD7177Board();
 8001088:	f7ff ff64 	bl	8000f54 <initializeAD7177Board>

	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800108c:	2017      	movs	r0, #23
 800108e:	f000 ffdd 	bl	800204c <HAL_NVIC_EnableIRQ>
	for (;;)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001092:	f04f 31ff 	mov.w	r1, #4294967295
 8001096:	2001      	movs	r0, #1
 8001098:	f00d fcba 	bl	800ea10 <ulTaskNotifyTake>

		// Copy samples from spiData to tempBuffer
		memcpy(tempBuffer, spiData, sizeof(tempBuffer));
 800109c:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <startEthernetTask+0xfc>)
 800109e:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <startEthernetTask+0x100>)
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f240 43b2 	movw	r3, #1202	@ 0x4b2
 80010a8:	461a      	mov	r2, r3
 80010aa:	f019 fd54 	bl	801ab56 <memcpy>

		// Send the data over Ethernet
		udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof(tempBuffer), PBUF_RAM);
 80010ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80010b2:	f240 41b2 	movw	r1, #1202	@ 0x4b2
 80010b6:	2036      	movs	r0, #54	@ 0x36
 80010b8:	f010 f8ea 	bl	8011290 <pbuf_alloc>
 80010bc:	6138      	str	r0, [r7, #16]
		if (udp_buffer != NULL)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00e      	beq.n	80010e2 <startEthernetTask+0xba>
		{
			memcpy(udp_buffer->payload, tempBuffer, sizeof(tempBuffer));
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f240 42b2 	movw	r2, #1202	@ 0x4b2
 80010cc:	4915      	ldr	r1, [pc, #84]	@ (8001124 <startEthernetTask+0xfc>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f019 fd41 	bl	801ab56 <memcpy>
			udp_send(my_udp, udp_buffer);
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f016 fbf2 	bl	80178c0 <udp_send>
			pbuf_free(udp_buffer);
 80010dc:	6938      	ldr	r0, [r7, #16]
 80010de:	f010 fbbf 	bl	8011860 <pbuf_free>
		}

		// Shift the remaining samples up in the spiData buffer (pointer to dest, pointer to source, number of bytes)
		memmove(spiData, &spiData[601], sizeof(spiData) - sizeof(tempBuffer));
 80010e2:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <startEthernetTask+0x100>)
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <startEthernetTask+0x104>)
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	23c6      	movs	r3, #198	@ 0xc6
 80010ec:	461a      	mov	r2, r3
 80010ee:	f019 fd32 	bl	801ab56 <memcpy>

		// Update spiIndex to reflect the new starting position
		spiIndex -= 601;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <startEthernetTask+0x108>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <startEthernetTask+0x108>)
 8001100:	801a      	strh	r2, [r3, #0]

		osDelay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f00a fec1 	bl	800be8a <osDelay>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001108:	e7c3      	b.n	8001092 <startEthernetTask+0x6a>
 800110a:	bf00      	nop
 800110c:	240058c0 	.word	0x240058c0
 8001110:	0303140a 	.word	0x0303140a
 8001114:	0301140a 	.word	0x0301140a
 8001118:	24004dc4 	.word	0x24004dc4
 800111c:	24004d2c 	.word	0x24004d2c
 8001120:	24004d78 	.word	0x24004d78
 8001124:	24005390 	.word	0x24005390
 8001128:	24004e18 	.word	0x24004e18
 800112c:	240052ca 	.word	0x240052ca
 8001130:	2400584a 	.word	0x2400584a

08001134 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001146:	f000 ff9d 	bl	8002084 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800114a:	2301      	movs	r3, #1
 800114c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800114e:	2300      	movs	r3, #0
 8001150:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001156:	231f      	movs	r3, #31
 8001158:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800115a:	2387      	movs	r3, #135	@ 0x87
 800115c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800115e:	2300      	movs	r3, #0
 8001160:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001162:	2300      	movs	r3, #0
 8001164:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001166:	2301      	movs	r3, #1
 8001168:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800116a:	2301      	movs	r3, #1
 800116c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001176:	463b      	mov	r3, r7
 8001178:	4618      	mov	r0, r3
 800117a:	f000 ffbb 	bl	80020f4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800117e:	2301      	movs	r3, #1
 8001180:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001182:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001186:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001188:	2309      	movs	r3, #9
 800118a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800118c:	2300      	movs	r3, #0
 800118e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001190:	2303      	movs	r3, #3
 8001192:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001198:	463b      	mov	r3, r7
 800119a:	4618      	mov	r0, r3
 800119c:	f000 ffaa 	bl	80020f4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <MPU_Config+0x9c>)
 80011a6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80011a8:	230f      	movs	r3, #15
 80011aa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011b8:	463b      	mov	r3, r7
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 ff9a 	bl	80020f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011c0:	2004      	movs	r0, #4
 80011c2:	f000 ff77 	bl	80020b4 <HAL_MPU_Enable>

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	30000200 	.word	0x30000200

080011d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011e6:	f000 fde3 	bl	8001db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40001000 	.word	0x40001000

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <HAL_MspInit+0x38>)
 800120c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001210:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_MspInit+0x38>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_MspInit+0x38>)
 800121c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	210f      	movs	r1, #15
 800122c:	f06f 0001 	mvn.w	r0, #1
 8001230:	f000 fef2 	bl	8002018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	58024400 	.word	0x58024400

08001240 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0bc      	sub	sp, #240	@ 0xf0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	22b8      	movs	r2, #184	@ 0xb8
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f019 fba4 	bl	801a9ae <memset>
  if(hspi->Instance==SPI1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a69      	ldr	r2, [pc, #420]	@ (8001410 <HAL_SPI_MspInit+0x1d0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	f040 80df 	bne.w	8001430 <HAL_SPI_MspInit+0x1f0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001272:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800127e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001282:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fd87 	bl	8006d9c <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001294:	f7ff ffb0 	bl	80011f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001298:	4b5e      	ldr	r3, [pc, #376]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 800129a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800129e:	4a5d      	ldr	r2, [pc, #372]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b57      	ldr	r3, [pc, #348]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a55      	ldr	r2, [pc, #340]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a4e      	ldr	r2, [pc, #312]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001414 <HAL_SPI_MspInit+0x1d4>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800130a:	2305      	movs	r3, #5
 800130c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001314:	4619      	mov	r1, r3
 8001316:	4840      	ldr	r0, [pc, #256]	@ (8001418 <HAL_SPI_MspInit+0x1d8>)
 8001318:	f004 fb98 	bl	8005a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800131c:	2320      	movs	r3, #32
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001334:	2305      	movs	r3, #5
 8001336:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800133e:	4619      	mov	r1, r3
 8001340:	4836      	ldr	r0, [pc, #216]	@ (800141c <HAL_SPI_MspInit+0x1dc>)
 8001342:	f004 fb83 	bl	8005a4c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 8001346:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 8001348:	4a36      	ldr	r2, [pc, #216]	@ (8001424 <HAL_SPI_MspInit+0x1e4>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800134c:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 800134e:	2225      	movs	r2, #37	@ 0x25
 8001350:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001352:	4b33      	ldr	r3, [pc, #204]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b31      	ldr	r3, [pc, #196]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b30      	ldr	r3, [pc, #192]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 8001360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001364:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001366:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136c:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001372:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 800137a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800137e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001386:	4826      	ldr	r0, [pc, #152]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 8001388:	f000 fef4 	bl	8002174 <HAL_DMA_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 8001392:	f7ff ff31 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 800139a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800139c:	4a20      	ldr	r2, [pc, #128]	@ (8001420 <HAL_SPI_MspInit+0x1e0>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	@ (800142c <HAL_SPI_MspInit+0x1ec>)
 80013a6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013aa:	2226      	movs	r2, #38	@ 0x26
 80013ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013b0:	2240      	movs	r2, #64	@ 0x40
 80013b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013d6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013da:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013e2:	4811      	ldr	r0, [pc, #68]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013e4:	f000 fec6 	bl	8002174 <HAL_DMA_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_SPI_MspInit+0x1b2>
    {
      Error_Handler();
 80013ee:	f7ff ff03 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013f6:	679a      	str	r2, [r3, #120]	@ 0x78
 80013f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <HAL_SPI_MspInit+0x1e8>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	2023      	movs	r0, #35	@ 0x23
 8001404:	f000 fe08 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001408:	2023      	movs	r0, #35	@ 0x23
 800140a:	f000 fe1f 	bl	800204c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 800140e:	e0c0      	b.n	8001592 <HAL_SPI_MspInit+0x352>
 8001410:	40013000 	.word	0x40013000
 8001414:	58024400 	.word	0x58024400
 8001418:	58020000 	.word	0x58020000
 800141c:	58020400 	.word	0x58020400
 8001420:	24004b4c 	.word	0x24004b4c
 8001424:	40020040 	.word	0x40020040
 8001428:	24004bc4 	.word	0x24004bc4
 800142c:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI4)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a59      	ldr	r2, [pc, #356]	@ (800159c <HAL_SPI_MspInit+0x35c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	f040 80ab 	bne.w	8001592 <HAL_SPI_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4618      	mov	r0, r3
 8001454:	f005 fca2 	bl	8006d9c <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800145e:	f7ff fecb 	bl	80011f8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001462:	4b4f      	ldr	r3, [pc, #316]	@ (80015a0 <HAL_SPI_MspInit+0x360>)
 8001464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001468:	4a4d      	ldr	r2, [pc, #308]	@ (80015a0 <HAL_SPI_MspInit+0x360>)
 800146a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800146e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001472:	4b4b      	ldr	r3, [pc, #300]	@ (80015a0 <HAL_SPI_MspInit+0x360>)
 8001474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001480:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_SPI_MspInit+0x360>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001486:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <HAL_SPI_MspInit+0x360>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001490:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_SPI_MspInit+0x360>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800149e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014b8:	2305      	movs	r3, #5
 80014ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c2:	4619      	mov	r1, r3
 80014c4:	4837      	ldr	r0, [pc, #220]	@ (80015a4 <HAL_SPI_MspInit+0x364>)
 80014c6:	f004 fac1 	bl	8005a4c <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA1_Stream0;
 80014ca:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014cc:	4a37      	ldr	r2, [pc, #220]	@ (80015ac <HAL_SPI_MspInit+0x36c>)
 80014ce:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80014d0:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014d2:	2254      	movs	r2, #84	@ 0x54
 80014d4:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d6:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014d8:	2240      	movs	r2, #64	@ 0x40
 80014da:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b32      	ldr	r3, [pc, #200]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 80014fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001502:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800150a:	4827      	ldr	r0, [pc, #156]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 800150c:	f000 fe32 	bl	8002174 <HAL_DMA_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_SPI_MspInit+0x2da>
      Error_Handler();
 8001516:	f7ff fe6f 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a22      	ldr	r2, [pc, #136]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 800151e:	679a      	str	r2, [r3, #120]	@ 0x78
 8001520:	4a21      	ldr	r2, [pc, #132]	@ (80015a8 <HAL_SPI_MspInit+0x368>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA1_Stream1;
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 8001528:	4a22      	ldr	r2, [pc, #136]	@ (80015b4 <HAL_SPI_MspInit+0x374>)
 800152a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 800152e:	2253      	movs	r2, #83	@ 0x53
 8001530:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 8001540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001544:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 800155a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800155e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001566:	4812      	ldr	r0, [pc, #72]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 8001568:	f000 fe04 	bl	8002174 <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_SPI_MspInit+0x336>
      Error_Handler();
 8001572:	f7ff fe41 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 800157a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800157c:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <HAL_SPI_MspInit+0x370>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	2054      	movs	r0, #84	@ 0x54
 8001588:	f000 fd46 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800158c:	2054      	movs	r0, #84	@ 0x54
 800158e:	f000 fd5d 	bl	800204c <HAL_NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	37f0      	adds	r7, #240	@ 0xf0
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40013400 	.word	0x40013400
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58021000 	.word	0x58021000
 80015a8:	24004c3c 	.word	0x24004c3c
 80015ac:	40020010 	.word	0x40020010
 80015b0:	24004cb4 	.word	0x24004cb4
 80015b4:	40020028 	.word	0x40020028

080015b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a23      	ldr	r2, [pc, #140]	@ (8001654 <HAL_TIM_Base_MspInit+0x9c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10f      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 80015cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d0:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 80015dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM23_MspInit 1 */

    /* USER CODE END TIM23_MspInit 1 */
  }

}
 80015e8:	e030      	b.n	800164c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f2:	d117      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 80015f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 8001606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2105      	movs	r1, #5
 8001616:	201c      	movs	r0, #28
 8001618:	f000 fcfe 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800161c:	201c      	movs	r0, #28
 800161e:	f000 fd15 	bl	800204c <HAL_NVIC_EnableIRQ>
}
 8001622:	e013      	b.n	800164c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM23)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <HAL_TIM_Base_MspInit+0xa4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10e      	bne.n	800164c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 8001630:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001634:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 8001636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800163a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_TIM_Base_MspInit+0xa0>)
 8001640:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40010000 	.word	0x40010000
 8001658:	58024400 	.word	0x58024400
 800165c:	4000e000 	.word	0x4000e000

08001660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b090      	sub	sp, #64	@ 0x40
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	d827      	bhi.n	80016be <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800166e:	2200      	movs	r2, #0
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	2036      	movs	r0, #54	@ 0x36
 8001674:	f000 fcd0 	bl	8002018 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001678:	2036      	movs	r0, #54	@ 0x36
 800167a:	f000 fce7 	bl	800204c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800167e:	4a29      	ldr	r2, [pc, #164]	@ (8001724 <HAL_InitTick+0xc4>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_InitTick+0xc8>)
 8001686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800168a:	4a27      	ldr	r2, [pc, #156]	@ (8001728 <HAL_InitTick+0xc8>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <HAL_InitTick+0xc8>)
 8001696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a2:	f107 0210 	add.w	r2, r7, #16
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 fb33 	bl	8006d18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d106      	bne.n	80016ca <HAL_InitTick+0x6a>
 80016bc:	e001      	b.n	80016c2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e02b      	b.n	800171a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016c2:	f005 fb13 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 80016c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80016c8:	e004      	b.n	80016d4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ca:	f005 fb0f 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 80016ce:	4603      	mov	r3, r0
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d6:	4a15      	ldr	r2, [pc, #84]	@ (800172c <HAL_InitTick+0xcc>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	3b01      	subs	r3, #1
 80016e0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <HAL_InitTick+0xd0>)
 80016e4:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <HAL_InitTick+0xd4>)
 80016e6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_InitTick+0xd0>)
 80016ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <HAL_InitTick+0xd0>)
 80016f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_InitTick+0xd0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_InitTick+0xd0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001702:	480b      	ldr	r0, [pc, #44]	@ (8001730 <HAL_InitTick+0xd0>)
 8001704:	f008 f8f1 	bl	80098ea <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d104      	bne.n	8001718 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800170e:	4808      	ldr	r0, [pc, #32]	@ (8001730 <HAL_InitTick+0xd0>)
 8001710:	f008 f9c0 	bl	8009a94 <HAL_TIM_Base_Start_IT>
 8001714:	4603      	mov	r3, r0
 8001716:	e000      	b.n	800171a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	3740      	adds	r7, #64	@ 0x40
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	24004998 	.word	0x24004998
 8001728:	58024400 	.word	0x58024400
 800172c:	431bde83 	.word	0x431bde83
 8001730:	2400586c 	.word	0x2400586c
 8001734:	40001000 	.word	0x40001000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Stream0_IRQHandler+0x10>)
 8001776:	f001 fa9b 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	24004c3c 	.word	0x24004c3c

08001784 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA1_Stream1_IRQHandler+0x10>)
 800178a:	f001 fa91 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	24004cb4 	.word	0x24004cb4

08001798 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <DMA1_Stream2_IRQHandler+0x10>)
 800179e:	f001 fa87 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24004b4c 	.word	0x24004b4c

080017ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA1_Stream3_IRQHandler+0x10>)
 80017b2:	f001 fa7d 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	24004bc4 	.word	0x24004bc4

080017c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80017c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017c8:	f004 fb01 	bl	8005dce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <TIM2_IRQHandler+0x10>)
 80017d6:	f008 faa5 	bl	8009d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24004d78 	.word	0x24004d78

080017e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <SPI1_IRQHandler+0x10>)
 80017ea:	f007 fc71 	bl	80090d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	24004a3c 	.word	0x24004a3c

080017f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <TIM6_DAC_IRQHandler+0x10>)
 80017fe:	f008 fa91 	bl	8009d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2400586c 	.word	0x2400586c

0800180c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <ETH_IRQHandler+0x10>)
 8001812:	f002 ff87 	bl	8004724 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	24005940 	.word	0x24005940

08001820 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <SPI4_IRQHandler+0x10>)
 8001826:	f007 fc53 	bl	80090d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	24004ac4 	.word	0x24004ac4

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_kill>:

int _kill(int pid, int sig)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <_kill+0x20>)
 8001850:	2216      	movs	r2, #22
 8001852:	601a      	str	r2, [r3, #0]
  return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	24014e18 	.word	0x24014e18

08001868 <_exit>:

void _exit (int status)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffe5 	bl	8001844 <_kill>
  while (1) {}    /* Make sure we hang here */
 800187a:	bf00      	nop
 800187c:	e7fd      	b.n	800187a <_exit+0x12>

0800187e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e00a      	b.n	80018a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001890:	f3af 8000 	nop.w
 8001894:	4601      	mov	r1, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	60ba      	str	r2, [r7, #8]
 800189c:	b2ca      	uxtb	r2, r1
 800189e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf0      	blt.n	8001890 <_read+0x12>
  }

  return len;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e009      	b.n	80018de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	60ba      	str	r2, [r7, #8]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbf1      	blt.n	80018ca <_write+0x12>
  }
  return len;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_close>:

int _close(int file)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001918:	605a      	str	r2, [r3, #4]
  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_isatty>:

int _isatty(int file)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d205      	bcs.n	8001994 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <_sbrk+0x6c>)
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a06      	ldr	r2, [pc, #24]	@ (80019bc <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	24050000 	.word	0x24050000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	240058b8 	.word	0x240058b8
 80019c0:	24014e28 	.word	0x24014e28
 80019c4:	24014e18 	.word	0x24014e18

080019c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <SystemInit+0xf0>)
 80019d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d4:	4a38      	ldr	r2, [pc, #224]	@ (8001ab8 <SystemInit+0xf0>)
 80019d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019de:	4b37      	ldr	r3, [pc, #220]	@ (8001abc <SystemInit+0xf4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d807      	bhi.n	80019fa <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ea:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <SystemInit+0xf4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 030f 	bic.w	r3, r3, #15
 80019f2:	4a32      	ldr	r2, [pc, #200]	@ (8001abc <SystemInit+0xf4>)
 80019f4:	f043 0307 	orr.w	r3, r3, #7
 80019f8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019fa:	4b31      	ldr	r3, [pc, #196]	@ (8001ac0 <SystemInit+0xf8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a30      	ldr	r2, [pc, #192]	@ (8001ac0 <SystemInit+0xf8>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac0 <SystemInit+0xf8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <SystemInit+0xf8>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	492b      	ldr	r1, [pc, #172]	@ (8001ac0 <SystemInit+0xf8>)
 8001a12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <SystemInit+0xfc>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <SystemInit+0xf4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <SystemInit+0xf4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 030f 	bic.w	r3, r3, #15
 8001a2c:	4a23      	ldr	r2, [pc, #140]	@ (8001abc <SystemInit+0xf4>)
 8001a2e:	f043 0307 	orr.w	r3, r3, #7
 8001a32:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a34:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <SystemInit+0xf8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <SystemInit+0xf8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <SystemInit+0xf8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <SystemInit+0xf8>)
 8001a48:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac8 <SystemInit+0x100>)
 8001a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <SystemInit+0xf8>)
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001acc <SystemInit+0x104>)
 8001a50:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <SystemInit+0xf8>)
 8001a54:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad0 <SystemInit+0x108>)
 8001a56:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <SystemInit+0xf8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <SystemInit+0xf8>)
 8001a60:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <SystemInit+0x108>)
 8001a62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <SystemInit+0xf8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <SystemInit+0xf8>)
 8001a6c:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <SystemInit+0x108>)
 8001a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <SystemInit+0xf8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <SystemInit+0xf8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ac0 <SystemInit+0xf8>)
 8001a7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <SystemInit+0xf8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <SystemInit+0xf8>)
 8001a8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <SystemInit+0xf8>)
 8001a90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001a94:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <SystemInit+0xf8>)
 8001a9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a9e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001aa0:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <SystemInit+0x10c>)
 8001aa4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001aa8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00
 8001abc:	52002000 	.word	0x52002000
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ac8:	02020200 	.word	0x02020200
 8001acc:	01ff0000 	.word	0x01ff0000
 8001ad0:	01010280 	.word	0x01010280
 8001ad4:	52004000 	.word	0x52004000

08001ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001adc:	f7ff ff74 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	@ (8001b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b06:	f018 ffff 	bl	801ab08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0a:	f7fe fc51 	bl	80003b0 <main>
  bx  lr
 8001b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b10:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b14:	24004984 	.word	0x24004984
  ldr r1, =_edata
 8001b18:	24004a20 	.word	0x24004a20
  ldr r2, =_sidata
 8001b1c:	0801e640 	.word	0x0801e640
  ldr r2, =_sbss
 8001b20:	24004a20 	.word	0x24004a20
  ldr r4, =_ebss
 8001b24:	24014e28 	.word	0x24014e28

08001b28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC3_IRQHandler>

08001b2a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <LAN8742_RegisterBusIO+0x28>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <LAN8742_RegisterBusIO+0x28>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <LAN8742_RegisterBusIO+0x28>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e014      	b.n	8001b82 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d139      	bne.n	8001c1e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e01c      	b.n	8001bfe <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f107 020c 	add.w	r2, r7, #12
 8001bcc:	2112      	movs	r1, #18
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	4798      	blx	r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da03      	bge.n	8001be0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001bd8:	f06f 0304 	mvn.w	r3, #4
 8001bdc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001bde:	e00b      	b.n	8001bf8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d105      	bne.n	8001bf8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
         break;
 8001bf6:	e005      	b.n	8001c04 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b1f      	cmp	r3, #31
 8001c02:	d9df      	bls.n	8001bc4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b1f      	cmp	r3, #31
 8001c0a:	d902      	bls.n	8001c12 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001c0c:	f06f 0302 	mvn.w	r3, #2
 8001c10:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 }
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6810      	ldr	r0, [r2, #0]
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	2101      	movs	r1, #1
 8001c42:	4798      	blx	r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da02      	bge.n	8001c50 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c4a:	f06f 0304 	mvn.w	r3, #4
 8001c4e:	e06e      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6810      	ldr	r0, [r2, #0]
 8001c58:	f107 020c 	add.w	r2, r7, #12
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4798      	blx	r3
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da02      	bge.n	8001c6c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c66:	f06f 0304 	mvn.w	r3, #4
 8001c6a:	e060      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e059      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6810      	ldr	r0, [r2, #0]
 8001c82:	f107 020c 	add.w	r2, r7, #12
 8001c86:	2100      	movs	r1, #0
 8001c88:	4798      	blx	r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da02      	bge.n	8001c96 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c90:	f06f 0304 	mvn.w	r3, #4
 8001c94:	e04b      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11b      	bne.n	8001cd8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <LAN8742_GetLinkState+0x90>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e03a      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e033      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e02c      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	e02a      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6810      	ldr	r0, [r2, #0]
 8001ce0:	f107 020c 	add.w	r2, r7, #12
 8001ce4:	211f      	movs	r1, #31
 8001ce6:	4798      	blx	r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da02      	bge.n	8001cf4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001cee:	f06f 0304 	mvn.w	r3, #4
 8001cf2:	e01c      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e015      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 031c 	and.w	r3, r3, #28
 8001d08:	2b18      	cmp	r3, #24
 8001d0a:	d101      	bne.n	8001d10 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e00e      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 031c 	and.w	r3, r3, #28
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d101      	bne.n	8001d1e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e007      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 031c 	and.w	r3, r3, #28
 8001d24:	2b14      	cmp	r3, #20
 8001d26:	d101      	bne.n	8001d2c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e000      	b.n	8001d2e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d2c:	2305      	movs	r3, #5
    }
  }
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f000 f95f 	bl	8002002 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d44:	f004 fe28 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_Init+0x68>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	4913      	ldr	r1, [pc, #76]	@ (8001da4 <HAL_Init+0x6c>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d62:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <HAL_Init+0x68>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001da4 <HAL_Init+0x6c>)
 8001d6c:	5cd3      	ldrb	r3, [r2, r3]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
 8001d78:	4a0b      	ldr	r2, [pc, #44]	@ (8001da8 <HAL_Init+0x70>)
 8001d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <HAL_Init+0x74>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d82:	200f      	movs	r0, #15
 8001d84:	f7ff fc6c 	bl	8001660 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e002      	b.n	8001d98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d92:	f7ff fa37 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58024400 	.word	0x58024400
 8001da4:	0801e3fc 	.word	0x0801e3fc
 8001da8:	24004994 	.word	0x24004994
 8001dac:	24004990 	.word	0x24004990

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2400499c 	.word	0x2400499c
 8001dd4:	240058bc 	.word	0x240058bc

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	240058bc 	.word	0x240058bc

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2400499c 	.word	0x2400499c

08001e38 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001e48:	4904      	ldr	r1, [pc, #16]	@ (8001e5c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	58000400 	.word	0x58000400

08001e60 <__NVIC_SetPriorityGrouping>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60d3      	str	r3, [r2, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	05fa0000 	.word	0x05fa0000

08001ea8 <__NVIC_GetPriorityGrouping>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	@ (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_DisableIRQ>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db12      	blt.n	8001f38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	490a      	ldr	r1, [pc, #40]	@ (8001f44 <__NVIC_DisableIRQ+0x44>)
 8001f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	3320      	adds	r3, #32
 8001f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f2c:	f3bf 8f4f 	dsb	sy
}
 8001f30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f32:	f3bf 8f6f 	isb	sy
}
 8001f36:	bf00      	nop
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff28 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002026:	f7ff ff3f 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 800202a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	6978      	ldr	r0, [r7, #20]
 8002032:	f7ff ffb3 	bl	8001f9c <NVIC_EncodePriority>
 8002036:	4602      	mov	r2, r0
 8002038:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff82 	bl	8001f48 <__NVIC_SetPriority>
}
 8002044:	bf00      	nop
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff32 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff42 	bl	8001f00 <__NVIC_DisableIRQ>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002088:	f3bf 8f5f 	dmb	sy
}
 800208c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <HAL_MPU_Disable+0x28>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <HAL_MPU_Disable+0x28>)
 8002094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002098:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_MPU_Disable+0x2c>)
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00
 80020b0:	e000ed90 	.word	0xe000ed90

080020b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020bc:	4a0b      	ldr	r2, [pc, #44]	@ (80020ec <HAL_MPU_Enable+0x38>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_MPU_Enable+0x3c>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <HAL_MPU_Enable+0x3c>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020d2:	f3bf 8f4f 	dsb	sy
}
 80020d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020d8:	f3bf 8f6f 	isb	sy
}
 80020dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed90 	.word	0xe000ed90
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	785a      	ldrb	r2, [r3, #1]
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_MPU_ConfigRegion+0x7c>)
 8002102:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002104:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_MPU_ConfigRegion+0x7c>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	4a19      	ldr	r2, [pc, #100]	@ (8002170 <HAL_MPU_ConfigRegion+0x7c>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002110:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <HAL_MPU_ConfigRegion+0x7c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7b1b      	ldrb	r3, [r3, #12]
 800211c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7adb      	ldrb	r3, [r3, #11]
 8002122:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002124:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7a9b      	ldrb	r3, [r3, #10]
 800212a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800212c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7b5b      	ldrb	r3, [r3, #13]
 8002132:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002134:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b9b      	ldrb	r3, [r3, #14]
 800213a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800213c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7bdb      	ldrb	r3, [r3, #15]
 8002142:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7a5b      	ldrb	r3, [r3, #9]
 800214a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800214c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7a1b      	ldrb	r3, [r3, #8]
 8002152:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002154:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800215e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002160:	6113      	str	r3, [r2, #16]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed90 	.word	0xe000ed90

08002174 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff fe2c 	bl	8001dd8 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e312      	b.n	80027b2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a66      	ldr	r2, [pc, #408]	@ (800232c <HAL_DMA_Init+0x1b8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d04a      	beq.n	800222c <HAL_DMA_Init+0xb8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	@ (8002330 <HAL_DMA_Init+0x1bc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d045      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a63      	ldr	r2, [pc, #396]	@ (8002334 <HAL_DMA_Init+0x1c0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d040      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a62      	ldr	r2, [pc, #392]	@ (8002338 <HAL_DMA_Init+0x1c4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d03b      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a60      	ldr	r2, [pc, #384]	@ (800233c <HAL_DMA_Init+0x1c8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d036      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002340 <HAL_DMA_Init+0x1cc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d031      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002344 <HAL_DMA_Init+0x1d0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02c      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002348 <HAL_DMA_Init+0x1d4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d027      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5a      	ldr	r2, [pc, #360]	@ (800234c <HAL_DMA_Init+0x1d8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d022      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a59      	ldr	r2, [pc, #356]	@ (8002350 <HAL_DMA_Init+0x1dc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01d      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a57      	ldr	r2, [pc, #348]	@ (8002354 <HAL_DMA_Init+0x1e0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d018      	beq.n	800222c <HAL_DMA_Init+0xb8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_DMA_Init+0x1e4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d013      	beq.n	800222c <HAL_DMA_Init+0xb8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a54      	ldr	r2, [pc, #336]	@ (800235c <HAL_DMA_Init+0x1e8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00e      	beq.n	800222c <HAL_DMA_Init+0xb8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a53      	ldr	r2, [pc, #332]	@ (8002360 <HAL_DMA_Init+0x1ec>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_DMA_Init+0xb8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a51      	ldr	r2, [pc, #324]	@ (8002364 <HAL_DMA_Init+0x1f0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_DMA_Init+0xb8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a50      	ldr	r2, [pc, #320]	@ (8002368 <HAL_DMA_Init+0x1f4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_DMA_Init+0xbc>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_DMA_Init+0xbe>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 813c 	beq.w	80024b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a37      	ldr	r2, [pc, #220]	@ (800232c <HAL_DMA_Init+0x1b8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d04a      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a36      	ldr	r2, [pc, #216]	@ (8002330 <HAL_DMA_Init+0x1bc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d045      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a34      	ldr	r2, [pc, #208]	@ (8002334 <HAL_DMA_Init+0x1c0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d040      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a33      	ldr	r2, [pc, #204]	@ (8002338 <HAL_DMA_Init+0x1c4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d03b      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a31      	ldr	r2, [pc, #196]	@ (800233c <HAL_DMA_Init+0x1c8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d036      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a30      	ldr	r2, [pc, #192]	@ (8002340 <HAL_DMA_Init+0x1cc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d031      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2e      	ldr	r2, [pc, #184]	@ (8002344 <HAL_DMA_Init+0x1d0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02c      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2d      	ldr	r2, [pc, #180]	@ (8002348 <HAL_DMA_Init+0x1d4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d027      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2b      	ldr	r2, [pc, #172]	@ (800234c <HAL_DMA_Init+0x1d8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d022      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002350 <HAL_DMA_Init+0x1dc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d01d      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a28      	ldr	r2, [pc, #160]	@ (8002354 <HAL_DMA_Init+0x1e0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d018      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a27      	ldr	r2, [pc, #156]	@ (8002358 <HAL_DMA_Init+0x1e4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a25      	ldr	r2, [pc, #148]	@ (800235c <HAL_DMA_Init+0x1e8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00e      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a24      	ldr	r2, [pc, #144]	@ (8002360 <HAL_DMA_Init+0x1ec>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a22      	ldr	r2, [pc, #136]	@ (8002364 <HAL_DMA_Init+0x1f0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_DMA_Init+0x174>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a21      	ldr	r2, [pc, #132]	@ (8002368 <HAL_DMA_Init+0x1f4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <HAL_DMA_Init+0x186>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <HAL_DMA_Init+0x196>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800230a:	e02f      	b.n	800236c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230c:	f7ff fd64 	bl	8001dd8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b05      	cmp	r3, #5
 8002318:	d928      	bls.n	800236c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2203      	movs	r2, #3
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e242      	b.n	80027b2 <HAL_DMA_Init+0x63e>
 800232c:	40020010 	.word	0x40020010
 8002330:	40020028 	.word	0x40020028
 8002334:	40020040 	.word	0x40020040
 8002338:	40020058 	.word	0x40020058
 800233c:	40020070 	.word	0x40020070
 8002340:	40020088 	.word	0x40020088
 8002344:	400200a0 	.word	0x400200a0
 8002348:	400200b8 	.word	0x400200b8
 800234c:	40020410 	.word	0x40020410
 8002350:	40020428 	.word	0x40020428
 8002354:	40020440 	.word	0x40020440
 8002358:	40020458 	.word	0x40020458
 800235c:	40020470 	.word	0x40020470
 8002360:	40020488 	.word	0x40020488
 8002364:	400204a0 	.word	0x400204a0
 8002368:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1c8      	bne.n	800230c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4b83      	ldr	r3, [pc, #524]	@ (8002594 <HAL_DMA_Init+0x420>)
 8002386:	4013      	ands	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002392:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d107      	bne.n	80023d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	4313      	orrs	r3, r2
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b28      	cmp	r3, #40	@ 0x28
 80023d6:	d903      	bls.n	80023e0 <HAL_DMA_Init+0x26c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80023de:	d91f      	bls.n	8002420 <HAL_DMA_Init+0x2ac>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80023e6:	d903      	bls.n	80023f0 <HAL_DMA_Init+0x27c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b42      	cmp	r3, #66	@ 0x42
 80023ee:	d917      	bls.n	8002420 <HAL_DMA_Init+0x2ac>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b46      	cmp	r3, #70	@ 0x46
 80023f6:	d903      	bls.n	8002400 <HAL_DMA_Init+0x28c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b48      	cmp	r3, #72	@ 0x48
 80023fe:	d90f      	bls.n	8002420 <HAL_DMA_Init+0x2ac>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b4e      	cmp	r3, #78	@ 0x4e
 8002406:	d903      	bls.n	8002410 <HAL_DMA_Init+0x29c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b52      	cmp	r3, #82	@ 0x52
 800240e:	d907      	bls.n	8002420 <HAL_DMA_Init+0x2ac>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b73      	cmp	r3, #115	@ 0x73
 8002416:	d905      	bls.n	8002424 <HAL_DMA_Init+0x2b0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b77      	cmp	r3, #119	@ 0x77
 800241e:	d801      	bhi.n	8002424 <HAL_DMA_Init+0x2b0>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_DMA_Init+0x2b2>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002430:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f023 0307 	bic.w	r3, r3, #7
 8002448:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	2b04      	cmp	r3, #4
 800245a:	d117      	bne.n	800248c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00e      	beq.n	800248c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f001 fbfa 	bl	8003c68 <DMA_CheckFifoParam>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2240      	movs	r2, #64	@ 0x40
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e192      	b.n	80027b2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f001 fb35 	bl	8003b04 <DMA_CalcBaseAndBitshift>
 800249a:	4603      	mov	r3, r0
 800249c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	223f      	movs	r2, #63	@ 0x3f
 80024a8:	409a      	lsls	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	e0c8      	b.n	8002642 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a38      	ldr	r2, [pc, #224]	@ (8002598 <HAL_DMA_Init+0x424>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d022      	beq.n	8002500 <HAL_DMA_Init+0x38c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a37      	ldr	r2, [pc, #220]	@ (800259c <HAL_DMA_Init+0x428>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d01d      	beq.n	8002500 <HAL_DMA_Init+0x38c>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a35      	ldr	r2, [pc, #212]	@ (80025a0 <HAL_DMA_Init+0x42c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d018      	beq.n	8002500 <HAL_DMA_Init+0x38c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a34      	ldr	r2, [pc, #208]	@ (80025a4 <HAL_DMA_Init+0x430>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <HAL_DMA_Init+0x38c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a32      	ldr	r2, [pc, #200]	@ (80025a8 <HAL_DMA_Init+0x434>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00e      	beq.n	8002500 <HAL_DMA_Init+0x38c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <HAL_DMA_Init+0x438>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_DMA_Init+0x38c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a2f      	ldr	r2, [pc, #188]	@ (80025b0 <HAL_DMA_Init+0x43c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_DMA_Init+0x38c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2e      	ldr	r2, [pc, #184]	@ (80025b4 <HAL_DMA_Init+0x440>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d101      	bne.n	8002504 <HAL_DMA_Init+0x390>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_DMA_Init+0x392>
 8002504:	2300      	movs	r3, #0
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8092 	beq.w	8002630 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_DMA_Init+0x424>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d021      	beq.n	800255a <HAL_DMA_Init+0x3e6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a20      	ldr	r2, [pc, #128]	@ (800259c <HAL_DMA_Init+0x428>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01c      	beq.n	800255a <HAL_DMA_Init+0x3e6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1e      	ldr	r2, [pc, #120]	@ (80025a0 <HAL_DMA_Init+0x42c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d017      	beq.n	800255a <HAL_DMA_Init+0x3e6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <HAL_DMA_Init+0x430>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d012      	beq.n	800255a <HAL_DMA_Init+0x3e6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1b      	ldr	r2, [pc, #108]	@ (80025a8 <HAL_DMA_Init+0x434>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_DMA_Init+0x3e6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1a      	ldr	r2, [pc, #104]	@ (80025ac <HAL_DMA_Init+0x438>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d008      	beq.n	800255a <HAL_DMA_Init+0x3e6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <HAL_DMA_Init+0x43c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <HAL_DMA_Init+0x3e6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <HAL_DMA_Init+0x440>)
 8002558:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <HAL_DMA_Init+0x444>)
 8002576:	4013      	ands	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b40      	cmp	r3, #64	@ 0x40
 8002580:	d01c      	beq.n	80025bc <HAL_DMA_Init+0x448>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b80      	cmp	r3, #128	@ 0x80
 8002588:	d102      	bne.n	8002590 <HAL_DMA_Init+0x41c>
 800258a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800258e:	e016      	b.n	80025be <HAL_DMA_Init+0x44a>
 8002590:	2300      	movs	r3, #0
 8002592:	e014      	b.n	80025be <HAL_DMA_Init+0x44a>
 8002594:	fe10803f 	.word	0xfe10803f
 8002598:	58025408 	.word	0x58025408
 800259c:	5802541c 	.word	0x5802541c
 80025a0:	58025430 	.word	0x58025430
 80025a4:	58025444 	.word	0x58025444
 80025a8:	58025458 	.word	0x58025458
 80025ac:	5802546c 	.word	0x5802546c
 80025b0:	58025480 	.word	0x58025480
 80025b4:	58025494 	.word	0x58025494
 80025b8:	fffe000f 	.word	0xfffe000f
 80025bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b6e      	ldr	r3, [pc, #440]	@ (80027bc <HAL_DMA_Init+0x648>)
 8002604:	4413      	add	r3, r2
 8002606:	4a6e      	ldr	r2, [pc, #440]	@ (80027c0 <HAL_DMA_Init+0x64c>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f001 fa75 	bl	8003b04 <DMA_CalcBaseAndBitshift>
 800261a:	4603      	mov	r3, r0
 800261c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2201      	movs	r2, #1
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	e008      	b.n	8002642 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2240      	movs	r2, #64	@ 0x40
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0b7      	b.n	80027b2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5f      	ldr	r2, [pc, #380]	@ (80027c4 <HAL_DMA_Init+0x650>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d072      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5d      	ldr	r2, [pc, #372]	@ (80027c8 <HAL_DMA_Init+0x654>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d06d      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5c      	ldr	r2, [pc, #368]	@ (80027cc <HAL_DMA_Init+0x658>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d068      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5a      	ldr	r2, [pc, #360]	@ (80027d0 <HAL_DMA_Init+0x65c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d063      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a59      	ldr	r2, [pc, #356]	@ (80027d4 <HAL_DMA_Init+0x660>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d05e      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a57      	ldr	r2, [pc, #348]	@ (80027d8 <HAL_DMA_Init+0x664>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d059      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a56      	ldr	r2, [pc, #344]	@ (80027dc <HAL_DMA_Init+0x668>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d054      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a54      	ldr	r2, [pc, #336]	@ (80027e0 <HAL_DMA_Init+0x66c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d04f      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a53      	ldr	r2, [pc, #332]	@ (80027e4 <HAL_DMA_Init+0x670>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d04a      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a51      	ldr	r2, [pc, #324]	@ (80027e8 <HAL_DMA_Init+0x674>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d045      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a50      	ldr	r2, [pc, #320]	@ (80027ec <HAL_DMA_Init+0x678>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d040      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a4e      	ldr	r2, [pc, #312]	@ (80027f0 <HAL_DMA_Init+0x67c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d03b      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a4d      	ldr	r2, [pc, #308]	@ (80027f4 <HAL_DMA_Init+0x680>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d036      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a4b      	ldr	r2, [pc, #300]	@ (80027f8 <HAL_DMA_Init+0x684>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a4a      	ldr	r2, [pc, #296]	@ (80027fc <HAL_DMA_Init+0x688>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d02c      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a48      	ldr	r2, [pc, #288]	@ (8002800 <HAL_DMA_Init+0x68c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d027      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a47      	ldr	r2, [pc, #284]	@ (8002804 <HAL_DMA_Init+0x690>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a45      	ldr	r2, [pc, #276]	@ (8002808 <HAL_DMA_Init+0x694>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a44      	ldr	r2, [pc, #272]	@ (800280c <HAL_DMA_Init+0x698>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a42      	ldr	r2, [pc, #264]	@ (8002810 <HAL_DMA_Init+0x69c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a41      	ldr	r2, [pc, #260]	@ (8002814 <HAL_DMA_Init+0x6a0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3f      	ldr	r2, [pc, #252]	@ (8002818 <HAL_DMA_Init+0x6a4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3e      	ldr	r2, [pc, #248]	@ (800281c <HAL_DMA_Init+0x6a8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_DMA_Init+0x5be>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a3c      	ldr	r2, [pc, #240]	@ (8002820 <HAL_DMA_Init+0x6ac>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_DMA_Init+0x5c2>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_DMA_Init+0x5c4>
 8002736:	2300      	movs	r3, #0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f001 fb0f 	bl	8003d60 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b80      	cmp	r3, #128	@ 0x80
 8002748:	d102      	bne.n	8002750 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002764:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_DMA_Init+0x61c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b08      	cmp	r3, #8
 8002774:	d80c      	bhi.n	8002790 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 fb8c 	bl	8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	e008      	b.n	80027a2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	a7fdabf8 	.word	0xa7fdabf8
 80027c0:	cccccccd 	.word	0xcccccccd
 80027c4:	40020010 	.word	0x40020010
 80027c8:	40020028 	.word	0x40020028
 80027cc:	40020040 	.word	0x40020040
 80027d0:	40020058 	.word	0x40020058
 80027d4:	40020070 	.word	0x40020070
 80027d8:	40020088 	.word	0x40020088
 80027dc:	400200a0 	.word	0x400200a0
 80027e0:	400200b8 	.word	0x400200b8
 80027e4:	40020410 	.word	0x40020410
 80027e8:	40020428 	.word	0x40020428
 80027ec:	40020440 	.word	0x40020440
 80027f0:	40020458 	.word	0x40020458
 80027f4:	40020470 	.word	0x40020470
 80027f8:	40020488 	.word	0x40020488
 80027fc:	400204a0 	.word	0x400204a0
 8002800:	400204b8 	.word	0x400204b8
 8002804:	58025408 	.word	0x58025408
 8002808:	5802541c 	.word	0x5802541c
 800280c:	58025430 	.word	0x58025430
 8002810:	58025444 	.word	0x58025444
 8002814:	58025458 	.word	0x58025458
 8002818:	5802546c 	.word	0x5802546c
 800281c:	58025480 	.word	0x58025480
 8002820:	58025494 	.word	0x58025494

08002824 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e237      	b.n	8002ca6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d004      	beq.n	800284c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e22c      	b.n	8002ca6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5c      	ldr	r2, [pc, #368]	@ (80029c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d04a      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5b      	ldr	r2, [pc, #364]	@ (80029c8 <HAL_DMA_Abort_IT+0x1a4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d045      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a59      	ldr	r2, [pc, #356]	@ (80029cc <HAL_DMA_Abort_IT+0x1a8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d040      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d03b      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a56      	ldr	r2, [pc, #344]	@ (80029d4 <HAL_DMA_Abort_IT+0x1b0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d036      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a55      	ldr	r2, [pc, #340]	@ (80029d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d031      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a53      	ldr	r2, [pc, #332]	@ (80029dc <HAL_DMA_Abort_IT+0x1b8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02c      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a52      	ldr	r2, [pc, #328]	@ (80029e0 <HAL_DMA_Abort_IT+0x1bc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d027      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a50      	ldr	r2, [pc, #320]	@ (80029e4 <HAL_DMA_Abort_IT+0x1c0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d022      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a4f      	ldr	r2, [pc, #316]	@ (80029e8 <HAL_DMA_Abort_IT+0x1c4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d01d      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4d      	ldr	r2, [pc, #308]	@ (80029ec <HAL_DMA_Abort_IT+0x1c8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d018      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4c      	ldr	r2, [pc, #304]	@ (80029f0 <HAL_DMA_Abort_IT+0x1cc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4a      	ldr	r2, [pc, #296]	@ (80029f4 <HAL_DMA_Abort_IT+0x1d0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00e      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a49      	ldr	r2, [pc, #292]	@ (80029f8 <HAL_DMA_Abort_IT+0x1d4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a47      	ldr	r2, [pc, #284]	@ (80029fc <HAL_DMA_Abort_IT+0x1d8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_DMA_Abort_IT+0xc8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a46      	ldr	r2, [pc, #280]	@ (8002a00 <HAL_DMA_Abort_IT+0x1dc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_DMA_Abort_IT+0xcc>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_DMA_Abort_IT+0xce>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8086 	beq.w	8002a04 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2204      	movs	r2, #4
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2f      	ldr	r2, [pc, #188]	@ (80029c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04a      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2e      	ldr	r2, [pc, #184]	@ (80029c8 <HAL_DMA_Abort_IT+0x1a4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d045      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <HAL_DMA_Abort_IT+0x1a8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d040      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2b      	ldr	r2, [pc, #172]	@ (80029d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d03b      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a29      	ldr	r2, [pc, #164]	@ (80029d4 <HAL_DMA_Abort_IT+0x1b0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d036      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a28      	ldr	r2, [pc, #160]	@ (80029d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d031      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a26      	ldr	r2, [pc, #152]	@ (80029dc <HAL_DMA_Abort_IT+0x1b8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d02c      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a25      	ldr	r2, [pc, #148]	@ (80029e0 <HAL_DMA_Abort_IT+0x1bc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d027      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a23      	ldr	r2, [pc, #140]	@ (80029e4 <HAL_DMA_Abort_IT+0x1c0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d022      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a22      	ldr	r2, [pc, #136]	@ (80029e8 <HAL_DMA_Abort_IT+0x1c4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d01d      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a20      	ldr	r2, [pc, #128]	@ (80029ec <HAL_DMA_Abort_IT+0x1c8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1f      	ldr	r2, [pc, #124]	@ (80029f0 <HAL_DMA_Abort_IT+0x1cc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1d      	ldr	r2, [pc, #116]	@ (80029f4 <HAL_DMA_Abort_IT+0x1d0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1c      	ldr	r2, [pc, #112]	@ (80029f8 <HAL_DMA_Abort_IT+0x1d4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1a      	ldr	r2, [pc, #104]	@ (80029fc <HAL_DMA_Abort_IT+0x1d8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x17c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a19      	ldr	r2, [pc, #100]	@ (8002a00 <HAL_DMA_Abort_IT+0x1dc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d108      	bne.n	80029b2 <HAL_DMA_Abort_IT+0x18e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e178      	b.n	8002ca4 <HAL_DMA_Abort_IT+0x480>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e16f      	b.n	8002ca4 <HAL_DMA_Abort_IT+0x480>
 80029c4:	40020010 	.word	0x40020010
 80029c8:	40020028 	.word	0x40020028
 80029cc:	40020040 	.word	0x40020040
 80029d0:	40020058 	.word	0x40020058
 80029d4:	40020070 	.word	0x40020070
 80029d8:	40020088 	.word	0x40020088
 80029dc:	400200a0 	.word	0x400200a0
 80029e0:	400200b8 	.word	0x400200b8
 80029e4:	40020410 	.word	0x40020410
 80029e8:	40020428 	.word	0x40020428
 80029ec:	40020440 	.word	0x40020440
 80029f0:	40020458 	.word	0x40020458
 80029f4:	40020470 	.word	0x40020470
 80029f8:	40020488 	.word	0x40020488
 80029fc:	400204a0 	.word	0x400204a0
 8002a00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 020e 	bic.w	r2, r2, #14
 8002a12:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6c      	ldr	r2, [pc, #432]	@ (8002bcc <HAL_DMA_Abort_IT+0x3a8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04a      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6b      	ldr	r2, [pc, #428]	@ (8002bd0 <HAL_DMA_Abort_IT+0x3ac>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d045      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a69      	ldr	r2, [pc, #420]	@ (8002bd4 <HAL_DMA_Abort_IT+0x3b0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d040      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a68      	ldr	r2, [pc, #416]	@ (8002bd8 <HAL_DMA_Abort_IT+0x3b4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d03b      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a66      	ldr	r2, [pc, #408]	@ (8002bdc <HAL_DMA_Abort_IT+0x3b8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d036      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a65      	ldr	r2, [pc, #404]	@ (8002be0 <HAL_DMA_Abort_IT+0x3bc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d031      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a63      	ldr	r2, [pc, #396]	@ (8002be4 <HAL_DMA_Abort_IT+0x3c0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02c      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a62      	ldr	r2, [pc, #392]	@ (8002be8 <HAL_DMA_Abort_IT+0x3c4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d027      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a60      	ldr	r2, [pc, #384]	@ (8002bec <HAL_DMA_Abort_IT+0x3c8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d022      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf0 <HAL_DMA_Abort_IT+0x3cc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01d      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf4 <HAL_DMA_Abort_IT+0x3d0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a5c      	ldr	r2, [pc, #368]	@ (8002bf8 <HAL_DMA_Abort_IT+0x3d4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5a      	ldr	r2, [pc, #360]	@ (8002bfc <HAL_DMA_Abort_IT+0x3d8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a59      	ldr	r2, [pc, #356]	@ (8002c00 <HAL_DMA_Abort_IT+0x3dc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a57      	ldr	r2, [pc, #348]	@ (8002c04 <HAL_DMA_Abort_IT+0x3e0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x290>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a56      	ldr	r2, [pc, #344]	@ (8002c08 <HAL_DMA_Abort_IT+0x3e4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d108      	bne.n	8002ac6 <HAL_DMA_Abort_IT+0x2a2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e007      	b.n	8002ad6 <HAL_DMA_Abort_IT+0x2b2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3c      	ldr	r2, [pc, #240]	@ (8002bcc <HAL_DMA_Abort_IT+0x3a8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d072      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3a      	ldr	r2, [pc, #232]	@ (8002bd0 <HAL_DMA_Abort_IT+0x3ac>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d06d      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a39      	ldr	r2, [pc, #228]	@ (8002bd4 <HAL_DMA_Abort_IT+0x3b0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d068      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a37      	ldr	r2, [pc, #220]	@ (8002bd8 <HAL_DMA_Abort_IT+0x3b4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d063      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a36      	ldr	r2, [pc, #216]	@ (8002bdc <HAL_DMA_Abort_IT+0x3b8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d05e      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a34      	ldr	r2, [pc, #208]	@ (8002be0 <HAL_DMA_Abort_IT+0x3bc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d059      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a33      	ldr	r2, [pc, #204]	@ (8002be4 <HAL_DMA_Abort_IT+0x3c0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d054      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a31      	ldr	r2, [pc, #196]	@ (8002be8 <HAL_DMA_Abort_IT+0x3c4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d04f      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a30      	ldr	r2, [pc, #192]	@ (8002bec <HAL_DMA_Abort_IT+0x3c8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d04a      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf0 <HAL_DMA_Abort_IT+0x3cc>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d045      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf4 <HAL_DMA_Abort_IT+0x3d0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d040      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf8 <HAL_DMA_Abort_IT+0x3d4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2a      	ldr	r2, [pc, #168]	@ (8002bfc <HAL_DMA_Abort_IT+0x3d8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d036      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a28      	ldr	r2, [pc, #160]	@ (8002c00 <HAL_DMA_Abort_IT+0x3dc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d031      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a27      	ldr	r2, [pc, #156]	@ (8002c04 <HAL_DMA_Abort_IT+0x3e0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d02c      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a25      	ldr	r2, [pc, #148]	@ (8002c08 <HAL_DMA_Abort_IT+0x3e4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d027      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a24      	ldr	r2, [pc, #144]	@ (8002c0c <HAL_DMA_Abort_IT+0x3e8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a22      	ldr	r2, [pc, #136]	@ (8002c10 <HAL_DMA_Abort_IT+0x3ec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01d      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <HAL_DMA_Abort_IT+0x3f0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1f      	ldr	r2, [pc, #124]	@ (8002c18 <HAL_DMA_Abort_IT+0x3f4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_DMA_Abort_IT+0x3f8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1c      	ldr	r2, [pc, #112]	@ (8002c20 <HAL_DMA_Abort_IT+0x3fc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_DMA_Abort_IT+0x400>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x3a2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a19      	ldr	r2, [pc, #100]	@ (8002c28 <HAL_DMA_Abort_IT+0x404>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d132      	bne.n	8002c2c <HAL_DMA_Abort_IT+0x408>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e031      	b.n	8002c2e <HAL_DMA_Abort_IT+0x40a>
 8002bca:	bf00      	nop
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
 8002c0c:	58025408 	.word	0x58025408
 8002c10:	5802541c 	.word	0x5802541c
 8002c14:	58025430 	.word	0x58025430
 8002c18:	58025444 	.word	0x58025444
 8002c1c:	58025458 	.word	0x58025458
 8002c20:	5802546c 	.word	0x5802546c
 8002c24:	58025480 	.word	0x58025480
 8002c28:	58025494 	.word	0x58025494
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d028      	beq.n	8002c84 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop

08002cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cbc:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <HAL_DMA_IRQHandler+0x1ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a67      	ldr	r2, [pc, #412]	@ (8002e60 <HAL_DMA_IRQHandler+0x1b0>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a9b      	lsrs	r3, r3, #10
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5f      	ldr	r2, [pc, #380]	@ (8002e64 <HAL_DMA_IRQHandler+0x1b4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04a      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e68 <HAL_DMA_IRQHandler+0x1b8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d045      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a5c      	ldr	r2, [pc, #368]	@ (8002e6c <HAL_DMA_IRQHandler+0x1bc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d040      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5a      	ldr	r2, [pc, #360]	@ (8002e70 <HAL_DMA_IRQHandler+0x1c0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d03b      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a59      	ldr	r2, [pc, #356]	@ (8002e74 <HAL_DMA_IRQHandler+0x1c4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d036      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a57      	ldr	r2, [pc, #348]	@ (8002e78 <HAL_DMA_IRQHandler+0x1c8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d031      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a56      	ldr	r2, [pc, #344]	@ (8002e7c <HAL_DMA_IRQHandler+0x1cc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d02c      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a54      	ldr	r2, [pc, #336]	@ (8002e80 <HAL_DMA_IRQHandler+0x1d0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a53      	ldr	r2, [pc, #332]	@ (8002e84 <HAL_DMA_IRQHandler+0x1d4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a51      	ldr	r2, [pc, #324]	@ (8002e88 <HAL_DMA_IRQHandler+0x1d8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01d      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a50      	ldr	r2, [pc, #320]	@ (8002e8c <HAL_DMA_IRQHandler+0x1dc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a4e      	ldr	r2, [pc, #312]	@ (8002e90 <HAL_DMA_IRQHandler+0x1e0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002e94 <HAL_DMA_IRQHandler+0x1e4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a4b      	ldr	r2, [pc, #300]	@ (8002e98 <HAL_DMA_IRQHandler+0x1e8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4a      	ldr	r2, [pc, #296]	@ (8002e9c <HAL_DMA_IRQHandler+0x1ec>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xd2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_IRQHandler+0xd6>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_DMA_IRQHandler+0xd8>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 842b 	beq.w	80035e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2208      	movs	r2, #8
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80a2 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e64 <HAL_DMA_IRQHandler+0x1b4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d04a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e68 <HAL_DMA_IRQHandler+0x1b8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d045      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e6c <HAL_DMA_IRQHandler+0x1bc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d040      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e70 <HAL_DMA_IRQHandler+0x1c0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d03b      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a28      	ldr	r2, [pc, #160]	@ (8002e74 <HAL_DMA_IRQHandler+0x1c4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d036      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a27      	ldr	r2, [pc, #156]	@ (8002e78 <HAL_DMA_IRQHandler+0x1c8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d031      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	@ (8002e7c <HAL_DMA_IRQHandler+0x1cc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02c      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a24      	ldr	r2, [pc, #144]	@ (8002e80 <HAL_DMA_IRQHandler+0x1d0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d027      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <HAL_DMA_IRQHandler+0x1d4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d022      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	@ (8002e88 <HAL_DMA_IRQHandler+0x1d8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d01d      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e8c <HAL_DMA_IRQHandler+0x1dc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d018      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1e      	ldr	r2, [pc, #120]	@ (8002e90 <HAL_DMA_IRQHandler+0x1e0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <HAL_DMA_IRQHandler+0x1e4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00e      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002e98 <HAL_DMA_IRQHandler+0x1e8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	@ (8002e9c <HAL_DMA_IRQHandler+0x1ec>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x194>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d12f      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x1f4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e02e      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x208>
 8002e5a:	bf00      	nop
 8002e5c:	24004990 	.word	0x24004990
 8002e60:	1b4e81b5 	.word	0x1b4e81b5
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d015      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d06e      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a69      	ldr	r2, [pc, #420]	@ (80030a8 <HAL_DMA_IRQHandler+0x3f8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d04a      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a67      	ldr	r2, [pc, #412]	@ (80030ac <HAL_DMA_IRQHandler+0x3fc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d045      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a66      	ldr	r2, [pc, #408]	@ (80030b0 <HAL_DMA_IRQHandler+0x400>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d040      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a64      	ldr	r2, [pc, #400]	@ (80030b4 <HAL_DMA_IRQHandler+0x404>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d03b      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a63      	ldr	r2, [pc, #396]	@ (80030b8 <HAL_DMA_IRQHandler+0x408>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d036      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a61      	ldr	r2, [pc, #388]	@ (80030bc <HAL_DMA_IRQHandler+0x40c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a60      	ldr	r2, [pc, #384]	@ (80030c0 <HAL_DMA_IRQHandler+0x410>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d02c      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5e      	ldr	r2, [pc, #376]	@ (80030c4 <HAL_DMA_IRQHandler+0x414>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d027      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5d      	ldr	r2, [pc, #372]	@ (80030c8 <HAL_DMA_IRQHandler+0x418>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5b      	ldr	r2, [pc, #364]	@ (80030cc <HAL_DMA_IRQHandler+0x41c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01d      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5a      	ldr	r2, [pc, #360]	@ (80030d0 <HAL_DMA_IRQHandler+0x420>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a58      	ldr	r2, [pc, #352]	@ (80030d4 <HAL_DMA_IRQHandler+0x424>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a57      	ldr	r2, [pc, #348]	@ (80030d8 <HAL_DMA_IRQHandler+0x428>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a55      	ldr	r2, [pc, #340]	@ (80030dc <HAL_DMA_IRQHandler+0x42c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a54      	ldr	r2, [pc, #336]	@ (80030e0 <HAL_DMA_IRQHandler+0x430>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x2ee>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_DMA_IRQHandler+0x434>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x304>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e003      	b.n	8002fbc <HAL_DMA_IRQHandler+0x30c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	f043 0202 	orr.w	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 808f 	beq.w	8003110 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80030a8 <HAL_DMA_IRQHandler+0x3f8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04a      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2a      	ldr	r2, [pc, #168]	@ (80030ac <HAL_DMA_IRQHandler+0x3fc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d045      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a29      	ldr	r2, [pc, #164]	@ (80030b0 <HAL_DMA_IRQHandler+0x400>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d040      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a27      	ldr	r2, [pc, #156]	@ (80030b4 <HAL_DMA_IRQHandler+0x404>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03b      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a26      	ldr	r2, [pc, #152]	@ (80030b8 <HAL_DMA_IRQHandler+0x408>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a24      	ldr	r2, [pc, #144]	@ (80030bc <HAL_DMA_IRQHandler+0x40c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <HAL_DMA_IRQHandler+0x410>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a21      	ldr	r2, [pc, #132]	@ (80030c4 <HAL_DMA_IRQHandler+0x414>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <HAL_DMA_IRQHandler+0x418>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <HAL_DMA_IRQHandler+0x41c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1d      	ldr	r2, [pc, #116]	@ (80030d0 <HAL_DMA_IRQHandler+0x420>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1b      	ldr	r2, [pc, #108]	@ (80030d4 <HAL_DMA_IRQHandler+0x424>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <HAL_DMA_IRQHandler+0x428>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a18      	ldr	r2, [pc, #96]	@ (80030dc <HAL_DMA_IRQHandler+0x42c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_DMA_IRQHandler+0x430>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_IRQHandler+0x3e2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a15      	ldr	r2, [pc, #84]	@ (80030e4 <HAL_DMA_IRQHandler+0x434>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d12a      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x438>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e023      	b.n	80030f0 <HAL_DMA_IRQHandler+0x440>
 80030a8:	40020010 	.word	0x40020010
 80030ac:	40020028 	.word	0x40020028
 80030b0:	40020040 	.word	0x40020040
 80030b4:	40020058 	.word	0x40020058
 80030b8:	40020070 	.word	0x40020070
 80030bc:	40020088 	.word	0x40020088
 80030c0:	400200a0 	.word	0x400200a0
 80030c4:	400200b8 	.word	0x400200b8
 80030c8:	40020410 	.word	0x40020410
 80030cc:	40020428 	.word	0x40020428
 80030d0:	40020440 	.word	0x40020440
 80030d4:	40020458 	.word	0x40020458
 80030d8:	40020470 	.word	0x40020470
 80030dc:	40020488 	.word	0x40020488
 80030e0:	400204a0 	.word	0x400204a0
 80030e4:	400204b8 	.word	0x400204b8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	2204      	movs	r2, #4
 80030fe:	409a      	lsls	r2, r3
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2210      	movs	r2, #16
 800311a:	409a      	lsls	r2, r3
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a6 	beq.w	8003272 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a85      	ldr	r2, [pc, #532]	@ (8003340 <HAL_DMA_IRQHandler+0x690>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d04a      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a83      	ldr	r2, [pc, #524]	@ (8003344 <HAL_DMA_IRQHandler+0x694>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d045      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a82      	ldr	r2, [pc, #520]	@ (8003348 <HAL_DMA_IRQHandler+0x698>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d040      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a80      	ldr	r2, [pc, #512]	@ (800334c <HAL_DMA_IRQHandler+0x69c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d03b      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7f      	ldr	r2, [pc, #508]	@ (8003350 <HAL_DMA_IRQHandler+0x6a0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d036      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a7d      	ldr	r2, [pc, #500]	@ (8003354 <HAL_DMA_IRQHandler+0x6a4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d031      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7c      	ldr	r2, [pc, #496]	@ (8003358 <HAL_DMA_IRQHandler+0x6a8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d02c      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a7a      	ldr	r2, [pc, #488]	@ (800335c <HAL_DMA_IRQHandler+0x6ac>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d027      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a79      	ldr	r2, [pc, #484]	@ (8003360 <HAL_DMA_IRQHandler+0x6b0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a77      	ldr	r2, [pc, #476]	@ (8003364 <HAL_DMA_IRQHandler+0x6b4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01d      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a76      	ldr	r2, [pc, #472]	@ (8003368 <HAL_DMA_IRQHandler+0x6b8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a74      	ldr	r2, [pc, #464]	@ (800336c <HAL_DMA_IRQHandler+0x6bc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a73      	ldr	r2, [pc, #460]	@ (8003370 <HAL_DMA_IRQHandler+0x6c0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a71      	ldr	r2, [pc, #452]	@ (8003374 <HAL_DMA_IRQHandler+0x6c4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a70      	ldr	r2, [pc, #448]	@ (8003378 <HAL_DMA_IRQHandler+0x6c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x516>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a6e      	ldr	r2, [pc, #440]	@ (800337c <HAL_DMA_IRQHandler+0x6cc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10a      	bne.n	80031dc <HAL_DMA_IRQHandler+0x52c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e009      	b.n	80031f0 <HAL_DMA_IRQHandler+0x540>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf14      	ite	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	2300      	moveq	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d03e      	beq.n	8003272 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2210      	movs	r2, #16
 80031fe:	409a      	lsls	r2, r3
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d108      	bne.n	8003232 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d024      	beq.n	8003272 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e01f      	b.n	8003272 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01b      	beq.n	8003272 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
 8003242:	e016      	b.n	8003272 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0208 	bic.w	r2, r2, #8
 8003260:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2220      	movs	r2, #32
 800327c:	409a      	lsls	r2, r3
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8110 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2c      	ldr	r2, [pc, #176]	@ (8003340 <HAL_DMA_IRQHandler+0x690>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d04a      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2b      	ldr	r2, [pc, #172]	@ (8003344 <HAL_DMA_IRQHandler+0x694>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d045      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a29      	ldr	r2, [pc, #164]	@ (8003348 <HAL_DMA_IRQHandler+0x698>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d040      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a28      	ldr	r2, [pc, #160]	@ (800334c <HAL_DMA_IRQHandler+0x69c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d03b      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a26      	ldr	r2, [pc, #152]	@ (8003350 <HAL_DMA_IRQHandler+0x6a0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d036      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a25      	ldr	r2, [pc, #148]	@ (8003354 <HAL_DMA_IRQHandler+0x6a4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d031      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a23      	ldr	r2, [pc, #140]	@ (8003358 <HAL_DMA_IRQHandler+0x6a8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02c      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a22      	ldr	r2, [pc, #136]	@ (800335c <HAL_DMA_IRQHandler+0x6ac>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d027      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a20      	ldr	r2, [pc, #128]	@ (8003360 <HAL_DMA_IRQHandler+0x6b0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d022      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <HAL_DMA_IRQHandler+0x6b4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01d      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <HAL_DMA_IRQHandler+0x6b8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d018      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_DMA_IRQHandler+0x6bc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1a      	ldr	r2, [pc, #104]	@ (8003370 <HAL_DMA_IRQHandler+0x6c0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <HAL_DMA_IRQHandler+0x6c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <HAL_DMA_IRQHandler+0x6c8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_DMA_IRQHandler+0x678>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a16      	ldr	r2, [pc, #88]	@ (800337c <HAL_DMA_IRQHandler+0x6cc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d12b      	bne.n	8003380 <HAL_DMA_IRQHandler+0x6d0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e02a      	b.n	8003394 <HAL_DMA_IRQHandler+0x6e4>
 800333e:	bf00      	nop
 8003340:	40020010 	.word	0x40020010
 8003344:	40020028 	.word	0x40020028
 8003348:	40020040 	.word	0x40020040
 800334c:	40020058 	.word	0x40020058
 8003350:	40020070 	.word	0x40020070
 8003354:	40020088 	.word	0x40020088
 8003358:	400200a0 	.word	0x400200a0
 800335c:	400200b8 	.word	0x400200b8
 8003360:	40020410 	.word	0x40020410
 8003364:	40020428 	.word	0x40020428
 8003368:	40020440 	.word	0x40020440
 800336c:	40020458 	.word	0x40020458
 8003370:	40020470 	.word	0x40020470
 8003374:	40020488 	.word	0x40020488
 8003378:	400204a0 	.word	0x400204a0
 800337c:	400204b8 	.word	0x400204b8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8087 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2220      	movs	r2, #32
 80033a4:	409a      	lsls	r2, r3
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d139      	bne.n	800342a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0216 	bic.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x736>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	223f      	movs	r2, #63	@ 0x3f
 8003400:	409a      	lsls	r2, r3
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 834a 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
          }
          return;
 8003428:	e344      	b.n	8003ab4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d018      	beq.n	800346a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
 8003456:	e027      	b.n	80034a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	e01e      	b.n	80034a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10f      	bne.n	8003498 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0210 	bic.w	r2, r2, #16
 8003486:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8306 	beq.w	8003abe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8088 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2204      	movs	r2, #4
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7a      	ldr	r2, [pc, #488]	@ (80036b8 <HAL_DMA_IRQHandler+0xa08>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d04a      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a79      	ldr	r2, [pc, #484]	@ (80036bc <HAL_DMA_IRQHandler+0xa0c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d045      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a77      	ldr	r2, [pc, #476]	@ (80036c0 <HAL_DMA_IRQHandler+0xa10>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d040      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a76      	ldr	r2, [pc, #472]	@ (80036c4 <HAL_DMA_IRQHandler+0xa14>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d03b      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a74      	ldr	r2, [pc, #464]	@ (80036c8 <HAL_DMA_IRQHandler+0xa18>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d036      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	@ (80036cc <HAL_DMA_IRQHandler+0xa1c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d031      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a71      	ldr	r2, [pc, #452]	@ (80036d0 <HAL_DMA_IRQHandler+0xa20>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02c      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a70      	ldr	r2, [pc, #448]	@ (80036d4 <HAL_DMA_IRQHandler+0xa24>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d027      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6e      	ldr	r2, [pc, #440]	@ (80036d8 <HAL_DMA_IRQHandler+0xa28>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d022      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6d      	ldr	r2, [pc, #436]	@ (80036dc <HAL_DMA_IRQHandler+0xa2c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d01d      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6b      	ldr	r2, [pc, #428]	@ (80036e0 <HAL_DMA_IRQHandler+0xa30>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d018      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6a      	ldr	r2, [pc, #424]	@ (80036e4 <HAL_DMA_IRQHandler+0xa34>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a68      	ldr	r2, [pc, #416]	@ (80036e8 <HAL_DMA_IRQHandler+0xa38>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a67      	ldr	r2, [pc, #412]	@ (80036ec <HAL_DMA_IRQHandler+0xa3c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a65      	ldr	r2, [pc, #404]	@ (80036f0 <HAL_DMA_IRQHandler+0xa40>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_DMA_IRQHandler+0x8b8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a64      	ldr	r2, [pc, #400]	@ (80036f4 <HAL_DMA_IRQHandler+0xa44>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d108      	bne.n	800357a <HAL_DMA_IRQHandler+0x8ca>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e007      	b.n	800358a <HAL_DMA_IRQHandler+0x8da>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003592:	429a      	cmp	r2, r3
 8003594:	d307      	bcc.n	80035a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f2      	bne.n	800358a <HAL_DMA_IRQHandler+0x8da>
 80035a4:	e000      	b.n	80035a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035be:	e003      	b.n	80035c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8272 	beq.w	8003abe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
 80035e2:	e26c      	b.n	8003abe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a43      	ldr	r2, [pc, #268]	@ (80036f8 <HAL_DMA_IRQHandler+0xa48>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d022      	beq.n	8003634 <HAL_DMA_IRQHandler+0x984>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a42      	ldr	r2, [pc, #264]	@ (80036fc <HAL_DMA_IRQHandler+0xa4c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d01d      	beq.n	8003634 <HAL_DMA_IRQHandler+0x984>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a40      	ldr	r2, [pc, #256]	@ (8003700 <HAL_DMA_IRQHandler+0xa50>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d018      	beq.n	8003634 <HAL_DMA_IRQHandler+0x984>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a3f      	ldr	r2, [pc, #252]	@ (8003704 <HAL_DMA_IRQHandler+0xa54>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <HAL_DMA_IRQHandler+0x984>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a3d      	ldr	r2, [pc, #244]	@ (8003708 <HAL_DMA_IRQHandler+0xa58>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00e      	beq.n	8003634 <HAL_DMA_IRQHandler+0x984>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a3c      	ldr	r2, [pc, #240]	@ (800370c <HAL_DMA_IRQHandler+0xa5c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_DMA_IRQHandler+0x984>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3a      	ldr	r2, [pc, #232]	@ (8003710 <HAL_DMA_IRQHandler+0xa60>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_DMA_IRQHandler+0x984>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a39      	ldr	r2, [pc, #228]	@ (8003714 <HAL_DMA_IRQHandler+0xa64>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_DMA_IRQHandler+0x988>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_DMA_IRQHandler+0x98a>
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 823f 	beq.w	8003abe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2204      	movs	r2, #4
 8003652:	409a      	lsls	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80cd 	beq.w	80037f8 <HAL_DMA_IRQHandler+0xb48>
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80c7 	beq.w	80037f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2204      	movs	r2, #4
 8003674:	409a      	lsls	r2, r3
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d049      	beq.n	8003718 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8210 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036a0:	e20a      	b.n	8003ab8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8206 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036b4:	e200      	b.n	8003ab8 <HAL_DMA_IRQHandler+0xe08>
 80036b6:	bf00      	nop
 80036b8:	40020010 	.word	0x40020010
 80036bc:	40020028 	.word	0x40020028
 80036c0:	40020040 	.word	0x40020040
 80036c4:	40020058 	.word	0x40020058
 80036c8:	40020070 	.word	0x40020070
 80036cc:	40020088 	.word	0x40020088
 80036d0:	400200a0 	.word	0x400200a0
 80036d4:	400200b8 	.word	0x400200b8
 80036d8:	40020410 	.word	0x40020410
 80036dc:	40020428 	.word	0x40020428
 80036e0:	40020440 	.word	0x40020440
 80036e4:	40020458 	.word	0x40020458
 80036e8:	40020470 	.word	0x40020470
 80036ec:	40020488 	.word	0x40020488
 80036f0:	400204a0 	.word	0x400204a0
 80036f4:	400204b8 	.word	0x400204b8
 80036f8:	58025408 	.word	0x58025408
 80036fc:	5802541c 	.word	0x5802541c
 8003700:	58025430 	.word	0x58025430
 8003704:	58025444 	.word	0x58025444
 8003708:	58025458 	.word	0x58025458
 800370c:	5802546c 	.word	0x5802546c
 8003710:	58025480 	.word	0x58025480
 8003714:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d160      	bne.n	80037e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7f      	ldr	r2, [pc, #508]	@ (8003924 <HAL_DMA_IRQHandler+0xc74>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04a      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7d      	ldr	r2, [pc, #500]	@ (8003928 <HAL_DMA_IRQHandler+0xc78>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d045      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7c      	ldr	r2, [pc, #496]	@ (800392c <HAL_DMA_IRQHandler+0xc7c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a7a      	ldr	r2, [pc, #488]	@ (8003930 <HAL_DMA_IRQHandler+0xc80>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d03b      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a79      	ldr	r2, [pc, #484]	@ (8003934 <HAL_DMA_IRQHandler+0xc84>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d036      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a77      	ldr	r2, [pc, #476]	@ (8003938 <HAL_DMA_IRQHandler+0xc88>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d031      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a76      	ldr	r2, [pc, #472]	@ (800393c <HAL_DMA_IRQHandler+0xc8c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d02c      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a74      	ldr	r2, [pc, #464]	@ (8003940 <HAL_DMA_IRQHandler+0xc90>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d027      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a73      	ldr	r2, [pc, #460]	@ (8003944 <HAL_DMA_IRQHandler+0xc94>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a71      	ldr	r2, [pc, #452]	@ (8003948 <HAL_DMA_IRQHandler+0xc98>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01d      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a70      	ldr	r2, [pc, #448]	@ (800394c <HAL_DMA_IRQHandler+0xc9c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <HAL_DMA_IRQHandler+0xca0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6d      	ldr	r2, [pc, #436]	@ (8003954 <HAL_DMA_IRQHandler+0xca4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003958 <HAL_DMA_IRQHandler+0xca8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6a      	ldr	r2, [pc, #424]	@ (800395c <HAL_DMA_IRQHandler+0xcac>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xb12>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a68      	ldr	r2, [pc, #416]	@ (8003960 <HAL_DMA_IRQHandler+0xcb0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d108      	bne.n	80037d4 <HAL_DMA_IRQHandler+0xb24>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0208 	bic.w	r2, r2, #8
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e007      	b.n	80037e4 <HAL_DMA_IRQHandler+0xb34>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8165 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f6:	e15f      	b.n	8003ab8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2202      	movs	r2, #2
 8003802:	409a      	lsls	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80c5 	beq.w	8003998 <HAL_DMA_IRQHandler+0xce8>
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80bf 	beq.w	8003998 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2202      	movs	r2, #2
 8003824:	409a      	lsls	r2, r3
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d018      	beq.n	8003866 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 813a 	beq.w	8003abc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003850:	e134      	b.n	8003abc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8130 	beq.w	8003abc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003864:	e12a      	b.n	8003abc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 8089 	bne.w	8003984 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2b      	ldr	r2, [pc, #172]	@ (8003924 <HAL_DMA_IRQHandler+0xc74>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04a      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a29      	ldr	r2, [pc, #164]	@ (8003928 <HAL_DMA_IRQHandler+0xc78>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d045      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a28      	ldr	r2, [pc, #160]	@ (800392c <HAL_DMA_IRQHandler+0xc7c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d040      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <HAL_DMA_IRQHandler+0xc80>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d03b      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a25      	ldr	r2, [pc, #148]	@ (8003934 <HAL_DMA_IRQHandler+0xc84>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d036      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a23      	ldr	r2, [pc, #140]	@ (8003938 <HAL_DMA_IRQHandler+0xc88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a22      	ldr	r2, [pc, #136]	@ (800393c <HAL_DMA_IRQHandler+0xc8c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d02c      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a20      	ldr	r2, [pc, #128]	@ (8003940 <HAL_DMA_IRQHandler+0xc90>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d027      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003944 <HAL_DMA_IRQHandler+0xc94>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003948 <HAL_DMA_IRQHandler+0xc98>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01d      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <HAL_DMA_IRQHandler+0xc9c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d018      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003950 <HAL_DMA_IRQHandler+0xca0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a19      	ldr	r2, [pc, #100]	@ (8003954 <HAL_DMA_IRQHandler+0xca4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <HAL_DMA_IRQHandler+0xca8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a16      	ldr	r2, [pc, #88]	@ (800395c <HAL_DMA_IRQHandler+0xcac>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_DMA_IRQHandler+0xc62>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a14      	ldr	r2, [pc, #80]	@ (8003960 <HAL_DMA_IRQHandler+0xcb0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d128      	bne.n	8003964 <HAL_DMA_IRQHandler+0xcb4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0214 	bic.w	r2, r2, #20
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e027      	b.n	8003974 <HAL_DMA_IRQHandler+0xcc4>
 8003924:	40020010 	.word	0x40020010
 8003928:	40020028 	.word	0x40020028
 800392c:	40020040 	.word	0x40020040
 8003930:	40020058 	.word	0x40020058
 8003934:	40020070 	.word	0x40020070
 8003938:	40020088 	.word	0x40020088
 800393c:	400200a0 	.word	0x400200a0
 8003940:	400200b8 	.word	0x400200b8
 8003944:	40020410 	.word	0x40020410
 8003948:	40020428 	.word	0x40020428
 800394c:	40020440 	.word	0x40020440
 8003950:	40020458 	.word	0x40020458
 8003954:	40020470 	.word	0x40020470
 8003958:	40020488 	.word	0x40020488
 800395c:	400204a0 	.word	0x400204a0
 8003960:	400204b8 	.word	0x400204b8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 020a 	bic.w	r2, r2, #10
 8003972:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8097 	beq.w	8003abc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003996:	e091      	b.n	8003abc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2208      	movs	r2, #8
 80039a2:	409a      	lsls	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8088 	beq.w	8003abe <HAL_DMA_IRQHandler+0xe0e>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8082 	beq.w	8003abe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a41      	ldr	r2, [pc, #260]	@ (8003ac4 <HAL_DMA_IRQHandler+0xe14>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d04a      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac8 <HAL_DMA_IRQHandler+0xe18>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d045      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a3e      	ldr	r2, [pc, #248]	@ (8003acc <HAL_DMA_IRQHandler+0xe1c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d040      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad0 <HAL_DMA_IRQHandler+0xe20>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d03b      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ad4 <HAL_DMA_IRQHandler+0xe24>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d036      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a39      	ldr	r2, [pc, #228]	@ (8003ad8 <HAL_DMA_IRQHandler+0xe28>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d031      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a38      	ldr	r2, [pc, #224]	@ (8003adc <HAL_DMA_IRQHandler+0xe2c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d02c      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a36      	ldr	r2, [pc, #216]	@ (8003ae0 <HAL_DMA_IRQHandler+0xe30>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d027      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a35      	ldr	r2, [pc, #212]	@ (8003ae4 <HAL_DMA_IRQHandler+0xe34>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a33      	ldr	r2, [pc, #204]	@ (8003ae8 <HAL_DMA_IRQHandler+0xe38>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01d      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a32      	ldr	r2, [pc, #200]	@ (8003aec <HAL_DMA_IRQHandler+0xe3c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	@ (8003af0 <HAL_DMA_IRQHandler+0xe40>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2f      	ldr	r2, [pc, #188]	@ (8003af4 <HAL_DMA_IRQHandler+0xe44>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2d      	ldr	r2, [pc, #180]	@ (8003af8 <HAL_DMA_IRQHandler+0xe48>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003afc <HAL_DMA_IRQHandler+0xe4c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xdaa>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	@ (8003b00 <HAL_DMA_IRQHandler+0xe50>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <HAL_DMA_IRQHandler+0xdbc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 021c 	bic.w	r2, r2, #28
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e007      	b.n	8003a7c <HAL_DMA_IRQHandler+0xdcc>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 020e 	bic.w	r2, r2, #14
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2201      	movs	r2, #1
 8003a86:	409a      	lsls	r2, r3
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
 8003ab2:	e004      	b.n	8003abe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ab4:	bf00      	nop
 8003ab6:	e002      	b.n	8003abe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab8:	bf00      	nop
 8003aba:	e000      	b.n	8003abe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003abc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003abe:	3728      	adds	r7, #40	@ 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40020010 	.word	0x40020010
 8003ac8:	40020028 	.word	0x40020028
 8003acc:	40020040 	.word	0x40020040
 8003ad0:	40020058 	.word	0x40020058
 8003ad4:	40020070 	.word	0x40020070
 8003ad8:	40020088 	.word	0x40020088
 8003adc:	400200a0 	.word	0x400200a0
 8003ae0:	400200b8 	.word	0x400200b8
 8003ae4:	40020410 	.word	0x40020410
 8003ae8:	40020428 	.word	0x40020428
 8003aec:	40020440 	.word	0x40020440
 8003af0:	40020458 	.word	0x40020458
 8003af4:	40020470 	.word	0x40020470
 8003af8:	40020488 	.word	0x40020488
 8003afc:	400204a0 	.word	0x400204a0
 8003b00:	400204b8 	.word	0x400204b8

08003b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a42      	ldr	r2, [pc, #264]	@ (8003c1c <DMA_CalcBaseAndBitshift+0x118>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d04a      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a41      	ldr	r2, [pc, #260]	@ (8003c20 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d045      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a3f      	ldr	r2, [pc, #252]	@ (8003c24 <DMA_CalcBaseAndBitshift+0x120>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d040      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c28 <DMA_CalcBaseAndBitshift+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d03b      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a3c      	ldr	r2, [pc, #240]	@ (8003c2c <DMA_CalcBaseAndBitshift+0x128>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d036      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a3b      	ldr	r2, [pc, #236]	@ (8003c30 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d031      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a39      	ldr	r2, [pc, #228]	@ (8003c34 <DMA_CalcBaseAndBitshift+0x130>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02c      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a38      	ldr	r2, [pc, #224]	@ (8003c38 <DMA_CalcBaseAndBitshift+0x134>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d027      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a36      	ldr	r2, [pc, #216]	@ (8003c3c <DMA_CalcBaseAndBitshift+0x138>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d022      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a35      	ldr	r2, [pc, #212]	@ (8003c40 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d01d      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a33      	ldr	r2, [pc, #204]	@ (8003c44 <DMA_CalcBaseAndBitshift+0x140>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a32      	ldr	r2, [pc, #200]	@ (8003c48 <DMA_CalcBaseAndBitshift+0x144>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a30      	ldr	r2, [pc, #192]	@ (8003c4c <DMA_CalcBaseAndBitshift+0x148>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2f      	ldr	r2, [pc, #188]	@ (8003c50 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c54 <DMA_CalcBaseAndBitshift+0x150>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <DMA_CalcBaseAndBitshift+0xa8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <DMA_CalcBaseAndBitshift+0x154>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <DMA_CalcBaseAndBitshift+0xac>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <DMA_CalcBaseAndBitshift+0xae>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d024      	beq.n	8003c00 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3b10      	subs	r3, #16
 8003bbe:	4a27      	ldr	r2, [pc, #156]	@ (8003c5c <DMA_CalcBaseAndBitshift+0x158>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	4a24      	ldr	r2, [pc, #144]	@ (8003c60 <DMA_CalcBaseAndBitshift+0x15c>)
 8003bd0:	5cd3      	ldrb	r3, [r2, r3]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d908      	bls.n	8003bf0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c64 <DMA_CalcBaseAndBitshift+0x160>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	1d1a      	adds	r2, r3, #4
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bee:	e00d      	b.n	8003c0c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <DMA_CalcBaseAndBitshift+0x160>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfe:	e005      	b.n	8003c0c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40020010 	.word	0x40020010
 8003c20:	40020028 	.word	0x40020028
 8003c24:	40020040 	.word	0x40020040
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	40020070 	.word	0x40020070
 8003c30:	40020088 	.word	0x40020088
 8003c34:	400200a0 	.word	0x400200a0
 8003c38:	400200b8 	.word	0x400200b8
 8003c3c:	40020410 	.word	0x40020410
 8003c40:	40020428 	.word	0x40020428
 8003c44:	40020440 	.word	0x40020440
 8003c48:	40020458 	.word	0x40020458
 8003c4c:	40020470 	.word	0x40020470
 8003c50:	40020488 	.word	0x40020488
 8003c54:	400204a0 	.word	0x400204a0
 8003c58:	400204b8 	.word	0x400204b8
 8003c5c:	aaaaaaab 	.word	0xaaaaaaab
 8003c60:	0801e40c 	.word	0x0801e40c
 8003c64:	fffffc00 	.word	0xfffffc00

08003c68 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d120      	bne.n	8003cbe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d858      	bhi.n	8003d36 <DMA_CheckFifoParam+0xce>
 8003c84:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <DMA_CheckFifoParam+0x24>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003caf 	.word	0x08003caf
 8003c94:	08003c9d 	.word	0x08003c9d
 8003c98:	08003d37 	.word	0x08003d37
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d048      	beq.n	8003d3a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cac:	e045      	b.n	8003d3a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cb6:	d142      	bne.n	8003d3e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cbc:	e03f      	b.n	8003d3e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc6:	d123      	bne.n	8003d10 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d838      	bhi.n	8003d42 <DMA_CheckFifoParam+0xda>
 8003cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <DMA_CheckFifoParam+0x70>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cef 	.word	0x08003cef
 8003ce0:	08003ce9 	.word	0x08003ce9
 8003ce4:	08003d01 	.word	0x08003d01
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
        break;
 8003cec:	e030      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d025      	beq.n	8003d46 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cfe:	e022      	b.n	8003d46 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d08:	d11f      	bne.n	8003d4a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d0e:	e01c      	b.n	8003d4a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d902      	bls.n	8003d1e <DMA_CheckFifoParam+0xb6>
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d003      	beq.n	8003d24 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d1c:	e018      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
        break;
 8003d22:	e015      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00e      	beq.n	8003d4e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
    break;
 8003d34:	e00b      	b.n	8003d4e <DMA_CheckFifoParam+0xe6>
        break;
 8003d36:	bf00      	nop
 8003d38:	e00a      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e008      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e006      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
        break;
 8003d42:	bf00      	nop
 8003d44:	e004      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
        break;
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <DMA_CheckFifoParam+0xe8>
    break;
 8003d4e:	bf00      	nop
    }
  }

  return status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop

08003d60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a38      	ldr	r2, [pc, #224]	@ (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a36      	ldr	r2, [pc, #216]	@ (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a35      	ldr	r2, [pc, #212]	@ (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a33      	ldr	r2, [pc, #204]	@ (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a32      	ldr	r2, [pc, #200]	@ (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a30      	ldr	r2, [pc, #192]	@ (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2f      	ldr	r2, [pc, #188]	@ (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01a      	beq.n	8003dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3b08      	subs	r3, #8
 8003dd0:	4a28      	ldr	r2, [pc, #160]	@ (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4b26      	ldr	r3, [pc, #152]	@ (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a24      	ldr	r2, [pc, #144]	@ (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003dec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003dfc:	e024      	b.n	8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3b10      	subs	r3, #16
 8003e06:	4a1e      	ldr	r2, [pc, #120]	@ (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4a1c      	ldr	r2, [pc, #112]	@ (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d806      	bhi.n	8003e26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d902      	bls.n	8003e26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3308      	adds	r3, #8
 8003e24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4b18      	ldr	r3, [pc, #96]	@ (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494
 8003e74:	cccccccd 	.word	0xcccccccd
 8003e78:	16009600 	.word	0x16009600
 8003e7c:	58025880 	.word	0x58025880
 8003e80:	aaaaaaab 	.word	0xaaaaaaab
 8003e84:	400204b8 	.word	0x400204b8
 8003e88:	4002040f 	.word	0x4002040f
 8003e8c:	10008200 	.word	0x10008200
 8003e90:	40020880 	.word	0x40020880

08003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d04a      	beq.n	8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d847      	bhi.n	8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	@ (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a24      	ldr	r2, [pc, #144]	@ (8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01d      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a22      	ldr	r2, [pc, #136]	@ (8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a21      	ldr	r2, [pc, #132]	@ (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4b17      	ldr	r3, [pc, #92]	@ (8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a15      	ldr	r2, [pc, #84]	@ (8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f1c:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f1e:	e009      	b.n	8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a11      	ldr	r2, [pc, #68]	@ (8003f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f32:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	2201      	movs	r2, #1
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	58025408 	.word	0x58025408
 8003f50:	5802541c 	.word	0x5802541c
 8003f54:	58025430 	.word	0x58025430
 8003f58:	58025444 	.word	0x58025444
 8003f5c:	58025458 	.word	0x58025458
 8003f60:	5802546c 	.word	0x5802546c
 8003f64:	58025480 	.word	0x58025480
 8003f68:	58025494 	.word	0x58025494
 8003f6c:	1600963f 	.word	0x1600963f
 8003f70:	58025940 	.word	0x58025940
 8003f74:	1000823f 	.word	0x1000823f
 8003f78:	40020940 	.word	0x40020940

08003f7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0e3      	b.n	8004156 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f007 fbe7 	bl	800b774 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8004160 <HAL_ETH_Init+0x1e4>)
 8003fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fac:	4a6c      	ldr	r2, [pc, #432]	@ (8004160 <HAL_ETH_Init+0x1e4>)
 8003fae:	f043 0302 	orr.w	r3, r3, #2
 8003fb2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004160 <HAL_ETH_Init+0x1e4>)
 8003fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7a1b      	ldrb	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f7fd ff33 	bl	8001e38 <HAL_SYSCFG_ETHInterfaceSelect>
 8003fd2:	e003      	b.n	8003fdc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fd4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003fd8:	f7fd ff2e 	bl	8001e38 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fdc:	4b61      	ldr	r3, [pc, #388]	@ (8004164 <HAL_ETH_Init+0x1e8>)
 8003fde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ff6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ff8:	f7fd feee 	bl	8001dd8 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ffe:	e011      	b.n	8004024 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004000:	f7fd feea 	bl	8001dd8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800400e:	d909      	bls.n	8004024 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	22e0      	movs	r2, #224	@ 0xe0
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e098      	b.n	8004156 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e4      	bne.n	8004000 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 ff1c 	bl	8004e74 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800403c:	f002 fe26 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8004040:	4603      	mov	r3, r0
 8004042:	4a49      	ldr	r2, [pc, #292]	@ (8004168 <HAL_ETH_Init+0x1ec>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	0c9a      	lsrs	r2, r3, #18
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3a01      	subs	r2, #1
 8004050:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f001 f919 	bl	800528c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004062:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004066:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004072:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004076:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	22e0      	movs	r2, #224	@ 0xe0
 8004092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e05d      	b.n	8004156 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80040a6:	4b31      	ldr	r3, [pc, #196]	@ (800416c <HAL_ETH_Init+0x1f0>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6952      	ldr	r2, [r2, #20]
 80040ae:	0051      	lsls	r1, r2, #1
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040ba:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f001 f981 	bl	80053c6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f001 f9c7 	bl	8005458 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	3305      	adds	r3, #5
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	3303      	adds	r3, #3
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	061a      	lsls	r2, r3, #24
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	3302      	adds	r3, #2
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	3301      	adds	r3, #1
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004108:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004116:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004118:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_ETH_Init+0x1f4>)
 800412a:	430b      	orrs	r3, r1
 800412c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <HAL_ETH_Init+0x1f8>)
 800413e:	430b      	orrs	r3, r1
 8004140:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2210      	movs	r2, #16
 8004150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
 8004164:	58000400 	.word	0x58000400
 8004168:	431bde83 	.word	0x431bde83
 800416c:	ffff8001 	.word	0xffff8001
 8004170:	0c020060 	.word	0x0c020060
 8004174:	0c20c000 	.word	0x0c20c000

08004178 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004186:	2b10      	cmp	r3, #16
 8004188:	d165      	bne.n	8004256 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2204      	movs	r2, #4
 800419c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9e4 	bl	800456c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041bc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041d8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80041f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041f4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0202 	orr.w	r2, r2, #2
 800421a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004234:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8004240:	430b      	orrs	r3, r1
 8004242:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004246:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2240      	movs	r2, #64	@ 0x40
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d165      	bne.n	800433e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004282:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b30      	ldr	r3, [pc, #192]	@ (800434c <HAL_ETH_Stop_IT+0xec>)
 800428c:	400b      	ands	r3, r1
 800428e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004292:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042ae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042ca:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0202 	bic.w	r2, r2, #2
 8004300:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e00e      	b.n	8004326 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	3212      	adds	r2, #18
 800430e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004312:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3301      	adds	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d9ed      	bls.n	8004308 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2210      	movs	r2, #16
 8004336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	ffff2f3e 	.word	0xffff2f3e

08004350 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e03a      	b.n	80043ea <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800437a:	2b40      	cmp	r3, #64	@ 0x40
 800437c:	d134      	bne.n	80043e8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004386:	2201      	movs	r2, #1
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 f8c2 	bl	8005514 <ETH_Prepare_Tx_Descriptors>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439c:	f043 0202 	orr.w	r2, r3, #2
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e01f      	b.n	80043ea <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80043aa:	f3bf 8f4f 	dsb	sy
}
 80043ae:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d904      	bls.n	80043cc <HAL_ETH_Transmit_IT+0x7c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	1f1a      	subs	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3106      	adds	r1, #6
 80043d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043e0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b088      	sub	sp, #32
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0a2      	b.n	8004564 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004424:	2b40      	cmp	r3, #64	@ 0x40
 8004426:	d001      	beq.n	800442c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e09b      	b.n	8004564 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004430:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	3212      	adds	r2, #18
 8004438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004442:	f1c3 0304 	rsb	r3, r3, #4
 8004446:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004448:	e064      	b.n	8004514 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_ETH_ReadData+0x88>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d03a      	beq.n	80044f0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f007 fb32 	bl	800bb38 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2200      	movs	r2, #0
 80044ee:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3301      	adds	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d902      	bls.n	8004502 <HAL_ETH_ReadData+0x110>
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3b04      	subs	r3, #4
 8004500:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	3212      	adds	r2, #18
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	3301      	adds	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004518:	2b00      	cmp	r3, #0
 800451a:	db06      	blt.n	800452a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	429a      	cmp	r2, r3
 8004522:	d202      	bcs.n	800452a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d08f      	beq.n	800444a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f814 	bl	800456c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d108      	bne.n	8004562 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004578:	2301      	movs	r3, #1
 800457a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004580:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	3212      	adds	r2, #18
 8004588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800458c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004592:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004594:	e038      	b.n	8004608 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d112      	bne.n	80045c4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800459e:	f107 0308 	add.w	r3, r7, #8
 80045a2:	4618      	mov	r0, r3
 80045a4:	f007 fa98 	bl	800bad8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	74fb      	strb	r3, [r7, #19]
 80045b2:	e007      	b.n	80045c4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	461a      	mov	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	461a      	mov	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01e      	beq.n	8004608 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e003      	b.n	80045e4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80045e2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d902      	bls.n	80045f6 <ETH_UpdateDescriptor+0x8a>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	3b04      	subs	r3, #4
 80045f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	3212      	adds	r2, #18
 80045fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004600:	617b      	str	r3, [r7, #20]
      desccount--;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	3b01      	subs	r3, #1
 8004606:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <ETH_UpdateDescriptor+0xa8>
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1c0      	bne.n	8004596 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	429a      	cmp	r2, r3
 800461c:	d01b      	beq.n	8004656 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3303      	adds	r3, #3
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004628:	f3bf 8f5f 	dmb	sy
}
 800462c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6919      	ldr	r1, [r3, #16]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	18ca      	adds	r2, r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004646:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004656:	bf00      	nop
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3318      	adds	r3, #24
 800466a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800467c:	e047      	b.n	800470e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800467e:	2301      	movs	r3, #1
 8004680:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3b01      	subs	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3304      	adds	r3, #4
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3301      	adds	r3, #1
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d902      	bls.n	80046aa <HAL_ETH_ReleaseTxPacket+0x4c>
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	3b04      	subs	r3, #4
 80046a8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02c      	beq.n	800470e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68d9      	ldr	r1, [r3, #12]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	440b      	add	r3, r1
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	db1f      	blt.n	800470a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3304      	adds	r3, #4
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f007 fa96 	bl	800bc08 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3304      	adds	r3, #4
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d902      	bls.n	80046fc <HAL_ETH_ReleaseTxPacket+0x9e>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	3b04      	subs	r3, #4
 80046fa:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004708:	e001      	b.n	800470e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_ETH_ReleaseTxPacket+0xbc>
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1b1      	bne.n	800467e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004734:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800473e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004742:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004750:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8004752:	4b6d      	ldr	r3, [pc, #436]	@ (8004908 <HAL_ETH_IRQHandler+0x1e4>)
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d010      	beq.n	8004784 <HAL_ETH_IRQHandler+0x60>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004774:	461a      	mov	r2, r3
 8004776:	f248 0340 	movw	r3, #32832	@ 0x8040
 800477a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f006 fd38 	bl	800b1f4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <HAL_ETH_IRQHandler+0x8c>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a0:	461a      	mov	r2, r3
 80047a2:	f248 0301 	movw	r3, #32769	@ 0x8001
 80047a6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f006 fd32 	bl	800b214 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d047      	beq.n	800484a <HAL_ETH_IRQHandler+0x126>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d042      	beq.n	800484a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f043 0208 	orr.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01e      	beq.n	800481c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80047ea:	f241 1302 	movw	r3, #4354	@ 0x1102
 80047ee:	4013      	ands	r3, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800480a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800480e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	22e0      	movs	r2, #224	@ 0xe0
 8004816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800481a:	e013      	b.n	8004844 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004824:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004828:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483a:	461a      	mov	r2, r3
 800483c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8004840:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f006 fcf5 	bl	800b234 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800485a:	2b00      	cmp	r3, #0
 800485c:	d019      	beq.n	8004892 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	22e0      	movs	r2, #224	@ 0xe0
 8004880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f006 fcd5 	bl	800b234 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80048a4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f82c 	bl	800490c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00f      	beq.n	80048e6 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f821 	bl	8004920 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80048f0:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_ETH_IRQHandler+0x1e4>)
 80048f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f81b 	bl	8004934 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	58000080 	.word	0x58000080

0800490c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e03e      	b.n	80049e8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004972:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	055b      	lsls	r3, r3, #21
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f043 030c 	orr.w	r3, r3, #12
 8004996:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80049aa:	f7fd fa15 	bl	8001dd8 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80049b0:	e009      	b.n	80049c6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80049b2:	f7fd fa11 	bl	8001dd8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049c0:	d901      	bls.n	80049c6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e010      	b.n	80049e8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ed      	bne.n	80049b2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e03c      	b.n	8004a8c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a1a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	055b      	lsls	r3, r3, #21
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 030c 	bic.w	r3, r3, #12
 8004a3e:	f043 0304 	orr.w	r3, r3, #4
 8004a42:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <HAL_ETH_WritePHYRegister+0xa4>)
 8004a52:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004a56:	4a0f      	ldr	r2, [pc, #60]	@ (8004a94 <HAL_ETH_WritePHYRegister+0xa4>)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004a5e:	f7fd f9bb 	bl	8001dd8 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004a64:	e009      	b.n	8004a7a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004a66:	f7fd f9b7 	bl	8001dd8 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a74:	d901      	bls.n	8004a7a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e008      	b.n	8004a8c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ed      	bne.n	8004a66 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40028000 	.word	0x40028000

08004a98 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e1c3      	b.n	8004e34 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 020c 	and.w	r2, r3, #12
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bf0c      	ite	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	2300      	movne	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf14      	ite	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	2300      	moveq	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf14      	ite	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	2300      	moveq	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf14      	ite	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	2300      	moveq	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf14      	ite	ne
 8004c56:	2301      	movne	r3, #1
 8004c58:	2300      	moveq	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	0e5b      	lsrs	r3, r3, #25
 8004cf6:	f003 021f 	and.w	r2, r3, #31
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004dc0:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004dd0:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e00b      	b.n	8004e6c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d105      	bne.n	8004e6a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f871 	bl	8004f48 <ETH_SetMACConfig>

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e8e:	f001 fefd 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8004e92:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a1a      	ldr	r2, [pc, #104]	@ (8004f00 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d804      	bhi.n	8004ea6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e022      	b.n	8004eec <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a16      	ldr	r2, [pc, #88]	@ (8004f04 <HAL_ETH_SetMDIOClockRange+0x90>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d204      	bcs.n	8004eb8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e019      	b.n	8004eec <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a13      	ldr	r2, [pc, #76]	@ (8004f08 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d915      	bls.n	8004eec <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	@ (8004f0c <HAL_ETH_SetMDIOClockRange+0x98>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d804      	bhi.n	8004ed2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e00c      	b.n	8004eec <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d804      	bhi.n	8004ee4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e003      	b.n	8004eec <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004eea:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	02160ebf 	.word	0x02160ebf
 8004f04:	03938700 	.word	0x03938700
 8004f08:	05f5e0ff 	.word	0x05f5e0ff
 8004f0c:	08f0d17f 	.word	0x08f0d17f
 8004f10:	0ee6b27f 	.word	0x0ee6b27f

08004f14 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004f5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	791b      	ldrb	r3, [r3, #4]
 8004f60:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004f62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	7b1b      	ldrb	r3, [r3, #12]
 8004f68:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	7b5b      	ldrb	r3, [r3, #13]
 8004f70:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	7b9b      	ldrb	r3, [r3, #14]
 8004f78:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7bdb      	ldrb	r3, [r3, #15]
 8004f80:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	7c12      	ldrb	r2, [r2, #16]
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	d102      	bne.n	8004f92 <ETH_SetMACConfig+0x4a>
 8004f8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004f90:	e000      	b.n	8004f94 <ETH_SetMACConfig+0x4c>
 8004f92:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f94:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	7c52      	ldrb	r2, [r2, #17]
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	d102      	bne.n	8004fa4 <ETH_SetMACConfig+0x5c>
 8004f9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004fa2:	e000      	b.n	8004fa6 <ETH_SetMACConfig+0x5e>
 8004fa4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004fa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	7c9b      	ldrb	r3, [r3, #18]
 8004fac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004fae:	431a      	orrs	r2, r3
               macconf->Speed |
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fb4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004fba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	7f1b      	ldrb	r3, [r3, #28]
 8004fc0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004fc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	7f5b      	ldrb	r3, [r3, #29]
 8004fc8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	7f92      	ldrb	r2, [r2, #30]
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	d102      	bne.n	8004fda <ETH_SetMACConfig+0x92>
 8004fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fd8:	e000      	b.n	8004fdc <ETH_SetMACConfig+0x94>
 8004fda:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fdc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	7fdb      	ldrb	r3, [r3, #31]
 8004fe2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fe4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004fec:	2a00      	cmp	r2, #0
 8004fee:	d102      	bne.n	8004ff6 <ETH_SetMACConfig+0xae>
 8004ff0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ff4:	e000      	b.n	8004ff8 <ETH_SetMACConfig+0xb0>
 8004ff6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ff8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ffe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005006:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005008:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b56      	ldr	r3, [pc, #344]	@ (8005174 <ETH_SetMACConfig+0x22c>)
 800501a:	4013      	ands	r3, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	68f9      	ldr	r1, [r7, #12]
 8005022:	430b      	orrs	r3, r1
 8005024:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005032:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005034:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800503c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800503e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005046:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005048:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005050:	2a00      	cmp	r2, #0
 8005052:	d102      	bne.n	800505a <ETH_SetMACConfig+0x112>
 8005054:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005058:	e000      	b.n	800505c <ETH_SetMACConfig+0x114>
 800505a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800505c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b42      	ldr	r3, [pc, #264]	@ (8005178 <ETH_SetMACConfig+0x230>)
 800506e:	4013      	ands	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	430b      	orrs	r3, r1
 8005078:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005080:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	4b3a      	ldr	r3, [pc, #232]	@ (800517c <ETH_SetMACConfig+0x234>)
 8005092:	4013      	ands	r3, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	430b      	orrs	r3, r1
 800509c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80050a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80050b2:	2a00      	cmp	r2, #0
 80050b4:	d101      	bne.n	80050ba <ETH_SetMACConfig+0x172>
 80050b6:	2280      	movs	r2, #128	@ 0x80
 80050b8:	e000      	b.n	80050bc <ETH_SetMACConfig+0x174>
 80050ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80050bc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050ce:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80050d2:	4013      	ands	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	68f9      	ldr	r1, [r7, #12]
 80050da:	430b      	orrs	r3, r1
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80050e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80050ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fa:	f023 0103 	bic.w	r1, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	430a      	orrs	r2, r1
 8005106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005112:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800512e:	2a00      	cmp	r2, #0
 8005130:	d101      	bne.n	8005136 <ETH_SetMACConfig+0x1ee>
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	e000      	b.n	8005138 <ETH_SetMACConfig+0x1f0>
 8005136:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005138:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005140:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800514a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005158:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	430a      	orrs	r2, r1
 8005164:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	00048083 	.word	0x00048083
 8005178:	c0f88000 	.word	0xc0f88000
 800517c:	fffffef0 	.word	0xfffffef0

08005180 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b38      	ldr	r3, [pc, #224]	@ (8005278 <ETH_SetDMAConfig+0xf8>)
 8005196:	4013      	ands	r3, r2
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	6811      	ldr	r1, [r2, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051a6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	791b      	ldrb	r3, [r3, #4]
 80051ac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	7b1b      	ldrb	r3, [r3, #12]
 80051b8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	4b2c      	ldr	r3, [pc, #176]	@ (800527c <ETH_SetDMAConfig+0xfc>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	68f9      	ldr	r1, [r7, #12]
 80051d2:	430b      	orrs	r3, r1
 80051d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051d8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	7b5b      	ldrb	r3, [r3, #13]
 80051de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80051f4:	4b22      	ldr	r3, [pc, #136]	@ (8005280 <ETH_SetDMAConfig+0x100>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	430b      	orrs	r3, r1
 8005200:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005204:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	7d1b      	ldrb	r3, [r3, #20]
 8005210:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005212:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	7f5b      	ldrb	r3, [r3, #29]
 8005218:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005226:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800522a:	4b16      	ldr	r3, [pc, #88]	@ (8005284 <ETH_SetDMAConfig+0x104>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	68f9      	ldr	r1, [r7, #12]
 8005234:	430b      	orrs	r3, r1
 8005236:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800523a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7f1b      	ldrb	r3, [r3, #28]
 8005242:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005254:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <ETH_SetDMAConfig+0x108>)
 800525a:	4013      	ands	r3, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	68f9      	ldr	r1, [r7, #12]
 8005262:	430b      	orrs	r3, r1
 8005264:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005268:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	ffff87fd 	.word	0xffff87fd
 800527c:	ffff2ffe 	.word	0xffff2ffe
 8005280:	fffec000 	.word	0xfffec000
 8005284:	ffc0efef 	.word	0xffc0efef
 8005288:	7fc0ffff 	.word	0x7fc0ffff

0800528c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b0a4      	sub	sp, #144	@ 0x90
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800529a:	2300      	movs	r3, #0
 800529c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800529e:	2300      	movs	r3, #0
 80052a0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052cc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80052d8:	2300      	movs	r3, #0
 80052da:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80052de:	2300      	movs	r3, #0
 80052e0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80052e4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80052e8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80052f0:	2300      	movs	r3, #0
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005306:	2300      	movs	r3, #0
 8005308:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800530a:	2300      	movs	r3, #0
 800530c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800530e:	2300      	movs	r3, #0
 8005310:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005312:	2300      	movs	r3, #0
 8005314:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005324:	2320      	movs	r3, #32
 8005326:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005336:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800533a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800533c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005340:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005342:	2300      	movs	r3, #0
 8005344:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005348:	2302      	movs	r3, #2
 800534a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800534e:	2300      	movs	r3, #0
 8005350:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005366:	2300      	movs	r3, #0
 8005368:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005370:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fde6 	bl	8004f48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800537c:	2301      	movs	r3, #1
 800537e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005380:	2301      	movs	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005384:	2300      	movs	r3, #0
 8005386:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800538e:	2300      	movs	r3, #0
 8005390:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005392:	2300      	movs	r3, #0
 8005394:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005396:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800539a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800539c:	2300      	movs	r3, #0
 800539e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80053a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80053ac:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80053b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fee1 	bl	8005180 <ETH_SetDMAConfig>
}
 80053be:	bf00      	nop
 80053c0:	3790      	adds	r7, #144	@ 0x90
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e01d      	b.n	8005410 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68d9      	ldr	r1, [r3, #12]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	440b      	add	r3, r1
 80053e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2200      	movs	r2, #0
 80053f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2200      	movs	r2, #0
 80053fc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	3206      	adds	r2, #6
 8005406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3301      	adds	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d9de      	bls.n	80053d4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005424:	461a      	mov	r2, r3
 8005426:	2303      	movs	r3, #3
 8005428:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005438:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005448:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e023      	b.n	80054ae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6919      	ldr	r1, [r3, #16]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	440b      	add	r3, r1
 8005476:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2200      	movs	r2, #0
 800548e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2200      	movs	r2, #0
 8005494:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	3212      	adds	r2, #18
 80054a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d9d8      	bls.n	8005466 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054da:	461a      	mov	r2, r3
 80054dc:	2303      	movs	r3, #3
 80054de:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ee:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005502:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005514:	b480      	push	{r7}
 8005516:	b091      	sub	sp, #68	@ 0x44
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3318      	adds	r3, #24
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800553a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005556:	d007      	beq.n	8005568 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555c:	3304      	adds	r3, #4
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005568:	2302      	movs	r3, #2
 800556a:	e266      	b.n	8005a3a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d044      	beq.n	8005602 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	4b75      	ldr	r3, [pc, #468]	@ (8005754 <ETH_Prepare_Tx_Descriptors+0x240>)
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005584:	431a      	orrs	r2, r3
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80055a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d027      	beq.n	8005602 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	431a      	orrs	r2, r3
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	431a      	orrs	r2, r3
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80055f0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005600:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00e      	beq.n	800562c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	4b51      	ldr	r3, [pc, #324]	@ (8005758 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005614:	4013      	ands	r3, r2
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	6992      	ldr	r2, [r2, #24]
 800561a:	431a      	orrs	r2, r3
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d105      	bne.n	8005644 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d036      	beq.n	80056b2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005650:	f3bf 8f5f 	dmb	sy
}
 8005654:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005664:	3301      	adds	r3, #1
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566a:	2b03      	cmp	r3, #3
 800566c:	d902      	bls.n	8005674 <ETH_Prepare_Tx_Descriptors+0x160>
 800566e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005670:	3b04      	subs	r3, #4
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800567e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005680:	3301      	adds	r3, #1
 8005682:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005690:	d10f      	bne.n	80056b2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	6a3a      	ldr	r2, [r7, #32]
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800569c:	f3bf 8f5f 	dmb	sy
}
 80056a0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80056ae:	2302      	movs	r3, #2
 80056b0:	e1c3      	b.n	8005a3a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	3301      	adds	r3, #1
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	4b24      	ldr	r3, [pc, #144]	@ (8005758 <ETH_Prepare_Tx_Descriptors+0x244>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056cc:	6852      	ldr	r2, [r2, #4]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <ETH_Prepare_Tx_Descriptors+0x248>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f6:	6852      	ldr	r2, [r2, #4]
 80056f8:	0412      	lsls	r2, r2, #16
 80056fa:	431a      	orrs	r2, r3
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	e008      	b.n	8005714 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	4b13      	ldr	r3, [pc, #76]	@ (800575c <ETH_Prepare_Tx_Descriptors+0x248>)
 800570e:	4013      	ands	r3, r2
 8005710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005712:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b00      	cmp	r3, #0
 800571e:	d021      	beq.n	8005764 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	04db      	lsls	r3, r3, #19
 800572e:	431a      	orrs	r2, r3
 8005730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005732:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800573a:	4013      	ands	r3, r2
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	69d2      	ldr	r2, [r2, #28]
 8005740:	431a      	orrs	r2, r3
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e02e      	b.n	80057b2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8005754:	ffff0000 	.word	0xffff0000
 8005758:	ffffc000 	.word	0xffffc000
 800575c:	c000ffff 	.word	0xc000ffff
 8005760:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	4b7b      	ldr	r3, [pc, #492]	@ (8005958 <ETH_Prepare_Tx_Descriptors+0x444>)
 800576a:	4013      	ands	r3, r2
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	6852      	ldr	r2, [r2, #4]
 8005770:	431a      	orrs	r2, r3
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	431a      	orrs	r2, r3
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ca:	431a      	orrs	r2, r3
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80057e8:	f3bf 8f5f 	dmb	sy
}
 80057ec:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80da 	beq.w	80059bc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	431a      	orrs	r2, r3
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800581a:	e0cf      	b.n	80059bc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582a:	3301      	adds	r3, #1
 800582c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800582e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005830:	2b03      	cmp	r3, #3
 8005832:	d902      	bls.n	800583a <ETH_Prepare_Tx_Descriptors+0x326>
 8005834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005836:	3b04      	subs	r3, #4
 8005838:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585c:	d007      	beq.n	800586e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800585e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005862:	3304      	adds	r3, #4
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d029      	beq.n	80058c2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800587c:	2300      	movs	r3, #0
 800587e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005880:	e019      	b.n	80058b6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005882:	f3bf 8f5f 	dmb	sy
}
 8005886:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005896:	3301      	adds	r3, #1
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589c:	2b03      	cmp	r3, #3
 800589e:	d902      	bls.n	80058a6 <ETH_Prepare_Tx_Descriptors+0x392>
 80058a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a2:	3b04      	subs	r3, #4
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80058b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b2:	3301      	adds	r3, #1
 80058b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d3e1      	bcc.n	8005882 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	e0bb      	b.n	8005a3a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80058c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c4:	3301      	adds	r3, #1
 80058c6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80058c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80058ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	4b1f      	ldr	r3, [pc, #124]	@ (800595c <ETH_Prepare_Tx_Descriptors+0x448>)
 80058de:	4013      	ands	r3, r2
 80058e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e2:	6852      	ldr	r2, [r2, #4]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d012      	beq.n	8005918 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	4b16      	ldr	r3, [pc, #88]	@ (8005960 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005908:	4013      	ands	r3, r2
 800590a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800590c:	6852      	ldr	r2, [r2, #4]
 800590e:	0412      	lsls	r2, r2, #16
 8005910:	431a      	orrs	r2, r3
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	609a      	str	r2, [r3, #8]
 8005916:	e008      	b.n	800592a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	2200      	movs	r2, #0
 800591c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	4b0f      	ldr	r3, [pc, #60]	@ (8005960 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005924:	4013      	ands	r3, r2
 8005926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005928:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	d018      	beq.n	8005968 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <ETH_Prepare_Tx_Descriptors+0x450>)
 800593c:	4013      	ands	r3, r2
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	69d2      	ldr	r2, [r2, #28]
 8005942:	431a      	orrs	r2, r3
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	e020      	b.n	8005998 <ETH_Prepare_Tx_Descriptors+0x484>
 8005956:	bf00      	nop
 8005958:	ffff8000 	.word	0xffff8000
 800595c:	ffffc000 	.word	0xffffc000
 8005960:	c000ffff 	.word	0xc000ffff
 8005964:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	4b36      	ldr	r3, [pc, #216]	@ (8005a48 <ETH_Prepare_Tx_Descriptors+0x534>)
 800596e:	4013      	ands	r3, r2
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	6852      	ldr	r2, [r2, #4]
 8005974:	431a      	orrs	r2, r3
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	431a      	orrs	r2, r3
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	3301      	adds	r3, #1
 800599c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800599e:	f3bf 8f5f 	dmb	sy
}
 80059a2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f47f af2b 	bne.w	800581c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d006      	beq.n	80059da <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	e005      	b.n	80059e6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fa:	3304      	adds	r3, #4
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a06:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a08:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a0e:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005a10:	61fb      	str	r3, [r7, #28]
 8005a12:	2301      	movs	r3, #1
 8005a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f383 8810 	msr	PRIMASK, r3
}
 8005a1c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	4413      	add	r3, r2
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f383 8810 	msr	PRIMASK, r3
}
 8005a36:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3744      	adds	r7, #68	@ 0x44
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	ffff8000 	.word	0xffff8000

08005a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b089      	sub	sp, #36	@ 0x24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a5a:	4b86      	ldr	r3, [pc, #536]	@ (8005c74 <HAL_GPIO_Init+0x228>)
 8005a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a5e:	e18c      	b.n	8005d7a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	2101      	movs	r1, #1
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 817e 	beq.w	8005d74 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d005      	beq.n	8005a90 <HAL_GPIO_Init+0x44>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d130      	bne.n	8005af2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	f003 0201 	and.w	r2, r3, #1
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d017      	beq.n	8005b2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	2203      	movs	r2, #3
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d123      	bne.n	8005b82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	08da      	lsrs	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3208      	adds	r2, #8
 8005b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	220f      	movs	r2, #15
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	08da      	lsrs	r2, r3, #3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3208      	adds	r2, #8
 8005b7c:	69b9      	ldr	r1, [r7, #24]
 8005b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0203 	and.w	r2, r3, #3
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 80d8 	beq.w	8005d74 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005c78 <HAL_GPIO_Init+0x22c>)
 8005bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bca:	4a2b      	ldr	r2, [pc, #172]	@ (8005c78 <HAL_GPIO_Init+0x22c>)
 8005bcc:	f043 0302 	orr.w	r3, r3, #2
 8005bd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005bd4:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <HAL_GPIO_Init+0x22c>)
 8005bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005be2:	4a26      	ldr	r2, [pc, #152]	@ (8005c7c <HAL_GPIO_Init+0x230>)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	3302      	adds	r3, #2
 8005bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1d      	ldr	r2, [pc, #116]	@ (8005c80 <HAL_GPIO_Init+0x234>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04a      	beq.n	8005ca4 <HAL_GPIO_Init+0x258>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	@ (8005c84 <HAL_GPIO_Init+0x238>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02b      	beq.n	8005c6e <HAL_GPIO_Init+0x222>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1b      	ldr	r2, [pc, #108]	@ (8005c88 <HAL_GPIO_Init+0x23c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d025      	beq.n	8005c6a <HAL_GPIO_Init+0x21e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1a      	ldr	r2, [pc, #104]	@ (8005c8c <HAL_GPIO_Init+0x240>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01f      	beq.n	8005c66 <HAL_GPIO_Init+0x21a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a19      	ldr	r2, [pc, #100]	@ (8005c90 <HAL_GPIO_Init+0x244>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d019      	beq.n	8005c62 <HAL_GPIO_Init+0x216>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a18      	ldr	r2, [pc, #96]	@ (8005c94 <HAL_GPIO_Init+0x248>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_GPIO_Init+0x212>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a17      	ldr	r2, [pc, #92]	@ (8005c98 <HAL_GPIO_Init+0x24c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00d      	beq.n	8005c5a <HAL_GPIO_Init+0x20e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <HAL_GPIO_Init+0x250>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <HAL_GPIO_Init+0x20a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <HAL_GPIO_Init+0x254>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d101      	bne.n	8005c52 <HAL_GPIO_Init+0x206>
 8005c4e:	2309      	movs	r3, #9
 8005c50:	e029      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c52:	230a      	movs	r3, #10
 8005c54:	e027      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c56:	2307      	movs	r3, #7
 8005c58:	e025      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c5a:	2306      	movs	r3, #6
 8005c5c:	e023      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c5e:	2305      	movs	r3, #5
 8005c60:	e021      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c62:	2304      	movs	r3, #4
 8005c64:	e01f      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c66:	2303      	movs	r3, #3
 8005c68:	e01d      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e01b      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e019      	b.n	8005ca6 <HAL_GPIO_Init+0x25a>
 8005c72:	bf00      	nop
 8005c74:	58000080 	.word	0x58000080
 8005c78:	58024400 	.word	0x58024400
 8005c7c:	58000400 	.word	0x58000400
 8005c80:	58020000 	.word	0x58020000
 8005c84:	58020400 	.word	0x58020400
 8005c88:	58020800 	.word	0x58020800
 8005c8c:	58020c00 	.word	0x58020c00
 8005c90:	58021000 	.word	0x58021000
 8005c94:	58021400 	.word	0x58021400
 8005c98:	58021800 	.word	0x58021800
 8005c9c:	58021c00 	.word	0x58021c00
 8005ca0:	58022400 	.word	0x58022400
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	f002 0203 	and.w	r2, r2, #3
 8005cac:	0092      	lsls	r2, r2, #2
 8005cae:	4093      	lsls	r3, r2
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cb6:	4938      	ldr	r1, [pc, #224]	@ (8005d98 <HAL_GPIO_Init+0x34c>)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4013      	ands	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3301      	adds	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f47f ae6b 	bne.w	8005a60 <HAL_GPIO_Init+0x14>
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	3724      	adds	r7, #36	@ 0x24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	58000400 	.word	0x58000400

08005d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	807b      	strh	r3, [r7, #2]
 8005da8:	4613      	mov	r3, r2
 8005daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dac:	787b      	ldrb	r3, [r7, #1]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005db8:	e003      	b.n	8005dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dba:	887b      	ldrh	r3, [r7, #2]
 8005dbc:	041a      	lsls	r2, r3, #16
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	619a      	str	r2, [r3, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ddc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005de8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa ff0b 	bl	8000c10 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e0c:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <HAL_PWREx_ConfigSupply+0x70>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d00a      	beq.n	8005e2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e18:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <HAL_PWREx_ConfigSupply+0x70>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d001      	beq.n	8005e2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e01f      	b.n	8005e6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e01d      	b.n	8005e6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e2e:	4b11      	ldr	r3, [pc, #68]	@ (8005e74 <HAL_PWREx_ConfigSupply+0x70>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f023 0207 	bic.w	r2, r3, #7
 8005e36:	490f      	ldr	r1, [pc, #60]	@ (8005e74 <HAL_PWREx_ConfigSupply+0x70>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e3e:	f7fb ffcb 	bl	8001dd8 <HAL_GetTick>
 8005e42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e44:	e009      	b.n	8005e5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e46:	f7fb ffc7 	bl	8001dd8 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e54:	d901      	bls.n	8005e5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e007      	b.n	8005e6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e5a:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_PWREx_ConfigSupply+0x70>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e66:	d1ee      	bne.n	8005e46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	58024800 	.word	0x58024800

08005e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08c      	sub	sp, #48	@ 0x30
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e3c8      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8087 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e98:	4b88      	ldr	r3, [pc, #544]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ea2:	4b86      	ldr	r3, [pc, #536]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d007      	beq.n	8005ebe <HAL_RCC_OscConfig+0x46>
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	2b18      	cmp	r3, #24
 8005eb2:	d110      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x5e>
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d06c      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x12c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d168      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e3a2      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ede:	d106      	bne.n	8005eee <HAL_RCC_OscConfig+0x76>
 8005ee0:	4b76      	ldr	r3, [pc, #472]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a75      	ldr	r2, [pc, #468]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e02e      	b.n	8005f4c <HAL_RCC_OscConfig+0xd4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10c      	bne.n	8005f10 <HAL_RCC_OscConfig+0x98>
 8005ef6:	4b71      	ldr	r3, [pc, #452]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a70      	ldr	r2, [pc, #448]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	4b6e      	ldr	r3, [pc, #440]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a6d      	ldr	r2, [pc, #436]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e01d      	b.n	8005f4c <HAL_RCC_OscConfig+0xd4>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0xbc>
 8005f1a:	4b68      	ldr	r3, [pc, #416]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a67      	ldr	r2, [pc, #412]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b65      	ldr	r3, [pc, #404]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a64      	ldr	r2, [pc, #400]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e00b      	b.n	8005f4c <HAL_RCC_OscConfig+0xd4>
 8005f34:	4b61      	ldr	r3, [pc, #388]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a60      	ldr	r2, [pc, #384]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	4b5e      	ldr	r3, [pc, #376]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a5d      	ldr	r2, [pc, #372]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fb ff40 	bl	8001dd8 <HAL_GetTick>
 8005f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fb ff3c 	bl	8001dd8 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	@ 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e356      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f6e:	4b53      	ldr	r3, [pc, #332]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0xe4>
 8005f7a:	e014      	b.n	8005fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fb ff2c 	bl	8001dd8 <HAL_GetTick>
 8005f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fb ff28 	bl	8001dd8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	@ 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e342      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f96:	4b49      	ldr	r3, [pc, #292]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x10c>
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 808c 	beq.w	80060cc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb4:	4b41      	ldr	r3, [pc, #260]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_RCC_OscConfig+0x162>
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2b18      	cmp	r3, #24
 8005fce:	d137      	bne.n	8006040 <HAL_RCC_OscConfig+0x1c8>
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d132      	bne.n	8006040 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fda:	4b38      	ldr	r3, [pc, #224]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x17a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e314      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ff2:	4b32      	ldr	r3, [pc, #200]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 0219 	bic.w	r2, r3, #25
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	492f      	ldr	r1, [pc, #188]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8006000:	4313      	orrs	r3, r2
 8006002:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fb fee8 	bl	8001dd8 <HAL_GetTick>
 8006008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600c:	f7fb fee4 	bl	8001dd8 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e2fe      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800601e:	4b27      	ldr	r3, [pc, #156]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602a:	4b24      	ldr	r3, [pc, #144]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	061b      	lsls	r3, r3, #24
 8006038:	4920      	ldr	r1, [pc, #128]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 800603a:	4313      	orrs	r3, r2
 800603c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800603e:	e045      	b.n	80060cc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d026      	beq.n	8006096 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006048:	4b1c      	ldr	r3, [pc, #112]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 0219 	bic.w	r2, r3, #25
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4919      	ldr	r1, [pc, #100]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8006056:	4313      	orrs	r3, r2
 8006058:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605a:	f7fb febd 	bl	8001dd8 <HAL_GetTick>
 800605e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006062:	f7fb feb9 	bl	8001dd8 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e2d3      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006074:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f0      	beq.n	8006062 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006080:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	490b      	ldr	r1, [pc, #44]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]
 8006094:	e01a      	b.n	80060cc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006096:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a08      	ldr	r2, [pc, #32]	@ (80060bc <HAL_RCC_OscConfig+0x244>)
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fb fe99 	bl	8001dd8 <HAL_GetTick>
 80060a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060aa:	f7fb fe95 	bl	8001dd8 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d903      	bls.n	80060c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e2af      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
 80060bc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060c0:	4b96      	ldr	r3, [pc, #600]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1ee      	bne.n	80060aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d06a      	beq.n	80061ae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d8:	4b90      	ldr	r3, [pc, #576]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060e2:	4b8e      	ldr	r3, [pc, #568]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d007      	beq.n	80060fe <HAL_RCC_OscConfig+0x286>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b18      	cmp	r3, #24
 80060f2:	d11b      	bne.n	800612c <HAL_RCC_OscConfig+0x2b4>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d116      	bne.n	800612c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060fe:	4b87      	ldr	r3, [pc, #540]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_RCC_OscConfig+0x29e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	2b80      	cmp	r3, #128	@ 0x80
 8006110:	d001      	beq.n	8006116 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e282      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006116:	4b81      	ldr	r3, [pc, #516]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	061b      	lsls	r3, r3, #24
 8006124:	497d      	ldr	r1, [pc, #500]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006126:	4313      	orrs	r3, r2
 8006128:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800612a:	e040      	b.n	80061ae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d023      	beq.n	800617c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006134:	4b79      	ldr	r3, [pc, #484]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a78      	ldr	r2, [pc, #480]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 800613a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800613e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fb fe4a 	bl	8001dd8 <HAL_GetTick>
 8006144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006148:	f7fb fe46 	bl	8001dd8 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e260      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800615a:	4b70      	ldr	r3, [pc, #448]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006166:	4b6d      	ldr	r3, [pc, #436]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	061b      	lsls	r3, r3, #24
 8006174:	4969      	ldr	r1, [pc, #420]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	60cb      	str	r3, [r1, #12]
 800617a:	e018      	b.n	80061ae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800617c:	4b67      	ldr	r3, [pc, #412]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a66      	ldr	r2, [pc, #408]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fb fe26 	bl	8001dd8 <HAL_GetTick>
 800618c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006190:	f7fb fe22 	bl	8001dd8 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e23c      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061a2:	4b5e      	ldr	r3, [pc, #376]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d036      	beq.n	8006228 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d019      	beq.n	80061f6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c2:	4b56      	ldr	r3, [pc, #344]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80061c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c6:	4a55      	ldr	r2, [pc, #340]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ce:	f7fb fe03 	bl	8001dd8 <HAL_GetTick>
 80061d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d6:	f7fb fdff 	bl	8001dd8 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e219      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061e8:	4b4c      	ldr	r3, [pc, #304]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80061ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0x35e>
 80061f4:	e018      	b.n	8006228 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f6:	4b49      	ldr	r3, [pc, #292]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80061f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fa:	4a48      	ldr	r2, [pc, #288]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006202:	f7fb fde9 	bl	8001dd8 <HAL_GetTick>
 8006206:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800620a:	f7fb fde5 	bl	8001dd8 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e1ff      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800621c:	4b3f      	ldr	r3, [pc, #252]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 800621e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f0      	bne.n	800620a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d036      	beq.n	80062a2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d019      	beq.n	8006270 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800623c:	4b37      	ldr	r3, [pc, #220]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a36      	ldr	r2, [pc, #216]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006242:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006246:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006248:	f7fb fdc6 	bl	8001dd8 <HAL_GetTick>
 800624c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006250:	f7fb fdc2 	bl	8001dd8 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e1dc      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006262:	4b2e      	ldr	r3, [pc, #184]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x3d8>
 800626e:	e018      	b.n	80062a2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006270:	4b2a      	ldr	r3, [pc, #168]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a29      	ldr	r2, [pc, #164]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800627a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800627c:	f7fb fdac 	bl	8001dd8 <HAL_GetTick>
 8006280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006284:	f7fb fda8 	bl	8001dd8 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e1c2      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006296:	4b21      	ldr	r3, [pc, #132]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8086 	beq.w	80063bc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006320 <HAL_RCC_OscConfig+0x4a8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006320 <HAL_RCC_OscConfig+0x4a8>)
 80062b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062bc:	f7fb fd8c 	bl	8001dd8 <HAL_GetTick>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c4:	f7fb fd88 	bl	8001dd8 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	@ 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e1a2      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062d6:	4b12      	ldr	r3, [pc, #72]	@ (8006320 <HAL_RCC_OscConfig+0x4a8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d106      	bne.n	80062f8 <HAL_RCC_OscConfig+0x480>
 80062ea:	4b0c      	ldr	r3, [pc, #48]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	4a0b      	ldr	r2, [pc, #44]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f6:	e032      	b.n	800635e <HAL_RCC_OscConfig+0x4e6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d111      	bne.n	8006324 <HAL_RCC_OscConfig+0x4ac>
 8006300:	4b06      	ldr	r3, [pc, #24]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006304:	4a05      	ldr	r2, [pc, #20]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	6713      	str	r3, [r2, #112]	@ 0x70
 800630c:	4b03      	ldr	r3, [pc, #12]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006310:	4a02      	ldr	r2, [pc, #8]	@ (800631c <HAL_RCC_OscConfig+0x4a4>)
 8006312:	f023 0304 	bic.w	r3, r3, #4
 8006316:	6713      	str	r3, [r2, #112]	@ 0x70
 8006318:	e021      	b.n	800635e <HAL_RCC_OscConfig+0x4e6>
 800631a:	bf00      	nop
 800631c:	58024400 	.word	0x58024400
 8006320:	58024800 	.word	0x58024800
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b05      	cmp	r3, #5
 800632a:	d10c      	bne.n	8006346 <HAL_RCC_OscConfig+0x4ce>
 800632c:	4b83      	ldr	r3, [pc, #524]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	4a82      	ldr	r2, [pc, #520]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006332:	f043 0304 	orr.w	r3, r3, #4
 8006336:	6713      	str	r3, [r2, #112]	@ 0x70
 8006338:	4b80      	ldr	r3, [pc, #512]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633c:	4a7f      	ldr	r2, [pc, #508]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	6713      	str	r3, [r2, #112]	@ 0x70
 8006344:	e00b      	b.n	800635e <HAL_RCC_OscConfig+0x4e6>
 8006346:	4b7d      	ldr	r3, [pc, #500]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634a:	4a7c      	ldr	r2, [pc, #496]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	6713      	str	r3, [r2, #112]	@ 0x70
 8006352:	4b7a      	ldr	r3, [pc, #488]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006356:	4a79      	ldr	r2, [pc, #484]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006358:	f023 0304 	bic.w	r3, r3, #4
 800635c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d015      	beq.n	8006392 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006366:	f7fb fd37 	bl	8001dd8 <HAL_GetTick>
 800636a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800636c:	e00a      	b.n	8006384 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fb fd33 	bl	8001dd8 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e14b      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006384:	4b6d      	ldr	r3, [pc, #436]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0ee      	beq.n	800636e <HAL_RCC_OscConfig+0x4f6>
 8006390:	e014      	b.n	80063bc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006392:	f7fb fd21 	bl	8001dd8 <HAL_GetTick>
 8006396:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006398:	e00a      	b.n	80063b0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800639a:	f7fb fd1d 	bl	8001dd8 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e135      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063b0:	4b62      	ldr	r3, [pc, #392]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ee      	bne.n	800639a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 812a 	beq.w	800661a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063c6:	4b5d      	ldr	r3, [pc, #372]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ce:	2b18      	cmp	r3, #24
 80063d0:	f000 80ba 	beq.w	8006548 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d8:	2b02      	cmp	r3, #2
 80063da:	f040 8095 	bne.w	8006508 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063de:	4b57      	ldr	r3, [pc, #348]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a56      	ldr	r2, [pc, #344]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80063e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ea:	f7fb fcf5 	bl	8001dd8 <HAL_GetTick>
 80063ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f2:	f7fb fcf1 	bl	8001dd8 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e10b      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006404:	4b4d      	ldr	r3, [pc, #308]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f0      	bne.n	80063f2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006410:	4b4a      	ldr	r3, [pc, #296]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006414:	4b4a      	ldr	r3, [pc, #296]	@ (8006540 <HAL_RCC_OscConfig+0x6c8>)
 8006416:	4013      	ands	r3, r2
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006420:	0112      	lsls	r2, r2, #4
 8006422:	430a      	orrs	r2, r1
 8006424:	4945      	ldr	r1, [pc, #276]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006426:	4313      	orrs	r3, r2
 8006428:	628b      	str	r3, [r1, #40]	@ 0x28
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642e:	3b01      	subs	r3, #1
 8006430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006438:	3b01      	subs	r3, #1
 800643a:	025b      	lsls	r3, r3, #9
 800643c:	b29b      	uxth	r3, r3
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	3b01      	subs	r3, #1
 8006446:	041b      	lsls	r3, r3, #16
 8006448:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006452:	3b01      	subs	r3, #1
 8006454:	061b      	lsls	r3, r3, #24
 8006456:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800645a:	4938      	ldr	r1, [pc, #224]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006460:	4b36      	ldr	r3, [pc, #216]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	4a35      	ldr	r2, [pc, #212]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800646c:	4b33      	ldr	r3, [pc, #204]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800646e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006470:	4b34      	ldr	r3, [pc, #208]	@ (8006544 <HAL_RCC_OscConfig+0x6cc>)
 8006472:	4013      	ands	r3, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006478:	00d2      	lsls	r2, r2, #3
 800647a:	4930      	ldr	r1, [pc, #192]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800647c:	4313      	orrs	r3, r2
 800647e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006480:	4b2e      	ldr	r3, [pc, #184]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	f023 020c 	bic.w	r2, r3, #12
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	492b      	ldr	r1, [pc, #172]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006492:	4b2a      	ldr	r3, [pc, #168]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	f023 0202 	bic.w	r2, r3, #2
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	4927      	ldr	r1, [pc, #156]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064a4:	4b25      	ldr	r3, [pc, #148]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	4a24      	ldr	r2, [pc, #144]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b0:	4b22      	ldr	r3, [pc, #136]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	4a21      	ldr	r2, [pc, #132]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064bc:	4b1f      	ldr	r3, [pc, #124]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	4a1e      	ldr	r2, [pc, #120]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80064c8:	4b1c      	ldr	r3, [pc, #112]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	4a1b      	ldr	r2, [pc, #108]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064d4:	4b19      	ldr	r3, [pc, #100]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a18      	ldr	r2, [pc, #96]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fb fc7a 	bl	8001dd8 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e8:	f7fb fc76 	bl	8001dd8 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e090      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064fa:	4b10      	ldr	r3, [pc, #64]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x670>
 8006506:	e088      	b.n	800661a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006508:	4b0c      	ldr	r3, [pc, #48]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0b      	ldr	r2, [pc, #44]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 800650e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006514:	f7fb fc60 	bl	8001dd8 <HAL_GetTick>
 8006518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651c:	f7fb fc5c 	bl	8001dd8 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e076      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800652e:	4b03      	ldr	r3, [pc, #12]	@ (800653c <HAL_RCC_OscConfig+0x6c4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x6a4>
 800653a:	e06e      	b.n	800661a <HAL_RCC_OscConfig+0x7a2>
 800653c:	58024400 	.word	0x58024400
 8006540:	fffffc0c 	.word	0xfffffc0c
 8006544:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006548:	4b36      	ldr	r3, [pc, #216]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800654e:	4b35      	ldr	r3, [pc, #212]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b01      	cmp	r3, #1
 800655a:	d031      	beq.n	80065c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f003 0203 	and.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006566:	429a      	cmp	r2, r3
 8006568:	d12a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006576:	429a      	cmp	r2, r3
 8006578:	d122      	bne.n	80065c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d11a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0a5b      	lsrs	r3, r3, #9
 800658e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006598:	429a      	cmp	r2, r3
 800659a:	d111      	bne.n	80065c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d108      	bne.n	80065c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e02b      	b.n	800661c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80065c4:	4b17      	ldr	r3, [pc, #92]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	08db      	lsrs	r3, r3, #3
 80065ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d01f      	beq.n	800661a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 80065dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065de:	4a11      	ldr	r2, [pc, #68]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065e6:	f7fb fbf7 	bl	8001dd8 <HAL_GetTick>
 80065ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065ec:	bf00      	nop
 80065ee:	f7fb fbf3 	bl	8001dd8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d0f9      	beq.n	80065ee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 80065fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <HAL_RCC_OscConfig+0x7b0>)
 8006600:	4013      	ands	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006606:	00d2      	lsls	r2, r2, #3
 8006608:	4906      	ldr	r1, [pc, #24]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 800660a:	4313      	orrs	r3, r2
 800660c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800660e:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	4a04      	ldr	r2, [pc, #16]	@ (8006624 <HAL_RCC_OscConfig+0x7ac>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3730      	adds	r7, #48	@ 0x30
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	58024400 	.word	0x58024400
 8006628:	ffff0007 	.word	0xffff0007

0800662c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e19c      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006640:	4b8a      	ldr	r3, [pc, #552]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d910      	bls.n	8006670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b87      	ldr	r3, [pc, #540]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 020f 	bic.w	r2, r3, #15
 8006656:	4985      	ldr	r1, [pc, #532]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	4b83      	ldr	r3, [pc, #524]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e184      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d010      	beq.n	800669e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	4b7b      	ldr	r3, [pc, #492]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006688:	429a      	cmp	r2, r3
 800668a:	d908      	bls.n	800669e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800668c:	4b78      	ldr	r3, [pc, #480]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	4975      	ldr	r1, [pc, #468]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800669a:	4313      	orrs	r3, r2
 800669c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d010      	beq.n	80066cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	4b70      	ldr	r3, [pc, #448]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d908      	bls.n	80066cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	496a      	ldr	r1, [pc, #424]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	4b64      	ldr	r3, [pc, #400]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d908      	bls.n	80066fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066e8:	4b61      	ldr	r3, [pc, #388]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	495e      	ldr	r1, [pc, #376]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	4b59      	ldr	r3, [pc, #356]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006712:	429a      	cmp	r2, r3
 8006714:	d908      	bls.n	8006728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006716:	4b56      	ldr	r3, [pc, #344]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	4953      	ldr	r1, [pc, #332]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	4b4d      	ldr	r3, [pc, #308]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	429a      	cmp	r2, r3
 8006742:	d908      	bls.n	8006756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b4a      	ldr	r3, [pc, #296]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f023 020f 	bic.w	r2, r3, #15
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4947      	ldr	r1, [pc, #284]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006752:	4313      	orrs	r3, r2
 8006754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d055      	beq.n	800680e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006762:	4b43      	ldr	r3, [pc, #268]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4940      	ldr	r1, [pc, #256]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006770:	4313      	orrs	r3, r2
 8006772:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800677c:	4b3c      	ldr	r3, [pc, #240]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d121      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0f6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006794:	4b36      	ldr	r3, [pc, #216]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d115      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0ea      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067ac:	4b30      	ldr	r3, [pc, #192]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0de      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0d6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067cc:	4b28      	ldr	r3, [pc, #160]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f023 0207 	bic.w	r2, r3, #7
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4925      	ldr	r1, [pc, #148]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fb fafb 	bl	8001dd8 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e6:	f7fb faf7 	bl	8001dd8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0be      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	429a      	cmp	r2, r3
 800680c:	d1eb      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d010      	beq.n	800683c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4b14      	ldr	r3, [pc, #80]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	429a      	cmp	r2, r3
 8006828:	d208      	bcs.n	800683c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800682a:	4b11      	ldr	r3, [pc, #68]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	490e      	ldr	r1, [pc, #56]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006838:	4313      	orrs	r3, r2
 800683a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800683c:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d214      	bcs.n	8006874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684a:	4b08      	ldr	r3, [pc, #32]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 020f 	bic.w	r2, r3, #15
 8006852:	4906      	ldr	r1, [pc, #24]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800685a:	4b04      	ldr	r3, [pc, #16]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d005      	beq.n	8006874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e086      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
 800686c:	52002000 	.word	0x52002000
 8006870:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	4b3f      	ldr	r3, [pc, #252]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800688c:	429a      	cmp	r2, r3
 800688e:	d208      	bcs.n	80068a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006890:	4b3c      	ldr	r3, [pc, #240]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	4939      	ldr	r1, [pc, #228]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	4b34      	ldr	r3, [pc, #208]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d208      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	492e      	ldr	r1, [pc, #184]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	4b28      	ldr	r3, [pc, #160]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d208      	bcs.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068ec:	4b25      	ldr	r3, [pc, #148]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4922      	ldr	r1, [pc, #136]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	4b1d      	ldr	r3, [pc, #116]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006916:	429a      	cmp	r2, r3
 8006918:	d208      	bcs.n	800692c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800691a:	4b1a      	ldr	r3, [pc, #104]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	4917      	ldr	r1, [pc, #92]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006928:	4313      	orrs	r3, r2
 800692a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800692c:	f000 f834 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b14      	ldr	r3, [pc, #80]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4912      	ldr	r1, [pc, #72]	@ (8006988 <HAL_RCC_ClockConfig+0x35c>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800694a:	4b0e      	ldr	r3, [pc, #56]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	4a0d      	ldr	r2, [pc, #52]	@ (8006988 <HAL_RCC_ClockConfig+0x35c>)
 8006954:	5cd3      	ldrb	r3, [r2, r3]
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <HAL_RCC_ClockConfig+0x360>)
 8006962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006964:	4a0a      	ldr	r2, [pc, #40]	@ (8006990 <HAL_RCC_ClockConfig+0x364>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800696a:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <HAL_RCC_ClockConfig+0x368>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fa fe76 	bl	8001660 <HAL_InitTick>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400
 8006988:	0801e3fc 	.word	0x0801e3fc
 800698c:	24004994 	.word	0x24004994
 8006990:	24004990 	.word	0x24004990
 8006994:	24004998 	.word	0x24004998

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	@ 0x24
 800699c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800699e:	4bb3      	ldr	r3, [pc, #716]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069a6:	2b18      	cmp	r3, #24
 80069a8:	f200 8155 	bhi.w	8006c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80069ac:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006c57 	.word	0x08006c57
 80069bc:	08006c57 	.word	0x08006c57
 80069c0:	08006c57 	.word	0x08006c57
 80069c4:	08006c57 	.word	0x08006c57
 80069c8:	08006c57 	.word	0x08006c57
 80069cc:	08006c57 	.word	0x08006c57
 80069d0:	08006c57 	.word	0x08006c57
 80069d4:	08006a3f 	.word	0x08006a3f
 80069d8:	08006c57 	.word	0x08006c57
 80069dc:	08006c57 	.word	0x08006c57
 80069e0:	08006c57 	.word	0x08006c57
 80069e4:	08006c57 	.word	0x08006c57
 80069e8:	08006c57 	.word	0x08006c57
 80069ec:	08006c57 	.word	0x08006c57
 80069f0:	08006c57 	.word	0x08006c57
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006c57 	.word	0x08006c57
 80069fc:	08006c57 	.word	0x08006c57
 8006a00:	08006c57 	.word	0x08006c57
 8006a04:	08006c57 	.word	0x08006c57
 8006a08:	08006c57 	.word	0x08006c57
 8006a0c:	08006c57 	.word	0x08006c57
 8006a10:	08006c57 	.word	0x08006c57
 8006a14:	08006a4b 	.word	0x08006a4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a18:	4b94      	ldr	r3, [pc, #592]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a24:	4b91      	ldr	r3, [pc, #580]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	08db      	lsrs	r3, r3, #3
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	4a90      	ldr	r2, [pc, #576]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006a36:	e111      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a38:	4b8d      	ldr	r3, [pc, #564]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a3a:	61bb      	str	r3, [r7, #24]
      break;
 8006a3c:	e10e      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a40:	61bb      	str	r3, [r7, #24]
      break;
 8006a42:	e10b      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a44:	4b8c      	ldr	r3, [pc, #560]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a46:	61bb      	str	r3, [r7, #24]
      break;
 8006a48:	e108      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a4a:	4b88      	ldr	r3, [pc, #544]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a54:	4b85      	ldr	r3, [pc, #532]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a60:	4b82      	ldr	r3, [pc, #520]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a6a:	4b80      	ldr	r3, [pc, #512]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80e1 	beq.w	8006c50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	f000 8083 	beq.w	8006b9c <HAL_RCC_GetSysClockFreq+0x204>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f200 80a1 	bhi.w	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x114>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d056      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006aaa:	e099      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aac:	4b6f      	ldr	r3, [pc, #444]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02d      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae2:	4b62      	ldr	r3, [pc, #392]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b12:	e087      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b26:	4b51      	ldr	r3, [pc, #324]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b56:	e065      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b40      	ldr	r3, [pc, #256]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b9a:	e043      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b2f      	ldr	r3, [pc, #188]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bde:	e021      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006c24:	4b11      	ldr	r3, [pc, #68]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	0a5b      	lsrs	r3, r3, #9
 8006c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2e:	3301      	adds	r3, #1
 8006c30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c48:	ee17 3a90 	vmov	r3, s15
 8006c4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c4e:	e005      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61bb      	str	r3, [r7, #24]
      break;
 8006c54:	e002      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c56:	4b07      	ldr	r3, [pc, #28]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c58:	61bb      	str	r3, [r7, #24]
      break;
 8006c5a:	bf00      	nop
  }

  return sysclockfreq;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	@ 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	03d09000 	.word	0x03d09000
 8006c74:	003d0900 	.word	0x003d0900
 8006c78:	007a1200 	.word	0x007a1200
 8006c7c:	46000000 	.word	0x46000000
 8006c80:	4c742400 	.word	0x4c742400
 8006c84:	4a742400 	.word	0x4a742400
 8006c88:	4af42400 	.word	0x4af42400

08006c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c92:	f7ff fe81 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006c96:	4602      	mov	r2, r0
 8006c98:	4b10      	ldr	r3, [pc, #64]	@ (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	0a1b      	lsrs	r3, r3, #8
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	490f      	ldr	r1, [pc, #60]	@ (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cba:	5cd3      	ldrb	r3, [r2, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	4a07      	ldr	r2, [pc, #28]	@ (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cca:	4a07      	ldr	r2, [pc, #28]	@ (8006ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	0801e3fc 	.word	0x0801e3fc
 8006ce4:	24004994 	.word	0x24004994
 8006ce8:	24004990 	.word	0x24004990

08006cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cf0:	f7ff ffcc 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	4904      	ldr	r1, [pc, #16]	@ (8006d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	0801e3fc 	.word	0x0801e3fc

08006d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	223f      	movs	r2, #63	@ 0x3f
 8006d26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d28:	4b1a      	ldr	r3, [pc, #104]	@ (8006d94 <HAL_RCC_GetClockConfig+0x7c>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0207 	and.w	r2, r3, #7
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006d34:	4b17      	ldr	r3, [pc, #92]	@ (8006d94 <HAL_RCC_GetClockConfig+0x7c>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006d40:	4b14      	ldr	r3, [pc, #80]	@ (8006d94 <HAL_RCC_GetClockConfig+0x7c>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f003 020f 	and.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006d4c:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <HAL_RCC_GetClockConfig+0x7c>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006d58:	4b0e      	ldr	r3, [pc, #56]	@ (8006d94 <HAL_RCC_GetClockConfig+0x7c>)
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006d64:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <HAL_RCC_GetClockConfig+0x7c>)
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006d70:	4b08      	ldr	r3, [pc, #32]	@ (8006d94 <HAL_RCC_GetClockConfig+0x7c>)
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d7c:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <HAL_RCC_GetClockConfig+0x80>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 020f 	and.w	r2, r3, #15
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	601a      	str	r2, [r3, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	58024400 	.word	0x58024400
 8006d98:	52002000 	.word	0x52002000

08006d9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da0:	b0c6      	sub	sp, #280	@ 0x118
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dae:	2300      	movs	r3, #0
 8006db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006dc0:	2500      	movs	r5, #0
 8006dc2:	ea54 0305 	orrs.w	r3, r4, r5
 8006dc6:	d049      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dd2:	d02f      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006dd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dd8:	d828      	bhi.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006dda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dde:	d01a      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006de0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006de4:	d822      	bhi.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dee:	d007      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006df0:	e01c      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df2:	4bab      	ldr	r3, [pc, #684]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	4aaa      	ldr	r2, [pc, #680]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dfe:	e01a      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	3308      	adds	r3, #8
 8006e06:	2102      	movs	r1, #2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 f967 	bl	80080dc <RCCEx_PLL2_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e14:	e00f      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1a:	3328      	adds	r3, #40	@ 0x28
 8006e1c:	2102      	movs	r1, #2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 fa0e 	bl	8008240 <RCCEx_PLL3_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e32:	e000      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e3e:	4b98      	ldr	r3, [pc, #608]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e4c:	4a94      	ldr	r2, [pc, #592]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006e68:	f04f 0900 	mov.w	r9, #0
 8006e6c:	ea58 0309 	orrs.w	r3, r8, r9
 8006e70:	d047      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d82a      	bhi.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006e99 	.word	0x08006e99
 8006e88:	08006ea7 	.word	0x08006ea7
 8006e8c:	08006ebd 	.word	0x08006ebd
 8006e90:	08006edb 	.word	0x08006edb
 8006e94:	08006edb 	.word	0x08006edb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b81      	ldr	r3, [pc, #516]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4a80      	ldr	r2, [pc, #512]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ea4:	e01a      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eaa:	3308      	adds	r3, #8
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 f914 	bl	80080dc <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eba:	e00f      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	3328      	adds	r3, #40	@ 0x28
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 f9bb 	bl	8008240 <RCCEx_PLL3_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ed0:	e004      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ed8:	e000      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ee4:	4b6e      	ldr	r3, [pc, #440]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee8:	f023 0107 	bic.w	r1, r3, #7
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef2:	4a6b      	ldr	r2, [pc, #428]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ef8:	e003      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006efe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006f0e:	f04f 0b00 	mov.w	fp, #0
 8006f12:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f16:	d05b      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f20:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006f24:	d03b      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006f26:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006f2a:	d834      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006f2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f30:	d037      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f36:	d82e      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006f38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f3c:	d033      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f42:	d828      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f48:	d01a      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f4e:	d822      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006f54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f58:	d007      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006f5a:	e01c      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5c:	4b50      	ldr	r3, [pc, #320]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	4a4f      	ldr	r2, [pc, #316]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f68:	e01e      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6e:	3308      	adds	r3, #8
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 f8b2 	bl	80080dc <RCCEx_PLL2_Config>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f7e:	e013      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f84:	3328      	adds	r3, #40	@ 0x28
 8006f86:	2100      	movs	r1, #0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 f959 	bl	8008240 <RCCEx_PLL3_Config>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f94:	e008      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f9c:	e004      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10b      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fc0:	4a37      	ldr	r2, [pc, #220]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc6:	e003      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fe6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006fea:	460b      	mov	r3, r1
 8006fec:	4313      	orrs	r3, r2
 8006fee:	d05d      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ff8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ffc:	d03b      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006ffe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007002:	d834      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007004:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007008:	d037      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800700a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800700e:	d82e      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007010:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007014:	d033      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007016:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800701a:	d828      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800701c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007020:	d01a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007026:	d822      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800702c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007030:	d007      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007032:	e01c      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007034:	4b1a      	ldr	r3, [pc, #104]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	4a19      	ldr	r2, [pc, #100]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800703a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800703e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007040:	e01e      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007046:	3308      	adds	r3, #8
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f846 	bl	80080dc <RCCEx_PLL2_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007056:	e013      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	3328      	adds	r3, #40	@ 0x28
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f8ed 	bl	8008240 <RCCEx_PLL3_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800706c:	e008      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007074:	e004      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007076:	bf00      	nop
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800707e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10d      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007088:	4b05      	ldr	r3, [pc, #20]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007094:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007098:	4a01      	ldr	r2, [pc, #4]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800709a:	430b      	orrs	r3, r1
 800709c:	6593      	str	r3, [r2, #88]	@ 0x58
 800709e:	e005      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80070a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80070b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070bc:	2300      	movs	r3, #0
 80070be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80070c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4313      	orrs	r3, r2
 80070ca:	d03a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d2:	2b30      	cmp	r3, #48	@ 0x30
 80070d4:	d01f      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80070d6:	2b30      	cmp	r3, #48	@ 0x30
 80070d8:	d819      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d00c      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d815      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d019      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d111      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ea:	4baa      	ldr	r3, [pc, #680]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	4aa9      	ldr	r2, [pc, #676]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80070f6:	e011      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fc:	3308      	adds	r3, #8
 80070fe:	2102      	movs	r1, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f000 ffeb 	bl	80080dc <RCCEx_PLL2_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800711a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007124:	4b9b      	ldr	r3, [pc, #620]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007128:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007132:	4a98      	ldr	r2, [pc, #608]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007134:	430b      	orrs	r3, r1
 8007136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007138:	e003      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800713e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800714e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007152:	2300      	movs	r3, #0
 8007154:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007158:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800715c:	460b      	mov	r3, r1
 800715e:	4313      	orrs	r3, r2
 8007160:	d051      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007168:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800716c:	d035      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800716e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007172:	d82e      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007174:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007178:	d031      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800717a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800717e:	d828      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007184:	d01a      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800718a:	d822      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007194:	d007      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007196:	e01c      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007198:	4b7e      	ldr	r3, [pc, #504]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719c:	4a7d      	ldr	r2, [pc, #500]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800719e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071a4:	e01c      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071aa:	3308      	adds	r3, #8
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 ff94 	bl	80080dc <RCCEx_PLL2_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071ba:	e011      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c0:	3328      	adds	r3, #40	@ 0x28
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 f83b 	bl	8008240 <RCCEx_PLL3_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071d0:	e006      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d8:	e002      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80071de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f6:	4a67      	ldr	r2, [pc, #412]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071f8:	430b      	orrs	r3, r1
 80071fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80071fc:	e003      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007202:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007212:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007216:	2300      	movs	r3, #0
 8007218:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800721c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007220:	460b      	mov	r3, r1
 8007222:	4313      	orrs	r3, r2
 8007224:	d053      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800722c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007230:	d033      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007232:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007236:	d82c      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007238:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800723c:	d02f      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800723e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007242:	d826      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007244:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007248:	d02b      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800724a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800724e:	d820      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007254:	d012      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800725a:	d81a      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d022      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007264:	d115      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726a:	3308      	adds	r3, #8
 800726c:	2101      	movs	r1, #1
 800726e:	4618      	mov	r0, r3
 8007270:	f000 ff34 	bl	80080dc <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800727a:	e015      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	3328      	adds	r3, #40	@ 0x28
 8007282:	2101      	movs	r1, #1
 8007284:	4618      	mov	r0, r3
 8007286:	f000 ffdb 	bl	8008240 <RCCEx_PLL3_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007290:	e00a      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007298:	e006      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800729a:	bf00      	nop
 800729c:	e004      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800729e:	bf00      	nop
 80072a0:	e002      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80072a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072b0:	4b38      	ldr	r3, [pc, #224]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072be:	4a35      	ldr	r2, [pc, #212]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80072c4:	e003      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80072da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072de:	2300      	movs	r3, #0
 80072e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072e8:	460b      	mov	r3, r1
 80072ea:	4313      	orrs	r3, r2
 80072ec:	d058      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072fa:	d033      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80072fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007300:	d82c      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007306:	d02f      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730c:	d826      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800730e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007312:	d02b      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007314:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007318:	d820      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731e:	d012      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007324:	d81a      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d022      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800732a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800732e:	d115      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	3308      	adds	r3, #8
 8007336:	2101      	movs	r1, #1
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fecf 	bl	80080dc <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007344:	e015      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734a:	3328      	adds	r3, #40	@ 0x28
 800734c:	2101      	movs	r1, #1
 800734e:	4618      	mov	r0, r3
 8007350:	f000 ff76 	bl	8008240 <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800735a:	e00a      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007362:	e006      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007364:	bf00      	nop
 8007366:	e004      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10e      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800737a:	4b06      	ldr	r3, [pc, #24]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800737e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800738a:	4a02      	ldr	r2, [pc, #8]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800738c:	430b      	orrs	r3, r1
 800738e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800739c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073b0:	2300      	movs	r3, #0
 80073b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80073b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4313      	orrs	r3, r2
 80073be:	d037      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ca:	d00e      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80073cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d0:	d816      	bhi.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d018      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80073d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073da:	d111      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073dc:	4bc4      	ldr	r3, [pc, #784]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	4ac3      	ldr	r2, [pc, #780]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073e8:	e00f      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	3308      	adds	r3, #8
 80073f0:	2101      	movs	r1, #1
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fe72 	bl	80080dc <RCCEx_PLL2_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073fe:	e004      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007412:	4bb7      	ldr	r3, [pc, #732]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007416:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007420:	4ab3      	ldr	r2, [pc, #716]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007422:	430b      	orrs	r3, r1
 8007424:	6513      	str	r3, [r2, #80]	@ 0x50
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800742c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800743c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007440:	2300      	movs	r3, #0
 8007442:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007446:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d039      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007456:	2b03      	cmp	r3, #3
 8007458:	d81c      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800745a:	a201      	add	r2, pc, #4	@ (adr r2, 8007460 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	0800749d 	.word	0x0800749d
 8007464:	08007471 	.word	0x08007471
 8007468:	0800747f 	.word	0x0800747f
 800746c:	0800749d 	.word	0x0800749d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007470:	4b9f      	ldr	r3, [pc, #636]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	4a9e      	ldr	r2, [pc, #632]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800747a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800747c:	e00f      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	3308      	adds	r3, #8
 8007484:	2102      	movs	r1, #2
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fe28 	bl	80080dc <RCCEx_PLL2_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007492:	e004      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800749a:	e000      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800749c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074a6:	4b92      	ldr	r3, [pc, #584]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074aa:	f023 0103 	bic.w	r1, r3, #3
 80074ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b4:	4a8e      	ldr	r2, [pc, #568]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074b6:	430b      	orrs	r3, r1
 80074b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074ba:	e003      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80074d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074de:	460b      	mov	r3, r1
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f000 8099 	beq.w	8007618 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074e6:	4b83      	ldr	r3, [pc, #524]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a82      	ldr	r2, [pc, #520]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074f2:	f7fa fc71 	bl	8001dd8 <HAL_GetTick>
 80074f6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074fa:	e00b      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074fc:	f7fa fc6c 	bl	8001dd8 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b64      	cmp	r3, #100	@ 0x64
 800750a:	d903      	bls.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007512:	e005      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007514:	4b77      	ldr	r3, [pc, #476]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0ed      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007524:	2b00      	cmp	r3, #0
 8007526:	d173      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007528:	4b71      	ldr	r3, [pc, #452]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800752a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007534:	4053      	eors	r3, r2
 8007536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800753a:	2b00      	cmp	r3, #0
 800753c:	d015      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800753e:	4b6c      	ldr	r3, [pc, #432]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007546:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800754a:	4b69      	ldr	r3, [pc, #420]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754e:	4a68      	ldr	r2, [pc, #416]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007554:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007556:	4b66      	ldr	r3, [pc, #408]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755a:	4a65      	ldr	r2, [pc, #404]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800755c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007560:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007562:	4a63      	ldr	r2, [pc, #396]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007568:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007576:	d118      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fa fc2e 	bl	8001dd8 <HAL_GetTick>
 800757c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007580:	e00d      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007582:	f7fa fc29 	bl	8001dd8 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800758c:	1ad2      	subs	r2, r2, r3
 800758e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007592:	429a      	cmp	r2, r3
 8007594:	d903      	bls.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800759c:	e005      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800759e:	4b54      	ldr	r3, [pc, #336]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0eb      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80075aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d129      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075c2:	d10e      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80075c4:	4b4a      	ldr	r3, [pc, #296]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075d4:	091a      	lsrs	r2, r3, #4
 80075d6:	4b48      	ldr	r3, [pc, #288]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80075d8:	4013      	ands	r3, r2
 80075da:	4a45      	ldr	r2, [pc, #276]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075dc:	430b      	orrs	r3, r1
 80075de:	6113      	str	r3, [r2, #16]
 80075e0:	e005      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80075e2:	4b43      	ldr	r3, [pc, #268]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	4a42      	ldr	r2, [pc, #264]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075ec:	6113      	str	r3, [r2, #16]
 80075ee:	4b40      	ldr	r3, [pc, #256]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075fe:	4a3c      	ldr	r2, [pc, #240]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007600:	430b      	orrs	r3, r1
 8007602:	6713      	str	r3, [r2, #112]	@ 0x70
 8007604:	e008      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007606:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800760a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800760e:	e003      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f002 0301 	and.w	r3, r2, #1
 8007624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800762e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007632:	460b      	mov	r3, r1
 8007634:	4313      	orrs	r3, r2
 8007636:	f000 808f 	beq.w	8007758 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800763a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007640:	2b28      	cmp	r3, #40	@ 0x28
 8007642:	d871      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007644:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007731 	.word	0x08007731
 8007650:	08007729 	.word	0x08007729
 8007654:	08007729 	.word	0x08007729
 8007658:	08007729 	.word	0x08007729
 800765c:	08007729 	.word	0x08007729
 8007660:	08007729 	.word	0x08007729
 8007664:	08007729 	.word	0x08007729
 8007668:	08007729 	.word	0x08007729
 800766c:	080076fd 	.word	0x080076fd
 8007670:	08007729 	.word	0x08007729
 8007674:	08007729 	.word	0x08007729
 8007678:	08007729 	.word	0x08007729
 800767c:	08007729 	.word	0x08007729
 8007680:	08007729 	.word	0x08007729
 8007684:	08007729 	.word	0x08007729
 8007688:	08007729 	.word	0x08007729
 800768c:	08007713 	.word	0x08007713
 8007690:	08007729 	.word	0x08007729
 8007694:	08007729 	.word	0x08007729
 8007698:	08007729 	.word	0x08007729
 800769c:	08007729 	.word	0x08007729
 80076a0:	08007729 	.word	0x08007729
 80076a4:	08007729 	.word	0x08007729
 80076a8:	08007729 	.word	0x08007729
 80076ac:	08007731 	.word	0x08007731
 80076b0:	08007729 	.word	0x08007729
 80076b4:	08007729 	.word	0x08007729
 80076b8:	08007729 	.word	0x08007729
 80076bc:	08007729 	.word	0x08007729
 80076c0:	08007729 	.word	0x08007729
 80076c4:	08007729 	.word	0x08007729
 80076c8:	08007729 	.word	0x08007729
 80076cc:	08007731 	.word	0x08007731
 80076d0:	08007729 	.word	0x08007729
 80076d4:	08007729 	.word	0x08007729
 80076d8:	08007729 	.word	0x08007729
 80076dc:	08007729 	.word	0x08007729
 80076e0:	08007729 	.word	0x08007729
 80076e4:	08007729 	.word	0x08007729
 80076e8:	08007729 	.word	0x08007729
 80076ec:	08007731 	.word	0x08007731
 80076f0:	58024400 	.word	0x58024400
 80076f4:	58024800 	.word	0x58024800
 80076f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	3308      	adds	r3, #8
 8007702:	2101      	movs	r1, #1
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fce9 	bl	80080dc <RCCEx_PLL2_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007710:	e00f      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	3328      	adds	r3, #40	@ 0x28
 8007718:	2101      	movs	r1, #1
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fd90 	bl	8008240 <RCCEx_PLL3_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007726:	e004      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800772e:	e000      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800773a:	4bbf      	ldr	r3, [pc, #764]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800773c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007748:	4abb      	ldr	r2, [pc, #748]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800774a:	430b      	orrs	r3, r1
 800774c:	6553      	str	r3, [r2, #84]	@ 0x54
 800774e:	e003      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f002 0302 	and.w	r3, r2, #2
 8007764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007768:	2300      	movs	r3, #0
 800776a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800776e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007772:	460b      	mov	r3, r1
 8007774:	4313      	orrs	r3, r2
 8007776:	d041      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800777e:	2b05      	cmp	r3, #5
 8007780:	d824      	bhi.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077d5 	.word	0x080077d5
 800778c:	080077a1 	.word	0x080077a1
 8007790:	080077b7 	.word	0x080077b7
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077d5 	.word	0x080077d5
 800779c:	080077d5 	.word	0x080077d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	3308      	adds	r3, #8
 80077a6:	2101      	movs	r1, #1
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fc97 	bl	80080dc <RCCEx_PLL2_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077b4:	e00f      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ba:	3328      	adds	r3, #40	@ 0x28
 80077bc:	2101      	movs	r1, #1
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fd3e 	bl	8008240 <RCCEx_PLL3_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077ca:	e004      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077d2:	e000      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80077d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077de:	4b96      	ldr	r3, [pc, #600]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e2:	f023 0107 	bic.w	r1, r3, #7
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ec:	4a92      	ldr	r2, [pc, #584]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80077f2:	e003      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f002 0304 	and.w	r3, r2, #4
 8007808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800780c:	2300      	movs	r3, #0
 800780e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007812:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007816:	460b      	mov	r3, r1
 8007818:	4313      	orrs	r3, r2
 800781a:	d044      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007824:	2b05      	cmp	r3, #5
 8007826:	d825      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	0800787d 	.word	0x0800787d
 8007834:	08007849 	.word	0x08007849
 8007838:	0800785f 	.word	0x0800785f
 800783c:	0800787d 	.word	0x0800787d
 8007840:	0800787d 	.word	0x0800787d
 8007844:	0800787d 	.word	0x0800787d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784c:	3308      	adds	r3, #8
 800784e:	2101      	movs	r1, #1
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fc43 	bl	80080dc <RCCEx_PLL2_Config>
 8007856:	4603      	mov	r3, r0
 8007858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800785c:	e00f      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	3328      	adds	r3, #40	@ 0x28
 8007864:	2101      	movs	r1, #1
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fcea 	bl	8008240 <RCCEx_PLL3_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007872:	e004      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800787a:	e000      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800787c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007886:	4b6c      	ldr	r3, [pc, #432]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	f023 0107 	bic.w	r1, r3, #7
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007896:	4a68      	ldr	r2, [pc, #416]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007898:	430b      	orrs	r3, r1
 800789a:	6593      	str	r3, [r2, #88]	@ 0x58
 800789c:	e003      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f002 0320 	and.w	r3, r2, #32
 80078b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4313      	orrs	r3, r2
 80078c4:	d055      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078d2:	d033      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80078d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078d8:	d82c      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80078da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078de:	d02f      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e4:	d826      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80078e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078ea:	d02b      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80078ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078f0:	d820      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80078f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f6:	d012      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80078f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fc:	d81a      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d022      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007906:	d115      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	3308      	adds	r3, #8
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fbe3 	bl	80080dc <RCCEx_PLL2_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800791c:	e015      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007922:	3328      	adds	r3, #40	@ 0x28
 8007924:	2102      	movs	r1, #2
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fc8a 	bl	8008240 <RCCEx_PLL3_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007932:	e00a      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800793a:	e006      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800793c:	bf00      	nop
 800793e:	e004      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007940:	bf00      	nop
 8007942:	e002      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007944:	bf00      	nop
 8007946:	e000      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007952:	4b39      	ldr	r3, [pc, #228]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007956:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007962:	4a35      	ldr	r2, [pc, #212]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007964:	430b      	orrs	r3, r1
 8007966:	6553      	str	r3, [r2, #84]	@ 0x54
 8007968:	e003      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800796e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800797e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007982:	2300      	movs	r3, #0
 8007984:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007988:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800798c:	460b      	mov	r3, r1
 800798e:	4313      	orrs	r3, r2
 8007990:	d058      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800799a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800799e:	d033      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80079a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079a4:	d82c      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80079a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079aa:	d02f      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b0:	d826      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80079b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079b6:	d02b      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80079b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079bc:	d820      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80079be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c2:	d012      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c8:	d81a      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d022      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80079ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d2:	d115      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d8:	3308      	adds	r3, #8
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fb7d 	bl	80080dc <RCCEx_PLL2_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079e8:	e015      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	3328      	adds	r3, #40	@ 0x28
 80079f0:	2102      	movs	r1, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fc24 	bl	8008240 <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079fe:	e00a      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a06:	e006      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e004      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007a0c:	bf00      	nop
 8007a0e:	e002      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007a10:	bf00      	nop
 8007a12:	e000      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10e      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a1e:	4b06      	ldr	r3, [pc, #24]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a22:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a2e:	4a02      	ldr	r2, [pc, #8]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a34:	e006      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007a36:	bf00      	nop
 8007a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a54:	2300      	movs	r3, #0
 8007a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4313      	orrs	r3, r2
 8007a62:	d055      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a70:	d033      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007a72:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a76:	d82c      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a7c:	d02f      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a82:	d826      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a84:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a88:	d02b      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007a8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a8e:	d820      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a94:	d012      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a9a:	d81a      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d022      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aa4:	d115      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aaa:	3308      	adds	r3, #8
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fb14 	bl	80080dc <RCCEx_PLL2_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007aba:	e015      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac0:	3328      	adds	r3, #40	@ 0x28
 8007ac2:	2102      	movs	r1, #2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fbbb 	bl	8008240 <RCCEx_PLL3_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ad0:	e00a      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ad8:	e006      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10b      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007af0:	4ba0      	ldr	r3, [pc, #640]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b00:	4a9c      	ldr	r2, [pc, #624]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b02:	430b      	orrs	r3, r1
 8007b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b06:	e003      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f002 0308 	and.w	r3, r2, #8
 8007b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b20:	2300      	movs	r3, #0
 8007b22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	d01e      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3c:	d10c      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b42:	3328      	adds	r3, #40	@ 0x28
 8007b44:	2102      	movs	r1, #2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fb7a 	bl	8008240 <RCCEx_PLL3_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007b58:	4b86      	ldr	r3, [pc, #536]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b68:	4a82      	ldr	r2, [pc, #520]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f002 0310 	and.w	r3, r2, #16
 8007b7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d01e      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b9a:	d10c      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba0:	3328      	adds	r3, #40	@ 0x28
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fb4b 	bl	8008240 <RCCEx_PLL3_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bb6:	4b6f      	ldr	r3, [pc, #444]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bc6:	4a6b      	ldr	r2, [pc, #428]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bda:	2300      	movs	r3, #0
 8007bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007bde:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007be2:	460b      	mov	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d03e      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bf4:	d022      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bfa:	d81b      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c04:	d00b      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007c06:	e015      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	2100      	movs	r1, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fa63 	bl	80080dc <RCCEx_PLL2_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c1c:	e00f      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c22:	3328      	adds	r3, #40	@ 0x28
 8007c24:	2102      	movs	r1, #2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fb0a 	bl	8008240 <RCCEx_PLL3_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c32:	e004      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c3a:	e000      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c46:	4b4b      	ldr	r3, [pc, #300]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c56:	4a47      	ldr	r2, [pc, #284]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c5c:	e003      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c72:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c74:	2300      	movs	r3, #0
 8007c76:	677b      	str	r3, [r7, #116]	@ 0x74
 8007c78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	d03b      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c8e:	d01f      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007c90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c94:	d818      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c9a:	d003      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007c9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ca0:	d007      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007ca2:	e011      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca4:	4b33      	ldr	r3, [pc, #204]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca8:	4a32      	ldr	r2, [pc, #200]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cb0:	e00f      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb6:	3328      	adds	r3, #40	@ 0x28
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fac0 	bl	8008240 <RCCEx_PLL3_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cc6:	e004      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cce:	e000      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cda:	4b26      	ldr	r3, [pc, #152]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cea:	4a22      	ldr	r2, [pc, #136]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cf0:	e003      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007d06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d08:	2300      	movs	r3, #0
 8007d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d0c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d034      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d24:	d007      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007d26:	e011      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d28:	4b12      	ldr	r3, [pc, #72]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2c:	4a11      	ldr	r2, [pc, #68]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d34:	e00e      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f9cc 	bl	80080dc <RCCEx_PLL2_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d4a:	e003      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10d      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d6a:	4a02      	ldr	r2, [pc, #8]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d70:	e006      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d8e:	2300      	movs	r3, #0
 8007d90:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d92:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d96:	460b      	mov	r3, r1
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d00c      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da0:	3328      	adds	r3, #40	@ 0x28
 8007da2:	2102      	movs	r1, #2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fa4b 	bl	8008240 <RCCEx_PLL3_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dc8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	d036      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ddc:	d018      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007de2:	d811      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de8:	d014      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dee:	d80b      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d011      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007df8:	d106      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dfa:	4bb7      	ldr	r3, [pc, #732]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfe:	4ab6      	ldr	r2, [pc, #728]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e06:	e008      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e0e:	e004      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007e10:	bf00      	nop
 8007e12:	e002      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e22:	4bad      	ldr	r3, [pc, #692]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e30:	4aa9      	ldr	r2, [pc, #676]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e32:	430b      	orrs	r3, r1
 8007e34:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e36:	e003      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e4e:	2300      	movs	r3, #0
 8007e50:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d009      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e5c:	4b9e      	ldr	r3, [pc, #632]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6a:	4a9b      	ldr	r2, [pc, #620]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e7e:	2300      	movs	r3, #0
 8007e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e86:	460b      	mov	r3, r1
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	d009      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e8c:	4b92      	ldr	r3, [pc, #584]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e90:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e9a:	4a8f      	ldr	r2, [pc, #572]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eae:	2300      	movs	r3, #0
 8007eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	d00e      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ebc:	4b86      	ldr	r3, [pc, #536]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	4a85      	ldr	r2, [pc, #532]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ec2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ec6:	6113      	str	r3, [r2, #16]
 8007ec8:	4b83      	ldr	r3, [pc, #524]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007eca:	6919      	ldr	r1, [r3, #16]
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ed4:	4a80      	ldr	r2, [pc, #512]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ee8:	2300      	movs	r3, #0
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ef6:	4b78      	ldr	r3, [pc, #480]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f04:	4a74      	ldr	r2, [pc, #464]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f06:	430b      	orrs	r3, r1
 8007f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f18:	2300      	movs	r3, #0
 8007f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f20:	460b      	mov	r3, r1
 8007f22:	4313      	orrs	r3, r2
 8007f24:	d00a      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f26:	4b6c      	ldr	r3, [pc, #432]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f36:	4a68      	ldr	r2, [pc, #416]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	2100      	movs	r1, #0
 8007f46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f4e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	d011      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f8bb 	bl	80080dc <RCCEx_PLL2_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	2100      	movs	r1, #0
 8007f86:	6239      	str	r1, [r7, #32]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f92:	460b      	mov	r3, r1
 8007f94:	4313      	orrs	r3, r2
 8007f96:	d011      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 f89b 	bl	80080dc <RCCEx_PLL2_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007fac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	61b9      	str	r1, [r7, #24]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	61fb      	str	r3, [r7, #28]
 8007fce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	d011      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fdc:	3308      	adds	r3, #8
 8007fde:	2102      	movs	r1, #2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f87b 	bl	80080dc <RCCEx_PLL2_Config>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	2100      	movs	r1, #0
 8008006:	6139      	str	r1, [r7, #16]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d011      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	3328      	adds	r3, #40	@ 0x28
 800801e:	2100      	movs	r1, #0
 8008020:	4618      	mov	r0, r3
 8008022:	f000 f90d 	bl	8008240 <RCCEx_PLL3_Config>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800802c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	2100      	movs	r1, #0
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008052:	460b      	mov	r3, r1
 8008054:	4313      	orrs	r3, r2
 8008056:	d011      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	3328      	adds	r3, #40	@ 0x28
 800805e:	2101      	movs	r1, #1
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f8ed 	bl	8008240 <RCCEx_PLL3_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800806c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800807c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	2100      	movs	r1, #0
 8008086:	6039      	str	r1, [r7, #0]
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	607b      	str	r3, [r7, #4]
 800808e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008092:	460b      	mov	r3, r1
 8008094:	4313      	orrs	r3, r2
 8008096:	d011      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809c:	3328      	adds	r3, #40	@ 0x28
 800809e:	2102      	movs	r1, #2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f8cd 	bl	8008240 <RCCEx_PLL3_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80080bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80080d0:	46bd      	mov	sp, r7
 80080d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080d6:	bf00      	nop
 80080d8:	58024400 	.word	0x58024400

080080dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080ea:	4b53      	ldr	r3, [pc, #332]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80080ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d101      	bne.n	80080fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e099      	b.n	800822e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008100:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008106:	f7f9 fe67 	bl	8001dd8 <HAL_GetTick>
 800810a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800810c:	e008      	b.n	8008120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800810e:	f7f9 fe63 	bl	8001dd8 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e086      	b.n	800822e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008120:	4b45      	ldr	r3, [pc, #276]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800812c:	4b42      	ldr	r3, [pc, #264]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	031b      	lsls	r3, r3, #12
 800813a:	493f      	ldr	r1, [pc, #252]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800813c:	4313      	orrs	r3, r2
 800813e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	3b01      	subs	r3, #1
 8008146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	3b01      	subs	r3, #1
 8008150:	025b      	lsls	r3, r3, #9
 8008152:	b29b      	uxth	r3, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	3b01      	subs	r3, #1
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	3b01      	subs	r3, #1
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008170:	4931      	ldr	r1, [pc, #196]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008176:	4b30      	ldr	r3, [pc, #192]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	492d      	ldr	r1, [pc, #180]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008188:	4b2b      	ldr	r3, [pc, #172]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	f023 0220 	bic.w	r2, r3, #32
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4928      	ldr	r1, [pc, #160]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800819a:	4b27      	ldr	r3, [pc, #156]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	4a26      	ldr	r2, [pc, #152]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081a0:	f023 0310 	bic.w	r3, r3, #16
 80081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081a6:	4b24      	ldr	r3, [pc, #144]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081aa:	4b24      	ldr	r3, [pc, #144]	@ (800823c <RCCEx_PLL2_Config+0x160>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	69d2      	ldr	r2, [r2, #28]
 80081b2:	00d2      	lsls	r2, r2, #3
 80081b4:	4920      	ldr	r1, [pc, #128]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081c0:	f043 0310 	orr.w	r3, r3, #16
 80081c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081d8:	e00f      	b.n	80081fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d106      	bne.n	80081ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081e0:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	4a14      	ldr	r2, [pc, #80]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081ec:	e005      	b.n	80081fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081ee:	4b12      	ldr	r3, [pc, #72]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008200:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008206:	f7f9 fde7 	bl	8001dd8 <HAL_GetTick>
 800820a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800820c:	e008      	b.n	8008220 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800820e:	f7f9 fde3 	bl	8001dd8 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e006      	b.n	800822e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008220:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0f0      	beq.n	800820e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400
 800823c:	ffff0007 	.word	0xffff0007

08008240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800824e:	4b53      	ldr	r3, [pc, #332]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b03      	cmp	r3, #3
 8008258:	d101      	bne.n	800825e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e099      	b.n	8008392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800825e:	4b4f      	ldr	r3, [pc, #316]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a4e      	ldr	r2, [pc, #312]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800826a:	f7f9 fdb5 	bl	8001dd8 <HAL_GetTick>
 800826e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008270:	e008      	b.n	8008284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008272:	f7f9 fdb1 	bl	8001dd8 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e086      	b.n	8008392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008284:	4b45      	ldr	r3, [pc, #276]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1f0      	bne.n	8008272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008290:	4b42      	ldr	r3, [pc, #264]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	051b      	lsls	r3, r3, #20
 800829e:	493f      	ldr	r1, [pc, #252]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	025b      	lsls	r3, r3, #9
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	3b01      	subs	r3, #1
 80082c0:	041b      	lsls	r3, r3, #16
 80082c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	061b      	lsls	r3, r3, #24
 80082d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082d4:	4931      	ldr	r1, [pc, #196]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082da:	4b30      	ldr	r3, [pc, #192]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	492d      	ldr	r1, [pc, #180]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082ec:	4b2b      	ldr	r3, [pc, #172]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	4928      	ldr	r1, [pc, #160]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082fe:	4b27      	ldr	r3, [pc, #156]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	4a26      	ldr	r2, [pc, #152]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800830a:	4b24      	ldr	r3, [pc, #144]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800830c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800830e:	4b24      	ldr	r3, [pc, #144]	@ (80083a0 <RCCEx_PLL3_Config+0x160>)
 8008310:	4013      	ands	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	69d2      	ldr	r2, [r2, #28]
 8008316:	00d2      	lsls	r2, r2, #3
 8008318:	4920      	ldr	r1, [pc, #128]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800831a:	4313      	orrs	r3, r2
 800831c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800831e:	4b1f      	ldr	r3, [pc, #124]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	4a1e      	ldr	r2, [pc, #120]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008330:	4b1a      	ldr	r3, [pc, #104]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	4a19      	ldr	r2, [pc, #100]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008336:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800833a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800833c:	e00f      	b.n	800835e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008344:	4b15      	ldr	r3, [pc, #84]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	4a14      	ldr	r2, [pc, #80]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800834a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800834e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008350:	e005      	b.n	800835e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008356:	4a11      	ldr	r2, [pc, #68]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800835c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800835e:	4b0f      	ldr	r3, [pc, #60]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a0e      	ldr	r2, [pc, #56]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836a:	f7f9 fd35 	bl	8001dd8 <HAL_GetTick>
 800836e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008370:	e008      	b.n	8008384 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008372:	f7f9 fd31 	bl	8001dd8 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e006      	b.n	8008392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008384:	4b05      	ldr	r3, [pc, #20]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0f0      	beq.n	8008372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	58024400 	.word	0x58024400
 80083a0:	ffff0007 	.word	0xffff0007

080083a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e10f      	b.n	80085d6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a87      	ldr	r2, [pc, #540]	@ (80085e0 <HAL_SPI_Init+0x23c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00f      	beq.n	80083e6 <HAL_SPI_Init+0x42>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a86      	ldr	r2, [pc, #536]	@ (80085e4 <HAL_SPI_Init+0x240>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00a      	beq.n	80083e6 <HAL_SPI_Init+0x42>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a84      	ldr	r2, [pc, #528]	@ (80085e8 <HAL_SPI_Init+0x244>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d005      	beq.n	80083e6 <HAL_SPI_Init+0x42>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	2b0f      	cmp	r3, #15
 80083e0:	d901      	bls.n	80083e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e0f7      	b.n	80085d6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fa64 	bl	80098b4 <SPI_GetPacketSize>
 80083ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a7b      	ldr	r2, [pc, #492]	@ (80085e0 <HAL_SPI_Init+0x23c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00c      	beq.n	8008412 <HAL_SPI_Init+0x6e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a79      	ldr	r2, [pc, #484]	@ (80085e4 <HAL_SPI_Init+0x240>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d007      	beq.n	8008412 <HAL_SPI_Init+0x6e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a78      	ldr	r2, [pc, #480]	@ (80085e8 <HAL_SPI_Init+0x244>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d002      	beq.n	8008412 <HAL_SPI_Init+0x6e>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b08      	cmp	r3, #8
 8008410:	d811      	bhi.n	8008436 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008416:	4a72      	ldr	r2, [pc, #456]	@ (80085e0 <HAL_SPI_Init+0x23c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d009      	beq.n	8008430 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a70      	ldr	r2, [pc, #448]	@ (80085e4 <HAL_SPI_Init+0x240>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_SPI_Init+0x8c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a6f      	ldr	r2, [pc, #444]	@ (80085e8 <HAL_SPI_Init+0x244>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d104      	bne.n	800843a <HAL_SPI_Init+0x96>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b10      	cmp	r3, #16
 8008434:	d901      	bls.n	800843a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e0cd      	b.n	80085d6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d106      	bne.n	8008454 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7f8 fef6 	bl	8001240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0201 	bic.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008476:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008480:	d119      	bne.n	80084b6 <HAL_SPI_Init+0x112>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800848a:	d103      	bne.n	8008494 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008490:	2b00      	cmp	r3, #0
 8008492:	d008      	beq.n	80084a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10c      	bne.n	80084b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084a4:	d107      	bne.n	80084b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00f      	beq.n	80084e2 <HAL_SPI_Init+0x13e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b06      	cmp	r3, #6
 80084c8:	d90b      	bls.n	80084e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e007      	b.n	80084f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69da      	ldr	r2, [r3, #28]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fa:	431a      	orrs	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008504:	ea42 0103 	orr.w	r1, r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008522:	431a      	orrs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008552:	ea42 0103 	orr.w	r1, r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d113      	bne.n	8008592 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800857c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008590:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0201 	bic.w	r2, r2, #1
 80085a0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	40013000 	.word	0x40013000
 80085e4:	40003800 	.word	0x40003800
 80085e8:	40003c00 	.word	0x40003c00

080085ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	4613      	mov	r3, r2
 80085fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3320      	adds	r3, #32
 8008602:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008604:	f7f9 fbe8 	bl	8001dd8 <HAL_GetTick>
 8008608:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	d001      	beq.n	800861a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008616:	2302      	movs	r3, #2
 8008618:	e1d1      	b.n	80089be <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_SPI_Transmit+0x3a>
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e1c9      	b.n	80089be <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_SPI_Transmit+0x4c>
 8008634:	2302      	movs	r3, #2
 8008636:	e1c2      	b.n	80089be <HAL_SPI_Transmit+0x3d2>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2203      	movs	r2, #3
 8008644:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	88fa      	ldrh	r2, [r7, #6]
 8008662:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008690:	d108      	bne.n	80086a4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	e009      	b.n	80086b8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80086b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4b96      	ldr	r3, [pc, #600]	@ (8008918 <HAL_SPI_Transmit+0x32c>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	88f9      	ldrh	r1, [r7, #6]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	6812      	ldr	r2, [r2, #0]
 80086c8:	430b      	orrs	r3, r1
 80086ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086e4:	d107      	bne.n	80086f6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	2b0f      	cmp	r3, #15
 80086fc:	d947      	bls.n	800878e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086fe:	e03f      	b.n	8008780 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b02      	cmp	r3, #2
 800870c:	d114      	bne.n	8008738 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008736:	e023      	b.n	8008780 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008738:	f7f9 fb4e 	bl	8001dd8 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d803      	bhi.n	8008750 <HAL_SPI_Transmit+0x164>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d102      	bne.n	8008756 <HAL_SPI_Transmit+0x16a>
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d114      	bne.n	8008780 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 ffde 	bl	8009718 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008762:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e11e      	b.n	80089be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1b9      	bne.n	8008700 <HAL_SPI_Transmit+0x114>
 800878c:	e0f1      	b.n	8008972 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2b07      	cmp	r3, #7
 8008794:	f240 80e6 	bls.w	8008964 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008798:	e05d      	b.n	8008856 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d132      	bne.n	800880e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d918      	bls.n	80087e6 <HAL_SPI_Transmit+0x1fa>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d014      	beq.n	80087e6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087cc:	1d1a      	adds	r2, r3, #4
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b02      	subs	r3, #2
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087e4:	e037      	b.n	8008856 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ea:	881a      	ldrh	r2, [r3, #0]
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800880c:	e023      	b.n	8008856 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800880e:	f7f9 fae3 	bl	8001dd8 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d803      	bhi.n	8008826 <HAL_SPI_Transmit+0x23a>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d102      	bne.n	800882c <HAL_SPI_Transmit+0x240>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d114      	bne.n	8008856 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 ff73 	bl	8009718 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008838:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e0b3      	b.n	80089be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d19b      	bne.n	800879a <HAL_SPI_Transmit+0x1ae>
 8008862:	e086      	b.n	8008972 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b02      	cmp	r3, #2
 8008870:	d154      	bne.n	800891c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b03      	cmp	r3, #3
 800887c:	d918      	bls.n	80088b0 <HAL_SPI_Transmit+0x2c4>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008882:	2b40      	cmp	r3, #64	@ 0x40
 8008884:	d914      	bls.n	80088b0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008896:	1d1a      	adds	r2, r3, #4
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3b04      	subs	r3, #4
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088ae:	e059      	b.n	8008964 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d917      	bls.n	80088ec <HAL_SPI_Transmit+0x300>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d013      	beq.n	80088ec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c8:	881a      	ldrh	r2, [r3, #0]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088d2:	1c9a      	adds	r2, r3, #2
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088de:	b29b      	uxth	r3, r3
 80088e0:	3b02      	subs	r3, #2
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088ea:	e03b      	b.n	8008964 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3320      	adds	r3, #32
 80088f6:	7812      	ldrb	r2, [r2, #0]
 80088f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b01      	subs	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008916:	e025      	b.n	8008964 <HAL_SPI_Transmit+0x378>
 8008918:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800891c:	f7f9 fa5c 	bl	8001dd8 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d803      	bhi.n	8008934 <HAL_SPI_Transmit+0x348>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d102      	bne.n	800893a <HAL_SPI_Transmit+0x34e>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d114      	bne.n	8008964 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 feec 	bl	8009718 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008946:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e02c      	b.n	80089be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800896a:	b29b      	uxth	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	f47f af79 	bne.w	8008864 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2200      	movs	r2, #0
 800897a:	2108      	movs	r1, #8
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 ff6b 	bl	8009858 <SPI_WaitOnFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d007      	beq.n	8008998 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800898e:	f043 0220 	orr.w	r2, r3, #32
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 febd 	bl	8009718 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80089bc:	2300      	movs	r3, #0
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop

080089c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4613      	mov	r3, r2
 80089d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089dc:	095b      	lsrs	r3, r3, #5
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3301      	adds	r3, #1
 80089e2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3330      	adds	r3, #48	@ 0x30
 80089ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089ec:	f7f9 f9f4 	bl	8001dd8 <HAL_GetTick>
 80089f0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d001      	beq.n	8008a02 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80089fe:	2302      	movs	r3, #2
 8008a00:	e250      	b.n	8008ea4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <HAL_SPI_Receive+0x46>
 8008a08:	88fb      	ldrh	r3, [r7, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e248      	b.n	8008ea4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_SPI_Receive+0x58>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e241      	b.n	8008ea4 <HAL_SPI_Receive+0x4dc>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2204      	movs	r2, #4
 8008a2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	88fa      	ldrh	r2, [r7, #6]
 8008a42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008a78:	d108      	bne.n	8008a8c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e009      	b.n	8008aa0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a9e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	4b95      	ldr	r3, [pc, #596]	@ (8008cfc <HAL_SPI_Receive+0x334>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	88f9      	ldrh	r1, [r7, #6]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008acc:	d107      	bne.n	8008ade <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008adc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d96c      	bls.n	8008bc0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008ae6:	e064      	b.n	8008bb2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d114      	bne.n	8008b28 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b08:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b26:	e044      	b.n	8008bb2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	8bfa      	ldrh	r2, [r7, #30]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d919      	bls.n	8008b6a <HAL_SPI_Receive+0x1a2>
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d014      	beq.n	8008b6a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b4a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b50:	1d1a      	adds	r2, r3, #4
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b68:	e023      	b.n	8008bb2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b6a:	f7f9 f935 	bl	8001dd8 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d803      	bhi.n	8008b82 <HAL_SPI_Receive+0x1ba>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b80:	d102      	bne.n	8008b88 <HAL_SPI_Receive+0x1c0>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d114      	bne.n	8008bb2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fdc5 	bl	8009718 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e178      	b.n	8008ea4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d194      	bne.n	8008ae8 <HAL_SPI_Receive+0x120>
 8008bbe:	e15e      	b.n	8008e7e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2b07      	cmp	r3, #7
 8008bc6:	f240 8153 	bls.w	8008e70 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008bca:	e08f      	b.n	8008cec <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d114      	bne.n	8008c0c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	8812      	ldrh	r2, [r2, #0]
 8008bea:	b292      	uxth	r2, r2
 8008bec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf2:	1c9a      	adds	r2, r3, #2
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3b01      	subs	r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c0a:	e06f      	b.n	8008cec <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	8bfa      	ldrh	r2, [r7, #30]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d924      	bls.n	8008c64 <HAL_SPI_Receive+0x29c>
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01f      	beq.n	8008c64 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	8812      	ldrh	r2, [r2, #0]
 8008c2c:	b292      	uxth	r2, r2
 8008c2e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c34:	1c9a      	adds	r2, r3, #2
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	8812      	ldrh	r2, [r2, #0]
 8008c42:	b292      	uxth	r2, r2
 8008c44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c4a:	1c9a      	adds	r2, r3, #2
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b02      	subs	r3, #2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c62:	e043      	b.n	8008cec <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d119      	bne.n	8008ca4 <HAL_SPI_Receive+0x2dc>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d014      	beq.n	8008ca4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	8812      	ldrh	r2, [r2, #0]
 8008c82:	b292      	uxth	r2, r2
 8008c84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c8a:	1c9a      	adds	r2, r3, #2
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ca2:	e023      	b.n	8008cec <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ca4:	f7f9 f898 	bl	8001dd8 <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d803      	bhi.n	8008cbc <HAL_SPI_Receive+0x2f4>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d102      	bne.n	8008cc2 <HAL_SPI_Receive+0x2fa>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d114      	bne.n	8008cec <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fd28 	bl	8009718 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e0db      	b.n	8008ea4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f47f af69 	bne.w	8008bcc <HAL_SPI_Receive+0x204>
 8008cfa:	e0c0      	b.n	8008e7e <HAL_SPI_Receive+0x4b6>
 8008cfc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d117      	bne.n	8008d46 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d22:	7812      	ldrb	r2, [r2, #0]
 8008d24:	b2d2      	uxtb	r2, r2
 8008d26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d44:	e094      	b.n	8008e70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	8bfa      	ldrh	r2, [r7, #30]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d946      	bls.n	8008de2 <HAL_SPI_Receive+0x41a>
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d041      	beq.n	8008de2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d6a:	7812      	ldrb	r2, [r2, #0]
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d86:	7812      	ldrb	r2, [r2, #0]
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dbe:	7812      	ldrb	r2, [r2, #0]
 8008dc0:	b2d2      	uxtb	r2, r2
 8008dc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dc8:	1c5a      	adds	r2, r3, #1
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3b04      	subs	r3, #4
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008de0:	e046      	b.n	8008e70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d81c      	bhi.n	8008e28 <HAL_SPI_Receive+0x460>
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d017      	beq.n	8008e28 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e26:	e023      	b.n	8008e70 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e28:	f7f8 ffd6 	bl	8001dd8 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d803      	bhi.n	8008e40 <HAL_SPI_Receive+0x478>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3e:	d102      	bne.n	8008e46 <HAL_SPI_Receive+0x47e>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d114      	bne.n	8008e70 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fc66 	bl	8009718 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e019      	b.n	8008ea4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f47f af41 	bne.w	8008d00 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 fc4a 	bl	8009718 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
  }
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3320      	adds	r3, #32
 8008ec0:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d001      	beq.n	8008ed2 <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e0e9      	b.n	80090a6 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <HAL_SPI_TransmitReceive_IT+0x38>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <HAL_SPI_TransmitReceive_IT+0x38>
 8008ede:	887b      	ldrh	r3, [r7, #2]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e0de      	b.n	80090a6 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d101      	bne.n	8008ef6 <HAL_SPI_TransmitReceive_IT+0x4a>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e0d7      	b.n	80090a6 <HAL_SPI_TransmitReceive_IT+0x1fa>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2205      	movs	r2, #5
 8008f02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	887a      	ldrh	r2, [r7, #2]
 8008f18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	887a      	ldrh	r2, [r7, #2]
 8008f20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	887a      	ldrh	r2, [r7, #2]
 8008f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	887a      	ldrh	r2, [r7, #2]
 8008f36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	2b0f      	cmp	r3, #15
 8008f4a:	d906      	bls.n	8008f5a <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4a59      	ldr	r2, [pc, #356]	@ (80090b4 <HAL_SPI_TransmitReceive_IT+0x208>)
 8008f50:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4a58      	ldr	r2, [pc, #352]	@ (80090b8 <HAL_SPI_TransmitReceive_IT+0x20c>)
 8008f56:	671a      	str	r2, [r3, #112]	@ 0x70
 8008f58:	e010      	b.n	8008f7c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	2b07      	cmp	r3, #7
 8008f60:	d906      	bls.n	8008f70 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a55      	ldr	r2, [pc, #340]	@ (80090bc <HAL_SPI_TransmitReceive_IT+0x210>)
 8008f66:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4a55      	ldr	r2, [pc, #340]	@ (80090c0 <HAL_SPI_TransmitReceive_IT+0x214>)
 8008f6c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f6e:	e005      	b.n	8008f7c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a54      	ldr	r2, [pc, #336]	@ (80090c4 <HAL_SPI_TransmitReceive_IT+0x218>)
 8008f74:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4a53      	ldr	r2, [pc, #332]	@ (80090c8 <HAL_SPI_TransmitReceive_IT+0x21c>)
 8008f7a:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008f8a:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	4b4e      	ldr	r3, [pc, #312]	@ (80090cc <HAL_SPI_TransmitReceive_IT+0x220>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	8879      	ldrh	r1, [r7, #2]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	6812      	ldr	r2, [r2, #0]
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0201 	orr.w	r2, r2, #1
 8008fae:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8008fb0:	e054      	b.n	800905c <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d919      	bls.n	8008fee <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fca:	1d1a      	adds	r2, r3, #4
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	e036      	b.n	800905c <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2b07      	cmp	r3, #7
 8008ff4:	d918      	bls.n	8009028 <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ffa:	881a      	ldrh	r2, [r3, #0]
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009004:	1c9a      	adds	r2, r3, #2
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009022:	b29b      	uxth	r3, r3
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	e019      	b.n	800905c <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3320      	adds	r3, #32
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009046:	b29b      	uxth	r3, r3
 8009048:	3b01      	subs	r3, #1
 800904a:	b29a      	uxth	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009058:	b29b      	uxth	r3, r3
 800905a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b02      	cmp	r3, #2
 8009068:	d102      	bne.n	8009070 <HAL_SPI_TransmitReceive_IT+0x1c4>
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1a0      	bne.n	8008fb2 <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6919      	ldr	r1, [r3, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	f240 736c 	movw	r3, #1900	@ 0x76c
 8009086:	430b      	orrs	r3, r1
 8009088:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009092:	d107      	bne.n	80090a4 <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	080096bf 	.word	0x080096bf
 80090b8:	080095af 	.word	0x080095af
 80090bc:	0800954f 	.word	0x0800954f
 80090c0:	08009661 	.word	0x08009661
 80090c4:	080094f1 	.word	0x080094f1
 80090c8:	08009607 	.word	0x08009607
 80090cc:	ffff0000 	.word	0xffff0000

080090d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08a      	sub	sp, #40	@ 0x28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80090e8:	6a3a      	ldr	r2, [r7, #32]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4013      	ands	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009102:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3330      	adds	r3, #48	@ 0x30
 800910a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009112:	2b00      	cmp	r3, #0
 8009114:	d010      	beq.n	8009138 <HAL_SPI_IRQHandler+0x68>
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800912e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f9b9 	bl	80094a8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009136:	e192      	b.n	800945e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913e:	2b00      	cmp	r3, #0
 8009140:	d113      	bne.n	800916a <HAL_SPI_IRQHandler+0x9a>
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10e      	bne.n	800916a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	4798      	blx	r3
    handled = 1UL;
 8009166:	2301      	movs	r3, #1
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10f      	bne.n	8009194 <HAL_SPI_IRQHandler+0xc4>
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009184:	2b00      	cmp	r3, #0
 8009186:	d105      	bne.n	8009194 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
    handled = 1UL;
 8009190:	2301      	movs	r3, #1
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10f      	bne.n	80091be <HAL_SPI_IRQHandler+0xee>
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d105      	bne.n	80091be <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
    handled = 1UL;
 80091ba:	2301      	movs	r3, #1
 80091bc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f040 8147 	bne.w	8009454 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 808b 	beq.w	80092e8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699a      	ldr	r2, [r3, #24]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0208 	orr.w	r2, r2, #8
 80091e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	699a      	ldr	r2, [r3, #24]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0210 	orr.w	r2, r2, #16
 80091f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009200:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0208 	bic.w	r2, r2, #8
 8009210:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d13d      	bne.n	800929c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009220:	e036      	b.n	8009290 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	2b0f      	cmp	r3, #15
 8009228:	d90b      	bls.n	8009242 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009232:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009234:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800923a:	1d1a      	adds	r2, r3, #4
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009240:	e01d      	b.n	800927e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	2b07      	cmp	r3, #7
 8009248:	d90b      	bls.n	8009262 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	8812      	ldrh	r2, [r2, #0]
 8009252:	b292      	uxth	r2, r2
 8009254:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800925a:	1c9a      	adds	r2, r3, #2
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009260:	e00d      	b.n	800927e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800926e:	7812      	ldrb	r2, [r2, #0]
 8009270:	b2d2      	uxtb	r2, r2
 8009272:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009296:	b29b      	uxth	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1c2      	bne.n	8009222 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fa3b 	bl	8009718 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8ed 	bl	8009494 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80092ba:	e0d0      	b.n	800945e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80092bc:	7cfb      	ldrb	r3, [r7, #19]
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d103      	bne.n	80092ca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7f7 fcd4 	bl	8000c70 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80092c8:	e0c6      	b.n	8009458 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80092ca:	7cfb      	ldrb	r3, [r7, #19]
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d103      	bne.n	80092d8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f8d5 	bl	8009480 <HAL_SPI_RxCpltCallback>
    return;
 80092d6:	e0bf      	b.n	8009458 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80092d8:	7cfb      	ldrb	r3, [r7, #19]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	f040 80bc 	bne.w	8009458 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f8c3 	bl	800946c <HAL_SPI_TxCpltCallback>
    return;
 80092e6:	e0b7      	b.n	8009458 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 80b5 	beq.w	800945e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00f      	beq.n	800931e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009304:	f043 0204 	orr.w	r2, r3, #4
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800931c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00f      	beq.n	8009348 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800932e:	f043 0201 	orr.w	r2, r3, #1
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699a      	ldr	r2, [r3, #24]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009346:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00f      	beq.n	8009372 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009358:	f043 0208 	orr.w	r2, r3, #8
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	699a      	ldr	r2, [r3, #24]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009370:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00f      	beq.n	800939c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009382:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0220 	orr.w	r2, r2, #32
 800939a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d05a      	beq.n	800945c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0201 	bic.w	r2, r2, #1
 80093b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	6919      	ldr	r1, [r3, #16]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	4b28      	ldr	r3, [pc, #160]	@ (8009464 <HAL_SPI_IRQHandler+0x394>)
 80093c2:	400b      	ands	r3, r1
 80093c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80093cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80093d0:	d138      	bne.n	8009444 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80093e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d013      	beq.n	8009412 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009468 <HAL_SPI_IRQHandler+0x398>)
 80093f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f9 fa14 	bl	8002824 <HAL_DMA_Abort_IT>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009416:	2b00      	cmp	r3, #0
 8009418:	d020      	beq.n	800945c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800941e:	4a12      	ldr	r2, [pc, #72]	@ (8009468 <HAL_SPI_IRQHandler+0x398>)
 8009420:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009426:	4618      	mov	r0, r3
 8009428:	f7f9 f9fc 	bl	8002824 <HAL_DMA_Abort_IT>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d014      	beq.n	800945c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009438:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009442:	e00b      	b.n	800945c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f821 	bl	8009494 <HAL_SPI_ErrorCallback>
    return;
 8009452:	e003      	b.n	800945c <HAL_SPI_IRQHandler+0x38c>
    return;
 8009454:	bf00      	nop
 8009456:	e002      	b.n	800945e <HAL_SPI_IRQHandler+0x38e>
    return;
 8009458:	bf00      	nop
 800945a:	e000      	b.n	800945e <HAL_SPI_IRQHandler+0x38e>
    return;
 800945c:	bf00      	nop
  }
}
 800945e:	3728      	adds	r7, #40	@ 0x28
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	fffffc94 	.word	0xfffffc94
 8009468:	080094bd 	.word	0x080094bd

0800946c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff ffd6 	bl	8009494 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094e8:	bf00      	nop
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	b2d2      	uxtb	r2, r2
 8009508:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800951a:	b29b      	uxth	r3, r3
 800951c:	3b01      	subs	r3, #1
 800951e:	b29a      	uxth	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	691a      	ldr	r2, [r3, #16]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0201 	bic.w	r2, r2, #1
 8009540:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3330      	adds	r3, #48	@ 0x30
 800955c:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	b292      	uxth	r2, r2
 8009568:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800956e:	1c9a      	adds	r2, r3, #2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d107      	bne.n	80095a2 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	691a      	ldr	r2, [r3, #16]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0201 	bic.w	r2, r2, #1
 80095a0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80095c0:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c6:	1d1a      	adds	r2, r3, #4
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	3b01      	subs	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d107      	bne.n	80095fa <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0201 	bic.w	r2, r2, #1
 80095f8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3320      	adds	r3, #32
 8009618:	7812      	ldrb	r2, [r2, #0]
 800961a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d107      	bne.n	8009654 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	691a      	ldr	r2, [r3, #16]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 0202 	bic.w	r2, r2, #2
 8009652:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3320      	adds	r3, #32
 800966e:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009674:	881a      	ldrh	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800967e:	1c9a      	adds	r2, r3, #2
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800968a:	b29b      	uxth	r3, r3
 800968c:	3b01      	subs	r3, #1
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d107      	bne.n	80096b2 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0202 	bic.w	r2, r2, #2
 80096b0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80096b2:	bf00      	nop
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6812      	ldr	r2, [r2, #0]
 80096d0:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096d6:	1d1a      	adds	r2, r3, #4
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d107      	bne.n	800970a <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0202 	bic.w	r2, r2, #2
 8009708:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0208 	orr.w	r2, r2, #8
 8009736:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0210 	orr.w	r2, r2, #16
 8009746:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0201 	bic.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6919      	ldr	r1, [r3, #16]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	4b3c      	ldr	r3, [pc, #240]	@ (8009854 <SPI_CloseTransfer+0x13c>)
 8009764:	400b      	ands	r3, r1
 8009766:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689a      	ldr	r2, [r3, #8]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009776:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b04      	cmp	r3, #4
 8009782:	d014      	beq.n	80097ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00f      	beq.n	80097ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009794:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	699a      	ldr	r2, [r3, #24]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0220 	orr.w	r2, r2, #32
 80097ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d014      	beq.n	80097e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00f      	beq.n	80097e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097ca:	f043 0204 	orr.w	r2, r3, #4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00f      	beq.n	800980e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097f4:	f043 0201 	orr.w	r2, r3, #1
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699a      	ldr	r2, [r3, #24]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800980c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00f      	beq.n	8009838 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800981e:	f043 0208 	orr.w	r2, r3, #8
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009836:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009848:	bf00      	nop
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	fffffc90 	.word	0xfffffc90

08009858 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009868:	e010      	b.n	800988c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800986a:	f7f8 fab5 	bl	8001dd8 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d803      	bhi.n	8009882 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009880:	d102      	bne.n	8009888 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e00f      	b.n	80098ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695a      	ldr	r2, [r3, #20]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	4013      	ands	r3, r2
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	429a      	cmp	r2, r3
 800989a:	bf0c      	ite	eq
 800989c:	2301      	moveq	r3, #1
 800989e:	2300      	movne	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	461a      	mov	r2, r3
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d0df      	beq.n	800986a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c0:	095b      	lsrs	r3, r3, #5
 80098c2:	3301      	adds	r3, #1
 80098c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	3307      	adds	r3, #7
 80098d2:	08db      	lsrs	r3, r3, #3
 80098d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	fb02 f303 	mul.w	r3, r2, r3
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e049      	b.n	8009990 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7f7 fe51 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2202      	movs	r2, #2
 800991a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f000 fdb1 	bl	800a490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d001      	beq.n	80099b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e056      	b.n	8009a5e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a2b      	ldr	r2, [pc, #172]	@ (8009a6c <HAL_TIM_Base_Start+0xd4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d02c      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ca:	d027      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a27      	ldr	r2, [pc, #156]	@ (8009a70 <HAL_TIM_Base_Start+0xd8>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d022      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a26      	ldr	r2, [pc, #152]	@ (8009a74 <HAL_TIM_Base_Start+0xdc>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d01d      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a24      	ldr	r2, [pc, #144]	@ (8009a78 <HAL_TIM_Base_Start+0xe0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d018      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a23      	ldr	r2, [pc, #140]	@ (8009a7c <HAL_TIM_Base_Start+0xe4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d013      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a21      	ldr	r2, [pc, #132]	@ (8009a80 <HAL_TIM_Base_Start+0xe8>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00e      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a20      	ldr	r2, [pc, #128]	@ (8009a84 <HAL_TIM_Base_Start+0xec>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d009      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8009a88 <HAL_TIM_Base_Start+0xf0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <HAL_TIM_Base_Start+0x84>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1d      	ldr	r2, [pc, #116]	@ (8009a8c <HAL_TIM_Base_Start+0xf4>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d115      	bne.n	8009a48 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689a      	ldr	r2, [r3, #8]
 8009a22:	4b1b      	ldr	r3, [pc, #108]	@ (8009a90 <HAL_TIM_Base_Start+0xf8>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b06      	cmp	r3, #6
 8009a2c:	d015      	beq.n	8009a5a <HAL_TIM_Base_Start+0xc2>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a34:	d011      	beq.n	8009a5a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0201 	orr.w	r2, r2, #1
 8009a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a46:	e008      	b.n	8009a5a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0201 	orr.w	r2, r2, #1
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	e000      	b.n	8009a5c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	40010000 	.word	0x40010000
 8009a70:	40000400 	.word	0x40000400
 8009a74:	40000800 	.word	0x40000800
 8009a78:	40000c00 	.word	0x40000c00
 8009a7c:	40010400 	.word	0x40010400
 8009a80:	40001800 	.word	0x40001800
 8009a84:	40014000 	.word	0x40014000
 8009a88:	4000e000 	.word	0x4000e000
 8009a8c:	4000e400 	.word	0x4000e400
 8009a90:	00010007 	.word	0x00010007

08009a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d001      	beq.n	8009aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e05e      	b.n	8009b6a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0201 	orr.w	r2, r2, #1
 8009ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8009b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d02c      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad6:	d027      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a27      	ldr	r2, [pc, #156]	@ (8009b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d022      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a26      	ldr	r2, [pc, #152]	@ (8009b80 <HAL_TIM_Base_Start_IT+0xec>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d01d      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a24      	ldr	r2, [pc, #144]	@ (8009b84 <HAL_TIM_Base_Start_IT+0xf0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d018      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a23      	ldr	r2, [pc, #140]	@ (8009b88 <HAL_TIM_Base_Start_IT+0xf4>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d013      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a21      	ldr	r2, [pc, #132]	@ (8009b8c <HAL_TIM_Base_Start_IT+0xf8>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00e      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a20      	ldr	r2, [pc, #128]	@ (8009b90 <HAL_TIM_Base_Start_IT+0xfc>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d009      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a1e      	ldr	r2, [pc, #120]	@ (8009b94 <HAL_TIM_Base_Start_IT+0x100>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x94>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a1d      	ldr	r2, [pc, #116]	@ (8009b98 <HAL_TIM_Base_Start_IT+0x104>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d115      	bne.n	8009b54 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009b9c <HAL_TIM_Base_Start_IT+0x108>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b06      	cmp	r3, #6
 8009b38:	d015      	beq.n	8009b66 <HAL_TIM_Base_Start_IT+0xd2>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b40:	d011      	beq.n	8009b66 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b52:	e008      	b.n	8009b66 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	e000      	b.n	8009b68 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	40010000 	.word	0x40010000
 8009b7c:	40000400 	.word	0x40000400
 8009b80:	40000800 	.word	0x40000800
 8009b84:	40000c00 	.word	0x40000c00
 8009b88:	40010400 	.word	0x40010400
 8009b8c:	40001800 	.word	0x40001800
 8009b90:	40014000 	.word	0x40014000
 8009b94:	4000e000 	.word	0x4000e000
 8009b98:	4000e400 	.word	0x4000e400
 8009b9c:	00010007 	.word	0x00010007

08009ba0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e049      	b.n	8009c46 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f841 	bl	8009c4e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f000 fc56 	bl	800a490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e049      	b.n	8009d08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d106      	bne.n	8009c8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f841 	bl	8009d10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2202      	movs	r2, #2
 8009c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f000 fbf5 	bl	800a490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 0302 	and.w	r3, r3, #2
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d020      	beq.n	8009d88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f003 0302 	and.w	r3, r3, #2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01b      	beq.n	8009d88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0202 	mvn.w	r2, #2
 8009d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fb70 	bl	800a454 <HAL_TIM_IC_CaptureCallback>
 8009d74:	e005      	b.n	8009d82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fb62 	bl	800a440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fb73 	bl	800a468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f003 0304 	and.w	r3, r3, #4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d020      	beq.n	8009dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01b      	beq.n	8009dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f06f 0204 	mvn.w	r2, #4
 8009da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fb4a 	bl	800a454 <HAL_TIM_IC_CaptureCallback>
 8009dc0:	e005      	b.n	8009dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fb3c 	bl	800a440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fb4d 	bl	800a468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f003 0308 	and.w	r3, r3, #8
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d020      	beq.n	8009e20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f003 0308 	and.w	r3, r3, #8
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01b      	beq.n	8009e20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f06f 0208 	mvn.w	r2, #8
 8009df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2204      	movs	r2, #4
 8009df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fb24 	bl	800a454 <HAL_TIM_IC_CaptureCallback>
 8009e0c:	e005      	b.n	8009e1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fb16 	bl	800a440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fb27 	bl	800a468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f003 0310 	and.w	r3, r3, #16
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d020      	beq.n	8009e6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f003 0310 	and.w	r3, r3, #16
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01b      	beq.n	8009e6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f06f 0210 	mvn.w	r2, #16
 8009e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2208      	movs	r2, #8
 8009e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fafe 	bl	800a454 <HAL_TIM_IC_CaptureCallback>
 8009e58:	e005      	b.n	8009e66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 faf0 	bl	800a440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fb01 	bl	800a468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00c      	beq.n	8009e90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d007      	beq.n	8009e90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f06f 0201 	mvn.w	r2, #1
 8009e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7f7 f9a2 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00c      	beq.n	8009ebe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 f83b 	bl	800af34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00c      	beq.n	8009ee2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 f833 	bl	800af48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00c      	beq.n	8009f06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fabb 	bl	800a47c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	f003 0320 	and.w	r3, r3, #32
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00c      	beq.n	8009f2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d007      	beq.n	8009f2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f06f 0220 	mvn.w	r2, #32
 8009f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fffb 	bl	800af20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f2a:	bf00      	nop
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
	...

08009f34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d101      	bne.n	8009f52 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009f4e:	2302      	movs	r3, #2
 8009f50:	e066      	b.n	800a020 <HAL_TIM_OC_ConfigChannel+0xec>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b14      	cmp	r3, #20
 8009f5e:	d857      	bhi.n	800a010 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009f60:	a201      	add	r2, pc, #4	@ (adr r2, 8009f68 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f66:	bf00      	nop
 8009f68:	08009fbd 	.word	0x08009fbd
 8009f6c:	0800a011 	.word	0x0800a011
 8009f70:	0800a011 	.word	0x0800a011
 8009f74:	0800a011 	.word	0x0800a011
 8009f78:	08009fcb 	.word	0x08009fcb
 8009f7c:	0800a011 	.word	0x0800a011
 8009f80:	0800a011 	.word	0x0800a011
 8009f84:	0800a011 	.word	0x0800a011
 8009f88:	08009fd9 	.word	0x08009fd9
 8009f8c:	0800a011 	.word	0x0800a011
 8009f90:	0800a011 	.word	0x0800a011
 8009f94:	0800a011 	.word	0x0800a011
 8009f98:	08009fe7 	.word	0x08009fe7
 8009f9c:	0800a011 	.word	0x0800a011
 8009fa0:	0800a011 	.word	0x0800a011
 8009fa4:	0800a011 	.word	0x0800a011
 8009fa8:	08009ff5 	.word	0x08009ff5
 8009fac:	0800a011 	.word	0x0800a011
 8009fb0:	0800a011 	.word	0x0800a011
 8009fb4:	0800a011 	.word	0x0800a011
 8009fb8:	0800a003 	.word	0x0800a003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68b9      	ldr	r1, [r7, #8]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 fb10 	bl	800a5e8 <TIM_OC1_SetConfig>
      break;
 8009fc8:	e025      	b.n	800a016 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fb99 	bl	800a708 <TIM_OC2_SetConfig>
      break;
 8009fd6:	e01e      	b.n	800a016 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fc1c 	bl	800a81c <TIM_OC3_SetConfig>
      break;
 8009fe4:	e017      	b.n	800a016 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fc9d 	bl	800a92c <TIM_OC4_SetConfig>
      break;
 8009ff2:	e010      	b.n	800a016 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68b9      	ldr	r1, [r7, #8]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fd00 	bl	800aa00 <TIM_OC5_SetConfig>
      break;
 800a000:	e009      	b.n	800a016 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68b9      	ldr	r1, [r7, #8]
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 fd5d 	bl	800aac8 <TIM_OC6_SetConfig>
      break;
 800a00e:	e002      	b.n	800a016 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	75fb      	strb	r3, [r7, #23]
      break;
 800a014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a042:	2302      	movs	r3, #2
 800a044:	e0ff      	b.n	800a246 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b14      	cmp	r3, #20
 800a052:	f200 80f0 	bhi.w	800a236 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a056:	a201      	add	r2, pc, #4	@ (adr r2, 800a05c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a0b1 	.word	0x0800a0b1
 800a060:	0800a237 	.word	0x0800a237
 800a064:	0800a237 	.word	0x0800a237
 800a068:	0800a237 	.word	0x0800a237
 800a06c:	0800a0f1 	.word	0x0800a0f1
 800a070:	0800a237 	.word	0x0800a237
 800a074:	0800a237 	.word	0x0800a237
 800a078:	0800a237 	.word	0x0800a237
 800a07c:	0800a133 	.word	0x0800a133
 800a080:	0800a237 	.word	0x0800a237
 800a084:	0800a237 	.word	0x0800a237
 800a088:	0800a237 	.word	0x0800a237
 800a08c:	0800a173 	.word	0x0800a173
 800a090:	0800a237 	.word	0x0800a237
 800a094:	0800a237 	.word	0x0800a237
 800a098:	0800a237 	.word	0x0800a237
 800a09c:	0800a1b5 	.word	0x0800a1b5
 800a0a0:	0800a237 	.word	0x0800a237
 800a0a4:	0800a237 	.word	0x0800a237
 800a0a8:	0800a237 	.word	0x0800a237
 800a0ac:	0800a1f5 	.word	0x0800a1f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68b9      	ldr	r1, [r7, #8]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fa96 	bl	800a5e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699a      	ldr	r2, [r3, #24]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0208 	orr.w	r2, r2, #8
 800a0ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0204 	bic.w	r2, r2, #4
 800a0da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6999      	ldr	r1, [r3, #24]
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	619a      	str	r2, [r3, #24]
      break;
 800a0ee:	e0a5      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68b9      	ldr	r1, [r7, #8]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fb06 	bl	800a708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	699a      	ldr	r2, [r3, #24]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a10a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a11a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6999      	ldr	r1, [r3, #24]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	021a      	lsls	r2, r3, #8
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	619a      	str	r2, [r3, #24]
      break;
 800a130:	e084      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fb6f 	bl	800a81c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0208 	orr.w	r2, r2, #8
 800a14c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69da      	ldr	r2, [r3, #28]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f022 0204 	bic.w	r2, r2, #4
 800a15c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69d9      	ldr	r1, [r3, #28]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	691a      	ldr	r2, [r3, #16]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	430a      	orrs	r2, r1
 800a16e:	61da      	str	r2, [r3, #28]
      break;
 800a170:	e064      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68b9      	ldr	r1, [r7, #8]
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fbd7 	bl	800a92c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69da      	ldr	r2, [r3, #28]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a18c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a19c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69d9      	ldr	r1, [r3, #28]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	021a      	lsls	r2, r3, #8
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	61da      	str	r2, [r3, #28]
      break;
 800a1b2:	e043      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 fc20 	bl	800aa00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0208 	orr.w	r2, r2, #8
 800a1ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0204 	bic.w	r2, r2, #4
 800a1de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a1f2:	e023      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68b9      	ldr	r1, [r7, #8]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fc64 	bl	800aac8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a20e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a21e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	021a      	lsls	r2, r3, #8
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a234:	e002      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	75fb      	strb	r3, [r7, #23]
      break;
 800a23a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop

0800a250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a264:	2b01      	cmp	r3, #1
 800a266:	d101      	bne.n	800a26c <HAL_TIM_ConfigClockSource+0x1c>
 800a268:	2302      	movs	r3, #2
 800a26a:	e0dc      	b.n	800a426 <HAL_TIM_ConfigClockSource+0x1d6>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	4b6a      	ldr	r3, [pc, #424]	@ (800a430 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a288:	4013      	ands	r3, r2
 800a28a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a64      	ldr	r2, [pc, #400]	@ (800a434 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	f000 80a9 	beq.w	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a2a8:	4a62      	ldr	r2, [pc, #392]	@ (800a434 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	f200 80ae 	bhi.w	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2b0:	4a61      	ldr	r2, [pc, #388]	@ (800a438 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	f000 80a1 	beq.w	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a2b8:	4a5f      	ldr	r2, [pc, #380]	@ (800a438 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	f200 80a6 	bhi.w	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c0:	4a5e      	ldr	r2, [pc, #376]	@ (800a43c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	f000 8099 	beq.w	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a2c8:	4a5c      	ldr	r2, [pc, #368]	@ (800a43c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	f200 809e 	bhi.w	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2d4:	f000 8091 	beq.w	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2dc:	f200 8096 	bhi.w	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2e4:	f000 8089 	beq.w	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2ec:	f200 808e 	bhi.w	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f4:	d03e      	beq.n	800a374 <HAL_TIM_ConfigClockSource+0x124>
 800a2f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2fa:	f200 8087 	bhi.w	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a302:	f000 8086 	beq.w	800a412 <HAL_TIM_ConfigClockSource+0x1c2>
 800a306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a30a:	d87f      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a30c:	2b70      	cmp	r3, #112	@ 0x70
 800a30e:	d01a      	beq.n	800a346 <HAL_TIM_ConfigClockSource+0xf6>
 800a310:	2b70      	cmp	r3, #112	@ 0x70
 800a312:	d87b      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a314:	2b60      	cmp	r3, #96	@ 0x60
 800a316:	d050      	beq.n	800a3ba <HAL_TIM_ConfigClockSource+0x16a>
 800a318:	2b60      	cmp	r3, #96	@ 0x60
 800a31a:	d877      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a31c:	2b50      	cmp	r3, #80	@ 0x50
 800a31e:	d03c      	beq.n	800a39a <HAL_TIM_ConfigClockSource+0x14a>
 800a320:	2b50      	cmp	r3, #80	@ 0x50
 800a322:	d873      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a324:	2b40      	cmp	r3, #64	@ 0x40
 800a326:	d058      	beq.n	800a3da <HAL_TIM_ConfigClockSource+0x18a>
 800a328:	2b40      	cmp	r3, #64	@ 0x40
 800a32a:	d86f      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a32c:	2b30      	cmp	r3, #48	@ 0x30
 800a32e:	d064      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a330:	2b30      	cmp	r3, #48	@ 0x30
 800a332:	d86b      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a334:	2b20      	cmp	r3, #32
 800a336:	d060      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a338:	2b20      	cmp	r3, #32
 800a33a:	d867      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d05c      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a340:	2b10      	cmp	r3, #16
 800a342:	d05a      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a344:	e062      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a356:	f000 fc9b 	bl	800ac90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	609a      	str	r2, [r3, #8]
      break;
 800a372:	e04f      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a384:	f000 fc84 	bl	800ac90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a396:	609a      	str	r2, [r3, #8]
      break;
 800a398:	e03c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f000 fbf4 	bl	800ab94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2150      	movs	r1, #80	@ 0x50
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fc4e 	bl	800ac54 <TIM_ITRx_SetConfig>
      break;
 800a3b8:	e02c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f000 fc13 	bl	800abf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2160      	movs	r1, #96	@ 0x60
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fc3e 	bl	800ac54 <TIM_ITRx_SetConfig>
      break;
 800a3d8:	e01c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f000 fbd4 	bl	800ab94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2140      	movs	r1, #64	@ 0x40
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fc2e 	bl	800ac54 <TIM_ITRx_SetConfig>
      break;
 800a3f8:	e00c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f000 fc25 	bl	800ac54 <TIM_ITRx_SetConfig>
      break;
 800a40a:	e003      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
      break;
 800a410:	e000      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a424:	7bfb      	ldrb	r3, [r7, #15]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	ffceff88 	.word	0xffceff88
 800a434:	00100040 	.word	0x00100040
 800a438:	00100030 	.word	0x00100030
 800a43c:	00100020 	.word	0x00100020

0800a440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a47      	ldr	r2, [pc, #284]	@ (800a5c0 <TIM_Base_SetConfig+0x130>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d013      	beq.n	800a4d0 <TIM_Base_SetConfig+0x40>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ae:	d00f      	beq.n	800a4d0 <TIM_Base_SetConfig+0x40>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a44      	ldr	r2, [pc, #272]	@ (800a5c4 <TIM_Base_SetConfig+0x134>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00b      	beq.n	800a4d0 <TIM_Base_SetConfig+0x40>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a43      	ldr	r2, [pc, #268]	@ (800a5c8 <TIM_Base_SetConfig+0x138>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d007      	beq.n	800a4d0 <TIM_Base_SetConfig+0x40>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a42      	ldr	r2, [pc, #264]	@ (800a5cc <TIM_Base_SetConfig+0x13c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d003      	beq.n	800a4d0 <TIM_Base_SetConfig+0x40>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a41      	ldr	r2, [pc, #260]	@ (800a5d0 <TIM_Base_SetConfig+0x140>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d108      	bne.n	800a4e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a36      	ldr	r2, [pc, #216]	@ (800a5c0 <TIM_Base_SetConfig+0x130>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d027      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f0:	d023      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a33      	ldr	r2, [pc, #204]	@ (800a5c4 <TIM_Base_SetConfig+0x134>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d01f      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a32      	ldr	r2, [pc, #200]	@ (800a5c8 <TIM_Base_SetConfig+0x138>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d01b      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a31      	ldr	r2, [pc, #196]	@ (800a5cc <TIM_Base_SetConfig+0x13c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d017      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a30      	ldr	r2, [pc, #192]	@ (800a5d0 <TIM_Base_SetConfig+0x140>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d013      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d4 <TIM_Base_SetConfig+0x144>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d00f      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2e      	ldr	r2, [pc, #184]	@ (800a5d8 <TIM_Base_SetConfig+0x148>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00b      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a2d      	ldr	r2, [pc, #180]	@ (800a5dc <TIM_Base_SetConfig+0x14c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d007      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a2c      	ldr	r2, [pc, #176]	@ (800a5e0 <TIM_Base_SetConfig+0x150>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d003      	beq.n	800a53a <TIM_Base_SetConfig+0xaa>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a2b      	ldr	r2, [pc, #172]	@ (800a5e4 <TIM_Base_SetConfig+0x154>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d108      	bne.n	800a54c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	4313      	orrs	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a14      	ldr	r2, [pc, #80]	@ (800a5c0 <TIM_Base_SetConfig+0x130>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d00f      	beq.n	800a592 <TIM_Base_SetConfig+0x102>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a16      	ldr	r2, [pc, #88]	@ (800a5d0 <TIM_Base_SetConfig+0x140>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00b      	beq.n	800a592 <TIM_Base_SetConfig+0x102>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a15      	ldr	r2, [pc, #84]	@ (800a5d4 <TIM_Base_SetConfig+0x144>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d007      	beq.n	800a592 <TIM_Base_SetConfig+0x102>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a14      	ldr	r2, [pc, #80]	@ (800a5d8 <TIM_Base_SetConfig+0x148>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d003      	beq.n	800a592 <TIM_Base_SetConfig+0x102>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a13      	ldr	r2, [pc, #76]	@ (800a5dc <TIM_Base_SetConfig+0x14c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d103      	bne.n	800a59a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f043 0204 	orr.w	r2, r3, #4
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	601a      	str	r2, [r3, #0]
}
 800a5b2:	bf00      	nop
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	40010000 	.word	0x40010000
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	40000c00 	.word	0x40000c00
 800a5d0:	40010400 	.word	0x40010400
 800a5d4:	40014000 	.word	0x40014000
 800a5d8:	40014400 	.word	0x40014400
 800a5dc:	40014800 	.word	0x40014800
 800a5e0:	4000e000 	.word	0x4000e000
 800a5e4:	4000e400 	.word	0x4000e400

0800a5e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a1b      	ldr	r3, [r3, #32]
 800a5fc:	f023 0201 	bic.w	r2, r3, #1
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	4b37      	ldr	r3, [pc, #220]	@ (800a6f0 <TIM_OC1_SetConfig+0x108>)
 800a614:	4013      	ands	r3, r2
 800a616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f023 0303 	bic.w	r3, r3, #3
 800a61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f023 0302 	bic.w	r3, r3, #2
 800a630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4313      	orrs	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a2d      	ldr	r2, [pc, #180]	@ (800a6f4 <TIM_OC1_SetConfig+0x10c>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00f      	beq.n	800a664 <TIM_OC1_SetConfig+0x7c>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a2c      	ldr	r2, [pc, #176]	@ (800a6f8 <TIM_OC1_SetConfig+0x110>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <TIM_OC1_SetConfig+0x7c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a2b      	ldr	r2, [pc, #172]	@ (800a6fc <TIM_OC1_SetConfig+0x114>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_OC1_SetConfig+0x7c>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a2a      	ldr	r2, [pc, #168]	@ (800a700 <TIM_OC1_SetConfig+0x118>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_OC1_SetConfig+0x7c>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a29      	ldr	r2, [pc, #164]	@ (800a704 <TIM_OC1_SetConfig+0x11c>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d10c      	bne.n	800a67e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f023 0308 	bic.w	r3, r3, #8
 800a66a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	4313      	orrs	r3, r2
 800a674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f023 0304 	bic.w	r3, r3, #4
 800a67c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f4 <TIM_OC1_SetConfig+0x10c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d00f      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xbe>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f8 <TIM_OC1_SetConfig+0x110>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00b      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xbe>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a1a      	ldr	r2, [pc, #104]	@ (800a6fc <TIM_OC1_SetConfig+0x114>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d007      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xbe>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a19      	ldr	r2, [pc, #100]	@ (800a700 <TIM_OC1_SetConfig+0x118>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d003      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xbe>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a18      	ldr	r2, [pc, #96]	@ (800a704 <TIM_OC1_SetConfig+0x11c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d111      	bne.n	800a6ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	621a      	str	r2, [r3, #32]
}
 800a6e4:	bf00      	nop
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	fffeff8f 	.word	0xfffeff8f
 800a6f4:	40010000 	.word	0x40010000
 800a6f8:	40010400 	.word	0x40010400
 800a6fc:	40014000 	.word	0x40014000
 800a700:	40014400 	.word	0x40014400
 800a704:	40014800 	.word	0x40014800

0800a708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a1b      	ldr	r3, [r3, #32]
 800a716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	f023 0210 	bic.w	r2, r3, #16
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4b34      	ldr	r3, [pc, #208]	@ (800a804 <TIM_OC2_SetConfig+0xfc>)
 800a734:	4013      	ands	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	021b      	lsls	r3, r3, #8
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f023 0320 	bic.w	r3, r3, #32
 800a752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a29      	ldr	r2, [pc, #164]	@ (800a808 <TIM_OC2_SetConfig+0x100>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_OC2_SetConfig+0x68>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a28      	ldr	r2, [pc, #160]	@ (800a80c <TIM_OC2_SetConfig+0x104>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10d      	bne.n	800a78c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	011b      	lsls	r3, r3, #4
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a78a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a1e      	ldr	r2, [pc, #120]	@ (800a808 <TIM_OC2_SetConfig+0x100>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d00f      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xac>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a1d      	ldr	r2, [pc, #116]	@ (800a80c <TIM_OC2_SetConfig+0x104>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d00b      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xac>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a1c      	ldr	r2, [pc, #112]	@ (800a810 <TIM_OC2_SetConfig+0x108>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d007      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xac>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a814 <TIM_OC2_SetConfig+0x10c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d003      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xac>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a818 <TIM_OC2_SetConfig+0x110>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d113      	bne.n	800a7dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	621a      	str	r2, [r3, #32]
}
 800a7f6:	bf00      	nop
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	feff8fff 	.word	0xfeff8fff
 800a808:	40010000 	.word	0x40010000
 800a80c:	40010400 	.word	0x40010400
 800a810:	40014000 	.word	0x40014000
 800a814:	40014400 	.word	0x40014400
 800a818:	40014800 	.word	0x40014800

0800a81c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4b33      	ldr	r3, [pc, #204]	@ (800a914 <TIM_OC3_SetConfig+0xf8>)
 800a848:	4013      	ands	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a28      	ldr	r2, [pc, #160]	@ (800a918 <TIM_OC3_SetConfig+0xfc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d003      	beq.n	800a882 <TIM_OC3_SetConfig+0x66>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a27      	ldr	r2, [pc, #156]	@ (800a91c <TIM_OC3_SetConfig+0x100>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d10d      	bne.n	800a89e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	021b      	lsls	r3, r3, #8
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	4313      	orrs	r3, r2
 800a894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a89c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a918 <TIM_OC3_SetConfig+0xfc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00f      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xaa>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a91c <TIM_OC3_SetConfig+0x100>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00b      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xaa>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a1b      	ldr	r2, [pc, #108]	@ (800a920 <TIM_OC3_SetConfig+0x104>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d007      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xaa>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a924 <TIM_OC3_SetConfig+0x108>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d003      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xaa>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a19      	ldr	r2, [pc, #100]	@ (800a928 <TIM_OC3_SetConfig+0x10c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d113      	bne.n	800a8ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	011b      	lsls	r3, r3, #4
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	621a      	str	r2, [r3, #32]
}
 800a908:	bf00      	nop
 800a90a:	371c      	adds	r7, #28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	fffeff8f 	.word	0xfffeff8f
 800a918:	40010000 	.word	0x40010000
 800a91c:	40010400 	.word	0x40010400
 800a920:	40014000 	.word	0x40014000
 800a924:	40014400 	.word	0x40014400
 800a928:	40014800 	.word	0x40014800

0800a92c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	4b24      	ldr	r3, [pc, #144]	@ (800a9e8 <TIM_OC4_SetConfig+0xbc>)
 800a958:	4013      	ands	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	031b      	lsls	r3, r3, #12
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a19      	ldr	r2, [pc, #100]	@ (800a9ec <TIM_OC4_SetConfig+0xc0>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00f      	beq.n	800a9ac <TIM_OC4_SetConfig+0x80>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a18      	ldr	r2, [pc, #96]	@ (800a9f0 <TIM_OC4_SetConfig+0xc4>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00b      	beq.n	800a9ac <TIM_OC4_SetConfig+0x80>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a17      	ldr	r2, [pc, #92]	@ (800a9f4 <TIM_OC4_SetConfig+0xc8>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d007      	beq.n	800a9ac <TIM_OC4_SetConfig+0x80>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a16      	ldr	r2, [pc, #88]	@ (800a9f8 <TIM_OC4_SetConfig+0xcc>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d003      	beq.n	800a9ac <TIM_OC4_SetConfig+0x80>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a15      	ldr	r2, [pc, #84]	@ (800a9fc <TIM_OC4_SetConfig+0xd0>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d109      	bne.n	800a9c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	019b      	lsls	r3, r3, #6
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	621a      	str	r2, [r3, #32]
}
 800a9da:	bf00      	nop
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	feff8fff 	.word	0xfeff8fff
 800a9ec:	40010000 	.word	0x40010000
 800a9f0:	40010400 	.word	0x40010400
 800a9f4:	40014000 	.word	0x40014000
 800a9f8:	40014400 	.word	0x40014400
 800a9fc:	40014800 	.word	0x40014800

0800aa00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4b21      	ldr	r3, [pc, #132]	@ (800aab0 <TIM_OC5_SetConfig+0xb0>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aa40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a18      	ldr	r2, [pc, #96]	@ (800aab4 <TIM_OC5_SetConfig+0xb4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00f      	beq.n	800aa76 <TIM_OC5_SetConfig+0x76>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a17      	ldr	r2, [pc, #92]	@ (800aab8 <TIM_OC5_SetConfig+0xb8>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00b      	beq.n	800aa76 <TIM_OC5_SetConfig+0x76>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a16      	ldr	r2, [pc, #88]	@ (800aabc <TIM_OC5_SetConfig+0xbc>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d007      	beq.n	800aa76 <TIM_OC5_SetConfig+0x76>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a15      	ldr	r2, [pc, #84]	@ (800aac0 <TIM_OC5_SetConfig+0xc0>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d003      	beq.n	800aa76 <TIM_OC5_SetConfig+0x76>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a14      	ldr	r2, [pc, #80]	@ (800aac4 <TIM_OC5_SetConfig+0xc4>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d109      	bne.n	800aa8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685a      	ldr	r2, [r3, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	621a      	str	r2, [r3, #32]
}
 800aaa4:	bf00      	nop
 800aaa6:	371c      	adds	r7, #28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	fffeff8f 	.word	0xfffeff8f
 800aab4:	40010000 	.word	0x40010000
 800aab8:	40010400 	.word	0x40010400
 800aabc:	40014000 	.word	0x40014000
 800aac0:	40014400 	.word	0x40014400
 800aac4:	40014800 	.word	0x40014800

0800aac8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4b22      	ldr	r3, [pc, #136]	@ (800ab7c <TIM_OC6_SetConfig+0xb4>)
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	051b      	lsls	r3, r3, #20
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a19      	ldr	r2, [pc, #100]	@ (800ab80 <TIM_OC6_SetConfig+0xb8>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d00f      	beq.n	800ab40 <TIM_OC6_SetConfig+0x78>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a18      	ldr	r2, [pc, #96]	@ (800ab84 <TIM_OC6_SetConfig+0xbc>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d00b      	beq.n	800ab40 <TIM_OC6_SetConfig+0x78>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a17      	ldr	r2, [pc, #92]	@ (800ab88 <TIM_OC6_SetConfig+0xc0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d007      	beq.n	800ab40 <TIM_OC6_SetConfig+0x78>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a16      	ldr	r2, [pc, #88]	@ (800ab8c <TIM_OC6_SetConfig+0xc4>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d003      	beq.n	800ab40 <TIM_OC6_SetConfig+0x78>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a15      	ldr	r2, [pc, #84]	@ (800ab90 <TIM_OC6_SetConfig+0xc8>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d109      	bne.n	800ab54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	029b      	lsls	r3, r3, #10
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	621a      	str	r2, [r3, #32]
}
 800ab6e:	bf00      	nop
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	feff8fff 	.word	0xfeff8fff
 800ab80:	40010000 	.word	0x40010000
 800ab84:	40010400 	.word	0x40010400
 800ab88:	40014000 	.word	0x40014000
 800ab8c:	40014400 	.word	0x40014400
 800ab90:	40014800 	.word	0x40014800

0800ab94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	f023 0201 	bic.w	r2, r3, #1
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	011b      	lsls	r3, r3, #4
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f023 030a 	bic.w	r3, r3, #10
 800abd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	621a      	str	r2, [r3, #32]
}
 800abe6:	bf00      	nop
 800abe8:	371c      	adds	r7, #28
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abf2:	b480      	push	{r7}
 800abf4:	b087      	sub	sp, #28
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	f023 0210 	bic.w	r2, r3, #16
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	031b      	lsls	r3, r3, #12
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	621a      	str	r2, [r3, #32]
}
 800ac46:	bf00      	nop
 800ac48:	371c      	adds	r7, #28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
	...

0800ac54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	4b09      	ldr	r3, [pc, #36]	@ (800ac8c <TIM_ITRx_SetConfig+0x38>)
 800ac68:	4013      	ands	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	f043 0307 	orr.w	r3, r3, #7
 800ac76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	609a      	str	r2, [r3, #8]
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	ffcfff8f 	.word	0xffcfff8f

0800ac90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	021a      	lsls	r2, r3, #8
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	431a      	orrs	r2, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	4313      	orrs	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	609a      	str	r2, [r3, #8]
}
 800acc4:	bf00      	nop
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d101      	bne.n	800ace8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ace4:	2302      	movs	r3, #2
 800ace6:	e077      	b.n	800add8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2202      	movs	r2, #2
 800acf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a35      	ldr	r2, [pc, #212]	@ (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d004      	beq.n	800ad1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a34      	ldr	r2, [pc, #208]	@ (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d108      	bne.n	800ad2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a25      	ldr	r2, [pc, #148]	@ (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d02c      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad5a:	d027      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a22      	ldr	r2, [pc, #136]	@ (800adec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d022      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a21      	ldr	r2, [pc, #132]	@ (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d01d      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a1f      	ldr	r2, [pc, #124]	@ (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d018      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a1a      	ldr	r2, [pc, #104]	@ (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d013      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a1b      	ldr	r2, [pc, #108]	@ (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00e      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a1a      	ldr	r2, [pc, #104]	@ (800adfc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d009      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a18      	ldr	r2, [pc, #96]	@ (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d004      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a17      	ldr	r2, [pc, #92]	@ (800ae04 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d10c      	bne.n	800adc6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	40010000 	.word	0x40010000
 800ade8:	40010400 	.word	0x40010400
 800adec:	40000400 	.word	0x40000400
 800adf0:	40000800 	.word	0x40000800
 800adf4:	40000c00 	.word	0x40000c00
 800adf8:	40001800 	.word	0x40001800
 800adfc:	40014000 	.word	0x40014000
 800ae00:	4000e000 	.word	0x4000e000
 800ae04:	4000e400 	.word	0x4000e400

0800ae08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d101      	bne.n	800ae24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e073      	b.n	800af0c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	041b      	lsls	r3, r3, #16
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a19      	ldr	r2, [pc, #100]	@ (800af18 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d004      	beq.n	800aec0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a18      	ldr	r2, [pc, #96]	@ (800af1c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d11c      	bne.n	800aefa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeca:	051b      	lsls	r3, r3, #20
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee8:	4313      	orrs	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	40010000 	.word	0x40010000
 800af1c:	40010400 	.word	0x40010400

0800af20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800af62:	4b92      	ldr	r3, [pc, #584]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800af64:	220a      	movs	r2, #10
 800af66:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 800af68:	4b90      	ldr	r3, [pc, #576]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800af6a:	2214      	movs	r2, #20
 800af6c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 800af6e:	4b8f      	ldr	r3, [pc, #572]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800af70:	2203      	movs	r2, #3
 800af72:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 800af74:	4b8d      	ldr	r3, [pc, #564]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800af76:	2203      	movs	r2, #3
 800af78:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800af7a:	4b8d      	ldr	r3, [pc, #564]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800af7c:	22ff      	movs	r2, #255	@ 0xff
 800af7e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800af80:	4b8b      	ldr	r3, [pc, #556]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800af82:	22ff      	movs	r2, #255	@ 0xff
 800af84:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800af86:	4b8a      	ldr	r3, [pc, #552]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800af88:	2200      	movs	r2, #0
 800af8a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800af8c:	4b88      	ldr	r3, [pc, #544]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800af8e:	2200      	movs	r2, #0
 800af90:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800af92:	4b88      	ldr	r3, [pc, #544]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800af94:	220a      	movs	r2, #10
 800af96:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 20;
 800af98:	4b86      	ldr	r3, [pc, #536]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800af9a:	2214      	movs	r2, #20
 800af9c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800af9e:	4b85      	ldr	r3, [pc, #532]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800afa0:	2201      	movs	r2, #1
 800afa2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 3;
 800afa4:	4b83      	ldr	r3, [pc, #524]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800afa6:	2203      	movs	r2, #3
 800afa8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800afaa:	2100      	movs	r1, #0
 800afac:	2000      	movs	r0, #0
 800afae:	f004 ff5b 	bl	800fe68 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800afb2:	4b7e      	ldr	r3, [pc, #504]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	061a      	lsls	r2, r3, #24
 800afb8:	4b7c      	ldr	r3, [pc, #496]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afba:	785b      	ldrb	r3, [r3, #1]
 800afbc:	041b      	lsls	r3, r3, #16
 800afbe:	431a      	orrs	r2, r3
 800afc0:	4b7a      	ldr	r3, [pc, #488]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afc2:	789b      	ldrb	r3, [r3, #2]
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	4313      	orrs	r3, r2
 800afc8:	4a78      	ldr	r2, [pc, #480]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afca:	78d2      	ldrb	r2, [r2, #3]
 800afcc:	4313      	orrs	r3, r2
 800afce:	061a      	lsls	r2, r3, #24
 800afd0:	4b76      	ldr	r3, [pc, #472]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	0619      	lsls	r1, r3, #24
 800afd6:	4b75      	ldr	r3, [pc, #468]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afd8:	785b      	ldrb	r3, [r3, #1]
 800afda:	041b      	lsls	r3, r3, #16
 800afdc:	4319      	orrs	r1, r3
 800afde:	4b73      	ldr	r3, [pc, #460]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afe0:	789b      	ldrb	r3, [r3, #2]
 800afe2:	021b      	lsls	r3, r3, #8
 800afe4:	430b      	orrs	r3, r1
 800afe6:	4971      	ldr	r1, [pc, #452]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800afe8:	78c9      	ldrb	r1, [r1, #3]
 800afea:	430b      	orrs	r3, r1
 800afec:	021b      	lsls	r3, r3, #8
 800afee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aff2:	431a      	orrs	r2, r3
 800aff4:	4b6d      	ldr	r3, [pc, #436]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	0619      	lsls	r1, r3, #24
 800affa:	4b6c      	ldr	r3, [pc, #432]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800affc:	785b      	ldrb	r3, [r3, #1]
 800affe:	041b      	lsls	r3, r3, #16
 800b000:	4319      	orrs	r1, r3
 800b002:	4b6a      	ldr	r3, [pc, #424]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800b004:	789b      	ldrb	r3, [r3, #2]
 800b006:	021b      	lsls	r3, r3, #8
 800b008:	430b      	orrs	r3, r1
 800b00a:	4968      	ldr	r1, [pc, #416]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800b00c:	78c9      	ldrb	r1, [r1, #3]
 800b00e:	430b      	orrs	r3, r1
 800b010:	0a1b      	lsrs	r3, r3, #8
 800b012:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b016:	431a      	orrs	r2, r3
 800b018:	4b64      	ldr	r3, [pc, #400]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	0619      	lsls	r1, r3, #24
 800b01e:	4b63      	ldr	r3, [pc, #396]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800b020:	785b      	ldrb	r3, [r3, #1]
 800b022:	041b      	lsls	r3, r3, #16
 800b024:	4319      	orrs	r1, r3
 800b026:	4b61      	ldr	r3, [pc, #388]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800b028:	789b      	ldrb	r3, [r3, #2]
 800b02a:	021b      	lsls	r3, r3, #8
 800b02c:	430b      	orrs	r3, r1
 800b02e:	495f      	ldr	r1, [pc, #380]	@ (800b1ac <MX_LWIP_Init+0x250>)
 800b030:	78c9      	ldrb	r1, [r1, #3]
 800b032:	430b      	orrs	r3, r1
 800b034:	0e1b      	lsrs	r3, r3, #24
 800b036:	4313      	orrs	r3, r2
 800b038:	4a5f      	ldr	r2, [pc, #380]	@ (800b1b8 <MX_LWIP_Init+0x25c>)
 800b03a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b03c:	4b5c      	ldr	r3, [pc, #368]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	061a      	lsls	r2, r3, #24
 800b042:	4b5b      	ldr	r3, [pc, #364]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b044:	785b      	ldrb	r3, [r3, #1]
 800b046:	041b      	lsls	r3, r3, #16
 800b048:	431a      	orrs	r2, r3
 800b04a:	4b59      	ldr	r3, [pc, #356]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b04c:	789b      	ldrb	r3, [r3, #2]
 800b04e:	021b      	lsls	r3, r3, #8
 800b050:	4313      	orrs	r3, r2
 800b052:	4a57      	ldr	r2, [pc, #348]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b054:	78d2      	ldrb	r2, [r2, #3]
 800b056:	4313      	orrs	r3, r2
 800b058:	061a      	lsls	r2, r3, #24
 800b05a:	4b55      	ldr	r3, [pc, #340]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	0619      	lsls	r1, r3, #24
 800b060:	4b53      	ldr	r3, [pc, #332]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b062:	785b      	ldrb	r3, [r3, #1]
 800b064:	041b      	lsls	r3, r3, #16
 800b066:	4319      	orrs	r1, r3
 800b068:	4b51      	ldr	r3, [pc, #324]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b06a:	789b      	ldrb	r3, [r3, #2]
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	430b      	orrs	r3, r1
 800b070:	494f      	ldr	r1, [pc, #316]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b072:	78c9      	ldrb	r1, [r1, #3]
 800b074:	430b      	orrs	r3, r1
 800b076:	021b      	lsls	r3, r3, #8
 800b078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b07c:	431a      	orrs	r2, r3
 800b07e:	4b4c      	ldr	r3, [pc, #304]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	0619      	lsls	r1, r3, #24
 800b084:	4b4a      	ldr	r3, [pc, #296]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	041b      	lsls	r3, r3, #16
 800b08a:	4319      	orrs	r1, r3
 800b08c:	4b48      	ldr	r3, [pc, #288]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b08e:	789b      	ldrb	r3, [r3, #2]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	430b      	orrs	r3, r1
 800b094:	4946      	ldr	r1, [pc, #280]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b096:	78c9      	ldrb	r1, [r1, #3]
 800b098:	430b      	orrs	r3, r1
 800b09a:	0a1b      	lsrs	r3, r3, #8
 800b09c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	4b43      	ldr	r3, [pc, #268]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	0619      	lsls	r1, r3, #24
 800b0a8:	4b41      	ldr	r3, [pc, #260]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b0aa:	785b      	ldrb	r3, [r3, #1]
 800b0ac:	041b      	lsls	r3, r3, #16
 800b0ae:	4319      	orrs	r1, r3
 800b0b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b0b2:	789b      	ldrb	r3, [r3, #2]
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	430b      	orrs	r3, r1
 800b0b8:	493d      	ldr	r1, [pc, #244]	@ (800b1b0 <MX_LWIP_Init+0x254>)
 800b0ba:	78c9      	ldrb	r1, [r1, #3]
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	0e1b      	lsrs	r3, r3, #24
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	4a3e      	ldr	r2, [pc, #248]	@ (800b1bc <MX_LWIP_Init+0x260>)
 800b0c4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b0c6:	4b3b      	ldr	r3, [pc, #236]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	061a      	lsls	r2, r3, #24
 800b0cc:	4b39      	ldr	r3, [pc, #228]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0ce:	785b      	ldrb	r3, [r3, #1]
 800b0d0:	041b      	lsls	r3, r3, #16
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	4b37      	ldr	r3, [pc, #220]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0d6:	789b      	ldrb	r3, [r3, #2]
 800b0d8:	021b      	lsls	r3, r3, #8
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	4a35      	ldr	r2, [pc, #212]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0de:	78d2      	ldrb	r2, [r2, #3]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	061a      	lsls	r2, r3, #24
 800b0e4:	4b33      	ldr	r3, [pc, #204]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	0619      	lsls	r1, r3, #24
 800b0ea:	4b32      	ldr	r3, [pc, #200]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0ec:	785b      	ldrb	r3, [r3, #1]
 800b0ee:	041b      	lsls	r3, r3, #16
 800b0f0:	4319      	orrs	r1, r3
 800b0f2:	4b30      	ldr	r3, [pc, #192]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0f4:	789b      	ldrb	r3, [r3, #2]
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	430b      	orrs	r3, r1
 800b0fa:	492e      	ldr	r1, [pc, #184]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b0fc:	78c9      	ldrb	r1, [r1, #3]
 800b0fe:	430b      	orrs	r3, r1
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b106:	431a      	orrs	r2, r3
 800b108:	4b2a      	ldr	r3, [pc, #168]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	0619      	lsls	r1, r3, #24
 800b10e:	4b29      	ldr	r3, [pc, #164]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b110:	785b      	ldrb	r3, [r3, #1]
 800b112:	041b      	lsls	r3, r3, #16
 800b114:	4319      	orrs	r1, r3
 800b116:	4b27      	ldr	r3, [pc, #156]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b118:	789b      	ldrb	r3, [r3, #2]
 800b11a:	021b      	lsls	r3, r3, #8
 800b11c:	430b      	orrs	r3, r1
 800b11e:	4925      	ldr	r1, [pc, #148]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b120:	78c9      	ldrb	r1, [r1, #3]
 800b122:	430b      	orrs	r3, r1
 800b124:	0a1b      	lsrs	r3, r3, #8
 800b126:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b12a:	431a      	orrs	r2, r3
 800b12c:	4b21      	ldr	r3, [pc, #132]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	0619      	lsls	r1, r3, #24
 800b132:	4b20      	ldr	r3, [pc, #128]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b134:	785b      	ldrb	r3, [r3, #1]
 800b136:	041b      	lsls	r3, r3, #16
 800b138:	4319      	orrs	r1, r3
 800b13a:	4b1e      	ldr	r3, [pc, #120]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b13c:	789b      	ldrb	r3, [r3, #2]
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	430b      	orrs	r3, r1
 800b142:	491c      	ldr	r1, [pc, #112]	@ (800b1b4 <MX_LWIP_Init+0x258>)
 800b144:	78c9      	ldrb	r1, [r1, #3]
 800b146:	430b      	orrs	r3, r1
 800b148:	0e1b      	lsrs	r3, r3, #24
 800b14a:	4313      	orrs	r3, r2
 800b14c:	4a1c      	ldr	r2, [pc, #112]	@ (800b1c0 <MX_LWIP_Init+0x264>)
 800b14e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b150:	4b1c      	ldr	r3, [pc, #112]	@ (800b1c4 <MX_LWIP_Init+0x268>)
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	4b1c      	ldr	r3, [pc, #112]	@ (800b1c8 <MX_LWIP_Init+0x26c>)
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	2300      	movs	r3, #0
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	4b18      	ldr	r3, [pc, #96]	@ (800b1c0 <MX_LWIP_Init+0x264>)
 800b15e:	4a17      	ldr	r2, [pc, #92]	@ (800b1bc <MX_LWIP_Init+0x260>)
 800b160:	4915      	ldr	r1, [pc, #84]	@ (800b1b8 <MX_LWIP_Init+0x25c>)
 800b162:	481a      	ldr	r0, [pc, #104]	@ (800b1cc <MX_LWIP_Init+0x270>)
 800b164:	f005 fd02 	bl	8010b6c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b168:	4818      	ldr	r0, [pc, #96]	@ (800b1cc <MX_LWIP_Init+0x270>)
 800b16a:	f005 feb5 	bl	8010ed8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b16e:	4817      	ldr	r0, [pc, #92]	@ (800b1cc <MX_LWIP_Init+0x270>)
 800b170:	f005 fec2 	bl	8010ef8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b174:	4916      	ldr	r1, [pc, #88]	@ (800b1d0 <MX_LWIP_Init+0x274>)
 800b176:	4815      	ldr	r0, [pc, #84]	@ (800b1cc <MX_LWIP_Init+0x270>)
 800b178:	f005 ffc0 	bl	80110fc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b17c:	2224      	movs	r2, #36	@ 0x24
 800b17e:	2100      	movs	r1, #0
 800b180:	4814      	ldr	r0, [pc, #80]	@ (800b1d4 <MX_LWIP_Init+0x278>)
 800b182:	f00f fc14 	bl	801a9ae <memset>
  attributes.name = "EthLink";
 800b186:	4b13      	ldr	r3, [pc, #76]	@ (800b1d4 <MX_LWIP_Init+0x278>)
 800b188:	4a13      	ldr	r2, [pc, #76]	@ (800b1d8 <MX_LWIP_Init+0x27c>)
 800b18a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b18c:	4b11      	ldr	r3, [pc, #68]	@ (800b1d4 <MX_LWIP_Init+0x278>)
 800b18e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b192:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b194:	4b0f      	ldr	r3, [pc, #60]	@ (800b1d4 <MX_LWIP_Init+0x278>)
 800b196:	2210      	movs	r2, #16
 800b198:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b19a:	4a0e      	ldr	r2, [pc, #56]	@ (800b1d4 <MX_LWIP_Init+0x278>)
 800b19c:	490b      	ldr	r1, [pc, #44]	@ (800b1cc <MX_LWIP_Init+0x270>)
 800b19e:	480f      	ldr	r0, [pc, #60]	@ (800b1dc <MX_LWIP_Init+0x280>)
 800b1a0:	f000 fde1 	bl	800bd66 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b1a4:	bf00      	nop
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	24005900 	.word	0x24005900
 800b1b0:	24005904 	.word	0x24005904
 800b1b4:	24005908 	.word	0x24005908
 800b1b8:	240058f4 	.word	0x240058f4
 800b1bc:	240058f8 	.word	0x240058f8
 800b1c0:	240058fc 	.word	0x240058fc
 800b1c4:	0800fda5 	.word	0x0800fda5
 800b1c8:	0800b6c9 	.word	0x0800b6c9
 800b1cc:	240058c0 	.word	0x240058c0
 800b1d0:	0800b1e1 	.word	0x0800b1e1
 800b1d4:	2400590c 	.word	0x2400590c
 800b1d8:	0801b7e4 	.word	0x0801b7e4
 800b1dc:	0800b9bd 	.word	0x0800b9bd

0800b1e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b1fc:	4b04      	ldr	r3, [pc, #16]	@ (800b210 <HAL_ETH_RxCpltCallback+0x1c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4618      	mov	r0, r3
 800b202:	f001 f847 	bl	800c294 <osSemaphoreRelease>
}
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	24005938 	.word	0x24005938

0800b214 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b21c:	4b04      	ldr	r3, [pc, #16]	@ (800b230 <HAL_ETH_TxCpltCallback+0x1c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4618      	mov	r0, r3
 800b222:	f001 f837 	bl	800c294 <osSemaphoreRelease>
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	2400593c 	.word	0x2400593c

0800b234 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7f9 fe76 	bl	8004f2e <HAL_ETH_GetDMAError>
 800b242:	4603      	mov	r3, r0
 800b244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b248:	2b80      	cmp	r3, #128	@ 0x80
 800b24a:	d104      	bne.n	800b256 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b24c:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <HAL_ETH_ErrorCallback+0x2c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	f001 f81f 	bl	800c294 <osSemaphoreRelease>
  }
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	24005938 	.word	0x24005938

0800b264 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b0aa      	sub	sp, #168	@ 0xa8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800b27e:	f107 0310 	add.w	r3, r7, #16
 800b282:	2264      	movs	r2, #100	@ 0x64
 800b284:	2100      	movs	r1, #0
 800b286:	4618      	mov	r0, r3
 800b288:	f00f fb91 	bl	801a9ae <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b28c:	4b89      	ldr	r3, [pc, #548]	@ (800b4b4 <low_level_init+0x250>)
 800b28e:	4a8a      	ldr	r2, [pc, #552]	@ (800b4b8 <low_level_init+0x254>)
 800b290:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b292:	2300      	movs	r3, #0
 800b294:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b296:	2380      	movs	r3, #128	@ 0x80
 800b298:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b29a:	23e1      	movs	r3, #225	@ 0xe1
 800b29c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b2aa:	4a82      	ldr	r2, [pc, #520]	@ (800b4b4 <low_level_init+0x250>)
 800b2ac:	f107 0308 	add.w	r3, r7, #8
 800b2b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b2b2:	4b80      	ldr	r3, [pc, #512]	@ (800b4b4 <low_level_init+0x250>)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b2b8:	4b7e      	ldr	r3, [pc, #504]	@ (800b4b4 <low_level_init+0x250>)
 800b2ba:	4a80      	ldr	r2, [pc, #512]	@ (800b4bc <low_level_init+0x258>)
 800b2bc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b2be:	4b7d      	ldr	r3, [pc, #500]	@ (800b4b4 <low_level_init+0x250>)
 800b2c0:	4a7f      	ldr	r2, [pc, #508]	@ (800b4c0 <low_level_init+0x25c>)
 800b2c2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b2c4:	4b7b      	ldr	r3, [pc, #492]	@ (800b4b4 <low_level_init+0x250>)
 800b2c6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b2ca:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b2cc:	4879      	ldr	r0, [pc, #484]	@ (800b4b4 <low_level_init+0x250>)
 800b2ce:	f7f8 fe55 	bl	8003f7c <HAL_ETH_Init>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b2d8:	2238      	movs	r2, #56	@ 0x38
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4879      	ldr	r0, [pc, #484]	@ (800b4c4 <low_level_init+0x260>)
 800b2de:	f00f fb66 	bl	801a9ae <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b2e2:	4b78      	ldr	r3, [pc, #480]	@ (800b4c4 <low_level_init+0x260>)
 800b2e4:	2221      	movs	r2, #33	@ 0x21
 800b2e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b2e8:	4b76      	ldr	r3, [pc, #472]	@ (800b4c4 <low_level_init+0x260>)
 800b2ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800b2ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b2f0:	4b74      	ldr	r3, [pc, #464]	@ (800b4c4 <low_level_init+0x260>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b2f6:	4874      	ldr	r0, [pc, #464]	@ (800b4c8 <low_level_init+0x264>)
 800b2f8:	f005 faf2 	bl	80108e0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2206      	movs	r2, #6
 800b300:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b304:	4b6b      	ldr	r3, [pc, #428]	@ (800b4b4 <low_level_init+0x250>)
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	781a      	ldrb	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b310:	4b68      	ldr	r3, [pc, #416]	@ (800b4b4 <low_level_init+0x250>)
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	785a      	ldrb	r2, [r3, #1]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b31c:	4b65      	ldr	r3, [pc, #404]	@ (800b4b4 <low_level_init+0x250>)
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	789a      	ldrb	r2, [r3, #2]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b328:	4b62      	ldr	r3, [pc, #392]	@ (800b4b4 <low_level_init+0x250>)
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	78da      	ldrb	r2, [r3, #3]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b334:	4b5f      	ldr	r3, [pc, #380]	@ (800b4b4 <low_level_init+0x250>)
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	791a      	ldrb	r2, [r3, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b340:	4b5c      	ldr	r3, [pc, #368]	@ (800b4b4 <low_level_init+0x250>)
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	795a      	ldrb	r2, [r3, #5]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b352:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b35a:	f043 030a 	orr.w	r3, r3, #10
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b366:	2200      	movs	r2, #0
 800b368:	2100      	movs	r1, #0
 800b36a:	2001      	movs	r0, #1
 800b36c:	f000 feb6 	bl	800c0dc <osSemaphoreNew>
 800b370:	4603      	mov	r3, r0
 800b372:	4a56      	ldr	r2, [pc, #344]	@ (800b4cc <low_level_init+0x268>)
 800b374:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b376:	2200      	movs	r2, #0
 800b378:	2100      	movs	r1, #0
 800b37a:	2001      	movs	r0, #1
 800b37c:	f000 feae 	bl	800c0dc <osSemaphoreNew>
 800b380:	4603      	mov	r3, r0
 800b382:	4a53      	ldr	r2, [pc, #332]	@ (800b4d0 <low_level_init+0x26c>)
 800b384:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b386:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b38a:	2224      	movs	r2, #36	@ 0x24
 800b38c:	2100      	movs	r1, #0
 800b38e:	4618      	mov	r0, r3
 800b390:	f00f fb0d 	bl	801a9ae <memset>
  attributes.name = "EthIf";
 800b394:	4b4f      	ldr	r3, [pc, #316]	@ (800b4d4 <low_level_init+0x270>)
 800b396:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b398:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800b39c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800b3a0:	2330      	movs	r3, #48	@ 0x30
 800b3a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800b3a6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	6879      	ldr	r1, [r7, #4]
 800b3ae:	484a      	ldr	r0, [pc, #296]	@ (800b4d8 <low_level_init+0x274>)
 800b3b0:	f000 fcd9 	bl	800bd66 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b3b4:	4949      	ldr	r1, [pc, #292]	@ (800b4dc <low_level_init+0x278>)
 800b3b6:	484a      	ldr	r0, [pc, #296]	@ (800b4e0 <low_level_init+0x27c>)
 800b3b8:	f7f6 fbb7 	bl	8001b2a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b3bc:	4848      	ldr	r0, [pc, #288]	@ (800b4e0 <low_level_init+0x27c>)
 800b3be:	f7f6 fbe6 	bl	8001b8e <LAN8742_Init>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d006      	beq.n	800b3d6 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f005 fe67 	bl	801109c <netif_set_link_down>
    netif_set_down(netif);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f005 fdfe 	bl	8010fd0 <netif_set_down>
 800b3d4:	e06b      	b.n	800b4ae <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b3d6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d165      	bne.n	800b4aa <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b3de:	4840      	ldr	r0, [pc, #256]	@ (800b4e0 <low_level_init+0x27c>)
 800b3e0:	f7f6 fc22 	bl	8001c28 <LAN8742_GetLinkState>
 800b3e4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b3e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	dc06      	bgt.n	800b3fe <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f005 fe53 	bl	801109c <netif_set_link_down>
      netif_set_down(netif);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f005 fdea 	bl	8010fd0 <netif_set_down>
 800b3fc:	e057      	b.n	800b4ae <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800b3fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b402:	3b02      	subs	r3, #2
 800b404:	2b03      	cmp	r3, #3
 800b406:	d82b      	bhi.n	800b460 <low_level_init+0x1fc>
 800b408:	a201      	add	r2, pc, #4	@ (adr r2, 800b410 <low_level_init+0x1ac>)
 800b40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40e:	bf00      	nop
 800b410:	0800b421 	.word	0x0800b421
 800b414:	0800b433 	.word	0x0800b433
 800b418:	0800b443 	.word	0x0800b443
 800b41c:	0800b453 	.word	0x0800b453
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b428:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b42c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b430:	e01f      	b.n	800b472 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b432:	2300      	movs	r3, #0
 800b434:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b438:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b43c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b440:	e017      	b.n	800b472 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b44a:	2300      	movs	r3, #0
 800b44c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b450:	e00f      	b.n	800b472 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b452:	2300      	movs	r3, #0
 800b454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b458:	2300      	movs	r3, #0
 800b45a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b45e:	e008      	b.n	800b472 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800b460:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b468:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b46c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b470:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b472:	f107 0310 	add.w	r3, r7, #16
 800b476:	4619      	mov	r1, r3
 800b478:	480e      	ldr	r0, [pc, #56]	@ (800b4b4 <low_level_init+0x250>)
 800b47a:	f7f9 fb0d 	bl	8004a98 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b47e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b482:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800b484:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b48a:	f107 0310 	add.w	r3, r7, #16
 800b48e:	4619      	mov	r1, r3
 800b490:	4808      	ldr	r0, [pc, #32]	@ (800b4b4 <low_level_init+0x250>)
 800b492:	f7f9 fcd5 	bl	8004e40 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800b496:	4807      	ldr	r0, [pc, #28]	@ (800b4b4 <low_level_init+0x250>)
 800b498:	f7f8 fe6e 	bl	8004178 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f005 fd2b 	bl	8010ef8 <netif_set_up>
    netif_set_link_up(netif);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f005 fdc6 	bl	8011034 <netif_set_link_up>
 800b4a8:	e001      	b.n	800b4ae <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800b4aa:	f7f5 fea5 	bl	80011f8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b4ae:	37a8      	adds	r7, #168	@ 0xa8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	24005940 	.word	0x24005940
 800b4b8:	40028000 	.word	0x40028000
 800b4bc:	30000100 	.word	0x30000100
 800b4c0:	30000000 	.word	0x30000000
 800b4c4:	240059f0 	.word	0x240059f0
 800b4c8:	0801e414 	.word	0x0801e414
 800b4cc:	24005938 	.word	0x24005938
 800b4d0:	2400593c 	.word	0x2400593c
 800b4d4:	0801b7ec 	.word	0x0801b7ec
 800b4d8:	0800b675 	.word	0x0800b675
 800b4dc:	240049a0 	.word	0x240049a0
 800b4e0:	24005a28 	.word	0x24005a28

0800b4e4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b092      	sub	sp, #72	@ 0x48
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b4fc:	f107 030c 	add.w	r3, r7, #12
 800b500:	2230      	movs	r2, #48	@ 0x30
 800b502:	2100      	movs	r1, #0
 800b504:	4618      	mov	r0, r3
 800b506:	f00f fa52 	bl	801a9ae <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b50a:	f107 030c 	add.w	r3, r7, #12
 800b50e:	2230      	movs	r2, #48	@ 0x30
 800b510:	2100      	movs	r1, #0
 800b512:	4618      	mov	r0, r3
 800b514:	f00f fa4b 	bl	801a9ae <memset>

  for(q = p; q != NULL; q = q->next)
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b51c:	e045      	b.n	800b5aa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b51e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b520:	2b03      	cmp	r3, #3
 800b522:	d902      	bls.n	800b52a <low_level_output+0x46>
      return ERR_IF;
 800b524:	f06f 030b 	mvn.w	r3, #11
 800b528:	e07f      	b.n	800b62a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800b52a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b52c:	6859      	ldr	r1, [r3, #4]
 800b52e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b530:	4613      	mov	r3, r2
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	4413      	add	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	3348      	adds	r3, #72	@ 0x48
 800b53a:	443b      	add	r3, r7
 800b53c:	3b3c      	subs	r3, #60	@ 0x3c
 800b53e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b542:	895b      	ldrh	r3, [r3, #10]
 800b544:	4619      	mov	r1, r3
 800b546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b548:	4613      	mov	r3, r2
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	4413      	add	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	3348      	adds	r3, #72	@ 0x48
 800b552:	443b      	add	r3, r7
 800b554:	3b38      	subs	r3, #56	@ 0x38
 800b556:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d011      	beq.n	800b582 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b55e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b560:	1e5a      	subs	r2, r3, #1
 800b562:	f107 000c 	add.w	r0, r7, #12
 800b566:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b568:	460b      	mov	r3, r1
 800b56a:	005b      	lsls	r3, r3, #1
 800b56c:	440b      	add	r3, r1
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	18c1      	adds	r1, r0, r3
 800b572:	4613      	mov	r3, r2
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	3348      	adds	r3, #72	@ 0x48
 800b57c:	443b      	add	r3, r7
 800b57e:	3b34      	subs	r3, #52	@ 0x34
 800b580:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d109      	bne.n	800b59e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b58a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b58c:	4613      	mov	r3, r2
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	4413      	add	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	3348      	adds	r3, #72	@ 0x48
 800b596:	443b      	add	r3, r7
 800b598:	3b34      	subs	r3, #52	@ 0x34
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b5a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1b6      	bne.n	800b51e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	891b      	ldrh	r3, [r3, #8]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b634 <low_level_output+0x150>)
 800b5b8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b5ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b634 <low_level_output+0x150>)
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b5c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b634 <low_level_output+0x150>)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800b5c8:	6838      	ldr	r0, [r7, #0]
 800b5ca:	f006 f9ef 	bl	80119ac <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800b5ce:	4919      	ldr	r1, [pc, #100]	@ (800b634 <low_level_output+0x150>)
 800b5d0:	4819      	ldr	r0, [pc, #100]	@ (800b638 <low_level_output+0x154>)
 800b5d2:	f7f8 febd 	bl	8004350 <HAL_ETH_Transmit_IT>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b5e2:	e01b      	b.n	800b61c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800b5e4:	4814      	ldr	r0, [pc, #80]	@ (800b638 <low_level_output+0x154>)
 800b5e6:	f7f9 fc95 	bl	8004f14 <HAL_ETH_GetError>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00d      	beq.n	800b610 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800b5f4:	4b11      	ldr	r3, [pc, #68]	@ (800b63c <low_level_output+0x158>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 fdf7 	bl	800c1f0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800b602:	480d      	ldr	r0, [pc, #52]	@ (800b638 <low_level_output+0x154>)
 800b604:	f7f9 f82b 	bl	800465e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800b608:	23fe      	movs	r3, #254	@ 0xfe
 800b60a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b60e:	e005      	b.n	800b61c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800b610:	6838      	ldr	r0, [r7, #0]
 800b612:	f006 f925 	bl	8011860 <pbuf_free>
        errval =  ERR_IF;
 800b616:	23f4      	movs	r3, #244	@ 0xf4
 800b618:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800b61c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b620:	f113 0f02 	cmn.w	r3, #2
 800b624:	d0d3      	beq.n	800b5ce <low_level_output+0xea>

  return errval;
 800b626:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3748      	adds	r7, #72	@ 0x48
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	240059f0 	.word	0x240059f0
 800b638:	24005940 	.word	0x24005940
 800b63c:	2400593c 	.word	0x2400593c

0800b640 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b648:	2300      	movs	r3, #0
 800b64a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b64c:	4b07      	ldr	r3, [pc, #28]	@ (800b66c <low_level_input+0x2c>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d105      	bne.n	800b660 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b654:	f107 030c 	add.w	r3, r7, #12
 800b658:	4619      	mov	r1, r3
 800b65a:	4805      	ldr	r0, [pc, #20]	@ (800b670 <low_level_input+0x30>)
 800b65c:	f7f8 fec9 	bl	80043f2 <HAL_ETH_ReadData>
  }

  return p;
 800b660:	68fb      	ldr	r3, [r7, #12]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	24005934 	.word	0x24005934
 800b670:	24005940 	.word	0x24005940

0800b674 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b67c:	2300      	movs	r3, #0
 800b67e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b684:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c4 <ethernetif_input+0x50>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f04f 31ff 	mov.w	r1, #4294967295
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 fdaf 	bl	800c1f0 <osSemaphoreAcquire>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1f5      	bne.n	800b684 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800b698:	68b8      	ldr	r0, [r7, #8]
 800b69a:	f7ff ffd1 	bl	800b640 <low_level_input>
 800b69e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00a      	beq.n	800b6bc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	4798      	blx	r3
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d002      	beq.n	800b6bc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f006 f8d2 	bl	8011860 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1ea      	bne.n	800b698 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b6c2:	e7df      	b.n	800b684 <ethernetif_input+0x10>
 800b6c4:	24005938 	.word	0x24005938

0800b6c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <ethernetif_init+0x1c>
 800b6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b710 <ethernetif_init+0x48>)
 800b6d8:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800b6dc:	490d      	ldr	r1, [pc, #52]	@ (800b714 <ethernetif_init+0x4c>)
 800b6de:	480e      	ldr	r0, [pc, #56]	@ (800b718 <ethernetif_init+0x50>)
 800b6e0:	f00f f900 	bl	801a8e4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2273      	movs	r2, #115	@ 0x73
 800b6e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2274      	movs	r2, #116	@ 0x74
 800b6f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a09      	ldr	r2, [pc, #36]	@ (800b71c <ethernetif_init+0x54>)
 800b6f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a08      	ldr	r2, [pc, #32]	@ (800b720 <ethernetif_init+0x58>)
 800b6fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff fdaf 	bl	800b264 <low_level_init>

  return ERR_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0801b7f4 	.word	0x0801b7f4
 800b714:	0801b810 	.word	0x0801b810
 800b718:	0801b820 	.word	0x0801b820
 800b71c:	080187a9 	.word	0x080187a9
 800b720:	0800b4e5 	.word	0x0800b4e5

0800b724 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b730:	68f9      	ldr	r1, [r7, #12]
 800b732:	4809      	ldr	r0, [pc, #36]	@ (800b758 <pbuf_free_custom+0x34>)
 800b734:	f005 f9c4 	bl	8010ac0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b738:	4b08      	ldr	r3, [pc, #32]	@ (800b75c <pbuf_free_custom+0x38>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d107      	bne.n	800b750 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b740:	4b06      	ldr	r3, [pc, #24]	@ (800b75c <pbuf_free_custom+0x38>)
 800b742:	2200      	movs	r2, #0
 800b744:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b746:	4b06      	ldr	r3, [pc, #24]	@ (800b760 <pbuf_free_custom+0x3c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 fda2 	bl	800c294 <osSemaphoreRelease>
  }
}
 800b750:	bf00      	nop
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	0801e414 	.word	0x0801e414
 800b75c:	24005934 	.word	0x24005934
 800b760:	24005938 	.word	0x24005938

0800b764 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b768:	f7f6 fb36 	bl	8001dd8 <HAL_GetTick>
 800b76c:	4603      	mov	r3, r0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	bd80      	pop	{r7, pc}
	...

0800b774 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08e      	sub	sp, #56	@ 0x38
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b77c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	605a      	str	r2, [r3, #4]
 800b786:	609a      	str	r2, [r3, #8]
 800b788:	60da      	str	r2, [r3, #12]
 800b78a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a5d      	ldr	r2, [pc, #372]	@ (800b908 <HAL_ETH_MspInit+0x194>)
 800b792:	4293      	cmp	r3, r2
 800b794:	f040 80b3 	bne.w	800b8fe <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b798:	4b5c      	ldr	r3, [pc, #368]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b79a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b79e:	4a5b      	ldr	r2, [pc, #364]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b7a8:	4b58      	ldr	r3, [pc, #352]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b7ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7b2:	623b      	str	r3, [r7, #32]
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b7b6:	4b55      	ldr	r3, [pc, #340]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b7bc:	4a53      	ldr	r2, [pc, #332]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b7c6:	4b51      	ldr	r3, [pc, #324]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b7cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b7d4:	4b4d      	ldr	r3, [pc, #308]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b7da:	4a4c      	ldr	r2, [pc, #304]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b7e4:	4b49      	ldr	r3, [pc, #292]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b7ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7ee:	61bb      	str	r3, [r7, #24]
 800b7f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7f2:	4b46      	ldr	r3, [pc, #280]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7f8:	4a44      	ldr	r2, [pc, #272]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b7fa:	f043 0304 	orr.w	r3, r3, #4
 800b7fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b802:	4b42      	ldr	r3, [pc, #264]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b808:	f003 0304 	and.w	r3, r3, #4
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b810:	4b3e      	ldr	r3, [pc, #248]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b816:	4a3d      	ldr	r2, [pc, #244]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b818:	f043 0301 	orr.w	r3, r3, #1
 800b81c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b820:	4b3a      	ldr	r3, [pc, #232]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b82e:	4b37      	ldr	r3, [pc, #220]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b834:	4a35      	ldr	r2, [pc, #212]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b836:	f043 0302 	orr.w	r3, r3, #2
 800b83a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b83e:	4b33      	ldr	r3, [pc, #204]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b84c:	4b2f      	ldr	r3, [pc, #188]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b84e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b852:	4a2e      	ldr	r2, [pc, #184]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b85c:	4b2b      	ldr	r3, [pc, #172]	@ (800b90c <HAL_ETH_MspInit+0x198>)
 800b85e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b866:	60bb      	str	r3, [r7, #8]
 800b868:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b86a:	2332      	movs	r3, #50	@ 0x32
 800b86c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b86e:	2302      	movs	r3, #2
 800b870:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b872:	2300      	movs	r3, #0
 800b874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b876:	2303      	movs	r3, #3
 800b878:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b87a:	230b      	movs	r3, #11
 800b87c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b87e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b882:	4619      	mov	r1, r3
 800b884:	4822      	ldr	r0, [pc, #136]	@ (800b910 <HAL_ETH_MspInit+0x19c>)
 800b886:	f7fa f8e1 	bl	8005a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b88a:	2386      	movs	r3, #134	@ 0x86
 800b88c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b88e:	2302      	movs	r3, #2
 800b890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b892:	2300      	movs	r3, #0
 800b894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b896:	2303      	movs	r3, #3
 800b898:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b89a:	230b      	movs	r3, #11
 800b89c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b89e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	481b      	ldr	r0, [pc, #108]	@ (800b914 <HAL_ETH_MspInit+0x1a0>)
 800b8a6:	f7fa f8d1 	bl	8005a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b8aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8bc:	230b      	movs	r3, #11
 800b8be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	4814      	ldr	r0, [pc, #80]	@ (800b918 <HAL_ETH_MspInit+0x1a4>)
 800b8c8:	f7fa f8c0 	bl	8005a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b8cc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b8d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8d2:	2302      	movs	r3, #2
 800b8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8de:	230b      	movs	r3, #11
 800b8e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b8e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	480c      	ldr	r0, [pc, #48]	@ (800b91c <HAL_ETH_MspInit+0x1a8>)
 800b8ea:	f7fa f8af 	bl	8005a4c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2105      	movs	r1, #5
 800b8f2:	203d      	movs	r0, #61	@ 0x3d
 800b8f4:	f7f6 fb90 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b8f8:	203d      	movs	r0, #61	@ 0x3d
 800b8fa:	f7f6 fba7 	bl	800204c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b8fe:	bf00      	nop
 800b900:	3738      	adds	r7, #56	@ 0x38
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	40028000 	.word	0x40028000
 800b90c:	58024400 	.word	0x58024400
 800b910:	58020800 	.word	0x58020800
 800b914:	58020000 	.word	0x58020000
 800b918:	58020400 	.word	0x58020400
 800b91c:	58021800 	.word	0x58021800

0800b920 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b924:	4802      	ldr	r0, [pc, #8]	@ (800b930 <ETH_PHY_IO_Init+0x10>)
 800b926:	f7f9 faa5 	bl	8004e74 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	24005940 	.word	0x24005940

0800b934 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
  return 0;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	68f9      	ldr	r1, [r7, #12]
 800b956:	4807      	ldr	r0, [pc, #28]	@ (800b974 <ETH_PHY_IO_ReadReg+0x30>)
 800b958:	f7f8 fff6 	bl	8004948 <HAL_ETH_ReadPHYRegister>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d002      	beq.n	800b968 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b962:	f04f 33ff 	mov.w	r3, #4294967295
 800b966:	e000      	b.n	800b96a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	24005940 	.word	0x24005940

0800b978 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	68f9      	ldr	r1, [r7, #12]
 800b98a:	4807      	ldr	r0, [pc, #28]	@ (800b9a8 <ETH_PHY_IO_WriteReg+0x30>)
 800b98c:	f7f9 f830 	bl	80049f0 <HAL_ETH_WritePHYRegister>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b996:	f04f 33ff 	mov.w	r3, #4294967295
 800b99a:	e000      	b.n	800b99e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	24005940 	.word	0x24005940

0800b9ac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b9b0:	f7f6 fa12 	bl	8001dd8 <HAL_GetTick>
 800b9b4:	4603      	mov	r3, r0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b0a0      	sub	sp, #128	@ 0x80
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b9c4:	f107 0308 	add.w	r3, r7, #8
 800b9c8:	2264      	movs	r2, #100	@ 0x64
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f00e ffee 	bl	801a9ae <memset>
  int32_t PHYLinkState = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b9da:	2300      	movs	r3, #0
 800b9dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b9de:	2300      	movs	r3, #0
 800b9e0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b9e6:	483a      	ldr	r0, [pc, #232]	@ (800bad0 <ethernet_link_thread+0x114>)
 800b9e8:	f7f6 f91e 	bl	8001c28 <LAN8742_GetLinkState>
 800b9ec:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b9ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b9f4:	089b      	lsrs	r3, r3, #2
 800b9f6:	f003 0301 	and.w	r3, r3, #1
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00c      	beq.n	800ba1a <ethernet_link_thread+0x5e>
 800ba00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	dc09      	bgt.n	800ba1a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ba06:	4833      	ldr	r0, [pc, #204]	@ (800bad4 <ethernet_link_thread+0x118>)
 800ba08:	f7f8 fc2a 	bl	8004260 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ba0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba0e:	f005 fadf 	bl	8010fd0 <netif_set_down>
    netif_set_link_down(netif);
 800ba12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba14:	f005 fb42 	bl	801109c <netif_set_link_down>
 800ba18:	e055      	b.n	800bac6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ba1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba20:	f003 0304 	and.w	r3, r3, #4
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d14e      	bne.n	800bac6 <ethernet_link_thread+0x10a>
 800ba28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	dd4b      	ble.n	800bac6 <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800ba2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba30:	3b02      	subs	r3, #2
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d82a      	bhi.n	800ba8c <ethernet_link_thread+0xd0>
 800ba36:	a201      	add	r2, pc, #4	@ (adr r2, 800ba3c <ethernet_link_thread+0x80>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba4d 	.word	0x0800ba4d
 800ba40:	0800ba5f 	.word	0x0800ba5f
 800ba44:	0800ba6f 	.word	0x0800ba6f
 800ba48:	0800ba7f 	.word	0x0800ba7f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ba4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba50:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ba52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ba56:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ba5c:	e017      	b.n	800ba8e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ba62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ba66:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ba6c:	e00f      	b.n	800ba8e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ba6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba72:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ba74:	2300      	movs	r3, #0
 800ba76:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ba7c:	e007      	b.n	800ba8e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ba82:	2300      	movs	r3, #0
 800ba84:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ba86:	2301      	movs	r3, #1
 800ba88:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ba8a:	e000      	b.n	800ba8e <ethernet_link_thread+0xd2>
    default:
      break;
 800ba8c:	bf00      	nop
    }

    if(linkchanged)
 800ba8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d018      	beq.n	800bac6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ba94:	f107 0308 	add.w	r3, r7, #8
 800ba98:	4619      	mov	r1, r3
 800ba9a:	480e      	ldr	r0, [pc, #56]	@ (800bad4 <ethernet_link_thread+0x118>)
 800ba9c:	f7f8 fffc 	bl	8004a98 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800baa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800baa2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800baa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800baa6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800baa8:	f107 0308 	add.w	r3, r7, #8
 800baac:	4619      	mov	r1, r3
 800baae:	4809      	ldr	r0, [pc, #36]	@ (800bad4 <ethernet_link_thread+0x118>)
 800bab0:	f7f9 f9c6 	bl	8004e40 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800bab4:	4807      	ldr	r0, [pc, #28]	@ (800bad4 <ethernet_link_thread+0x118>)
 800bab6:	f7f8 fb5f 	bl	8004178 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800baba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800babc:	f005 fa1c 	bl	8010ef8 <netif_set_up>
      netif_set_link_up(netif);
 800bac0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bac2:	f005 fab7 	bl	8011034 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800bac6:	2064      	movs	r0, #100	@ 0x64
 800bac8:	f000 f9df 	bl	800be8a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bacc:	e78b      	b.n	800b9e6 <ethernet_link_thread+0x2a>
 800bace:	bf00      	nop
 800bad0:	24005a28 	.word	0x24005a28
 800bad4:	24005940 	.word	0x24005940

0800bad8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af02      	add	r7, sp, #8
 800bade:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bae0:	4812      	ldr	r0, [pc, #72]	@ (800bb2c <HAL_ETH_RxAllocateCallback+0x54>)
 800bae2:	f004 ff79 	bl	80109d8 <memp_malloc_pool>
 800bae6:	60f8      	str	r0, [r7, #12]
  if (p)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d014      	beq.n	800bb18 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f103 0220 	add.w	r2, r3, #32
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4a0d      	ldr	r2, [pc, #52]	@ (800bb30 <HAL_ETH_RxAllocateCallback+0x58>)
 800bafc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bb06:	9201      	str	r2, [sp, #4]
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2241      	movs	r2, #65	@ 0x41
 800bb0e:	2100      	movs	r1, #0
 800bb10:	2000      	movs	r0, #0
 800bb12:	f005 fceb 	bl	80114ec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bb16:	e005      	b.n	800bb24 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bb18:	4b06      	ldr	r3, [pc, #24]	@ (800bb34 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
}
 800bb24:	bf00      	nop
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	0801e414 	.word	0x0801e414
 800bb30:	0800b725 	.word	0x0800b725
 800bb34:	24005934 	.word	0x24005934

0800bb38 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b08d      	sub	sp, #52	@ 0x34
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	3b20      	subs	r3, #32
 800bb56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800bb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb60:	2200      	movs	r2, #0
 800bb62:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb66:	887a      	ldrh	r2, [r7, #2]
 800bb68:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d103      	bne.n	800bb7a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	e003      	b.n	800bb82 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb80:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb86:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb8e:	e009      	b.n	800bba4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb92:	891a      	ldrh	r2, [r3, #8]
 800bb94:	887b      	ldrh	r3, [r7, #2]
 800bb96:	4413      	add	r3, r2
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1f2      	bne.n	800bb90 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800bbaa:	887b      	ldrh	r3, [r7, #2]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	623a      	str	r2, [r7, #32]
 800bbb0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dd1d      	ble.n	800bbf4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	f003 021f 	and.w	r2, r3, #31
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800bbc8:	f3bf 8f4f 	dsb	sy
}
 800bbcc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800bbce:	4a0d      	ldr	r2, [pc, #52]	@ (800bc04 <HAL_ETH_RxLinkCallback+0xcc>)
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	3320      	adds	r3, #32
 800bbda:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	3b20      	subs	r3, #32
 800bbe0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dcf2      	bgt.n	800bbce <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800bbe8:	f3bf 8f4f 	dsb	sy
}
 800bbec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bbee:	f3bf 8f6f 	isb	sy
}
 800bbf2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800bbf4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bbf6:	bf00      	nop
 800bbf8:	3734      	adds	r7, #52	@ 0x34
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	e000ed00 	.word	0xe000ed00

0800bc08 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f005 fe25 	bl	8011860 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
	...

0800bc20 <__NVIC_SetPriority>:
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	6039      	str	r1, [r7, #0]
 800bc2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bc2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	db0a      	blt.n	800bc4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	490c      	ldr	r1, [pc, #48]	@ (800bc6c <__NVIC_SetPriority+0x4c>)
 800bc3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc3e:	0112      	lsls	r2, r2, #4
 800bc40:	b2d2      	uxtb	r2, r2
 800bc42:	440b      	add	r3, r1
 800bc44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bc48:	e00a      	b.n	800bc60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	4908      	ldr	r1, [pc, #32]	@ (800bc70 <__NVIC_SetPriority+0x50>)
 800bc50:	88fb      	ldrh	r3, [r7, #6]
 800bc52:	f003 030f 	and.w	r3, r3, #15
 800bc56:	3b04      	subs	r3, #4
 800bc58:	0112      	lsls	r2, r2, #4
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	440b      	add	r3, r1
 800bc5e:	761a      	strb	r2, [r3, #24]
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	e000e100 	.word	0xe000e100
 800bc70:	e000ed00 	.word	0xe000ed00

0800bc74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bc74:	b580      	push	{r7, lr}
 800bc76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc78:	4b05      	ldr	r3, [pc, #20]	@ (800bc90 <SysTick_Handler+0x1c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc7c:	f002 fd3a 	bl	800e6f4 <xTaskGetSchedulerState>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d001      	beq.n	800bc8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc86:	f003 fd17 	bl	800f6b8 <xPortSysTickHandler>
  }
}
 800bc8a:	bf00      	nop
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	e000e010 	.word	0xe000e010

0800bc94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc98:	2100      	movs	r1, #0
 800bc9a:	f06f 0004 	mvn.w	r0, #4
 800bc9e:	f7ff ffbf 	bl	800bc20 <__NVIC_SetPriority>
#endif
}
 800bca2:	bf00      	nop
 800bca4:	bd80      	pop	{r7, pc}
	...

0800bca8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcae:	f3ef 8305 	mrs	r3, IPSR
 800bcb2:	603b      	str	r3, [r7, #0]
  return(result);
 800bcb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bcba:	f06f 0305 	mvn.w	r3, #5
 800bcbe:	607b      	str	r3, [r7, #4]
 800bcc0:	e00c      	b.n	800bcdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bcc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <osKernelInitialize+0x44>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d105      	bne.n	800bcd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bcca:	4b08      	ldr	r3, [pc, #32]	@ (800bcec <osKernelInitialize+0x44>)
 800bccc:	2201      	movs	r2, #1
 800bcce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	607b      	str	r3, [r7, #4]
 800bcd4:	e002      	b.n	800bcdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bcdc:	687b      	ldr	r3, [r7, #4]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	24005a48 	.word	0x24005a48

0800bcf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcf6:	f3ef 8305 	mrs	r3, IPSR
 800bcfa:	603b      	str	r3, [r7, #0]
  return(result);
 800bcfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bd02:	f06f 0305 	mvn.w	r3, #5
 800bd06:	607b      	str	r3, [r7, #4]
 800bd08:	e010      	b.n	800bd2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd38 <osKernelStart+0x48>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d109      	bne.n	800bd26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bd12:	f7ff ffbf 	bl	800bc94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bd16:	4b08      	ldr	r3, [pc, #32]	@ (800bd38 <osKernelStart+0x48>)
 800bd18:	2202      	movs	r2, #2
 800bd1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bd1c:	f002 f864 	bl	800dde8 <vTaskStartScheduler>
      stat = osOK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	607b      	str	r3, [r7, #4]
 800bd24:	e002      	b.n	800bd2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bd26:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd2c:	687b      	ldr	r3, [r7, #4]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	24005a48 	.word	0x24005a48

0800bd3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd42:	f3ef 8305 	mrs	r3, IPSR
 800bd46:	603b      	str	r3, [r7, #0]
  return(result);
 800bd48:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bd4e:	f002 f977 	bl	800e040 <xTaskGetTickCountFromISR>
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	e002      	b.n	800bd5c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bd56:	f002 f963 	bl	800e020 <xTaskGetTickCount>
 800bd5a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bd5c:	687b      	ldr	r3, [r7, #4]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b08e      	sub	sp, #56	@ 0x38
 800bd6a:	af04      	add	r7, sp, #16
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd76:	f3ef 8305 	mrs	r3, IPSR
 800bd7a:	617b      	str	r3, [r7, #20]
  return(result);
 800bd7c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d17e      	bne.n	800be80 <osThreadNew+0x11a>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d07b      	beq.n	800be80 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bd88:	2380      	movs	r3, #128	@ 0x80
 800bd8a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bd8c:	2318      	movs	r3, #24
 800bd8e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d045      	beq.n	800be2c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <osThreadNew+0x48>
        name = attr->name;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d008      	beq.n	800bdd4 <osThreadNew+0x6e>
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	2b38      	cmp	r3, #56	@ 0x38
 800bdc6:	d805      	bhi.n	800bdd4 <osThreadNew+0x6e>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <osThreadNew+0x72>
        return (NULL);
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e054      	b.n	800be82 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	089b      	lsrs	r3, r3, #2
 800bde6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00e      	beq.n	800be0e <osThreadNew+0xa8>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	2ba7      	cmp	r3, #167	@ 0xa7
 800bdf6:	d90a      	bls.n	800be0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d006      	beq.n	800be0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <osThreadNew+0xa8>
        mem = 1;
 800be08:	2301      	movs	r3, #1
 800be0a:	61bb      	str	r3, [r7, #24]
 800be0c:	e010      	b.n	800be30 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10c      	bne.n	800be30 <osThreadNew+0xca>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d108      	bne.n	800be30 <osThreadNew+0xca>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d104      	bne.n	800be30 <osThreadNew+0xca>
          mem = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	61bb      	str	r3, [r7, #24]
 800be2a:	e001      	b.n	800be30 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d110      	bne.n	800be58 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be3e:	9202      	str	r2, [sp, #8]
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6a3a      	ldr	r2, [r7, #32]
 800be4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f001 fd63 	bl	800d918 <xTaskCreateStatic>
 800be52:	4603      	mov	r3, r0
 800be54:	613b      	str	r3, [r7, #16]
 800be56:	e013      	b.n	800be80 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d110      	bne.n	800be80 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800be5e:	6a3b      	ldr	r3, [r7, #32]
 800be60:	b29a      	uxth	r2, r3
 800be62:	f107 0310 	add.w	r3, r7, #16
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f001 fdb1 	bl	800d9d8 <xTaskCreate>
 800be76:	4603      	mov	r3, r0
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d001      	beq.n	800be80 <osThreadNew+0x11a>
            hTask = NULL;
 800be7c:	2300      	movs	r3, #0
 800be7e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be80:	693b      	ldr	r3, [r7, #16]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3728      	adds	r7, #40	@ 0x28
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be92:	f3ef 8305 	mrs	r3, IPSR
 800be96:	60bb      	str	r3, [r7, #8]
  return(result);
 800be98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d003      	beq.n	800bea6 <osDelay+0x1c>
    stat = osErrorISR;
 800be9e:	f06f 0305 	mvn.w	r3, #5
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	e007      	b.n	800beb6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f001 ff63 	bl	800dd7c <vTaskDelay>
    }
  }

  return (stat);
 800beb6:	68fb      	ldr	r3, [r7, #12]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bec8:	2300      	movs	r3, #0
 800beca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800becc:	f3ef 8305 	mrs	r3, IPSR
 800bed0:	60bb      	str	r3, [r7, #8]
  return(result);
 800bed2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d174      	bne.n	800bfc2 <osMutexNew+0x102>
    if (attr != NULL) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	61bb      	str	r3, [r7, #24]
 800bee4:	e001      	b.n	800beea <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <osMutexNew+0x3a>
      rmtx = 1U;
 800bef4:	2301      	movs	r3, #1
 800bef6:	617b      	str	r3, [r7, #20]
 800bef8:	e001      	b.n	800befe <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	f003 0308 	and.w	r3, r3, #8
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d15c      	bne.n	800bfc2 <osMutexNew+0x102>
      mem = -1;
 800bf08:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d015      	beq.n	800bf40 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d006      	beq.n	800bf2a <osMutexNew+0x6a>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	2b4f      	cmp	r3, #79	@ 0x4f
 800bf22:	d902      	bls.n	800bf2a <osMutexNew+0x6a>
          mem = 1;
 800bf24:	2301      	movs	r3, #1
 800bf26:	613b      	str	r3, [r7, #16]
 800bf28:	e00c      	b.n	800bf44 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d108      	bne.n	800bf44 <osMutexNew+0x84>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d104      	bne.n	800bf44 <osMutexNew+0x84>
            mem = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	613b      	str	r3, [r7, #16]
 800bf3e:	e001      	b.n	800bf44 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d112      	bne.n	800bf70 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d007      	beq.n	800bf60 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	4619      	mov	r1, r3
 800bf56:	2004      	movs	r0, #4
 800bf58:	f000 fd71 	bl	800ca3e <xQueueCreateMutexStatic>
 800bf5c:	61f8      	str	r0, [r7, #28]
 800bf5e:	e016      	b.n	800bf8e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	4619      	mov	r1, r3
 800bf66:	2001      	movs	r0, #1
 800bf68:	f000 fd69 	bl	800ca3e <xQueueCreateMutexStatic>
 800bf6c:	61f8      	str	r0, [r7, #28]
 800bf6e:	e00e      	b.n	800bf8e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10b      	bne.n	800bf8e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bf7c:	2004      	movs	r0, #4
 800bf7e:	f000 fd46 	bl	800ca0e <xQueueCreateMutex>
 800bf82:	61f8      	str	r0, [r7, #28]
 800bf84:	e003      	b.n	800bf8e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bf86:	2001      	movs	r0, #1
 800bf88:	f000 fd41 	bl	800ca0e <xQueueCreateMutex>
 800bf8c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00c      	beq.n	800bfae <osMutexNew+0xee>
        if (attr != NULL) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <osMutexNew+0xe2>
          name = attr->name;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	e001      	b.n	800bfa6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	69f8      	ldr	r0, [r7, #28]
 800bfaa:	f001 fc2d 	bl	800d808 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d006      	beq.n	800bfc2 <osMutexNew+0x102>
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d003      	beq.n	800bfc2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	f043 0301 	orr.w	r3, r3, #1
 800bfc0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bfc2:	69fb      	ldr	r3, [r7, #28]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3720      	adds	r7, #32
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f023 0301 	bic.w	r3, r3, #1
 800bfdc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfea:	f3ef 8305 	mrs	r3, IPSR
 800bfee:	60bb      	str	r3, [r7, #8]
  return(result);
 800bff0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <osMutexAcquire+0x32>
    stat = osErrorISR;
 800bff6:	f06f 0305 	mvn.w	r3, #5
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	e02c      	b.n	800c058 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d103      	bne.n	800c00c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c004:	f06f 0303 	mvn.w	r3, #3
 800c008:	617b      	str	r3, [r7, #20]
 800c00a:	e025      	b.n	800c058 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d011      	beq.n	800c036 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6938      	ldr	r0, [r7, #16]
 800c016:	f000 fd62 	bl	800cade <xQueueTakeMutexRecursive>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d01b      	beq.n	800c058 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c026:	f06f 0301 	mvn.w	r3, #1
 800c02a:	617b      	str	r3, [r7, #20]
 800c02c:	e014      	b.n	800c058 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c02e:	f06f 0302 	mvn.w	r3, #2
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	e010      	b.n	800c058 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6938      	ldr	r0, [r7, #16]
 800c03a:	f001 f907 	bl	800d24c <xQueueSemaphoreTake>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b01      	cmp	r3, #1
 800c042:	d009      	beq.n	800c058 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c04a:	f06f 0301 	mvn.w	r3, #1
 800c04e:	617b      	str	r3, [r7, #20]
 800c050:	e002      	b.n	800c058 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c052:	f06f 0302 	mvn.w	r3, #2
 800c056:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c058:	697b      	ldr	r3, [r7, #20]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c062:	b580      	push	{r7, lr}
 800c064:	b086      	sub	sp, #24
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f023 0301 	bic.w	r3, r3, #1
 800c070:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c07e:	f3ef 8305 	mrs	r3, IPSR
 800c082:	60bb      	str	r3, [r7, #8]
  return(result);
 800c084:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c08a:	f06f 0305 	mvn.w	r3, #5
 800c08e:	617b      	str	r3, [r7, #20]
 800c090:	e01f      	b.n	800c0d2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d103      	bne.n	800c0a0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c098:	f06f 0303 	mvn.w	r3, #3
 800c09c:	617b      	str	r3, [r7, #20]
 800c09e:	e018      	b.n	800c0d2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d009      	beq.n	800c0ba <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c0a6:	6938      	ldr	r0, [r7, #16]
 800c0a8:	f000 fce4 	bl	800ca74 <xQueueGiveMutexRecursive>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d00f      	beq.n	800c0d2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c0b2:	f06f 0302 	mvn.w	r3, #2
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e00b      	b.n	800c0d2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	6938      	ldr	r0, [r7, #16]
 800c0c2:	f000 fdb1 	bl	800cc28 <xQueueGenericSend>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d002      	beq.n	800c0d2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c0cc:	f06f 0302 	mvn.w	r3, #2
 800c0d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c0d2:	697b      	ldr	r3, [r7, #20]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08a      	sub	sp, #40	@ 0x28
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ec:	f3ef 8305 	mrs	r3, IPSR
 800c0f0:	613b      	str	r3, [r7, #16]
  return(result);
 800c0f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d175      	bne.n	800c1e4 <osSemaphoreNew+0x108>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d072      	beq.n	800c1e4 <osSemaphoreNew+0x108>
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	429a      	cmp	r2, r3
 800c104:	d86e      	bhi.n	800c1e4 <osSemaphoreNew+0x108>
    mem = -1;
 800c106:	f04f 33ff 	mov.w	r3, #4294967295
 800c10a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d015      	beq.n	800c13e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d006      	beq.n	800c128 <osSemaphoreNew+0x4c>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	2b4f      	cmp	r3, #79	@ 0x4f
 800c120:	d902      	bls.n	800c128 <osSemaphoreNew+0x4c>
        mem = 1;
 800c122:	2301      	movs	r3, #1
 800c124:	61bb      	str	r3, [r7, #24]
 800c126:	e00c      	b.n	800c142 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d108      	bne.n	800c142 <osSemaphoreNew+0x66>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d104      	bne.n	800c142 <osSemaphoreNew+0x66>
          mem = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	61bb      	str	r3, [r7, #24]
 800c13c:	e001      	b.n	800c142 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c148:	d04c      	beq.n	800c1e4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d128      	bne.n	800c1a2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d10a      	bne.n	800c16c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2203      	movs	r2, #3
 800c15c:	9200      	str	r2, [sp, #0]
 800c15e:	2200      	movs	r2, #0
 800c160:	2100      	movs	r1, #0
 800c162:	2001      	movs	r0, #1
 800c164:	f000 fb5e 	bl	800c824 <xQueueGenericCreateStatic>
 800c168:	61f8      	str	r0, [r7, #28]
 800c16a:	e005      	b.n	800c178 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c16c:	2203      	movs	r2, #3
 800c16e:	2100      	movs	r1, #0
 800c170:	2001      	movs	r0, #1
 800c172:	f000 fbd4 	bl	800c91e <xQueueGenericCreate>
 800c176:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d022      	beq.n	800c1c4 <osSemaphoreNew+0xe8>
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01f      	beq.n	800c1c4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c184:	2300      	movs	r3, #0
 800c186:	2200      	movs	r2, #0
 800c188:	2100      	movs	r1, #0
 800c18a:	69f8      	ldr	r0, [r7, #28]
 800c18c:	f000 fd4c 	bl	800cc28 <xQueueGenericSend>
 800c190:	4603      	mov	r3, r0
 800c192:	2b01      	cmp	r3, #1
 800c194:	d016      	beq.n	800c1c4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c196:	69f8      	ldr	r0, [r7, #28]
 800c198:	f001 f9ea 	bl	800d570 <vQueueDelete>
            hSemaphore = NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	61fb      	str	r3, [r7, #28]
 800c1a0:	e010      	b.n	800c1c4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d108      	bne.n	800c1ba <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f000 fccb 	bl	800cb4c <xQueueCreateCountingSemaphoreStatic>
 800c1b6:	61f8      	str	r0, [r7, #28]
 800c1b8:	e004      	b.n	800c1c4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f000 fcfe 	bl	800cbbe <xQueueCreateCountingSemaphore>
 800c1c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00c      	beq.n	800c1e4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d003      	beq.n	800c1d8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	e001      	b.n	800c1dc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c1dc:	6979      	ldr	r1, [r7, #20]
 800c1de:	69f8      	ldr	r0, [r7, #28]
 800c1e0:	f001 fb12 	bl	800d808 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c1e4:	69fb      	ldr	r3, [r7, #28]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3720      	adds	r7, #32
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d103      	bne.n	800c210 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c208:	f06f 0303 	mvn.w	r3, #3
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	e039      	b.n	800c284 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c210:	f3ef 8305 	mrs	r3, IPSR
 800c214:	60fb      	str	r3, [r7, #12]
  return(result);
 800c216:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d022      	beq.n	800c262 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c222:	f06f 0303 	mvn.w	r3, #3
 800c226:	617b      	str	r3, [r7, #20]
 800c228:	e02c      	b.n	800c284 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c22e:	f107 0308 	add.w	r3, r7, #8
 800c232:	461a      	mov	r2, r3
 800c234:	2100      	movs	r1, #0
 800c236:	6938      	ldr	r0, [r7, #16]
 800c238:	f001 f918 	bl	800d46c <xQueueReceiveFromISR>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d003      	beq.n	800c24a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c242:	f06f 0302 	mvn.w	r3, #2
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e01c      	b.n	800c284 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d019      	beq.n	800c284 <osSemaphoreAcquire+0x94>
 800c250:	4b0f      	ldr	r3, [pc, #60]	@ (800c290 <osSemaphoreAcquire+0xa0>)
 800c252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	e010      	b.n	800c284 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6938      	ldr	r0, [r7, #16]
 800c266:	f000 fff1 	bl	800d24c <xQueueSemaphoreTake>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d009      	beq.n	800c284 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c276:	f06f 0301 	mvn.w	r3, #1
 800c27a:	617b      	str	r3, [r7, #20]
 800c27c:	e002      	b.n	800c284 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c27e:	f06f 0302 	mvn.w	r3, #2
 800c282:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c284:	697b      	ldr	r3, [r7, #20]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	e000ed04 	.word	0xe000ed04

0800c294 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d103      	bne.n	800c2b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c2aa:	f06f 0303 	mvn.w	r3, #3
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	e02c      	b.n	800c30c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b2:	f3ef 8305 	mrs	r3, IPSR
 800c2b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d01a      	beq.n	800c2f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c2c2:	f107 0308 	add.w	r3, r7, #8
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6938      	ldr	r0, [r7, #16]
 800c2ca:	f000 fe4d 	bl	800cf68 <xQueueGiveFromISR>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d003      	beq.n	800c2dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c2d4:	f06f 0302 	mvn.w	r3, #2
 800c2d8:	617b      	str	r3, [r7, #20]
 800c2da:	e017      	b.n	800c30c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d014      	beq.n	800c30c <osSemaphoreRelease+0x78>
 800c2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c318 <osSemaphoreRelease+0x84>)
 800c2e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	e00b      	b.n	800c30c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	6938      	ldr	r0, [r7, #16]
 800c2fc:	f000 fc94 	bl	800cc28 <xQueueGenericSend>
 800c300:	4603      	mov	r3, r0
 800c302:	2b01      	cmp	r3, #1
 800c304:	d002      	beq.n	800c30c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c306:	f06f 0302 	mvn.w	r3, #2
 800c30a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c30c:	697b      	ldr	r3, [r7, #20]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	@ 0x28
 800c320:	af02      	add	r7, sp, #8
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c328:	2300      	movs	r3, #0
 800c32a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c32c:	f3ef 8305 	mrs	r3, IPSR
 800c330:	613b      	str	r3, [r7, #16]
  return(result);
 800c332:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c334:	2b00      	cmp	r3, #0
 800c336:	d15f      	bne.n	800c3f8 <osMessageQueueNew+0xdc>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d05c      	beq.n	800c3f8 <osMessageQueueNew+0xdc>
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d059      	beq.n	800c3f8 <osMessageQueueNew+0xdc>
    mem = -1;
 800c344:	f04f 33ff 	mov.w	r3, #4294967295
 800c348:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d029      	beq.n	800c3a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d012      	beq.n	800c37e <osMessageQueueNew+0x62>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	2b4f      	cmp	r3, #79	@ 0x4f
 800c35e:	d90e      	bls.n	800c37e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	fb01 f303 	mul.w	r3, r1, r3
 800c374:	429a      	cmp	r2, r3
 800c376:	d302      	bcc.n	800c37e <osMessageQueueNew+0x62>
        mem = 1;
 800c378:	2301      	movs	r3, #1
 800c37a:	61bb      	str	r3, [r7, #24]
 800c37c:	e014      	b.n	800c3a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d110      	bne.n	800c3a8 <osMessageQueueNew+0x8c>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10c      	bne.n	800c3a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c392:	2b00      	cmp	r3, #0
 800c394:	d108      	bne.n	800c3a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d104      	bne.n	800c3a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	61bb      	str	r3, [r7, #24]
 800c3a2:	e001      	b.n	800c3a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d10b      	bne.n	800c3c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	691a      	ldr	r2, [r3, #16]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	9100      	str	r1, [sp, #0]
 800c3ba:	68b9      	ldr	r1, [r7, #8]
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f000 fa31 	bl	800c824 <xQueueGenericCreateStatic>
 800c3c2:	61f8      	str	r0, [r7, #28]
 800c3c4:	e008      	b.n	800c3d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d105      	bne.n	800c3d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	68b9      	ldr	r1, [r7, #8]
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 faa4 	bl	800c91e <xQueueGenericCreate>
 800c3d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00c      	beq.n	800c3f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <osMessageQueueNew+0xd0>
        name = attr->name;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	617b      	str	r3, [r7, #20]
 800c3ea:	e001      	b.n	800c3f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c3f0:	6979      	ldr	r1, [r7, #20]
 800c3f2:	69f8      	ldr	r0, [r7, #28]
 800c3f4:	f001 fa08 	bl	800d808 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c3f8:	69fb      	ldr	r3, [r7, #28]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3720      	adds	r7, #32
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c404:	b580      	push	{r7, lr}
 800c406:	b088      	sub	sp, #32
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	4613      	mov	r3, r2
 800c412:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c418:	2300      	movs	r3, #0
 800c41a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c41c:	f3ef 8305 	mrs	r3, IPSR
 800c420:	617b      	str	r3, [r7, #20]
  return(result);
 800c422:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c424:	2b00      	cmp	r3, #0
 800c426:	d028      	beq.n	800c47a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <osMessageQueuePut+0x36>
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <osMessageQueuePut+0x36>
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c43a:	f06f 0303 	mvn.w	r3, #3
 800c43e:	61fb      	str	r3, [r7, #28]
 800c440:	e038      	b.n	800c4b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c442:	2300      	movs	r3, #0
 800c444:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c446:	f107 0210 	add.w	r2, r7, #16
 800c44a:	2300      	movs	r3, #0
 800c44c:	68b9      	ldr	r1, [r7, #8]
 800c44e:	69b8      	ldr	r0, [r7, #24]
 800c450:	f000 fcec 	bl	800ce2c <xQueueGenericSendFromISR>
 800c454:	4603      	mov	r3, r0
 800c456:	2b01      	cmp	r3, #1
 800c458:	d003      	beq.n	800c462 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c45a:	f06f 0302 	mvn.w	r3, #2
 800c45e:	61fb      	str	r3, [r7, #28]
 800c460:	e028      	b.n	800c4b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d025      	beq.n	800c4b4 <osMessageQueuePut+0xb0>
 800c468:	4b15      	ldr	r3, [pc, #84]	@ (800c4c0 <osMessageQueuePut+0xbc>)
 800c46a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c46e:	601a      	str	r2, [r3, #0]
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	e01c      	b.n	800c4b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <osMessageQueuePut+0x82>
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d103      	bne.n	800c48e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c486:	f06f 0303 	mvn.w	r3, #3
 800c48a:	61fb      	str	r3, [r7, #28]
 800c48c:	e012      	b.n	800c4b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c48e:	2300      	movs	r3, #0
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	69b8      	ldr	r0, [r7, #24]
 800c496:	f000 fbc7 	bl	800cc28 <xQueueGenericSend>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d009      	beq.n	800c4b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c4a6:	f06f 0301 	mvn.w	r3, #1
 800c4aa:	61fb      	str	r3, [r7, #28]
 800c4ac:	e002      	b.n	800c4b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c4ae:	f06f 0302 	mvn.w	r3, #2
 800c4b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c4b4:	69fb      	ldr	r3, [r7, #28]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	e000ed04 	.word	0xe000ed04

0800c4c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4da:	f3ef 8305 	mrs	r3, IPSR
 800c4de:	617b      	str	r3, [r7, #20]
  return(result);
 800c4e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d028      	beq.n	800c538 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d005      	beq.n	800c4f8 <osMessageQueueGet+0x34>
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d002      	beq.n	800c4f8 <osMessageQueueGet+0x34>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c4f8:	f06f 0303 	mvn.w	r3, #3
 800c4fc:	61fb      	str	r3, [r7, #28]
 800c4fe:	e037      	b.n	800c570 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c500:	2300      	movs	r3, #0
 800c502:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c504:	f107 0310 	add.w	r3, r7, #16
 800c508:	461a      	mov	r2, r3
 800c50a:	68b9      	ldr	r1, [r7, #8]
 800c50c:	69b8      	ldr	r0, [r7, #24]
 800c50e:	f000 ffad 	bl	800d46c <xQueueReceiveFromISR>
 800c512:	4603      	mov	r3, r0
 800c514:	2b01      	cmp	r3, #1
 800c516:	d003      	beq.n	800c520 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c518:	f06f 0302 	mvn.w	r3, #2
 800c51c:	61fb      	str	r3, [r7, #28]
 800c51e:	e027      	b.n	800c570 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d024      	beq.n	800c570 <osMessageQueueGet+0xac>
 800c526:	4b15      	ldr	r3, [pc, #84]	@ (800c57c <osMessageQueueGet+0xb8>)
 800c528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c52c:	601a      	str	r2, [r3, #0]
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	e01b      	b.n	800c570 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d002      	beq.n	800c544 <osMessageQueueGet+0x80>
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d103      	bne.n	800c54c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c544:	f06f 0303 	mvn.w	r3, #3
 800c548:	61fb      	str	r3, [r7, #28]
 800c54a:	e011      	b.n	800c570 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	69b8      	ldr	r0, [r7, #24]
 800c552:	f000 fd99 	bl	800d088 <xQueueReceive>
 800c556:	4603      	mov	r3, r0
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d009      	beq.n	800c570 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c562:	f06f 0301 	mvn.w	r3, #1
 800c566:	61fb      	str	r3, [r7, #28]
 800c568:	e002      	b.n	800c570 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c56a:	f06f 0302 	mvn.w	r3, #2
 800c56e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c570:	69fb      	ldr	r3, [r7, #28]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3720      	adds	r7, #32
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	e000ed04 	.word	0xe000ed04

0800c580 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	4a07      	ldr	r2, [pc, #28]	@ (800c5ac <vApplicationGetIdleTaskMemory+0x2c>)
 800c590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	4a06      	ldr	r2, [pc, #24]	@ (800c5b0 <vApplicationGetIdleTaskMemory+0x30>)
 800c596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2280      	movs	r2, #128	@ 0x80
 800c59c:	601a      	str	r2, [r3, #0]
}
 800c59e:	bf00      	nop
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	24005a4c 	.word	0x24005a4c
 800c5b0:	24005af4 	.word	0x24005af4

0800c5b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4a07      	ldr	r2, [pc, #28]	@ (800c5e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c5c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	4a06      	ldr	r2, [pc, #24]	@ (800c5e4 <vApplicationGetTimerTaskMemory+0x30>)
 800c5ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5d2:	601a      	str	r2, [r3, #0]
}
 800c5d4:	bf00      	nop
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	24005cf4 	.word	0x24005cf4
 800c5e4:	24005d9c 	.word	0x24005d9c

0800c5e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f103 0208 	add.w	r2, r3, #8
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f103 0208 	add.w	r2, r3, #8
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f103 0208 	add.w	r2, r3, #8
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c642:	b480      	push	{r7}
 800c644:	b085      	sub	sp, #20
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	601a      	str	r2, [r3, #0]
}
 800c67e:	bf00      	nop
 800c680:	3714      	adds	r7, #20
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c68a:	b480      	push	{r7}
 800c68c:	b085      	sub	sp, #20
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
 800c692:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a0:	d103      	bne.n	800c6aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	e00c      	b.n	800c6c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	e002      	b.n	800c6b8 <vListInsert+0x2e>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d2f6      	bcs.n	800c6b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	685a      	ldr	r2, [r3, #4]
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	601a      	str	r2, [r3, #0]
}
 800c6f0:	bf00      	nop
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	6892      	ldr	r2, [r2, #8]
 800c712:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	6852      	ldr	r2, [r2, #4]
 800c71c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	429a      	cmp	r2, r3
 800c726:	d103      	bne.n	800c730 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	689a      	ldr	r2, [r3, #8]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	1e5a      	subs	r2, r3, #1
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10b      	bne.n	800c77c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c776:	bf00      	nop
 800c778:	bf00      	nop
 800c77a:	e7fd      	b.n	800c778 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c77c:	f002 ff0c 	bl	800f598 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c788:	68f9      	ldr	r1, [r7, #12]
 800c78a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c78c:	fb01 f303 	mul.w	r3, r1, r3
 800c790:	441a      	add	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2200      	movs	r2, #0
 800c79a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	68f9      	ldr	r1, [r7, #12]
 800c7b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c7b2:	fb01 f303 	mul.w	r3, r1, r3
 800c7b6:	441a      	add	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	22ff      	movs	r2, #255	@ 0xff
 800c7c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	22ff      	movs	r2, #255	@ 0xff
 800c7c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d114      	bne.n	800c7fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d01a      	beq.n	800c810 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3310      	adds	r3, #16
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f001 fdb2 	bl	800e348 <xTaskRemoveFromEventList>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d012      	beq.n	800c810 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c820 <xQueueGenericReset+0xd0>)
 800c7ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	e009      	b.n	800c810 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3310      	adds	r3, #16
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff fef1 	bl	800c5e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3324      	adds	r3, #36	@ 0x24
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff feec 	bl	800c5e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c810:	f002 fef4 	bl	800f5fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c814:	2301      	movs	r3, #1
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	e000ed04 	.word	0xe000ed04

0800c824 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08e      	sub	sp, #56	@ 0x38
 800c828:	af02      	add	r7, sp, #8
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
 800c830:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10b      	bne.n	800c850 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83c:	f383 8811 	msr	BASEPRI, r3
 800c840:	f3bf 8f6f 	isb	sy
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c84a:	bf00      	nop
 800c84c:	bf00      	nop
 800c84e:	e7fd      	b.n	800c84c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10b      	bne.n	800c86e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	e7fd      	b.n	800c86a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <xQueueGenericCreateStatic+0x56>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <xQueueGenericCreateStatic+0x5a>
 800c87a:	2301      	movs	r3, #1
 800c87c:	e000      	b.n	800c880 <xQueueGenericCreateStatic+0x5c>
 800c87e:	2300      	movs	r3, #0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10b      	bne.n	800c89c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	623b      	str	r3, [r7, #32]
}
 800c896:	bf00      	nop
 800c898:	bf00      	nop
 800c89a:	e7fd      	b.n	800c898 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <xQueueGenericCreateStatic+0x84>
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d101      	bne.n	800c8ac <xQueueGenericCreateStatic+0x88>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e000      	b.n	800c8ae <xQueueGenericCreateStatic+0x8a>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10b      	bne.n	800c8ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	61fb      	str	r3, [r7, #28]
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	e7fd      	b.n	800c8c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8ca:	2350      	movs	r3, #80	@ 0x50
 800c8cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b50      	cmp	r3, #80	@ 0x50
 800c8d2:	d00b      	beq.n	800c8ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	61bb      	str	r3, [r7, #24]
}
 800c8e6:	bf00      	nop
 800c8e8:	bf00      	nop
 800c8ea:	e7fd      	b.n	800c8e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c8ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00d      	beq.n	800c914 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c900:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	4613      	mov	r3, r2
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f000 f840 	bl	800c994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c916:	4618      	mov	r0, r3
 800c918:	3730      	adds	r7, #48	@ 0x30
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b08a      	sub	sp, #40	@ 0x28
 800c922:	af02      	add	r7, sp, #8
 800c924:	60f8      	str	r0, [r7, #12]
 800c926:	60b9      	str	r1, [r7, #8]
 800c928:	4613      	mov	r3, r2
 800c92a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10b      	bne.n	800c94a <xQueueGenericCreate+0x2c>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	613b      	str	r3, [r7, #16]
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop
 800c948:	e7fd      	b.n	800c946 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	fb02 f303 	mul.w	r3, r2, r3
 800c952:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	3350      	adds	r3, #80	@ 0x50
 800c958:	4618      	mov	r0, r3
 800c95a:	f002 ff3f 	bl	800f7dc <pvPortMalloc>
 800c95e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d011      	beq.n	800c98a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	3350      	adds	r3, #80	@ 0x50
 800c96e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	2200      	movs	r2, #0
 800c974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c978:	79fa      	ldrb	r2, [r7, #7]
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	4613      	mov	r3, r2
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f000 f805 	bl	800c994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c98a:	69bb      	ldr	r3, [r7, #24]
	}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3720      	adds	r7, #32
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d103      	bne.n	800c9b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	601a      	str	r2, [r3, #0]
 800c9ae:	e002      	b.n	800c9b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	69b8      	ldr	r0, [r7, #24]
 800c9c6:	f7ff fec3 	bl	800c750 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	78fa      	ldrb	r2, [r7, #3]
 800c9ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00e      	beq.n	800ca06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	2100      	movs	r1, #0
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f911 	bl	800cc28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ca06:	bf00      	nop
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b086      	sub	sp, #24
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	4603      	mov	r3, r0
 800ca16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	617b      	str	r3, [r7, #20]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	461a      	mov	r2, r3
 800ca24:	6939      	ldr	r1, [r7, #16]
 800ca26:	6978      	ldr	r0, [r7, #20]
 800ca28:	f7ff ff79 	bl	800c91e <xQueueGenericCreate>
 800ca2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f7ff ffd3 	bl	800c9da <prvInitialiseMutex>

		return xNewQueue;
 800ca34:	68fb      	ldr	r3, [r7, #12]
	}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b088      	sub	sp, #32
 800ca42:	af02      	add	r7, sp, #8
 800ca44:	4603      	mov	r3, r0
 800ca46:	6039      	str	r1, [r7, #0]
 800ca48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	617b      	str	r3, [r7, #20]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	6939      	ldr	r1, [r7, #16]
 800ca5c:	6978      	ldr	r0, [r7, #20]
 800ca5e:	f7ff fee1 	bl	800c824 <xQueueGenericCreateStatic>
 800ca62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff ffb8 	bl	800c9da <prvInitialiseMutex>

		return xNewQueue;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
	}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ca74:	b590      	push	{r4, r7, lr}
 800ca76:	b087      	sub	sp, #28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10b      	bne.n	800ca9e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	60fb      	str	r3, [r7, #12]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	689c      	ldr	r4, [r3, #8]
 800caa2:	f001 fe17 	bl	800e6d4 <xTaskGetCurrentTaskHandle>
 800caa6:	4603      	mov	r3, r0
 800caa8:	429c      	cmp	r4, r3
 800caaa:	d111      	bne.n	800cad0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	1e5a      	subs	r2, r3, #1
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d105      	bne.n	800caca <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cabe:	2300      	movs	r3, #0
 800cac0:	2200      	movs	r2, #0
 800cac2:	2100      	movs	r1, #0
 800cac4:	6938      	ldr	r0, [r7, #16]
 800cac6:	f000 f8af 	bl	800cc28 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800caca:	2301      	movs	r3, #1
 800cacc:	617b      	str	r3, [r7, #20]
 800cace:	e001      	b.n	800cad4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cad4:	697b      	ldr	r3, [r7, #20]
	}
 800cad6:	4618      	mov	r0, r3
 800cad8:	371c      	adds	r7, #28
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd90      	pop	{r4, r7, pc}

0800cade <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cade:	b590      	push	{r4, r7, lr}
 800cae0:	b087      	sub	sp, #28
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10b      	bne.n	800cb0a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	60fb      	str	r3, [r7, #12]
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	e7fd      	b.n	800cb06 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	689c      	ldr	r4, [r3, #8]
 800cb0e:	f001 fde1 	bl	800e6d4 <xTaskGetCurrentTaskHandle>
 800cb12:	4603      	mov	r3, r0
 800cb14:	429c      	cmp	r4, r3
 800cb16:	d107      	bne.n	800cb28 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	1c5a      	adds	r2, r3, #1
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cb22:	2301      	movs	r3, #1
 800cb24:	617b      	str	r3, [r7, #20]
 800cb26:	e00c      	b.n	800cb42 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f000 fb8e 	bl	800d24c <xQueueSemaphoreTake>
 800cb30:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d004      	beq.n	800cb42 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cb42:	697b      	ldr	r3, [r7, #20]
	}
 800cb44:	4618      	mov	r0, r3
 800cb46:	371c      	adds	r7, #28
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd90      	pop	{r4, r7, pc}

0800cb4c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	@ 0x28
 800cb50:	af02      	add	r7, sp, #8
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10b      	bne.n	800cb76 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	61bb      	str	r3, [r7, #24]
}
 800cb70:	bf00      	nop
 800cb72:	bf00      	nop
 800cb74:	e7fd      	b.n	800cb72 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d90b      	bls.n	800cb96 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	617b      	str	r3, [r7, #20]
}
 800cb90:	bf00      	nop
 800cb92:	bf00      	nop
 800cb94:	e7fd      	b.n	800cb92 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb96:	2302      	movs	r3, #2
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2100      	movs	r1, #0
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f7ff fe3f 	bl	800c824 <xQueueGenericCreateStatic>
 800cba6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cbb4:	69fb      	ldr	r3, [r7, #28]
	}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3720      	adds	r7, #32
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b086      	sub	sp, #24
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10b      	bne.n	800cbe6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	613b      	str	r3, [r7, #16]
}
 800cbe0:	bf00      	nop
 800cbe2:	bf00      	nop
 800cbe4:	e7fd      	b.n	800cbe2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d90b      	bls.n	800cc06 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	60fb      	str	r3, [r7, #12]
}
 800cc00:	bf00      	nop
 800cc02:	bf00      	nop
 800cc04:	e7fd      	b.n	800cc02 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc06:	2202      	movs	r2, #2
 800cc08:	2100      	movs	r1, #0
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fe87 	bl	800c91e <xQueueGenericCreate>
 800cc10:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc1e:	697b      	ldr	r3, [r7, #20]
	}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08e      	sub	sp, #56	@ 0x38
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc36:	2300      	movs	r3, #0
 800cc38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10b      	bne.n	800cc5c <xQueueGenericSend+0x34>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc56:	bf00      	nop
 800cc58:	bf00      	nop
 800cc5a:	e7fd      	b.n	800cc58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <xQueueGenericSend+0x42>
 800cc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <xQueueGenericSend+0x46>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e000      	b.n	800cc70 <xQueueGenericSend+0x48>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10b      	bne.n	800cc8c <xQueueGenericSend+0x64>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc86:	bf00      	nop
 800cc88:	bf00      	nop
 800cc8a:	e7fd      	b.n	800cc88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d103      	bne.n	800cc9a <xQueueGenericSend+0x72>
 800cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d101      	bne.n	800cc9e <xQueueGenericSend+0x76>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e000      	b.n	800cca0 <xQueueGenericSend+0x78>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10b      	bne.n	800ccbc <xQueueGenericSend+0x94>
	__asm volatile
 800cca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	623b      	str	r3, [r7, #32]
}
 800ccb6:	bf00      	nop
 800ccb8:	bf00      	nop
 800ccba:	e7fd      	b.n	800ccb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccbc:	f001 fd1a 	bl	800e6f4 <xTaskGetSchedulerState>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <xQueueGenericSend+0xa4>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <xQueueGenericSend+0xa8>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e000      	b.n	800ccd2 <xQueueGenericSend+0xaa>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10b      	bne.n	800ccee <xQueueGenericSend+0xc6>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	61fb      	str	r3, [r7, #28]
}
 800cce8:	bf00      	nop
 800ccea:	bf00      	nop
 800ccec:	e7fd      	b.n	800ccea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ccee:	f002 fc53 	bl	800f598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d302      	bcc.n	800cd04 <xQueueGenericSend+0xdc>
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d129      	bne.n	800cd58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd0a:	f000 fc6d 	bl	800d5e8 <prvCopyDataToQueue>
 800cd0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d010      	beq.n	800cd3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1a:	3324      	adds	r3, #36	@ 0x24
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f001 fb13 	bl	800e348 <xTaskRemoveFromEventList>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d013      	beq.n	800cd50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd28:	4b3f      	ldr	r3, [pc, #252]	@ (800ce28 <xQueueGenericSend+0x200>)
 800cd2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	e00a      	b.n	800cd50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd40:	4b39      	ldr	r3, [pc, #228]	@ (800ce28 <xQueueGenericSend+0x200>)
 800cd42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd50:	f002 fc54 	bl	800f5fc <vPortExitCritical>
				return pdPASS;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e063      	b.n	800ce20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d103      	bne.n	800cd66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd5e:	f002 fc4d 	bl	800f5fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e05c      	b.n	800ce20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd6c:	f107 0314 	add.w	r3, r7, #20
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 fb4d 	bl	800e410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd76:	2301      	movs	r3, #1
 800cd78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd7a:	f002 fc3f 	bl	800f5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd7e:	f001 f8a3 	bl	800dec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd82:	f002 fc09 	bl	800f598 <vPortEnterCritical>
 800cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd8c:	b25b      	sxtb	r3, r3
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d103      	bne.n	800cd9c <xQueueGenericSend+0x174>
 800cd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cda2:	b25b      	sxtb	r3, r3
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda8:	d103      	bne.n	800cdb2 <xQueueGenericSend+0x18a>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cdb2:	f002 fc23 	bl	800f5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdb6:	1d3a      	adds	r2, r7, #4
 800cdb8:	f107 0314 	add.w	r3, r7, #20
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f001 fb3c 	bl	800e43c <xTaskCheckForTimeOut>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d124      	bne.n	800ce14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdcc:	f000 fd04 	bl	800d7d8 <prvIsQueueFull>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d018      	beq.n	800ce08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd8:	3310      	adds	r3, #16
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	4611      	mov	r1, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f001 fa60 	bl	800e2a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cde4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cde6:	f000 fc8f 	bl	800d708 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cdea:	f001 f87b 	bl	800dee4 <xTaskResumeAll>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f47f af7c 	bne.w	800ccee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cdf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ce28 <xQueueGenericSend+0x200>)
 800cdf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	e772      	b.n	800ccee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce0a:	f000 fc7d 	bl	800d708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce0e:	f001 f869 	bl	800dee4 <xTaskResumeAll>
 800ce12:	e76c      	b.n	800ccee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce16:	f000 fc77 	bl	800d708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce1a:	f001 f863 	bl	800dee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3738      	adds	r7, #56	@ 0x38
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b090      	sub	sp, #64	@ 0x40
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10b      	bne.n	800ce5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ce44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce48:	f383 8811 	msr	BASEPRI, r3
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce56:	bf00      	nop
 800ce58:	bf00      	nop
 800ce5a:	e7fd      	b.n	800ce58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d103      	bne.n	800ce6a <xQueueGenericSendFromISR+0x3e>
 800ce62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <xQueueGenericSendFromISR+0x42>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e000      	b.n	800ce70 <xQueueGenericSendFromISR+0x44>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10b      	bne.n	800ce8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce86:	bf00      	nop
 800ce88:	bf00      	nop
 800ce8a:	e7fd      	b.n	800ce88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d103      	bne.n	800ce9a <xQueueGenericSendFromISR+0x6e>
 800ce92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d101      	bne.n	800ce9e <xQueueGenericSendFromISR+0x72>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e000      	b.n	800cea0 <xQueueGenericSendFromISR+0x74>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10b      	bne.n	800cebc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	623b      	str	r3, [r7, #32]
}
 800ceb6:	bf00      	nop
 800ceb8:	bf00      	nop
 800ceba:	e7fd      	b.n	800ceb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cebc:	f002 fc4c 	bl	800f758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cec0:	f3ef 8211 	mrs	r2, BASEPRI
 800cec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	61fa      	str	r2, [r7, #28]
 800ced6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ced8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ceda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d302      	bcc.n	800ceee <xQueueGenericSendFromISR+0xc2>
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d12f      	bne.n	800cf4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ceee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cef4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	68b9      	ldr	r1, [r7, #8]
 800cf02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf04:	f000 fb70 	bl	800d5e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf10:	d112      	bne.n	800cf38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d016      	beq.n	800cf48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1c:	3324      	adds	r3, #36	@ 0x24
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f001 fa12 	bl	800e348 <xTaskRemoveFromEventList>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00e      	beq.n	800cf48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	e007      	b.n	800cf48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	b25a      	sxtb	r2, r3
 800cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cf4c:	e001      	b.n	800cf52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3740      	adds	r7, #64	@ 0x40
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08e      	sub	sp, #56	@ 0x38
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10b      	bne.n	800cf94 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	623b      	str	r3, [r7, #32]
}
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
 800cf92:	e7fd      	b.n	800cf90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00b      	beq.n	800cfb4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	61fb      	str	r3, [r7, #28]
}
 800cfae:	bf00      	nop
 800cfb0:	bf00      	nop
 800cfb2:	e7fd      	b.n	800cfb0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d103      	bne.n	800cfc4 <xQueueGiveFromISR+0x5c>
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d101      	bne.n	800cfc8 <xQueueGiveFromISR+0x60>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e000      	b.n	800cfca <xQueueGiveFromISR+0x62>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10b      	bne.n	800cfe6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	61bb      	str	r3, [r7, #24]
}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	e7fd      	b.n	800cfe2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfe6:	f002 fbb7 	bl	800f758 <vPortValidateInterruptPriority>
	__asm volatile
 800cfea:	f3ef 8211 	mrs	r2, BASEPRI
 800cfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	617a      	str	r2, [r7, #20]
 800d000:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d002:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d004:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d00a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d012:	429a      	cmp	r2, r3
 800d014:	d22b      	bcs.n	800d06e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d018:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d01c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d026:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d028:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d030:	d112      	bne.n	800d058 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d036:	2b00      	cmp	r3, #0
 800d038:	d016      	beq.n	800d068 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03c:	3324      	adds	r3, #36	@ 0x24
 800d03e:	4618      	mov	r0, r3
 800d040:	f001 f982 	bl	800e348 <xTaskRemoveFromEventList>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00e      	beq.n	800d068 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00b      	beq.n	800d068 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	2201      	movs	r2, #1
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	e007      	b.n	800d068 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d05c:	3301      	adds	r3, #1
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	b25a      	sxtb	r2, r3
 800d062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d068:	2301      	movs	r3, #1
 800d06a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d06c:	e001      	b.n	800d072 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d06e:	2300      	movs	r3, #0
 800d070:	637b      	str	r3, [r7, #52]	@ 0x34
 800d072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d074:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f383 8811 	msr	BASEPRI, r3
}
 800d07c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d080:	4618      	mov	r0, r3
 800d082:	3738      	adds	r7, #56	@ 0x38
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08c      	sub	sp, #48	@ 0x30
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d094:	2300      	movs	r3, #0
 800d096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10b      	bne.n	800d0ba <xQueueReceive+0x32>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	623b      	str	r3, [r7, #32]
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop
 800d0b8:	e7fd      	b.n	800d0b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <xQueueReceive+0x40>
 800d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <xQueueReceive+0x44>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <xQueueReceive+0x46>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <xQueueReceive+0x62>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	61fb      	str	r3, [r7, #28]
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop
 800d0e8:	e7fd      	b.n	800d0e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0ea:	f001 fb03 	bl	800e6f4 <xTaskGetSchedulerState>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <xQueueReceive+0x72>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <xQueueReceive+0x76>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e000      	b.n	800d100 <xQueueReceive+0x78>
 800d0fe:	2300      	movs	r3, #0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10b      	bne.n	800d11c <xQueueReceive+0x94>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	61bb      	str	r3, [r7, #24]
}
 800d116:	bf00      	nop
 800d118:	bf00      	nop
 800d11a:	e7fd      	b.n	800d118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d11c:	f002 fa3c 	bl	800f598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d01f      	beq.n	800d16c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d12c:	68b9      	ldr	r1, [r7, #8]
 800d12e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d130:	f000 fac4 	bl	800d6bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	1e5a      	subs	r2, r3, #1
 800d138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00f      	beq.n	800d164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d146:	3310      	adds	r3, #16
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 f8fd 	bl	800e348 <xTaskRemoveFromEventList>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d007      	beq.n	800d164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d154:	4b3c      	ldr	r3, [pc, #240]	@ (800d248 <xQueueReceive+0x1c0>)
 800d156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d15a:	601a      	str	r2, [r3, #0]
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d164:	f002 fa4a 	bl	800f5fc <vPortExitCritical>
				return pdPASS;
 800d168:	2301      	movs	r3, #1
 800d16a:	e069      	b.n	800d240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d103      	bne.n	800d17a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d172:	f002 fa43 	bl	800f5fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d176:	2300      	movs	r3, #0
 800d178:	e062      	b.n	800d240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d106      	bne.n	800d18e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d180:	f107 0310 	add.w	r3, r7, #16
 800d184:	4618      	mov	r0, r3
 800d186:	f001 f943 	bl	800e410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d18a:	2301      	movs	r3, #1
 800d18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d18e:	f002 fa35 	bl	800f5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d192:	f000 fe99 	bl	800dec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d196:	f002 f9ff 	bl	800f598 <vPortEnterCritical>
 800d19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1a0:	b25b      	sxtb	r3, r3
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a6:	d103      	bne.n	800d1b0 <xQueueReceive+0x128>
 800d1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1b6:	b25b      	sxtb	r3, r3
 800d1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1bc:	d103      	bne.n	800d1c6 <xQueueReceive+0x13e>
 800d1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1c6:	f002 fa19 	bl	800f5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1ca:	1d3a      	adds	r2, r7, #4
 800d1cc:	f107 0310 	add.w	r3, r7, #16
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f001 f932 	bl	800e43c <xTaskCheckForTimeOut>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d123      	bne.n	800d226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1e0:	f000 fae4 	bl	800d7ac <prvIsQueueEmpty>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d017      	beq.n	800d21a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ec:	3324      	adds	r3, #36	@ 0x24
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f001 f856 	bl	800e2a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1fa:	f000 fa85 	bl	800d708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1fe:	f000 fe71 	bl	800dee4 <xTaskResumeAll>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d189      	bne.n	800d11c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d208:	4b0f      	ldr	r3, [pc, #60]	@ (800d248 <xQueueReceive+0x1c0>)
 800d20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	e780      	b.n	800d11c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d21a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d21c:	f000 fa74 	bl	800d708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d220:	f000 fe60 	bl	800dee4 <xTaskResumeAll>
 800d224:	e77a      	b.n	800d11c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d228:	f000 fa6e 	bl	800d708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d22c:	f000 fe5a 	bl	800dee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d232:	f000 fabb 	bl	800d7ac <prvIsQueueEmpty>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f43f af6f 	beq.w	800d11c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d23e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d240:	4618      	mov	r0, r3
 800d242:	3730      	adds	r7, #48	@ 0x30
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	e000ed04 	.word	0xe000ed04

0800d24c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08e      	sub	sp, #56	@ 0x38
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d256:	2300      	movs	r3, #0
 800d258:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d25e:	2300      	movs	r3, #0
 800d260:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d264:	2b00      	cmp	r3, #0
 800d266:	d10b      	bne.n	800d280 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26c:	f383 8811 	msr	BASEPRI, r3
 800d270:	f3bf 8f6f 	isb	sy
 800d274:	f3bf 8f4f 	dsb	sy
 800d278:	623b      	str	r3, [r7, #32]
}
 800d27a:	bf00      	nop
 800d27c:	bf00      	nop
 800d27e:	e7fd      	b.n	800d27c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00b      	beq.n	800d2a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	61fb      	str	r3, [r7, #28]
}
 800d29a:	bf00      	nop
 800d29c:	bf00      	nop
 800d29e:	e7fd      	b.n	800d29c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2a0:	f001 fa28 	bl	800e6f4 <xTaskGetSchedulerState>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <xQueueSemaphoreTake+0x64>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <xQueueSemaphoreTake+0x68>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e000      	b.n	800d2b6 <xQueueSemaphoreTake+0x6a>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10b      	bne.n	800d2d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	61bb      	str	r3, [r7, #24]
}
 800d2cc:	bf00      	nop
 800d2ce:	bf00      	nop
 800d2d0:	e7fd      	b.n	800d2ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2d2:	f002 f961 	bl	800f598 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d024      	beq.n	800d32c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e4:	1e5a      	subs	r2, r3, #1
 800d2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d104      	bne.n	800d2fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2f2:	f001 fb79 	bl	800e9e8 <pvTaskIncrementMutexHeldCount>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fe:	691b      	ldr	r3, [r3, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00f      	beq.n	800d324 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d306:	3310      	adds	r3, #16
 800d308:	4618      	mov	r0, r3
 800d30a:	f001 f81d 	bl	800e348 <xTaskRemoveFromEventList>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d007      	beq.n	800d324 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d314:	4b54      	ldr	r3, [pc, #336]	@ (800d468 <xQueueSemaphoreTake+0x21c>)
 800d316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d324:	f002 f96a 	bl	800f5fc <vPortExitCritical>
				return pdPASS;
 800d328:	2301      	movs	r3, #1
 800d32a:	e098      	b.n	800d45e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d112      	bne.n	800d358 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00b      	beq.n	800d350 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	617b      	str	r3, [r7, #20]
}
 800d34a:	bf00      	nop
 800d34c:	bf00      	nop
 800d34e:	e7fd      	b.n	800d34c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d350:	f002 f954 	bl	800f5fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d354:	2300      	movs	r3, #0
 800d356:	e082      	b.n	800d45e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d106      	bne.n	800d36c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d35e:	f107 030c 	add.w	r3, r7, #12
 800d362:	4618      	mov	r0, r3
 800d364:	f001 f854 	bl	800e410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d368:	2301      	movs	r3, #1
 800d36a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d36c:	f002 f946 	bl	800f5fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d370:	f000 fdaa 	bl	800dec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d374:	f002 f910 	bl	800f598 <vPortEnterCritical>
 800d378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d37e:	b25b      	sxtb	r3, r3
 800d380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d384:	d103      	bne.n	800d38e <xQueueSemaphoreTake+0x142>
 800d386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d388:	2200      	movs	r2, #0
 800d38a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d390:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d394:	b25b      	sxtb	r3, r3
 800d396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39a:	d103      	bne.n	800d3a4 <xQueueSemaphoreTake+0x158>
 800d39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3a4:	f002 f92a 	bl	800f5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3a8:	463a      	mov	r2, r7
 800d3aa:	f107 030c 	add.w	r3, r7, #12
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 f843 	bl	800e43c <xTaskCheckForTimeOut>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d132      	bne.n	800d422 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3be:	f000 f9f5 	bl	800d7ac <prvIsQueueEmpty>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d026      	beq.n	800d416 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d109      	bne.n	800d3e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d3d0:	f002 f8e2 	bl	800f598 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f001 f9a9 	bl	800e730 <xTaskPriorityInherit>
 800d3de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d3e0:	f002 f90c 	bl	800f5fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e6:	3324      	adds	r3, #36	@ 0x24
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 ff59 	bl	800e2a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3f4:	f000 f988 	bl	800d708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3f8:	f000 fd74 	bl	800dee4 <xTaskResumeAll>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f47f af67 	bne.w	800d2d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d404:	4b18      	ldr	r3, [pc, #96]	@ (800d468 <xQueueSemaphoreTake+0x21c>)
 800d406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d40a:	601a      	str	r2, [r3, #0]
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	e75d      	b.n	800d2d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d416:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d418:	f000 f976 	bl	800d708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d41c:	f000 fd62 	bl	800dee4 <xTaskResumeAll>
 800d420:	e757      	b.n	800d2d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d422:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d424:	f000 f970 	bl	800d708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d428:	f000 fd5c 	bl	800dee4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d42c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d42e:	f000 f9bd 	bl	800d7ac <prvIsQueueEmpty>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	f43f af4c 	beq.w	800d2d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00d      	beq.n	800d45c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d440:	f002 f8aa 	bl	800f598 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d444:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d446:	f000 f8b7 	bl	800d5b8 <prvGetDisinheritPriorityAfterTimeout>
 800d44a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d452:	4618      	mov	r0, r3
 800d454:	f001 fa44 	bl	800e8e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d458:	f002 f8d0 	bl	800f5fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d45c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3738      	adds	r7, #56	@ 0x38
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	e000ed04 	.word	0xe000ed04

0800d46c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b08e      	sub	sp, #56	@ 0x38
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10b      	bne.n	800d49a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	623b      	str	r3, [r7, #32]
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	e7fd      	b.n	800d496 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d103      	bne.n	800d4a8 <xQueueReceiveFromISR+0x3c>
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d101      	bne.n	800d4ac <xQueueReceiveFromISR+0x40>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e000      	b.n	800d4ae <xQueueReceiveFromISR+0x42>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10b      	bne.n	800d4ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	61fb      	str	r3, [r7, #28]
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop
 800d4c8:	e7fd      	b.n	800d4c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4ca:	f002 f945 	bl	800f758 <vPortValidateInterruptPriority>
	__asm volatile
 800d4ce:	f3ef 8211 	mrs	r2, BASEPRI
 800d4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	61ba      	str	r2, [r7, #24]
 800d4e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d02f      	beq.n	800d556 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d500:	68b9      	ldr	r1, [r7, #8]
 800d502:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d504:	f000 f8da 	bl	800d6bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50a:	1e5a      	subs	r2, r3, #1
 800d50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d50e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d510:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d518:	d112      	bne.n	800d540 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d016      	beq.n	800d550 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d524:	3310      	adds	r3, #16
 800d526:	4618      	mov	r0, r3
 800d528:	f000 ff0e 	bl	800e348 <xTaskRemoveFromEventList>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00e      	beq.n	800d550 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00b      	beq.n	800d550 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	e007      	b.n	800d550 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d544:	3301      	adds	r3, #1
 800d546:	b2db      	uxtb	r3, r3
 800d548:	b25a      	sxtb	r2, r3
 800d54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d550:	2301      	movs	r3, #1
 800d552:	637b      	str	r3, [r7, #52]	@ 0x34
 800d554:	e001      	b.n	800d55a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d556:	2300      	movs	r3, #0
 800d558:	637b      	str	r3, [r7, #52]	@ 0x34
 800d55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	f383 8811 	msr	BASEPRI, r3
}
 800d564:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3738      	adds	r7, #56	@ 0x38
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10b      	bne.n	800d59a <vQueueDelete+0x2a>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	60bb      	str	r3, [r7, #8]
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	e7fd      	b.n	800d596 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f000 f95e 	bl	800d85c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d102      	bne.n	800d5b0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f002 f9e4 	bl	800f978 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d006      	beq.n	800d5d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	e001      	b.n	800d5da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d5da:	68fb      	ldr	r3, [r7, #12]
	}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3714      	adds	r7, #20
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10d      	bne.n	800d622 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d14d      	bne.n	800d6aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	4618      	mov	r0, r3
 800d614:	f001 f8f4 	bl	800e800 <xTaskPriorityDisinherit>
 800d618:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	609a      	str	r2, [r3, #8]
 800d620:	e043      	b.n	800d6aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d119      	bne.n	800d65c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6858      	ldr	r0, [r3, #4]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d630:	461a      	mov	r2, r3
 800d632:	68b9      	ldr	r1, [r7, #8]
 800d634:	f00d fa8f 	bl	801ab56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d640:	441a      	add	r2, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d32b      	bcc.n	800d6aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	605a      	str	r2, [r3, #4]
 800d65a:	e026      	b.n	800d6aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	68d8      	ldr	r0, [r3, #12]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d664:	461a      	mov	r2, r3
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	f00d fa75 	bl	801ab56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	68da      	ldr	r2, [r3, #12]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d674:	425b      	negs	r3, r3
 800d676:	441a      	add	r2, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	68da      	ldr	r2, [r3, #12]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	d207      	bcs.n	800d698 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	689a      	ldr	r2, [r3, #8]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d690:	425b      	negs	r3, r3
 800d692:	441a      	add	r2, r3
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d105      	bne.n	800d6aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d002      	beq.n	800d6aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d6b2:	697b      	ldr	r3, [r7, #20]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d018      	beq.n	800d700 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68da      	ldr	r2, [r3, #12]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d6:	441a      	add	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	68da      	ldr	r2, [r3, #12]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d303      	bcc.n	800d6f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	68d9      	ldr	r1, [r3, #12]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	6838      	ldr	r0, [r7, #0]
 800d6fc:	f00d fa2b 	bl	801ab56 <memcpy>
	}
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d710:	f001 ff42 	bl	800f598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d71a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d71c:	e011      	b.n	800d742 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d722:	2b00      	cmp	r3, #0
 800d724:	d012      	beq.n	800d74c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	3324      	adds	r3, #36	@ 0x24
 800d72a:	4618      	mov	r0, r3
 800d72c:	f000 fe0c 	bl	800e348 <xTaskRemoveFromEventList>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d001      	beq.n	800d73a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d736:	f000 fee5 	bl	800e504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d73a:	7bfb      	ldrb	r3, [r7, #15]
 800d73c:	3b01      	subs	r3, #1
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d746:	2b00      	cmp	r3, #0
 800d748:	dce9      	bgt.n	800d71e <prvUnlockQueue+0x16>
 800d74a:	e000      	b.n	800d74e <prvUnlockQueue+0x46>
					break;
 800d74c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	22ff      	movs	r2, #255	@ 0xff
 800d752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d756:	f001 ff51 	bl	800f5fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d75a:	f001 ff1d 	bl	800f598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d764:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d766:	e011      	b.n	800d78c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d012      	beq.n	800d796 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	3310      	adds	r3, #16
 800d774:	4618      	mov	r0, r3
 800d776:	f000 fde7 	bl	800e348 <xTaskRemoveFromEventList>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d780:	f000 fec0 	bl	800e504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d784:	7bbb      	ldrb	r3, [r7, #14]
 800d786:	3b01      	subs	r3, #1
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d78c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d790:	2b00      	cmp	r3, #0
 800d792:	dce9      	bgt.n	800d768 <prvUnlockQueue+0x60>
 800d794:	e000      	b.n	800d798 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d796:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	22ff      	movs	r2, #255	@ 0xff
 800d79c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d7a0:	f001 ff2c 	bl	800f5fc <vPortExitCritical>
}
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7b4:	f001 fef0 	bl	800f598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d102      	bne.n	800d7c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	e001      	b.n	800d7ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7ca:	f001 ff17 	bl	800f5fc <vPortExitCritical>

	return xReturn;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7e0:	f001 feda 	bl	800f598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d102      	bne.n	800d7f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	e001      	b.n	800d7fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7fa:	f001 feff 	bl	800f5fc <vPortExitCritical>

	return xReturn;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d812:	2300      	movs	r3, #0
 800d814:	60fb      	str	r3, [r7, #12]
 800d816:	e014      	b.n	800d842 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d818:	4a0f      	ldr	r2, [pc, #60]	@ (800d858 <vQueueAddToRegistry+0x50>)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10b      	bne.n	800d83c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d824:	490c      	ldr	r1, [pc, #48]	@ (800d858 <vQueueAddToRegistry+0x50>)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	683a      	ldr	r2, [r7, #0]
 800d82a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d82e:	4a0a      	ldr	r2, [pc, #40]	@ (800d858 <vQueueAddToRegistry+0x50>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	00db      	lsls	r3, r3, #3
 800d834:	4413      	add	r3, r2
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d83a:	e006      	b.n	800d84a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3301      	adds	r3, #1
 800d840:	60fb      	str	r3, [r7, #12]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b07      	cmp	r3, #7
 800d846:	d9e7      	bls.n	800d818 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d848:	bf00      	nop
 800d84a:	bf00      	nop
 800d84c:	3714      	adds	r7, #20
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	2400619c 	.word	0x2400619c

0800d85c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	e016      	b.n	800d898 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d86a:	4a10      	ldr	r2, [pc, #64]	@ (800d8ac <vQueueUnregisterQueue+0x50>)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	4413      	add	r3, r2
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	429a      	cmp	r2, r3
 800d878:	d10b      	bne.n	800d892 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d87a:	4a0c      	ldr	r2, [pc, #48]	@ (800d8ac <vQueueUnregisterQueue+0x50>)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2100      	movs	r1, #0
 800d880:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d884:	4a09      	ldr	r2, [pc, #36]	@ (800d8ac <vQueueUnregisterQueue+0x50>)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	00db      	lsls	r3, r3, #3
 800d88a:	4413      	add	r3, r2
 800d88c:	2200      	movs	r2, #0
 800d88e:	605a      	str	r2, [r3, #4]
				break;
 800d890:	e006      	b.n	800d8a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3301      	adds	r3, #1
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2b07      	cmp	r3, #7
 800d89c:	d9e5      	bls.n	800d86a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d89e:	bf00      	nop
 800d8a0:	bf00      	nop
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	2400619c 	.word	0x2400619c

0800d8b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8c0:	f001 fe6a 	bl	800f598 <vPortEnterCritical>
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8ca:	b25b      	sxtb	r3, r3
 800d8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d0:	d103      	bne.n	800d8da <vQueueWaitForMessageRestricted+0x2a>
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8e0:	b25b      	sxtb	r3, r3
 800d8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e6:	d103      	bne.n	800d8f0 <vQueueWaitForMessageRestricted+0x40>
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8f0:	f001 fe84 	bl	800f5fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d106      	bne.n	800d90a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	3324      	adds	r3, #36	@ 0x24
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	68b9      	ldr	r1, [r7, #8]
 800d904:	4618      	mov	r0, r3
 800d906:	f000 fcf3 	bl	800e2f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d90a:	6978      	ldr	r0, [r7, #20]
 800d90c:	f7ff fefc 	bl	800d708 <prvUnlockQueue>
	}
 800d910:	bf00      	nop
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08e      	sub	sp, #56	@ 0x38
 800d91c:	af04      	add	r7, sp, #16
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
 800d924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10b      	bne.n	800d944 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d930:	f383 8811 	msr	BASEPRI, r3
 800d934:	f3bf 8f6f 	isb	sy
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	623b      	str	r3, [r7, #32]
}
 800d93e:	bf00      	nop
 800d940:	bf00      	nop
 800d942:	e7fd      	b.n	800d940 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d946:	2b00      	cmp	r3, #0
 800d948:	d10b      	bne.n	800d962 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	61fb      	str	r3, [r7, #28]
}
 800d95c:	bf00      	nop
 800d95e:	bf00      	nop
 800d960:	e7fd      	b.n	800d95e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d962:	23a8      	movs	r3, #168	@ 0xa8
 800d964:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	2ba8      	cmp	r3, #168	@ 0xa8
 800d96a:	d00b      	beq.n	800d984 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	61bb      	str	r3, [r7, #24]
}
 800d97e:	bf00      	nop
 800d980:	bf00      	nop
 800d982:	e7fd      	b.n	800d980 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d984:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d01e      	beq.n	800d9ca <xTaskCreateStatic+0xb2>
 800d98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d01b      	beq.n	800d9ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d994:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d99a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	2202      	movs	r2, #2
 800d9a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	9303      	str	r3, [sp, #12]
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9aa:	9302      	str	r3, [sp, #8]
 800d9ac:	f107 0314 	add.w	r3, r7, #20
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f000 f851 	bl	800da64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d9c4:	f000 f8f6 	bl	800dbb4 <prvAddNewTaskToReadyList>
 800d9c8:	e001      	b.n	800d9ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9ce:	697b      	ldr	r3, [r7, #20]
	}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3728      	adds	r7, #40	@ 0x28
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08c      	sub	sp, #48	@ 0x30
 800d9dc:	af04      	add	r7, sp, #16
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	603b      	str	r3, [r7, #0]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9e8:	88fb      	ldrh	r3, [r7, #6]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f001 fef5 	bl	800f7dc <pvPortMalloc>
 800d9f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00e      	beq.n	800da18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9fa:	20a8      	movs	r0, #168	@ 0xa8
 800d9fc:	f001 feee 	bl	800f7dc <pvPortMalloc>
 800da00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	631a      	str	r2, [r3, #48]	@ 0x30
 800da0e:	e005      	b.n	800da1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da10:	6978      	ldr	r0, [r7, #20]
 800da12:	f001 ffb1 	bl	800f978 <vPortFree>
 800da16:	e001      	b.n	800da1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da18:	2300      	movs	r3, #0
 800da1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d017      	beq.n	800da52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	2200      	movs	r2, #0
 800da26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da2a:	88fa      	ldrh	r2, [r7, #6]
 800da2c:	2300      	movs	r3, #0
 800da2e:	9303      	str	r3, [sp, #12]
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	9302      	str	r3, [sp, #8]
 800da34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da36:	9301      	str	r3, [sp, #4]
 800da38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 f80f 	bl	800da64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da46:	69f8      	ldr	r0, [r7, #28]
 800da48:	f000 f8b4 	bl	800dbb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da4c:	2301      	movs	r3, #1
 800da4e:	61bb      	str	r3, [r7, #24]
 800da50:	e002      	b.n	800da58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da52:	f04f 33ff 	mov.w	r3, #4294967295
 800da56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da58:	69bb      	ldr	r3, [r7, #24]
	}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3720      	adds	r7, #32
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
	...

0800da64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	461a      	mov	r2, r3
 800da7c:	21a5      	movs	r1, #165	@ 0xa5
 800da7e:	f00c ff96 	bl	801a9ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800da8c:	440b      	add	r3, r1
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4413      	add	r3, r2
 800da92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	f023 0307 	bic.w	r3, r3, #7
 800da9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00b      	beq.n	800dabe <prvInitialiseNewTask+0x5a>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	617b      	str	r3, [r7, #20]
}
 800dab8:	bf00      	nop
 800daba:	bf00      	nop
 800dabc:	e7fd      	b.n	800daba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d01f      	beq.n	800db04 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dac4:	2300      	movs	r3, #0
 800dac6:	61fb      	str	r3, [r7, #28]
 800dac8:	e012      	b.n	800daf0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	4413      	add	r3, r2
 800dad0:	7819      	ldrb	r1, [r3, #0]
 800dad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	4413      	add	r3, r2
 800dad8:	3334      	adds	r3, #52	@ 0x34
 800dada:	460a      	mov	r2, r1
 800dadc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	4413      	add	r3, r2
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	3301      	adds	r3, #1
 800daee:	61fb      	str	r3, [r7, #28]
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	2b0f      	cmp	r3, #15
 800daf4:	d9e9      	bls.n	800daca <prvInitialiseNewTask+0x66>
 800daf6:	e000      	b.n	800dafa <prvInitialiseNewTask+0x96>
			{
				break;
 800daf8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800db02:	e003      	b.n	800db0c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db06:	2200      	movs	r2, #0
 800db08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0e:	2b37      	cmp	r3, #55	@ 0x37
 800db10:	d901      	bls.n	800db16 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db12:	2337      	movs	r3, #55	@ 0x37
 800db14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	2200      	movs	r2, #0
 800db26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2a:	3304      	adds	r3, #4
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe fd7b 	bl	800c628 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	3318      	adds	r3, #24
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe fd76 	bl	800c628 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db54:	2200      	movs	r2, #0
 800db56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db64:	3354      	adds	r3, #84	@ 0x54
 800db66:	224c      	movs	r2, #76	@ 0x4c
 800db68:	2100      	movs	r1, #0
 800db6a:	4618      	mov	r0, r3
 800db6c:	f00c ff1f 	bl	801a9ae <memset>
 800db70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db72:	4a0d      	ldr	r2, [pc, #52]	@ (800dba8 <prvInitialiseNewTask+0x144>)
 800db74:	659a      	str	r2, [r3, #88]	@ 0x58
 800db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db78:	4a0c      	ldr	r2, [pc, #48]	@ (800dbac <prvInitialiseNewTask+0x148>)
 800db7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7e:	4a0c      	ldr	r2, [pc, #48]	@ (800dbb0 <prvInitialiseNewTask+0x14c>)
 800db80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db82:	683a      	ldr	r2, [r7, #0]
 800db84:	68f9      	ldr	r1, [r7, #12]
 800db86:	69b8      	ldr	r0, [r7, #24]
 800db88:	f001 fbd2 	bl	800f330 <pxPortInitialiseStack>
 800db8c:	4602      	mov	r2, r0
 800db8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db9e:	bf00      	nop
 800dba0:	3720      	adds	r7, #32
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	24014cdc 	.word	0x24014cdc
 800dbac:	24014d44 	.word	0x24014d44
 800dbb0:	24014dac 	.word	0x24014dac

0800dbb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbbc:	f001 fcec 	bl	800f598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbc0:	4b2d      	ldr	r3, [pc, #180]	@ (800dc78 <prvAddNewTaskToReadyList+0xc4>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	4a2c      	ldr	r2, [pc, #176]	@ (800dc78 <prvAddNewTaskToReadyList+0xc4>)
 800dbc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dbca:	4b2c      	ldr	r3, [pc, #176]	@ (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d109      	bne.n	800dbe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbd2:	4a2a      	ldr	r2, [pc, #168]	@ (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbd8:	4b27      	ldr	r3, [pc, #156]	@ (800dc78 <prvAddNewTaskToReadyList+0xc4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d110      	bne.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dbe0:	f000 fcb4 	bl	800e54c <prvInitialiseTaskLists>
 800dbe4:	e00d      	b.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dbe6:	4b26      	ldr	r3, [pc, #152]	@ (800dc80 <prvAddNewTaskToReadyList+0xcc>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d109      	bne.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dbee:	4b23      	ldr	r3, [pc, #140]	@ (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d802      	bhi.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dbfc:	4a1f      	ldr	r2, [pc, #124]	@ (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc02:	4b20      	ldr	r3, [pc, #128]	@ (800dc84 <prvAddNewTaskToReadyList+0xd0>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3301      	adds	r3, #1
 800dc08:	4a1e      	ldr	r2, [pc, #120]	@ (800dc84 <prvAddNewTaskToReadyList+0xd0>)
 800dc0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc0c:	4b1d      	ldr	r3, [pc, #116]	@ (800dc84 <prvAddNewTaskToReadyList+0xd0>)
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc18:	4b1b      	ldr	r3, [pc, #108]	@ (800dc88 <prvAddNewTaskToReadyList+0xd4>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d903      	bls.n	800dc28 <prvAddNewTaskToReadyList+0x74>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc24:	4a18      	ldr	r2, [pc, #96]	@ (800dc88 <prvAddNewTaskToReadyList+0xd4>)
 800dc26:	6013      	str	r3, [r2, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4a15      	ldr	r2, [pc, #84]	@ (800dc8c <prvAddNewTaskToReadyList+0xd8>)
 800dc36:	441a      	add	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4610      	mov	r0, r2
 800dc40:	f7fe fcff 	bl	800c642 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc44:	f001 fcda 	bl	800f5fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc48:	4b0d      	ldr	r3, [pc, #52]	@ (800dc80 <prvAddNewTaskToReadyList+0xcc>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00e      	beq.n	800dc6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc50:	4b0a      	ldr	r3, [pc, #40]	@ (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d207      	bcs.n	800dc6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc5e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc90 <prvAddNewTaskToReadyList+0xdc>)
 800dc60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	240066b0 	.word	0x240066b0
 800dc7c:	240061dc 	.word	0x240061dc
 800dc80:	240066bc 	.word	0x240066bc
 800dc84:	240066cc 	.word	0x240066cc
 800dc88:	240066b8 	.word	0x240066b8
 800dc8c:	240061e0 	.word	0x240061e0
 800dc90:	e000ed04 	.word	0xe000ed04

0800dc94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dc9c:	f001 fc7c 	bl	800f598 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d102      	bne.n	800dcac <vTaskDelete+0x18>
 800dca6:	4b2d      	ldr	r3, [pc, #180]	@ (800dd5c <vTaskDelete+0xc8>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	e000      	b.n	800dcae <vTaskDelete+0x1a>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe fd21 	bl	800c6fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d004      	beq.n	800dccc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	3318      	adds	r3, #24
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fe fd18 	bl	800c6fc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800dccc:	4b24      	ldr	r3, [pc, #144]	@ (800dd60 <vTaskDelete+0xcc>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	4a23      	ldr	r2, [pc, #140]	@ (800dd60 <vTaskDelete+0xcc>)
 800dcd4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800dcd6:	4b21      	ldr	r3, [pc, #132]	@ (800dd5c <vTaskDelete+0xc8>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d10b      	bne.n	800dcf8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	3304      	adds	r3, #4
 800dce4:	4619      	mov	r1, r3
 800dce6:	481f      	ldr	r0, [pc, #124]	@ (800dd64 <vTaskDelete+0xd0>)
 800dce8:	f7fe fcab 	bl	800c642 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800dcec:	4b1e      	ldr	r3, [pc, #120]	@ (800dd68 <vTaskDelete+0xd4>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	4a1d      	ldr	r2, [pc, #116]	@ (800dd68 <vTaskDelete+0xd4>)
 800dcf4:	6013      	str	r3, [r2, #0]
 800dcf6:	e009      	b.n	800dd0c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800dcf8:	4b1c      	ldr	r3, [pc, #112]	@ (800dd6c <vTaskDelete+0xd8>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	4a1b      	ldr	r2, [pc, #108]	@ (800dd6c <vTaskDelete+0xd8>)
 800dd00:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f000 fc90 	bl	800e628 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800dd08:	f000 fcc4 	bl	800e694 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800dd0c:	f001 fc76 	bl	800f5fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800dd10:	4b17      	ldr	r3, [pc, #92]	@ (800dd70 <vTaskDelete+0xdc>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d01c      	beq.n	800dd52 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800dd18:	4b10      	ldr	r3, [pc, #64]	@ (800dd5c <vTaskDelete+0xc8>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d117      	bne.n	800dd52 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800dd22:	4b14      	ldr	r3, [pc, #80]	@ (800dd74 <vTaskDelete+0xe0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00b      	beq.n	800dd42 <vTaskDelete+0xae>
	__asm volatile
 800dd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2e:	f383 8811 	msr	BASEPRI, r3
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	60bb      	str	r3, [r7, #8]
}
 800dd3c:	bf00      	nop
 800dd3e:	bf00      	nop
 800dd40:	e7fd      	b.n	800dd3e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800dd42:	4b0d      	ldr	r3, [pc, #52]	@ (800dd78 <vTaskDelete+0xe4>)
 800dd44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd52:	bf00      	nop
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	240061dc 	.word	0x240061dc
 800dd60:	240066cc 	.word	0x240066cc
 800dd64:	24006684 	.word	0x24006684
 800dd68:	24006698 	.word	0x24006698
 800dd6c:	240066b0 	.word	0x240066b0
 800dd70:	240066bc 	.word	0x240066bc
 800dd74:	240066d8 	.word	0x240066d8
 800dd78:	e000ed04 	.word	0xe000ed04

0800dd7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd84:	2300      	movs	r3, #0
 800dd86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d018      	beq.n	800ddc0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd8e:	4b14      	ldr	r3, [pc, #80]	@ (800dde0 <vTaskDelay+0x64>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00b      	beq.n	800ddae <vTaskDelay+0x32>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	60bb      	str	r3, [r7, #8]
}
 800dda8:	bf00      	nop
 800ddaa:	bf00      	nop
 800ddac:	e7fd      	b.n	800ddaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ddae:	f000 f88b 	bl	800dec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 ff0d 	bl	800ebd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ddba:	f000 f893 	bl	800dee4 <xTaskResumeAll>
 800ddbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d107      	bne.n	800ddd6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ddc6:	4b07      	ldr	r3, [pc, #28]	@ (800dde4 <vTaskDelay+0x68>)
 800ddc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddd6:	bf00      	nop
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	240066d8 	.word	0x240066d8
 800dde4:	e000ed04 	.word	0xe000ed04

0800dde8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b08a      	sub	sp, #40	@ 0x28
 800ddec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ddf6:	463a      	mov	r2, r7
 800ddf8:	1d39      	adds	r1, r7, #4
 800ddfa:	f107 0308 	add.w	r3, r7, #8
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fe fbbe 	bl	800c580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de04:	6839      	ldr	r1, [r7, #0]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	9202      	str	r2, [sp, #8]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	2300      	movs	r3, #0
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	2300      	movs	r3, #0
 800de14:	460a      	mov	r2, r1
 800de16:	4924      	ldr	r1, [pc, #144]	@ (800dea8 <vTaskStartScheduler+0xc0>)
 800de18:	4824      	ldr	r0, [pc, #144]	@ (800deac <vTaskStartScheduler+0xc4>)
 800de1a:	f7ff fd7d 	bl	800d918 <xTaskCreateStatic>
 800de1e:	4603      	mov	r3, r0
 800de20:	4a23      	ldr	r2, [pc, #140]	@ (800deb0 <vTaskStartScheduler+0xc8>)
 800de22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de24:	4b22      	ldr	r3, [pc, #136]	@ (800deb0 <vTaskStartScheduler+0xc8>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de2c:	2301      	movs	r3, #1
 800de2e:	617b      	str	r3, [r7, #20]
 800de30:	e001      	b.n	800de36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de32:	2300      	movs	r3, #0
 800de34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d102      	bne.n	800de42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de3c:	f000 ff1e 	bl	800ec7c <xTimerCreateTimerTask>
 800de40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d11b      	bne.n	800de80 <vTaskStartScheduler+0x98>
	__asm volatile
 800de48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4c:	f383 8811 	msr	BASEPRI, r3
 800de50:	f3bf 8f6f 	isb	sy
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	613b      	str	r3, [r7, #16]
}
 800de5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de5c:	4b15      	ldr	r3, [pc, #84]	@ (800deb4 <vTaskStartScheduler+0xcc>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3354      	adds	r3, #84	@ 0x54
 800de62:	4a15      	ldr	r2, [pc, #84]	@ (800deb8 <vTaskStartScheduler+0xd0>)
 800de64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de66:	4b15      	ldr	r3, [pc, #84]	@ (800debc <vTaskStartScheduler+0xd4>)
 800de68:	f04f 32ff 	mov.w	r2, #4294967295
 800de6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de6e:	4b14      	ldr	r3, [pc, #80]	@ (800dec0 <vTaskStartScheduler+0xd8>)
 800de70:	2201      	movs	r2, #1
 800de72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de74:	4b13      	ldr	r3, [pc, #76]	@ (800dec4 <vTaskStartScheduler+0xdc>)
 800de76:	2200      	movs	r2, #0
 800de78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de7a:	f001 fae9 	bl	800f450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de7e:	e00f      	b.n	800dea0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de86:	d10b      	bne.n	800dea0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800de88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	60fb      	str	r3, [r7, #12]
}
 800de9a:	bf00      	nop
 800de9c:	bf00      	nop
 800de9e:	e7fd      	b.n	800de9c <vTaskStartScheduler+0xb4>
}
 800dea0:	bf00      	nop
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	0801b848 	.word	0x0801b848
 800deac:	0800e51d 	.word	0x0800e51d
 800deb0:	240066d4 	.word	0x240066d4
 800deb4:	240061dc 	.word	0x240061dc
 800deb8:	240049d0 	.word	0x240049d0
 800debc:	240066d0 	.word	0x240066d0
 800dec0:	240066bc 	.word	0x240066bc
 800dec4:	240066b4 	.word	0x240066b4

0800dec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dec8:	b480      	push	{r7}
 800deca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800decc:	4b04      	ldr	r3, [pc, #16]	@ (800dee0 <vTaskSuspendAll+0x18>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3301      	adds	r3, #1
 800ded2:	4a03      	ldr	r2, [pc, #12]	@ (800dee0 <vTaskSuspendAll+0x18>)
 800ded4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ded6:	bf00      	nop
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr
 800dee0:	240066d8 	.word	0x240066d8

0800dee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800deea:	2300      	movs	r3, #0
 800deec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800deee:	2300      	movs	r3, #0
 800def0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800def2:	4b42      	ldr	r3, [pc, #264]	@ (800dffc <xTaskResumeAll+0x118>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10b      	bne.n	800df12 <xTaskResumeAll+0x2e>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	603b      	str	r3, [r7, #0]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df12:	f001 fb41 	bl	800f598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df16:	4b39      	ldr	r3, [pc, #228]	@ (800dffc <xTaskResumeAll+0x118>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	3b01      	subs	r3, #1
 800df1c:	4a37      	ldr	r2, [pc, #220]	@ (800dffc <xTaskResumeAll+0x118>)
 800df1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df20:	4b36      	ldr	r3, [pc, #216]	@ (800dffc <xTaskResumeAll+0x118>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d162      	bne.n	800dfee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df28:	4b35      	ldr	r3, [pc, #212]	@ (800e000 <xTaskResumeAll+0x11c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d05e      	beq.n	800dfee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df30:	e02f      	b.n	800df92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df32:	4b34      	ldr	r3, [pc, #208]	@ (800e004 <xTaskResumeAll+0x120>)
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3318      	adds	r3, #24
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fbdc 	bl	800c6fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3304      	adds	r3, #4
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe fbd7 	bl	800c6fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df52:	4b2d      	ldr	r3, [pc, #180]	@ (800e008 <xTaskResumeAll+0x124>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	429a      	cmp	r2, r3
 800df58:	d903      	bls.n	800df62 <xTaskResumeAll+0x7e>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5e:	4a2a      	ldr	r2, [pc, #168]	@ (800e008 <xTaskResumeAll+0x124>)
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df66:	4613      	mov	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	4a27      	ldr	r2, [pc, #156]	@ (800e00c <xTaskResumeAll+0x128>)
 800df70:	441a      	add	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3304      	adds	r3, #4
 800df76:	4619      	mov	r1, r3
 800df78:	4610      	mov	r0, r2
 800df7a:	f7fe fb62 	bl	800c642 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df82:	4b23      	ldr	r3, [pc, #140]	@ (800e010 <xTaskResumeAll+0x12c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df88:	429a      	cmp	r2, r3
 800df8a:	d302      	bcc.n	800df92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800df8c:	4b21      	ldr	r3, [pc, #132]	@ (800e014 <xTaskResumeAll+0x130>)
 800df8e:	2201      	movs	r2, #1
 800df90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df92:	4b1c      	ldr	r3, [pc, #112]	@ (800e004 <xTaskResumeAll+0x120>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1cb      	bne.n	800df32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfa0:	f000 fb78 	bl	800e694 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dfa4:	4b1c      	ldr	r3, [pc, #112]	@ (800e018 <xTaskResumeAll+0x134>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d010      	beq.n	800dfd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfb0:	f000 f858 	bl	800e064 <xTaskIncrementTick>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d002      	beq.n	800dfc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dfba:	4b16      	ldr	r3, [pc, #88]	@ (800e014 <xTaskResumeAll+0x130>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1f1      	bne.n	800dfb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dfcc:	4b12      	ldr	r3, [pc, #72]	@ (800e018 <xTaskResumeAll+0x134>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dfd2:	4b10      	ldr	r3, [pc, #64]	@ (800e014 <xTaskResumeAll+0x130>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d009      	beq.n	800dfee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfde:	4b0f      	ldr	r3, [pc, #60]	@ (800e01c <xTaskResumeAll+0x138>)
 800dfe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfee:	f001 fb05 	bl	800f5fc <vPortExitCritical>

	return xAlreadyYielded;
 800dff2:	68bb      	ldr	r3, [r7, #8]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3710      	adds	r7, #16
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	240066d8 	.word	0x240066d8
 800e000:	240066b0 	.word	0x240066b0
 800e004:	24006670 	.word	0x24006670
 800e008:	240066b8 	.word	0x240066b8
 800e00c:	240061e0 	.word	0x240061e0
 800e010:	240061dc 	.word	0x240061dc
 800e014:	240066c4 	.word	0x240066c4
 800e018:	240066c0 	.word	0x240066c0
 800e01c:	e000ed04 	.word	0xe000ed04

0800e020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e026:	4b05      	ldr	r3, [pc, #20]	@ (800e03c <xTaskGetTickCount+0x1c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e02c:	687b      	ldr	r3, [r7, #4]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	370c      	adds	r7, #12
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	240066b4 	.word	0x240066b4

0800e040 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e046:	f001 fb87 	bl	800f758 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e04a:	2300      	movs	r3, #0
 800e04c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e04e:	4b04      	ldr	r3, [pc, #16]	@ (800e060 <xTaskGetTickCountFromISR+0x20>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e054:	683b      	ldr	r3, [r7, #0]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	240066b4 	.word	0x240066b4

0800e064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e06a:	2300      	movs	r3, #0
 800e06c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e06e:	4b4f      	ldr	r3, [pc, #316]	@ (800e1ac <xTaskIncrementTick+0x148>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	f040 8090 	bne.w	800e198 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e078:	4b4d      	ldr	r3, [pc, #308]	@ (800e1b0 <xTaskIncrementTick+0x14c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	3301      	adds	r3, #1
 800e07e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e080:	4a4b      	ldr	r2, [pc, #300]	@ (800e1b0 <xTaskIncrementTick+0x14c>)
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d121      	bne.n	800e0d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e08c:	4b49      	ldr	r3, [pc, #292]	@ (800e1b4 <xTaskIncrementTick+0x150>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00b      	beq.n	800e0ae <xTaskIncrementTick+0x4a>
	__asm volatile
 800e096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	603b      	str	r3, [r7, #0]
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	e7fd      	b.n	800e0aa <xTaskIncrementTick+0x46>
 800e0ae:	4b41      	ldr	r3, [pc, #260]	@ (800e1b4 <xTaskIncrementTick+0x150>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	4b40      	ldr	r3, [pc, #256]	@ (800e1b8 <xTaskIncrementTick+0x154>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a3e      	ldr	r2, [pc, #248]	@ (800e1b4 <xTaskIncrementTick+0x150>)
 800e0ba:	6013      	str	r3, [r2, #0]
 800e0bc:	4a3e      	ldr	r2, [pc, #248]	@ (800e1b8 <xTaskIncrementTick+0x154>)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6013      	str	r3, [r2, #0]
 800e0c2:	4b3e      	ldr	r3, [pc, #248]	@ (800e1bc <xTaskIncrementTick+0x158>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	4a3c      	ldr	r2, [pc, #240]	@ (800e1bc <xTaskIncrementTick+0x158>)
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	f000 fae2 	bl	800e694 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0d0:	4b3b      	ldr	r3, [pc, #236]	@ (800e1c0 <xTaskIncrementTick+0x15c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	693a      	ldr	r2, [r7, #16]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d349      	bcc.n	800e16e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0da:	4b36      	ldr	r3, [pc, #216]	@ (800e1b4 <xTaskIncrementTick+0x150>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d104      	bne.n	800e0ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e4:	4b36      	ldr	r3, [pc, #216]	@ (800e1c0 <xTaskIncrementTick+0x15c>)
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ea:	601a      	str	r2, [r3, #0]
					break;
 800e0ec:	e03f      	b.n	800e16e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ee:	4b31      	ldr	r3, [pc, #196]	@ (800e1b4 <xTaskIncrementTick+0x150>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0fe:	693a      	ldr	r2, [r7, #16]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	429a      	cmp	r2, r3
 800e104:	d203      	bcs.n	800e10e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e106:	4a2e      	ldr	r2, [pc, #184]	@ (800e1c0 <xTaskIncrementTick+0x15c>)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e10c:	e02f      	b.n	800e16e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	3304      	adds	r3, #4
 800e112:	4618      	mov	r0, r3
 800e114:	f7fe faf2 	bl	800c6fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d004      	beq.n	800e12a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	3318      	adds	r3, #24
 800e124:	4618      	mov	r0, r3
 800e126:	f7fe fae9 	bl	800c6fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e12e:	4b25      	ldr	r3, [pc, #148]	@ (800e1c4 <xTaskIncrementTick+0x160>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	429a      	cmp	r2, r3
 800e134:	d903      	bls.n	800e13e <xTaskIncrementTick+0xda>
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e13a:	4a22      	ldr	r2, [pc, #136]	@ (800e1c4 <xTaskIncrementTick+0x160>)
 800e13c:	6013      	str	r3, [r2, #0]
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e142:	4613      	mov	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4a1f      	ldr	r2, [pc, #124]	@ (800e1c8 <xTaskIncrementTick+0x164>)
 800e14c:	441a      	add	r2, r3
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	3304      	adds	r3, #4
 800e152:	4619      	mov	r1, r3
 800e154:	4610      	mov	r0, r2
 800e156:	f7fe fa74 	bl	800c642 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e15e:	4b1b      	ldr	r3, [pc, #108]	@ (800e1cc <xTaskIncrementTick+0x168>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e164:	429a      	cmp	r2, r3
 800e166:	d3b8      	bcc.n	800e0da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e168:	2301      	movs	r3, #1
 800e16a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e16c:	e7b5      	b.n	800e0da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e16e:	4b17      	ldr	r3, [pc, #92]	@ (800e1cc <xTaskIncrementTick+0x168>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e174:	4914      	ldr	r1, [pc, #80]	@ (800e1c8 <xTaskIncrementTick+0x164>)
 800e176:	4613      	mov	r3, r2
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	440b      	add	r3, r1
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d901      	bls.n	800e18a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e186:	2301      	movs	r3, #1
 800e188:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e18a:	4b11      	ldr	r3, [pc, #68]	@ (800e1d0 <xTaskIncrementTick+0x16c>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d007      	beq.n	800e1a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e192:	2301      	movs	r3, #1
 800e194:	617b      	str	r3, [r7, #20]
 800e196:	e004      	b.n	800e1a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e198:	4b0e      	ldr	r3, [pc, #56]	@ (800e1d4 <xTaskIncrementTick+0x170>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3301      	adds	r3, #1
 800e19e:	4a0d      	ldr	r2, [pc, #52]	@ (800e1d4 <xTaskIncrementTick+0x170>)
 800e1a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e1a2:	697b      	ldr	r3, [r7, #20]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3718      	adds	r7, #24
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	240066d8 	.word	0x240066d8
 800e1b0:	240066b4 	.word	0x240066b4
 800e1b4:	24006668 	.word	0x24006668
 800e1b8:	2400666c 	.word	0x2400666c
 800e1bc:	240066c8 	.word	0x240066c8
 800e1c0:	240066d0 	.word	0x240066d0
 800e1c4:	240066b8 	.word	0x240066b8
 800e1c8:	240061e0 	.word	0x240061e0
 800e1cc:	240061dc 	.word	0x240061dc
 800e1d0:	240066c4 	.word	0x240066c4
 800e1d4:	240066c0 	.word	0x240066c0

0800e1d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1de:	4b2b      	ldr	r3, [pc, #172]	@ (800e28c <vTaskSwitchContext+0xb4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d003      	beq.n	800e1ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1e6:	4b2a      	ldr	r3, [pc, #168]	@ (800e290 <vTaskSwitchContext+0xb8>)
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1ec:	e047      	b.n	800e27e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e1ee:	4b28      	ldr	r3, [pc, #160]	@ (800e290 <vTaskSwitchContext+0xb8>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f4:	4b27      	ldr	r3, [pc, #156]	@ (800e294 <vTaskSwitchContext+0xbc>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	60fb      	str	r3, [r7, #12]
 800e1fa:	e011      	b.n	800e220 <vTaskSwitchContext+0x48>
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10b      	bne.n	800e21a <vTaskSwitchContext+0x42>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	607b      	str	r3, [r7, #4]
}
 800e214:	bf00      	nop
 800e216:	bf00      	nop
 800e218:	e7fd      	b.n	800e216 <vTaskSwitchContext+0x3e>
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	491d      	ldr	r1, [pc, #116]	@ (800e298 <vTaskSwitchContext+0xc0>)
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	4613      	mov	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	440b      	add	r3, r1
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d0e3      	beq.n	800e1fc <vTaskSwitchContext+0x24>
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	4613      	mov	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	4a16      	ldr	r2, [pc, #88]	@ (800e298 <vTaskSwitchContext+0xc0>)
 800e240:	4413      	add	r3, r2
 800e242:	60bb      	str	r3, [r7, #8]
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	685a      	ldr	r2, [r3, #4]
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	605a      	str	r2, [r3, #4]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	685a      	ldr	r2, [r3, #4]
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	3308      	adds	r3, #8
 800e256:	429a      	cmp	r2, r3
 800e258:	d104      	bne.n	800e264 <vTaskSwitchContext+0x8c>
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	685a      	ldr	r2, [r3, #4]
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	605a      	str	r2, [r3, #4]
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	4a0c      	ldr	r2, [pc, #48]	@ (800e29c <vTaskSwitchContext+0xc4>)
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	4a09      	ldr	r2, [pc, #36]	@ (800e294 <vTaskSwitchContext+0xbc>)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e274:	4b09      	ldr	r3, [pc, #36]	@ (800e29c <vTaskSwitchContext+0xc4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	3354      	adds	r3, #84	@ 0x54
 800e27a:	4a09      	ldr	r2, [pc, #36]	@ (800e2a0 <vTaskSwitchContext+0xc8>)
 800e27c:	6013      	str	r3, [r2, #0]
}
 800e27e:	bf00      	nop
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	240066d8 	.word	0x240066d8
 800e290:	240066c4 	.word	0x240066c4
 800e294:	240066b8 	.word	0x240066b8
 800e298:	240061e0 	.word	0x240061e0
 800e29c:	240061dc 	.word	0x240061dc
 800e2a0:	240049d0 	.word	0x240049d0

0800e2a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10b      	bne.n	800e2cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	60fb      	str	r3, [r7, #12]
}
 800e2c6:	bf00      	nop
 800e2c8:	bf00      	nop
 800e2ca:	e7fd      	b.n	800e2c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2cc:	4b07      	ldr	r3, [pc, #28]	@ (800e2ec <vTaskPlaceOnEventList+0x48>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3318      	adds	r3, #24
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7fe f9d8 	bl	800c68a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2da:	2101      	movs	r1, #1
 800e2dc:	6838      	ldr	r0, [r7, #0]
 800e2de:	f000 fc79 	bl	800ebd4 <prvAddCurrentTaskToDelayedList>
}
 800e2e2:	bf00      	nop
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	240061dc 	.word	0x240061dc

0800e2f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10b      	bne.n	800e31a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	617b      	str	r3, [r7, #20]
}
 800e314:	bf00      	nop
 800e316:	bf00      	nop
 800e318:	e7fd      	b.n	800e316 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e31a:	4b0a      	ldr	r3, [pc, #40]	@ (800e344 <vTaskPlaceOnEventListRestricted+0x54>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3318      	adds	r3, #24
 800e320:	4619      	mov	r1, r3
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f7fe f98d 	bl	800c642 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e32e:	f04f 33ff 	mov.w	r3, #4294967295
 800e332:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	68b8      	ldr	r0, [r7, #8]
 800e338:	f000 fc4c 	bl	800ebd4 <prvAddCurrentTaskToDelayedList>
	}
 800e33c:	bf00      	nop
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	240061dc 	.word	0x240061dc

0800e348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10b      	bne.n	800e376 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	60fb      	str	r3, [r7, #12]
}
 800e370:	bf00      	nop
 800e372:	bf00      	nop
 800e374:	e7fd      	b.n	800e372 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	3318      	adds	r3, #24
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fe f9be 	bl	800c6fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e380:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f8 <xTaskRemoveFromEventList+0xb0>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d11d      	bne.n	800e3c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	3304      	adds	r3, #4
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe f9b5 	bl	800c6fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e396:	4b19      	ldr	r3, [pc, #100]	@ (800e3fc <xTaskRemoveFromEventList+0xb4>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d903      	bls.n	800e3a6 <xTaskRemoveFromEventList+0x5e>
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a2:	4a16      	ldr	r2, [pc, #88]	@ (800e3fc <xTaskRemoveFromEventList+0xb4>)
 800e3a4:	6013      	str	r3, [r2, #0]
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	4a13      	ldr	r2, [pc, #76]	@ (800e400 <xTaskRemoveFromEventList+0xb8>)
 800e3b4:	441a      	add	r2, r3
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	4610      	mov	r0, r2
 800e3be:	f7fe f940 	bl	800c642 <vListInsertEnd>
 800e3c2:	e005      	b.n	800e3d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	3318      	adds	r3, #24
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	480e      	ldr	r0, [pc, #56]	@ (800e404 <xTaskRemoveFromEventList+0xbc>)
 800e3cc:	f7fe f939 	bl	800c642 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e408 <xTaskRemoveFromEventList+0xc0>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d905      	bls.n	800e3ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e3e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e40c <xTaskRemoveFromEventList+0xc4>)
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	e001      	b.n	800e3ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e3ee:	697b      	ldr	r3, [r7, #20]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3718      	adds	r7, #24
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	240066d8 	.word	0x240066d8
 800e3fc:	240066b8 	.word	0x240066b8
 800e400:	240061e0 	.word	0x240061e0
 800e404:	24006670 	.word	0x24006670
 800e408:	240061dc 	.word	0x240061dc
 800e40c:	240066c4 	.word	0x240066c4

0800e410 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e418:	4b06      	ldr	r3, [pc, #24]	@ (800e434 <vTaskInternalSetTimeOutState+0x24>)
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e420:	4b05      	ldr	r3, [pc, #20]	@ (800e438 <vTaskInternalSetTimeOutState+0x28>)
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	605a      	str	r2, [r3, #4]
}
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	240066c8 	.word	0x240066c8
 800e438:	240066b4 	.word	0x240066b4

0800e43c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b088      	sub	sp, #32
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10b      	bne.n	800e464 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	613b      	str	r3, [r7, #16]
}
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	e7fd      	b.n	800e460 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10b      	bne.n	800e482 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	60fb      	str	r3, [r7, #12]
}
 800e47c:	bf00      	nop
 800e47e:	bf00      	nop
 800e480:	e7fd      	b.n	800e47e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e482:	f001 f889 	bl	800f598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e486:	4b1d      	ldr	r3, [pc, #116]	@ (800e4fc <xTaskCheckForTimeOut+0xc0>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e49e:	d102      	bne.n	800e4a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	61fb      	str	r3, [r7, #28]
 800e4a4:	e023      	b.n	800e4ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	4b15      	ldr	r3, [pc, #84]	@ (800e500 <xTaskCheckForTimeOut+0xc4>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d007      	beq.n	800e4c2 <xTaskCheckForTimeOut+0x86>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	69ba      	ldr	r2, [r7, #24]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d302      	bcc.n	800e4c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	61fb      	str	r3, [r7, #28]
 800e4c0:	e015      	b.n	800e4ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	697a      	ldr	r2, [r7, #20]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d20b      	bcs.n	800e4e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	1ad2      	subs	r2, r2, r3
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7ff ff99 	bl	800e410 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	61fb      	str	r3, [r7, #28]
 800e4e2:	e004      	b.n	800e4ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e4ee:	f001 f885 	bl	800f5fc <vPortExitCritical>

	return xReturn;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3720      	adds	r7, #32
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	240066b4 	.word	0x240066b4
 800e500:	240066c8 	.word	0x240066c8

0800e504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e504:	b480      	push	{r7}
 800e506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e508:	4b03      	ldr	r3, [pc, #12]	@ (800e518 <vTaskMissedYield+0x14>)
 800e50a:	2201      	movs	r2, #1
 800e50c:	601a      	str	r2, [r3, #0]
}
 800e50e:	bf00      	nop
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr
 800e518:	240066c4 	.word	0x240066c4

0800e51c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e524:	f000 f852 	bl	800e5cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e528:	4b06      	ldr	r3, [pc, #24]	@ (800e544 <prvIdleTask+0x28>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d9f9      	bls.n	800e524 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e530:	4b05      	ldr	r3, [pc, #20]	@ (800e548 <prvIdleTask+0x2c>)
 800e532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e536:	601a      	str	r2, [r3, #0]
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e540:	e7f0      	b.n	800e524 <prvIdleTask+0x8>
 800e542:	bf00      	nop
 800e544:	240061e0 	.word	0x240061e0
 800e548:	e000ed04 	.word	0xe000ed04

0800e54c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e552:	2300      	movs	r3, #0
 800e554:	607b      	str	r3, [r7, #4]
 800e556:	e00c      	b.n	800e572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	4613      	mov	r3, r2
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	4413      	add	r3, r2
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4a12      	ldr	r2, [pc, #72]	@ (800e5ac <prvInitialiseTaskLists+0x60>)
 800e564:	4413      	add	r3, r2
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe f83e 	bl	800c5e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3301      	adds	r3, #1
 800e570:	607b      	str	r3, [r7, #4]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b37      	cmp	r3, #55	@ 0x37
 800e576:	d9ef      	bls.n	800e558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e578:	480d      	ldr	r0, [pc, #52]	@ (800e5b0 <prvInitialiseTaskLists+0x64>)
 800e57a:	f7fe f835 	bl	800c5e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e57e:	480d      	ldr	r0, [pc, #52]	@ (800e5b4 <prvInitialiseTaskLists+0x68>)
 800e580:	f7fe f832 	bl	800c5e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e584:	480c      	ldr	r0, [pc, #48]	@ (800e5b8 <prvInitialiseTaskLists+0x6c>)
 800e586:	f7fe f82f 	bl	800c5e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e58a:	480c      	ldr	r0, [pc, #48]	@ (800e5bc <prvInitialiseTaskLists+0x70>)
 800e58c:	f7fe f82c 	bl	800c5e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e590:	480b      	ldr	r0, [pc, #44]	@ (800e5c0 <prvInitialiseTaskLists+0x74>)
 800e592:	f7fe f829 	bl	800c5e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e596:	4b0b      	ldr	r3, [pc, #44]	@ (800e5c4 <prvInitialiseTaskLists+0x78>)
 800e598:	4a05      	ldr	r2, [pc, #20]	@ (800e5b0 <prvInitialiseTaskLists+0x64>)
 800e59a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e59c:	4b0a      	ldr	r3, [pc, #40]	@ (800e5c8 <prvInitialiseTaskLists+0x7c>)
 800e59e:	4a05      	ldr	r2, [pc, #20]	@ (800e5b4 <prvInitialiseTaskLists+0x68>)
 800e5a0:	601a      	str	r2, [r3, #0]
}
 800e5a2:	bf00      	nop
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	240061e0 	.word	0x240061e0
 800e5b0:	24006640 	.word	0x24006640
 800e5b4:	24006654 	.word	0x24006654
 800e5b8:	24006670 	.word	0x24006670
 800e5bc:	24006684 	.word	0x24006684
 800e5c0:	2400669c 	.word	0x2400669c
 800e5c4:	24006668 	.word	0x24006668
 800e5c8:	2400666c 	.word	0x2400666c

0800e5cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5d2:	e019      	b.n	800e608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e5d4:	f000 ffe0 	bl	800f598 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d8:	4b10      	ldr	r3, [pc, #64]	@ (800e61c <prvCheckTasksWaitingTermination+0x50>)
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fe f889 	bl	800c6fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e620 <prvCheckTasksWaitingTermination+0x54>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	4a0b      	ldr	r2, [pc, #44]	@ (800e620 <prvCheckTasksWaitingTermination+0x54>)
 800e5f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e624 <prvCheckTasksWaitingTermination+0x58>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	4a0a      	ldr	r2, [pc, #40]	@ (800e624 <prvCheckTasksWaitingTermination+0x58>)
 800e5fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5fe:	f000 fffd 	bl	800f5fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f810 	bl	800e628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e608:	4b06      	ldr	r3, [pc, #24]	@ (800e624 <prvCheckTasksWaitingTermination+0x58>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1e1      	bne.n	800e5d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e610:	bf00      	nop
 800e612:	bf00      	nop
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	24006684 	.word	0x24006684
 800e620:	240066b0 	.word	0x240066b0
 800e624:	24006698 	.word	0x24006698

0800e628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3354      	adds	r3, #84	@ 0x54
 800e634:	4618      	mov	r0, r3
 800e636:	f00c f9d3 	bl	801a9e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e640:	2b00      	cmp	r3, #0
 800e642:	d108      	bne.n	800e656 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e648:	4618      	mov	r0, r3
 800e64a:	f001 f995 	bl	800f978 <vPortFree>
				vPortFree( pxTCB );
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f001 f992 	bl	800f978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e654:	e019      	b.n	800e68a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d103      	bne.n	800e668 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f001 f989 	bl	800f978 <vPortFree>
	}
 800e666:	e010      	b.n	800e68a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d00b      	beq.n	800e68a <prvDeleteTCB+0x62>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	60fb      	str	r3, [r7, #12]
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop
 800e688:	e7fd      	b.n	800e686 <prvDeleteTCB+0x5e>
	}
 800e68a:	bf00      	nop
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
	...

0800e694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e69a:	4b0c      	ldr	r3, [pc, #48]	@ (800e6cc <prvResetNextTaskUnblockTime+0x38>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d104      	bne.n	800e6ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e6d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e6ac:	e008      	b.n	800e6c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ae:	4b07      	ldr	r3, [pc, #28]	@ (800e6cc <prvResetNextTaskUnblockTime+0x38>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	4a04      	ldr	r2, [pc, #16]	@ (800e6d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e6be:	6013      	str	r3, [r2, #0]
}
 800e6c0:	bf00      	nop
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr
 800e6cc:	24006668 	.word	0x24006668
 800e6d0:	240066d0 	.word	0x240066d0

0800e6d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e6da:	4b05      	ldr	r3, [pc, #20]	@ (800e6f0 <xTaskGetCurrentTaskHandle+0x1c>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e6e0:	687b      	ldr	r3, [r7, #4]
	}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	370c      	adds	r7, #12
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	240061dc 	.word	0x240061dc

0800e6f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e728 <xTaskGetSchedulerState+0x34>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d102      	bne.n	800e708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e702:	2301      	movs	r3, #1
 800e704:	607b      	str	r3, [r7, #4]
 800e706:	e008      	b.n	800e71a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e708:	4b08      	ldr	r3, [pc, #32]	@ (800e72c <xTaskGetSchedulerState+0x38>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d102      	bne.n	800e716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e710:	2302      	movs	r3, #2
 800e712:	607b      	str	r3, [r7, #4]
 800e714:	e001      	b.n	800e71a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e716:	2300      	movs	r3, #0
 800e718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e71a:	687b      	ldr	r3, [r7, #4]
	}
 800e71c:	4618      	mov	r0, r3
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	240066bc 	.word	0x240066bc
 800e72c:	240066d8 	.word	0x240066d8

0800e730 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e73c:	2300      	movs	r3, #0
 800e73e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d051      	beq.n	800e7ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e74a:	4b2a      	ldr	r3, [pc, #168]	@ (800e7f4 <xTaskPriorityInherit+0xc4>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e750:	429a      	cmp	r2, r3
 800e752:	d241      	bcs.n	800e7d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	db06      	blt.n	800e76a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e75c:	4b25      	ldr	r3, [pc, #148]	@ (800e7f4 <xTaskPriorityInherit+0xc4>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e762:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	6959      	ldr	r1, [r3, #20]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e772:	4613      	mov	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	4a1f      	ldr	r2, [pc, #124]	@ (800e7f8 <xTaskPriorityInherit+0xc8>)
 800e77c:	4413      	add	r3, r2
 800e77e:	4299      	cmp	r1, r3
 800e780:	d122      	bne.n	800e7c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	3304      	adds	r3, #4
 800e786:	4618      	mov	r0, r3
 800e788:	f7fd ffb8 	bl	800c6fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e78c:	4b19      	ldr	r3, [pc, #100]	@ (800e7f4 <xTaskPriorityInherit+0xc4>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e79a:	4b18      	ldr	r3, [pc, #96]	@ (800e7fc <xTaskPriorityInherit+0xcc>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d903      	bls.n	800e7aa <xTaskPriorityInherit+0x7a>
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7a6:	4a15      	ldr	r2, [pc, #84]	@ (800e7fc <xTaskPriorityInherit+0xcc>)
 800e7a8:	6013      	str	r3, [r2, #0]
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4413      	add	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4a10      	ldr	r2, [pc, #64]	@ (800e7f8 <xTaskPriorityInherit+0xc8>)
 800e7b8:	441a      	add	r2, r3
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	4619      	mov	r1, r3
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	f7fd ff3e 	bl	800c642 <vListInsertEnd>
 800e7c6:	e004      	b.n	800e7d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e7c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f4 <xTaskPriorityInherit+0xc4>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	60fb      	str	r3, [r7, #12]
 800e7d6:	e008      	b.n	800e7ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7dc:	4b05      	ldr	r3, [pc, #20]	@ (800e7f4 <xTaskPriorityInherit+0xc4>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d201      	bcs.n	800e7ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
	}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	240061dc 	.word	0x240061dc
 800e7f8:	240061e0 	.word	0x240061e0
 800e7fc:	240066b8 	.word	0x240066b8

0800e800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e80c:	2300      	movs	r3, #0
 800e80e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d058      	beq.n	800e8c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e816:	4b2f      	ldr	r3, [pc, #188]	@ (800e8d4 <xTaskPriorityDisinherit+0xd4>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	693a      	ldr	r2, [r7, #16]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d00b      	beq.n	800e838 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	60fb      	str	r3, [r7, #12]
}
 800e832:	bf00      	nop
 800e834:	bf00      	nop
 800e836:	e7fd      	b.n	800e834 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10b      	bne.n	800e858 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	60bb      	str	r3, [r7, #8]
}
 800e852:	bf00      	nop
 800e854:	bf00      	nop
 800e856:	e7fd      	b.n	800e854 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e85c:	1e5a      	subs	r2, r3, #1
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d02c      	beq.n	800e8c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e872:	2b00      	cmp	r3, #0
 800e874:	d128      	bne.n	800e8c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	3304      	adds	r3, #4
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fd ff3e 	bl	800c6fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e88c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e898:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d8 <xTaskPriorityDisinherit+0xd8>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d903      	bls.n	800e8a8 <xTaskPriorityDisinherit+0xa8>
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8a4:	4a0c      	ldr	r2, [pc, #48]	@ (800e8d8 <xTaskPriorityDisinherit+0xd8>)
 800e8a6:	6013      	str	r3, [r2, #0]
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4413      	add	r3, r2
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	4a09      	ldr	r2, [pc, #36]	@ (800e8dc <xTaskPriorityDisinherit+0xdc>)
 800e8b6:	441a      	add	r2, r3
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	4619      	mov	r1, r3
 800e8be:	4610      	mov	r0, r2
 800e8c0:	f7fd febf 	bl	800c642 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e8c8:	697b      	ldr	r3, [r7, #20]
	}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	240061dc 	.word	0x240061dc
 800e8d8:	240066b8 	.word	0x240066b8
 800e8dc:	240061e0 	.word	0x240061e0

0800e8e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b088      	sub	sp, #32
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d06c      	beq.n	800e9d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10b      	bne.n	800e918 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	60fb      	str	r3, [r7, #12]
}
 800e912:	bf00      	nop
 800e914:	bf00      	nop
 800e916:	e7fd      	b.n	800e914 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d902      	bls.n	800e928 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	61fb      	str	r3, [r7, #28]
 800e926:	e002      	b.n	800e92e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e92c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e932:	69fa      	ldr	r2, [r7, #28]
 800e934:	429a      	cmp	r2, r3
 800e936:	d04c      	beq.n	800e9d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d147      	bne.n	800e9d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e942:	4b26      	ldr	r3, [pc, #152]	@ (800e9dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	69ba      	ldr	r2, [r7, #24]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d10b      	bne.n	800e964 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e950:	f383 8811 	msr	BASEPRI, r3
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	60bb      	str	r3, [r7, #8]
}
 800e95e:	bf00      	nop
 800e960:	bf00      	nop
 800e962:	e7fd      	b.n	800e960 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e968:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	69fa      	ldr	r2, [r7, #28]
 800e96e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	2b00      	cmp	r3, #0
 800e976:	db04      	blt.n	800e982 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	6959      	ldr	r1, [r3, #20]
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	4613      	mov	r3, r2
 800e98a:	009b      	lsls	r3, r3, #2
 800e98c:	4413      	add	r3, r2
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	4a13      	ldr	r2, [pc, #76]	@ (800e9e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e992:	4413      	add	r3, r2
 800e994:	4299      	cmp	r1, r3
 800e996:	d11c      	bne.n	800e9d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	3304      	adds	r3, #4
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7fd fead 	bl	800c6fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e9e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d903      	bls.n	800e9b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e9e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	4413      	add	r3, r2
 800e9c0:	009b      	lsls	r3, r3, #2
 800e9c2:	4a07      	ldr	r2, [pc, #28]	@ (800e9e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e9c4:	441a      	add	r2, r3
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	f7fd fe38 	bl	800c642 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9d2:	bf00      	nop
 800e9d4:	3720      	adds	r7, #32
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	240061dc 	.word	0x240061dc
 800e9e0:	240061e0 	.word	0x240061e0
 800e9e4:	240066b8 	.word	0x240066b8

0800e9e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e9e8:	b480      	push	{r7}
 800e9ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ea0c <pvTaskIncrementMutexHeldCount+0x24>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d004      	beq.n	800e9fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e9f4:	4b05      	ldr	r3, [pc, #20]	@ (800ea0c <pvTaskIncrementMutexHeldCount+0x24>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9fa:	3201      	adds	r2, #1
 800e9fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e9fe:	4b03      	ldr	r3, [pc, #12]	@ (800ea0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ea00:	681b      	ldr	r3, [r3, #0]
	}
 800ea02:	4618      	mov	r0, r3
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	240061dc 	.word	0x240061dc

0800ea10 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ea1a:	f000 fdbd 	bl	800f598 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ea1e:	4b20      	ldr	r3, [pc, #128]	@ (800eaa0 <ulTaskNotifyTake+0x90>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d113      	bne.n	800ea52 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ea2a:	4b1d      	ldr	r3, [pc, #116]	@ (800eaa0 <ulTaskNotifyTake+0x90>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00b      	beq.n	800ea52 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	6838      	ldr	r0, [r7, #0]
 800ea3e:	f000 f8c9 	bl	800ebd4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ea42:	4b18      	ldr	r3, [pc, #96]	@ (800eaa4 <ulTaskNotifyTake+0x94>)
 800ea44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea48:	601a      	str	r2, [r3, #0]
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ea52:	f000 fdd3 	bl	800f5fc <vPortExitCritical>

		taskENTER_CRITICAL();
 800ea56:	f000 fd9f 	bl	800f598 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ea5a:	4b11      	ldr	r3, [pc, #68]	@ (800eaa0 <ulTaskNotifyTake+0x90>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ea62:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00e      	beq.n	800ea88 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ea70:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa0 <ulTaskNotifyTake+0x90>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800ea7a:	e005      	b.n	800ea88 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ea7c:	4b08      	ldr	r3, [pc, #32]	@ (800eaa0 <ulTaskNotifyTake+0x90>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	3a01      	subs	r2, #1
 800ea84:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea88:	4b05      	ldr	r3, [pc, #20]	@ (800eaa0 <ulTaskNotifyTake+0x90>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ea92:	f000 fdb3 	bl	800f5fc <vPortExitCritical>

		return ulReturn;
 800ea96:	68fb      	ldr	r3, [r7, #12]
	}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	240061dc 	.word	0x240061dc
 800eaa4:	e000ed04 	.word	0xe000ed04

0800eaa8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08a      	sub	sp, #40	@ 0x28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10b      	bne.n	800ead0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800eab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eabc:	f383 8811 	msr	BASEPRI, r3
 800eac0:	f3bf 8f6f 	isb	sy
 800eac4:	f3bf 8f4f 	dsb	sy
 800eac8:	61bb      	str	r3, [r7, #24]
}
 800eaca:	bf00      	nop
 800eacc:	bf00      	nop
 800eace:	e7fd      	b.n	800eacc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ead0:	f000 fe42 	bl	800f758 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800ead8:	f3ef 8211 	mrs	r2, BASEPRI
 800eadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	617a      	str	r2, [r7, #20]
 800eaee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eaf0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaf2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eafa:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafe:	2202      	movs	r2, #2
 800eb00:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800eb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eb0a:	1c5a      	adds	r2, r3, #1
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800eb12:	7ffb      	ldrb	r3, [r7, #31]
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d147      	bne.n	800eba8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00b      	beq.n	800eb38 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb24:	f383 8811 	msr	BASEPRI, r3
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	f3bf 8f4f 	dsb	sy
 800eb30:	60fb      	str	r3, [r7, #12]
}
 800eb32:	bf00      	nop
 800eb34:	bf00      	nop
 800eb36:	e7fd      	b.n	800eb34 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb38:	4b20      	ldr	r3, [pc, #128]	@ (800ebbc <vTaskNotifyGiveFromISR+0x114>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d11d      	bne.n	800eb7c <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb42:	3304      	adds	r3, #4
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fd fdd9 	bl	800c6fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb4e:	4b1c      	ldr	r3, [pc, #112]	@ (800ebc0 <vTaskNotifyGiveFromISR+0x118>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d903      	bls.n	800eb5e <vTaskNotifyGiveFromISR+0xb6>
 800eb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5a:	4a19      	ldr	r2, [pc, #100]	@ (800ebc0 <vTaskNotifyGiveFromISR+0x118>)
 800eb5c:	6013      	str	r3, [r2, #0]
 800eb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb62:	4613      	mov	r3, r2
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	4413      	add	r3, r2
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	4a16      	ldr	r2, [pc, #88]	@ (800ebc4 <vTaskNotifyGiveFromISR+0x11c>)
 800eb6c:	441a      	add	r2, r3
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb70:	3304      	adds	r3, #4
 800eb72:	4619      	mov	r1, r3
 800eb74:	4610      	mov	r0, r2
 800eb76:	f7fd fd64 	bl	800c642 <vListInsertEnd>
 800eb7a:	e005      	b.n	800eb88 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	3318      	adds	r3, #24
 800eb80:	4619      	mov	r1, r3
 800eb82:	4811      	ldr	r0, [pc, #68]	@ (800ebc8 <vTaskNotifyGiveFromISR+0x120>)
 800eb84:	f7fd fd5d 	bl	800c642 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb8c:	4b0f      	ldr	r3, [pc, #60]	@ (800ebcc <vTaskNotifyGiveFromISR+0x124>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d908      	bls.n	800eba8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d002      	beq.n	800eba2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800eba2:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd0 <vTaskNotifyGiveFromISR+0x128>)
 800eba4:	2201      	movs	r2, #1
 800eba6:	601a      	str	r2, [r3, #0]
 800eba8:	6a3b      	ldr	r3, [r7, #32]
 800ebaa:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	f383 8811 	msr	BASEPRI, r3
}
 800ebb2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ebb4:	bf00      	nop
 800ebb6:	3728      	adds	r7, #40	@ 0x28
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	240066d8 	.word	0x240066d8
 800ebc0:	240066b8 	.word	0x240066b8
 800ebc4:	240061e0 	.word	0x240061e0
 800ebc8:	24006670 	.word	0x24006670
 800ebcc:	240061dc 	.word	0x240061dc
 800ebd0:	240066c4 	.word	0x240066c4

0800ebd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ebde:	4b21      	ldr	r3, [pc, #132]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0x90>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebe4:	4b20      	ldr	r3, [pc, #128]	@ (800ec68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fd fd86 	bl	800c6fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf6:	d10a      	bne.n	800ec0e <prvAddCurrentTaskToDelayedList+0x3a>
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d007      	beq.n	800ec0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebfe:	4b1a      	ldr	r3, [pc, #104]	@ (800ec68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3304      	adds	r3, #4
 800ec04:	4619      	mov	r1, r3
 800ec06:	4819      	ldr	r0, [pc, #100]	@ (800ec6c <prvAddCurrentTaskToDelayedList+0x98>)
 800ec08:	f7fd fd1b 	bl	800c642 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec0c:	e026      	b.n	800ec5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4413      	add	r3, r2
 800ec14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec16:	4b14      	ldr	r3, [pc, #80]	@ (800ec68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d209      	bcs.n	800ec3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec26:	4b12      	ldr	r3, [pc, #72]	@ (800ec70 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3304      	adds	r3, #4
 800ec30:	4619      	mov	r1, r3
 800ec32:	4610      	mov	r0, r2
 800ec34:	f7fd fd29 	bl	800c68a <vListInsert>
}
 800ec38:	e010      	b.n	800ec5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ec74 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ec68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	3304      	adds	r3, #4
 800ec44:	4619      	mov	r1, r3
 800ec46:	4610      	mov	r0, r2
 800ec48:	f7fd fd1f 	bl	800c68a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d202      	bcs.n	800ec5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ec56:	4a08      	ldr	r2, [pc, #32]	@ (800ec78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	6013      	str	r3, [r2, #0]
}
 800ec5c:	bf00      	nop
 800ec5e:	3710      	adds	r7, #16
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	240066b4 	.word	0x240066b4
 800ec68:	240061dc 	.word	0x240061dc
 800ec6c:	2400669c 	.word	0x2400669c
 800ec70:	2400666c 	.word	0x2400666c
 800ec74:	24006668 	.word	0x24006668
 800ec78:	240066d0 	.word	0x240066d0

0800ec7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	@ 0x28
 800ec80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ec86:	f000 fb13 	bl	800f2b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ec8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ed00 <xTimerCreateTimerTask+0x84>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d021      	beq.n	800ecd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ec96:	2300      	movs	r3, #0
 800ec98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ec9a:	1d3a      	adds	r2, r7, #4
 800ec9c:	f107 0108 	add.w	r1, r7, #8
 800eca0:	f107 030c 	add.w	r3, r7, #12
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fd fc85 	bl	800c5b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	9202      	str	r2, [sp, #8]
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	2300      	movs	r3, #0
 800ecba:	460a      	mov	r2, r1
 800ecbc:	4911      	ldr	r1, [pc, #68]	@ (800ed04 <xTimerCreateTimerTask+0x88>)
 800ecbe:	4812      	ldr	r0, [pc, #72]	@ (800ed08 <xTimerCreateTimerTask+0x8c>)
 800ecc0:	f7fe fe2a 	bl	800d918 <xTaskCreateStatic>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	4a11      	ldr	r2, [pc, #68]	@ (800ed0c <xTimerCreateTimerTask+0x90>)
 800ecc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ecca:	4b10      	ldr	r3, [pc, #64]	@ (800ed0c <xTimerCreateTimerTask+0x90>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d10b      	bne.n	800ecf4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ecdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece0:	f383 8811 	msr	BASEPRI, r3
 800ece4:	f3bf 8f6f 	isb	sy
 800ece8:	f3bf 8f4f 	dsb	sy
 800ecec:	613b      	str	r3, [r7, #16]
}
 800ecee:	bf00      	nop
 800ecf0:	bf00      	nop
 800ecf2:	e7fd      	b.n	800ecf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ecf4:	697b      	ldr	r3, [r7, #20]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3718      	adds	r7, #24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	2400670c 	.word	0x2400670c
 800ed04:	0801b850 	.word	0x0801b850
 800ed08:	0800ee49 	.word	0x0800ee49
 800ed0c:	24006710 	.word	0x24006710

0800ed10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08a      	sub	sp, #40	@ 0x28
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
 800ed1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10b      	bne.n	800ed40 <xTimerGenericCommand+0x30>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	623b      	str	r3, [r7, #32]
}
 800ed3a:	bf00      	nop
 800ed3c:	bf00      	nop
 800ed3e:	e7fd      	b.n	800ed3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed40:	4b19      	ldr	r3, [pc, #100]	@ (800eda8 <xTimerGenericCommand+0x98>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d02a      	beq.n	800ed9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	2b05      	cmp	r3, #5
 800ed58:	dc18      	bgt.n	800ed8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed5a:	f7ff fccb 	bl	800e6f4 <xTaskGetSchedulerState>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d109      	bne.n	800ed78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed64:	4b10      	ldr	r3, [pc, #64]	@ (800eda8 <xTimerGenericCommand+0x98>)
 800ed66:	6818      	ldr	r0, [r3, #0]
 800ed68:	f107 0110 	add.w	r1, r7, #16
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed70:	f7fd ff5a 	bl	800cc28 <xQueueGenericSend>
 800ed74:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed76:	e012      	b.n	800ed9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed78:	4b0b      	ldr	r3, [pc, #44]	@ (800eda8 <xTimerGenericCommand+0x98>)
 800ed7a:	6818      	ldr	r0, [r3, #0]
 800ed7c:	f107 0110 	add.w	r1, r7, #16
 800ed80:	2300      	movs	r3, #0
 800ed82:	2200      	movs	r2, #0
 800ed84:	f7fd ff50 	bl	800cc28 <xQueueGenericSend>
 800ed88:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed8a:	e008      	b.n	800ed9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed8c:	4b06      	ldr	r3, [pc, #24]	@ (800eda8 <xTimerGenericCommand+0x98>)
 800ed8e:	6818      	ldr	r0, [r3, #0]
 800ed90:	f107 0110 	add.w	r1, r7, #16
 800ed94:	2300      	movs	r3, #0
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	f7fe f848 	bl	800ce2c <xQueueGenericSendFromISR>
 800ed9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3728      	adds	r7, #40	@ 0x28
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	2400670c 	.word	0x2400670c

0800edac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b088      	sub	sp, #32
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb6:	4b23      	ldr	r3, [pc, #140]	@ (800ee44 <prvProcessExpiredTimer+0x98>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fd fc99 	bl	800c6fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edd0:	f003 0304 	and.w	r3, r3, #4
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d023      	beq.n	800ee20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	699a      	ldr	r2, [r3, #24]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	18d1      	adds	r1, r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	6978      	ldr	r0, [r7, #20]
 800ede6:	f000 f8d5 	bl	800ef94 <prvInsertTimerInActiveList>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d020      	beq.n	800ee32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edf0:	2300      	movs	r3, #0
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	2300      	movs	r3, #0
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	2100      	movs	r1, #0
 800edfa:	6978      	ldr	r0, [r7, #20]
 800edfc:	f7ff ff88 	bl	800ed10 <xTimerGenericCommand>
 800ee00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d114      	bne.n	800ee32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	60fb      	str	r3, [r7, #12]
}
 800ee1a:	bf00      	nop
 800ee1c:	bf00      	nop
 800ee1e:	e7fd      	b.n	800ee1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee26:	f023 0301 	bic.w	r3, r3, #1
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	6a1b      	ldr	r3, [r3, #32]
 800ee36:	6978      	ldr	r0, [r7, #20]
 800ee38:	4798      	blx	r3
}
 800ee3a:	bf00      	nop
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	24006704 	.word	0x24006704

0800ee48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee50:	f107 0308 	add.w	r3, r7, #8
 800ee54:	4618      	mov	r0, r3
 800ee56:	f000 f859 	bl	800ef0c <prvGetNextExpireTime>
 800ee5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 f805 	bl	800ee70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee66:	f000 f8d7 	bl	800f018 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee6a:	bf00      	nop
 800ee6c:	e7f0      	b.n	800ee50 <prvTimerTask+0x8>
	...

0800ee70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee7a:	f7ff f825 	bl	800dec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee7e:	f107 0308 	add.w	r3, r7, #8
 800ee82:	4618      	mov	r0, r3
 800ee84:	f000 f866 	bl	800ef54 <prvSampleTimeNow>
 800ee88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d130      	bne.n	800eef2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10a      	bne.n	800eeac <prvProcessTimerOrBlockTask+0x3c>
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d806      	bhi.n	800eeac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee9e:	f7ff f821 	bl	800dee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eea2:	68f9      	ldr	r1, [r7, #12]
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff ff81 	bl	800edac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eeaa:	e024      	b.n	800eef6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d008      	beq.n	800eec4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eeb2:	4b13      	ldr	r3, [pc, #76]	@ (800ef00 <prvProcessTimerOrBlockTask+0x90>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d101      	bne.n	800eec0 <prvProcessTimerOrBlockTask+0x50>
 800eebc:	2301      	movs	r3, #1
 800eebe:	e000      	b.n	800eec2 <prvProcessTimerOrBlockTask+0x52>
 800eec0:	2300      	movs	r3, #0
 800eec2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eec4:	4b0f      	ldr	r3, [pc, #60]	@ (800ef04 <prvProcessTimerOrBlockTask+0x94>)
 800eec6:	6818      	ldr	r0, [r3, #0]
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	4619      	mov	r1, r3
 800eed2:	f7fe fced 	bl	800d8b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eed6:	f7ff f805 	bl	800dee4 <xTaskResumeAll>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eee0:	4b09      	ldr	r3, [pc, #36]	@ (800ef08 <prvProcessTimerOrBlockTask+0x98>)
 800eee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eee6:	601a      	str	r2, [r3, #0]
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
}
 800eef0:	e001      	b.n	800eef6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eef2:	f7fe fff7 	bl	800dee4 <xTaskResumeAll>
}
 800eef6:	bf00      	nop
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	24006708 	.word	0x24006708
 800ef04:	2400670c 	.word	0x2400670c
 800ef08:	e000ed04 	.word	0xe000ed04

0800ef0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef14:	4b0e      	ldr	r3, [pc, #56]	@ (800ef50 <prvGetNextExpireTime+0x44>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <prvGetNextExpireTime+0x16>
 800ef1e:	2201      	movs	r2, #1
 800ef20:	e000      	b.n	800ef24 <prvGetNextExpireTime+0x18>
 800ef22:	2200      	movs	r2, #0
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d105      	bne.n	800ef3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef30:	4b07      	ldr	r3, [pc, #28]	@ (800ef50 <prvGetNextExpireTime+0x44>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	60fb      	str	r3, [r7, #12]
 800ef3a:	e001      	b.n	800ef40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef40:	68fb      	ldr	r3, [r7, #12]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3714      	adds	r7, #20
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	24006704 	.word	0x24006704

0800ef54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef5c:	f7ff f860 	bl	800e020 <xTaskGetTickCount>
 800ef60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef62:	4b0b      	ldr	r3, [pc, #44]	@ (800ef90 <prvSampleTimeNow+0x3c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d205      	bcs.n	800ef78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef6c:	f000 f93a 	bl	800f1e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2201      	movs	r2, #1
 800ef74:	601a      	str	r2, [r3, #0]
 800ef76:	e002      	b.n	800ef7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef7e:	4a04      	ldr	r2, [pc, #16]	@ (800ef90 <prvSampleTimeNow+0x3c>)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef84:	68fb      	ldr	r3, [r7, #12]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	24006714 	.word	0x24006714

0800ef94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
 800efa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800efa2:	2300      	movs	r3, #0
 800efa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d812      	bhi.n	800efe0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	1ad2      	subs	r2, r2, r3
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d302      	bcc.n	800efce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800efc8:	2301      	movs	r3, #1
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	e01b      	b.n	800f006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800efce:	4b10      	ldr	r3, [pc, #64]	@ (800f010 <prvInsertTimerInActiveList+0x7c>)
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	3304      	adds	r3, #4
 800efd6:	4619      	mov	r1, r3
 800efd8:	4610      	mov	r0, r2
 800efda:	f7fd fb56 	bl	800c68a <vListInsert>
 800efde:	e012      	b.n	800f006 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d206      	bcs.n	800eff6 <prvInsertTimerInActiveList+0x62>
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d302      	bcc.n	800eff6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eff0:	2301      	movs	r3, #1
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	e007      	b.n	800f006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eff6:	4b07      	ldr	r3, [pc, #28]	@ (800f014 <prvInsertTimerInActiveList+0x80>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	3304      	adds	r3, #4
 800effe:	4619      	mov	r1, r3
 800f000:	4610      	mov	r0, r2
 800f002:	f7fd fb42 	bl	800c68a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f006:	697b      	ldr	r3, [r7, #20]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3718      	adds	r7, #24
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	24006708 	.word	0x24006708
 800f014:	24006704 	.word	0x24006704

0800f018 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b08e      	sub	sp, #56	@ 0x38
 800f01c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f01e:	e0ce      	b.n	800f1be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	da19      	bge.n	800f05a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f026:	1d3b      	adds	r3, r7, #4
 800f028:	3304      	adds	r3, #4
 800f02a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10b      	bne.n	800f04a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	61fb      	str	r3, [r7, #28]
}
 800f044:	bf00      	nop
 800f046:	bf00      	nop
 800f048:	e7fd      	b.n	800f046 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f050:	6850      	ldr	r0, [r2, #4]
 800f052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f054:	6892      	ldr	r2, [r2, #8]
 800f056:	4611      	mov	r1, r2
 800f058:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f2c0 80ae 	blt.w	800f1be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f068:	695b      	ldr	r3, [r3, #20]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d004      	beq.n	800f078 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f070:	3304      	adds	r3, #4
 800f072:	4618      	mov	r0, r3
 800f074:	f7fd fb42 	bl	800c6fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f078:	463b      	mov	r3, r7
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff ff6a 	bl	800ef54 <prvSampleTimeNow>
 800f080:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b09      	cmp	r3, #9
 800f086:	f200 8097 	bhi.w	800f1b8 <prvProcessReceivedCommands+0x1a0>
 800f08a:	a201      	add	r2, pc, #4	@ (adr r2, 800f090 <prvProcessReceivedCommands+0x78>)
 800f08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f090:	0800f0b9 	.word	0x0800f0b9
 800f094:	0800f0b9 	.word	0x0800f0b9
 800f098:	0800f0b9 	.word	0x0800f0b9
 800f09c:	0800f12f 	.word	0x0800f12f
 800f0a0:	0800f143 	.word	0x0800f143
 800f0a4:	0800f18f 	.word	0x0800f18f
 800f0a8:	0800f0b9 	.word	0x0800f0b9
 800f0ac:	0800f0b9 	.word	0x0800f0b9
 800f0b0:	0800f12f 	.word	0x0800f12f
 800f0b4:	0800f143 	.word	0x0800f143
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0be:	f043 0301 	orr.w	r3, r3, #1
 800f0c2:	b2da      	uxtb	r2, r3
 800f0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ce:	699b      	ldr	r3, [r3, #24]
 800f0d0:	18d1      	adds	r1, r2, r3
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0d8:	f7ff ff5c 	bl	800ef94 <prvInsertTimerInActiveList>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d06c      	beq.n	800f1bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e4:	6a1b      	ldr	r3, [r3, #32]
 800f0e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0f0:	f003 0304 	and.w	r3, r3, #4
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d061      	beq.n	800f1bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0fc:	699b      	ldr	r3, [r3, #24]
 800f0fe:	441a      	add	r2, r3
 800f100:	2300      	movs	r3, #0
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	2300      	movs	r3, #0
 800f106:	2100      	movs	r1, #0
 800f108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f10a:	f7ff fe01 	bl	800ed10 <xTimerGenericCommand>
 800f10e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f110:	6a3b      	ldr	r3, [r7, #32]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d152      	bne.n	800f1bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	61bb      	str	r3, [r7, #24]
}
 800f128:	bf00      	nop
 800f12a:	bf00      	nop
 800f12c:	e7fd      	b.n	800f12a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f134:	f023 0301 	bic.w	r3, r3, #1
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f140:	e03d      	b.n	800f1be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f148:	f043 0301 	orr.w	r3, r3, #1
 800f14c:	b2da      	uxtb	r2, r3
 800f14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f150:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f154:	68ba      	ldr	r2, [r7, #8]
 800f156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f158:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15c:	699b      	ldr	r3, [r3, #24]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10b      	bne.n	800f17a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	617b      	str	r3, [r7, #20]
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop
 800f178:	e7fd      	b.n	800f176 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f17c:	699a      	ldr	r2, [r3, #24]
 800f17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f180:	18d1      	adds	r1, r2, r3
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f188:	f7ff ff04 	bl	800ef94 <prvInsertTimerInActiveList>
					break;
 800f18c:	e017      	b.n	800f1be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f194:	f003 0302 	and.w	r3, r3, #2
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d103      	bne.n	800f1a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f19c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f19e:	f000 fbeb 	bl	800f978 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f1a2:	e00c      	b.n	800f1be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1aa:	f023 0301 	bic.w	r3, r3, #1
 800f1ae:	b2da      	uxtb	r2, r3
 800f1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f1b6:	e002      	b.n	800f1be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f1b8:	bf00      	nop
 800f1ba:	e000      	b.n	800f1be <prvProcessReceivedCommands+0x1a6>
					break;
 800f1bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1be:	4b08      	ldr	r3, [pc, #32]	@ (800f1e0 <prvProcessReceivedCommands+0x1c8>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	1d39      	adds	r1, r7, #4
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fd ff5e 	bl	800d088 <xQueueReceive>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f47f af26 	bne.w	800f020 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop
 800f1d8:	3730      	adds	r7, #48	@ 0x30
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	2400670c 	.word	0x2400670c

0800f1e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b088      	sub	sp, #32
 800f1e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1ea:	e049      	b.n	800f280 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1ec:	4b2e      	ldr	r3, [pc, #184]	@ (800f2a8 <prvSwitchTimerLists+0xc4>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f6:	4b2c      	ldr	r3, [pc, #176]	@ (800f2a8 <prvSwitchTimerLists+0xc4>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	3304      	adds	r3, #4
 800f204:	4618      	mov	r0, r3
 800f206:	f7fd fa79 	bl	800c6fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f218:	f003 0304 	and.w	r3, r3, #4
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d02f      	beq.n	800f280 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	4413      	add	r3, r2
 800f228:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d90e      	bls.n	800f250 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	68fa      	ldr	r2, [r7, #12]
 800f23c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f23e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2a8 <prvSwitchTimerLists+0xc4>)
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3304      	adds	r3, #4
 800f246:	4619      	mov	r1, r3
 800f248:	4610      	mov	r0, r2
 800f24a:	f7fd fa1e 	bl	800c68a <vListInsert>
 800f24e:	e017      	b.n	800f280 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f250:	2300      	movs	r3, #0
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	2300      	movs	r3, #0
 800f256:	693a      	ldr	r2, [r7, #16]
 800f258:	2100      	movs	r1, #0
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f7ff fd58 	bl	800ed10 <xTimerGenericCommand>
 800f260:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10b      	bne.n	800f280 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f26c:	f383 8811 	msr	BASEPRI, r3
 800f270:	f3bf 8f6f 	isb	sy
 800f274:	f3bf 8f4f 	dsb	sy
 800f278:	603b      	str	r3, [r7, #0]
}
 800f27a:	bf00      	nop
 800f27c:	bf00      	nop
 800f27e:	e7fd      	b.n	800f27c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f280:	4b09      	ldr	r3, [pc, #36]	@ (800f2a8 <prvSwitchTimerLists+0xc4>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1b0      	bne.n	800f1ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f28a:	4b07      	ldr	r3, [pc, #28]	@ (800f2a8 <prvSwitchTimerLists+0xc4>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f290:	4b06      	ldr	r3, [pc, #24]	@ (800f2ac <prvSwitchTimerLists+0xc8>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a04      	ldr	r2, [pc, #16]	@ (800f2a8 <prvSwitchTimerLists+0xc4>)
 800f296:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f298:	4a04      	ldr	r2, [pc, #16]	@ (800f2ac <prvSwitchTimerLists+0xc8>)
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	6013      	str	r3, [r2, #0]
}
 800f29e:	bf00      	nop
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	24006704 	.word	0x24006704
 800f2ac:	24006708 	.word	0x24006708

0800f2b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2b6:	f000 f96f 	bl	800f598 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2ba:	4b15      	ldr	r3, [pc, #84]	@ (800f310 <prvCheckForValidListAndQueue+0x60>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d120      	bne.n	800f304 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f2c2:	4814      	ldr	r0, [pc, #80]	@ (800f314 <prvCheckForValidListAndQueue+0x64>)
 800f2c4:	f7fd f990 	bl	800c5e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f2c8:	4813      	ldr	r0, [pc, #76]	@ (800f318 <prvCheckForValidListAndQueue+0x68>)
 800f2ca:	f7fd f98d 	bl	800c5e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2ce:	4b13      	ldr	r3, [pc, #76]	@ (800f31c <prvCheckForValidListAndQueue+0x6c>)
 800f2d0:	4a10      	ldr	r2, [pc, #64]	@ (800f314 <prvCheckForValidListAndQueue+0x64>)
 800f2d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2d4:	4b12      	ldr	r3, [pc, #72]	@ (800f320 <prvCheckForValidListAndQueue+0x70>)
 800f2d6:	4a10      	ldr	r2, [pc, #64]	@ (800f318 <prvCheckForValidListAndQueue+0x68>)
 800f2d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f2da:	2300      	movs	r3, #0
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	4b11      	ldr	r3, [pc, #68]	@ (800f324 <prvCheckForValidListAndQueue+0x74>)
 800f2e0:	4a11      	ldr	r2, [pc, #68]	@ (800f328 <prvCheckForValidListAndQueue+0x78>)
 800f2e2:	2110      	movs	r1, #16
 800f2e4:	200a      	movs	r0, #10
 800f2e6:	f7fd fa9d 	bl	800c824 <xQueueGenericCreateStatic>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	4a08      	ldr	r2, [pc, #32]	@ (800f310 <prvCheckForValidListAndQueue+0x60>)
 800f2ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2f0:	4b07      	ldr	r3, [pc, #28]	@ (800f310 <prvCheckForValidListAndQueue+0x60>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d005      	beq.n	800f304 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2f8:	4b05      	ldr	r3, [pc, #20]	@ (800f310 <prvCheckForValidListAndQueue+0x60>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	490b      	ldr	r1, [pc, #44]	@ (800f32c <prvCheckForValidListAndQueue+0x7c>)
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe fa82 	bl	800d808 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f304:	f000 f97a 	bl	800f5fc <vPortExitCritical>
}
 800f308:	bf00      	nop
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	2400670c 	.word	0x2400670c
 800f314:	240066dc 	.word	0x240066dc
 800f318:	240066f0 	.word	0x240066f0
 800f31c:	24006704 	.word	0x24006704
 800f320:	24006708 	.word	0x24006708
 800f324:	240067b8 	.word	0x240067b8
 800f328:	24006718 	.word	0x24006718
 800f32c:	0801b858 	.word	0x0801b858

0800f330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	3b04      	subs	r3, #4
 800f340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3b04      	subs	r3, #4
 800f34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	f023 0201 	bic.w	r2, r3, #1
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	3b04      	subs	r3, #4
 800f35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f360:	4a0c      	ldr	r2, [pc, #48]	@ (800f394 <pxPortInitialiseStack+0x64>)
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	3b14      	subs	r3, #20
 800f36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3b04      	subs	r3, #4
 800f376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f06f 0202 	mvn.w	r2, #2
 800f37e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	3b20      	subs	r3, #32
 800f384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f386:	68fb      	ldr	r3, [r7, #12]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3714      	adds	r7, #20
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr
 800f394:	0800f399 	.word	0x0800f399

0800f398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f3a2:	4b13      	ldr	r3, [pc, #76]	@ (800f3f0 <prvTaskExitError+0x58>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3aa:	d00b      	beq.n	800f3c4 <prvTaskExitError+0x2c>
	__asm volatile
 800f3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	60fb      	str	r3, [r7, #12]
}
 800f3be:	bf00      	nop
 800f3c0:	bf00      	nop
 800f3c2:	e7fd      	b.n	800f3c0 <prvTaskExitError+0x28>
	__asm volatile
 800f3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c8:	f383 8811 	msr	BASEPRI, r3
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f3bf 8f4f 	dsb	sy
 800f3d4:	60bb      	str	r3, [r7, #8]
}
 800f3d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f3d8:	bf00      	nop
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d0fc      	beq.n	800f3da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f3e0:	bf00      	nop
 800f3e2:	bf00      	nop
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	240049b4 	.word	0x240049b4
	...

0800f400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f400:	4b07      	ldr	r3, [pc, #28]	@ (800f420 <pxCurrentTCBConst2>)
 800f402:	6819      	ldr	r1, [r3, #0]
 800f404:	6808      	ldr	r0, [r1, #0]
 800f406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40a:	f380 8809 	msr	PSP, r0
 800f40e:	f3bf 8f6f 	isb	sy
 800f412:	f04f 0000 	mov.w	r0, #0
 800f416:	f380 8811 	msr	BASEPRI, r0
 800f41a:	4770      	bx	lr
 800f41c:	f3af 8000 	nop.w

0800f420 <pxCurrentTCBConst2>:
 800f420:	240061dc 	.word	0x240061dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f424:	bf00      	nop
 800f426:	bf00      	nop

0800f428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f428:	4808      	ldr	r0, [pc, #32]	@ (800f44c <prvPortStartFirstTask+0x24>)
 800f42a:	6800      	ldr	r0, [r0, #0]
 800f42c:	6800      	ldr	r0, [r0, #0]
 800f42e:	f380 8808 	msr	MSP, r0
 800f432:	f04f 0000 	mov.w	r0, #0
 800f436:	f380 8814 	msr	CONTROL, r0
 800f43a:	b662      	cpsie	i
 800f43c:	b661      	cpsie	f
 800f43e:	f3bf 8f4f 	dsb	sy
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	df00      	svc	0
 800f448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f44a:	bf00      	nop
 800f44c:	e000ed08 	.word	0xe000ed08

0800f450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b086      	sub	sp, #24
 800f454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f456:	4b47      	ldr	r3, [pc, #284]	@ (800f574 <xPortStartScheduler+0x124>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4a47      	ldr	r2, [pc, #284]	@ (800f578 <xPortStartScheduler+0x128>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d10b      	bne.n	800f478 <xPortStartScheduler+0x28>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	60fb      	str	r3, [r7, #12]
}
 800f472:	bf00      	nop
 800f474:	bf00      	nop
 800f476:	e7fd      	b.n	800f474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f478:	4b3e      	ldr	r3, [pc, #248]	@ (800f574 <xPortStartScheduler+0x124>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a3f      	ldr	r2, [pc, #252]	@ (800f57c <xPortStartScheduler+0x12c>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d10b      	bne.n	800f49a <xPortStartScheduler+0x4a>
	__asm volatile
 800f482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f486:	f383 8811 	msr	BASEPRI, r3
 800f48a:	f3bf 8f6f 	isb	sy
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	613b      	str	r3, [r7, #16]
}
 800f494:	bf00      	nop
 800f496:	bf00      	nop
 800f498:	e7fd      	b.n	800f496 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f49a:	4b39      	ldr	r3, [pc, #228]	@ (800f580 <xPortStartScheduler+0x130>)
 800f49c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	22ff      	movs	r2, #255	@ 0xff
 800f4aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f4b4:	78fb      	ldrb	r3, [r7, #3]
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	4b31      	ldr	r3, [pc, #196]	@ (800f584 <xPortStartScheduler+0x134>)
 800f4c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f4c2:	4b31      	ldr	r3, [pc, #196]	@ (800f588 <xPortStartScheduler+0x138>)
 800f4c4:	2207      	movs	r2, #7
 800f4c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4c8:	e009      	b.n	800f4de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f4ca:	4b2f      	ldr	r3, [pc, #188]	@ (800f588 <xPortStartScheduler+0x138>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	4a2d      	ldr	r2, [pc, #180]	@ (800f588 <xPortStartScheduler+0x138>)
 800f4d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f4d4:	78fb      	ldrb	r3, [r7, #3]
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4de:	78fb      	ldrb	r3, [r7, #3]
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4e6:	2b80      	cmp	r3, #128	@ 0x80
 800f4e8:	d0ef      	beq.n	800f4ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f4ea:	4b27      	ldr	r3, [pc, #156]	@ (800f588 <xPortStartScheduler+0x138>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f1c3 0307 	rsb	r3, r3, #7
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	d00b      	beq.n	800f50e <xPortStartScheduler+0xbe>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	60bb      	str	r3, [r7, #8]
}
 800f508:	bf00      	nop
 800f50a:	bf00      	nop
 800f50c:	e7fd      	b.n	800f50a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f50e:	4b1e      	ldr	r3, [pc, #120]	@ (800f588 <xPortStartScheduler+0x138>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	021b      	lsls	r3, r3, #8
 800f514:	4a1c      	ldr	r2, [pc, #112]	@ (800f588 <xPortStartScheduler+0x138>)
 800f516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f518:	4b1b      	ldr	r3, [pc, #108]	@ (800f588 <xPortStartScheduler+0x138>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f520:	4a19      	ldr	r2, [pc, #100]	@ (800f588 <xPortStartScheduler+0x138>)
 800f522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	b2da      	uxtb	r2, r3
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f52c:	4b17      	ldr	r3, [pc, #92]	@ (800f58c <xPortStartScheduler+0x13c>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a16      	ldr	r2, [pc, #88]	@ (800f58c <xPortStartScheduler+0x13c>)
 800f532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f538:	4b14      	ldr	r3, [pc, #80]	@ (800f58c <xPortStartScheduler+0x13c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a13      	ldr	r2, [pc, #76]	@ (800f58c <xPortStartScheduler+0x13c>)
 800f53e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f544:	f000 f8da 	bl	800f6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f548:	4b11      	ldr	r3, [pc, #68]	@ (800f590 <xPortStartScheduler+0x140>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f54e:	f000 f8f9 	bl	800f744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f552:	4b10      	ldr	r3, [pc, #64]	@ (800f594 <xPortStartScheduler+0x144>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a0f      	ldr	r2, [pc, #60]	@ (800f594 <xPortStartScheduler+0x144>)
 800f558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f55c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f55e:	f7ff ff63 	bl	800f428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f562:	f7fe fe39 	bl	800e1d8 <vTaskSwitchContext>
	prvTaskExitError();
 800f566:	f7ff ff17 	bl	800f398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f56a:	2300      	movs	r3, #0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3718      	adds	r7, #24
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	e000ed00 	.word	0xe000ed00
 800f578:	410fc271 	.word	0x410fc271
 800f57c:	410fc270 	.word	0x410fc270
 800f580:	e000e400 	.word	0xe000e400
 800f584:	24006808 	.word	0x24006808
 800f588:	2400680c 	.word	0x2400680c
 800f58c:	e000ed20 	.word	0xe000ed20
 800f590:	240049b4 	.word	0x240049b4
 800f594:	e000ef34 	.word	0xe000ef34

0800f598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	607b      	str	r3, [r7, #4]
}
 800f5b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f5b2:	4b10      	ldr	r3, [pc, #64]	@ (800f5f4 <vPortEnterCritical+0x5c>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	4a0e      	ldr	r2, [pc, #56]	@ (800f5f4 <vPortEnterCritical+0x5c>)
 800f5ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f5bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f4 <vPortEnterCritical+0x5c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d110      	bne.n	800f5e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f5c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f5f8 <vPortEnterCritical+0x60>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00b      	beq.n	800f5e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	603b      	str	r3, [r7, #0]
}
 800f5e0:	bf00      	nop
 800f5e2:	bf00      	nop
 800f5e4:	e7fd      	b.n	800f5e2 <vPortEnterCritical+0x4a>
	}
}
 800f5e6:	bf00      	nop
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	240049b4 	.word	0x240049b4
 800f5f8:	e000ed04 	.word	0xe000ed04

0800f5fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f602:	4b12      	ldr	r3, [pc, #72]	@ (800f64c <vPortExitCritical+0x50>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10b      	bne.n	800f622 <vPortExitCritical+0x26>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	607b      	str	r3, [r7, #4]
}
 800f61c:	bf00      	nop
 800f61e:	bf00      	nop
 800f620:	e7fd      	b.n	800f61e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f622:	4b0a      	ldr	r3, [pc, #40]	@ (800f64c <vPortExitCritical+0x50>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	3b01      	subs	r3, #1
 800f628:	4a08      	ldr	r2, [pc, #32]	@ (800f64c <vPortExitCritical+0x50>)
 800f62a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f62c:	4b07      	ldr	r3, [pc, #28]	@ (800f64c <vPortExitCritical+0x50>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d105      	bne.n	800f640 <vPortExitCritical+0x44>
 800f634:	2300      	movs	r3, #0
 800f636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	f383 8811 	msr	BASEPRI, r3
}
 800f63e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f640:	bf00      	nop
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	240049b4 	.word	0x240049b4

0800f650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f650:	f3ef 8009 	mrs	r0, PSP
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	4b15      	ldr	r3, [pc, #84]	@ (800f6b0 <pxCurrentTCBConst>)
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	f01e 0f10 	tst.w	lr, #16
 800f660:	bf08      	it	eq
 800f662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66a:	6010      	str	r0, [r2, #0]
 800f66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f674:	f380 8811 	msr	BASEPRI, r0
 800f678:	f3bf 8f4f 	dsb	sy
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f7fe fdaa 	bl	800e1d8 <vTaskSwitchContext>
 800f684:	f04f 0000 	mov.w	r0, #0
 800f688:	f380 8811 	msr	BASEPRI, r0
 800f68c:	bc09      	pop	{r0, r3}
 800f68e:	6819      	ldr	r1, [r3, #0]
 800f690:	6808      	ldr	r0, [r1, #0]
 800f692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f696:	f01e 0f10 	tst.w	lr, #16
 800f69a:	bf08      	it	eq
 800f69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f6a0:	f380 8809 	msr	PSP, r0
 800f6a4:	f3bf 8f6f 	isb	sy
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	f3af 8000 	nop.w

0800f6b0 <pxCurrentTCBConst>:
 800f6b0:	240061dc 	.word	0x240061dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop

0800f6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c2:	f383 8811 	msr	BASEPRI, r3
 800f6c6:	f3bf 8f6f 	isb	sy
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	607b      	str	r3, [r7, #4]
}
 800f6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f6d2:	f7fe fcc7 	bl	800e064 <xTaskIncrementTick>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d003      	beq.n	800f6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f6dc:	4b06      	ldr	r3, [pc, #24]	@ (800f6f8 <xPortSysTickHandler+0x40>)
 800f6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6e2:	601a      	str	r2, [r3, #0]
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	f383 8811 	msr	BASEPRI, r3
}
 800f6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f6f0:	bf00      	nop
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	e000ed04 	.word	0xe000ed04

0800f6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f700:	4b0b      	ldr	r3, [pc, #44]	@ (800f730 <vPortSetupTimerInterrupt+0x34>)
 800f702:	2200      	movs	r2, #0
 800f704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f706:	4b0b      	ldr	r3, [pc, #44]	@ (800f734 <vPortSetupTimerInterrupt+0x38>)
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f70c:	4b0a      	ldr	r3, [pc, #40]	@ (800f738 <vPortSetupTimerInterrupt+0x3c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a0a      	ldr	r2, [pc, #40]	@ (800f73c <vPortSetupTimerInterrupt+0x40>)
 800f712:	fba2 2303 	umull	r2, r3, r2, r3
 800f716:	099b      	lsrs	r3, r3, #6
 800f718:	4a09      	ldr	r2, [pc, #36]	@ (800f740 <vPortSetupTimerInterrupt+0x44>)
 800f71a:	3b01      	subs	r3, #1
 800f71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f71e:	4b04      	ldr	r3, [pc, #16]	@ (800f730 <vPortSetupTimerInterrupt+0x34>)
 800f720:	2207      	movs	r2, #7
 800f722:	601a      	str	r2, [r3, #0]
}
 800f724:	bf00      	nop
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	e000e010 	.word	0xe000e010
 800f734:	e000e018 	.word	0xe000e018
 800f738:	24004990 	.word	0x24004990
 800f73c:	10624dd3 	.word	0x10624dd3
 800f740:	e000e014 	.word	0xe000e014

0800f744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f744:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f754 <vPortEnableVFP+0x10>
 800f748:	6801      	ldr	r1, [r0, #0]
 800f74a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f74e:	6001      	str	r1, [r0, #0]
 800f750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f752:	bf00      	nop
 800f754:	e000ed88 	.word	0xe000ed88

0800f758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f75e:	f3ef 8305 	mrs	r3, IPSR
 800f762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2b0f      	cmp	r3, #15
 800f768:	d915      	bls.n	800f796 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f76a:	4a18      	ldr	r2, [pc, #96]	@ (800f7cc <vPortValidateInterruptPriority+0x74>)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	4413      	add	r3, r2
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f774:	4b16      	ldr	r3, [pc, #88]	@ (800f7d0 <vPortValidateInterruptPriority+0x78>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	7afa      	ldrb	r2, [r7, #11]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d20b      	bcs.n	800f796 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	607b      	str	r3, [r7, #4]
}
 800f790:	bf00      	nop
 800f792:	bf00      	nop
 800f794:	e7fd      	b.n	800f792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f796:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d4 <vPortValidateInterruptPriority+0x7c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f79e:	4b0e      	ldr	r3, [pc, #56]	@ (800f7d8 <vPortValidateInterruptPriority+0x80>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d90b      	bls.n	800f7be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7aa:	f383 8811 	msr	BASEPRI, r3
 800f7ae:	f3bf 8f6f 	isb	sy
 800f7b2:	f3bf 8f4f 	dsb	sy
 800f7b6:	603b      	str	r3, [r7, #0]
}
 800f7b8:	bf00      	nop
 800f7ba:	bf00      	nop
 800f7bc:	e7fd      	b.n	800f7ba <vPortValidateInterruptPriority+0x62>
	}
 800f7be:	bf00      	nop
 800f7c0:	3714      	adds	r7, #20
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	e000e3f0 	.word	0xe000e3f0
 800f7d0:	24006808 	.word	0x24006808
 800f7d4:	e000ed0c 	.word	0xe000ed0c
 800f7d8:	2400680c 	.word	0x2400680c

0800f7dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08a      	sub	sp, #40	@ 0x28
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f7e8:	f7fe fb6e 	bl	800dec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f7ec:	4b5c      	ldr	r3, [pc, #368]	@ (800f960 <pvPortMalloc+0x184>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d101      	bne.n	800f7f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f7f4:	f000 f924 	bl	800fa40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f7f8:	4b5a      	ldr	r3, [pc, #360]	@ (800f964 <pvPortMalloc+0x188>)
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4013      	ands	r3, r2
 800f800:	2b00      	cmp	r3, #0
 800f802:	f040 8095 	bne.w	800f930 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d01e      	beq.n	800f84a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f80c:	2208      	movs	r2, #8
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4413      	add	r3, r2
 800f812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d015      	beq.n	800f84a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f023 0307 	bic.w	r3, r3, #7
 800f824:	3308      	adds	r3, #8
 800f826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f003 0307 	and.w	r3, r3, #7
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00b      	beq.n	800f84a <pvPortMalloc+0x6e>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	617b      	str	r3, [r7, #20]
}
 800f844:	bf00      	nop
 800f846:	bf00      	nop
 800f848:	e7fd      	b.n	800f846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d06f      	beq.n	800f930 <pvPortMalloc+0x154>
 800f850:	4b45      	ldr	r3, [pc, #276]	@ (800f968 <pvPortMalloc+0x18c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	429a      	cmp	r2, r3
 800f858:	d86a      	bhi.n	800f930 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f85a:	4b44      	ldr	r3, [pc, #272]	@ (800f96c <pvPortMalloc+0x190>)
 800f85c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f85e:	4b43      	ldr	r3, [pc, #268]	@ (800f96c <pvPortMalloc+0x190>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f864:	e004      	b.n	800f870 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	429a      	cmp	r2, r3
 800f878:	d903      	bls.n	800f882 <pvPortMalloc+0xa6>
 800f87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1f1      	bne.n	800f866 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f882:	4b37      	ldr	r3, [pc, #220]	@ (800f960 <pvPortMalloc+0x184>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f888:	429a      	cmp	r2, r3
 800f88a:	d051      	beq.n	800f930 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f88c:	6a3b      	ldr	r3, [r7, #32]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2208      	movs	r2, #8
 800f892:	4413      	add	r3, r2
 800f894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	6a3b      	ldr	r3, [r7, #32]
 800f89c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a0:	685a      	ldr	r2, [r3, #4]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	1ad2      	subs	r2, r2, r3
 800f8a6:	2308      	movs	r3, #8
 800f8a8:	005b      	lsls	r3, r3, #1
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d920      	bls.n	800f8f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	f003 0307 	and.w	r3, r3, #7
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00b      	beq.n	800f8d8 <pvPortMalloc+0xfc>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	613b      	str	r3, [r7, #16]
}
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	e7fd      	b.n	800f8d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8da:	685a      	ldr	r2, [r3, #4]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	1ad2      	subs	r2, r2, r3
 800f8e0:	69bb      	ldr	r3, [r7, #24]
 800f8e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f8ea:	69b8      	ldr	r0, [r7, #24]
 800f8ec:	f000 f90a 	bl	800fb04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f8f0:	4b1d      	ldr	r3, [pc, #116]	@ (800f968 <pvPortMalloc+0x18c>)
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	4a1b      	ldr	r2, [pc, #108]	@ (800f968 <pvPortMalloc+0x18c>)
 800f8fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f968 <pvPortMalloc+0x18c>)
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	4b1b      	ldr	r3, [pc, #108]	@ (800f970 <pvPortMalloc+0x194>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	429a      	cmp	r2, r3
 800f908:	d203      	bcs.n	800f912 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f90a:	4b17      	ldr	r3, [pc, #92]	@ (800f968 <pvPortMalloc+0x18c>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a18      	ldr	r2, [pc, #96]	@ (800f970 <pvPortMalloc+0x194>)
 800f910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f914:	685a      	ldr	r2, [r3, #4]
 800f916:	4b13      	ldr	r3, [pc, #76]	@ (800f964 <pvPortMalloc+0x188>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	431a      	orrs	r2, r3
 800f91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f91e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f926:	4b13      	ldr	r3, [pc, #76]	@ (800f974 <pvPortMalloc+0x198>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3301      	adds	r3, #1
 800f92c:	4a11      	ldr	r2, [pc, #68]	@ (800f974 <pvPortMalloc+0x198>)
 800f92e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f930:	f7fe fad8 	bl	800dee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	f003 0307 	and.w	r3, r3, #7
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00b      	beq.n	800f956 <pvPortMalloc+0x17a>
	__asm volatile
 800f93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f942:	f383 8811 	msr	BASEPRI, r3
 800f946:	f3bf 8f6f 	isb	sy
 800f94a:	f3bf 8f4f 	dsb	sy
 800f94e:	60fb      	str	r3, [r7, #12]
}
 800f950:	bf00      	nop
 800f952:	bf00      	nop
 800f954:	e7fd      	b.n	800f952 <pvPortMalloc+0x176>
	return pvReturn;
 800f956:	69fb      	ldr	r3, [r7, #28]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3728      	adds	r7, #40	@ 0x28
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	2400e018 	.word	0x2400e018
 800f964:	2400e02c 	.word	0x2400e02c
 800f968:	2400e01c 	.word	0x2400e01c
 800f96c:	2400e010 	.word	0x2400e010
 800f970:	2400e020 	.word	0x2400e020
 800f974:	2400e024 	.word	0x2400e024

0800f978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d04f      	beq.n	800fa2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f98a:	2308      	movs	r3, #8
 800f98c:	425b      	negs	r3, r3
 800f98e:	697a      	ldr	r2, [r7, #20]
 800f990:	4413      	add	r3, r2
 800f992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	4b25      	ldr	r3, [pc, #148]	@ (800fa34 <vPortFree+0xbc>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10b      	bne.n	800f9be <vPortFree+0x46>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	60fb      	str	r3, [r7, #12]
}
 800f9b8:	bf00      	nop
 800f9ba:	bf00      	nop
 800f9bc:	e7fd      	b.n	800f9ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d00b      	beq.n	800f9de <vPortFree+0x66>
	__asm volatile
 800f9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9ca:	f383 8811 	msr	BASEPRI, r3
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f3bf 8f4f 	dsb	sy
 800f9d6:	60bb      	str	r3, [r7, #8]
}
 800f9d8:	bf00      	nop
 800f9da:	bf00      	nop
 800f9dc:	e7fd      	b.n	800f9da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	4b14      	ldr	r3, [pc, #80]	@ (800fa34 <vPortFree+0xbc>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4013      	ands	r3, r2
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d01e      	beq.n	800fa2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d11a      	bne.n	800fa2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	685a      	ldr	r2, [r3, #4]
 800f9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800fa34 <vPortFree+0xbc>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	43db      	mvns	r3, r3
 800f9fe:	401a      	ands	r2, r3
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa04:	f7fe fa60 	bl	800dec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	685a      	ldr	r2, [r3, #4]
 800fa0c:	4b0a      	ldr	r3, [pc, #40]	@ (800fa38 <vPortFree+0xc0>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4413      	add	r3, r2
 800fa12:	4a09      	ldr	r2, [pc, #36]	@ (800fa38 <vPortFree+0xc0>)
 800fa14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa16:	6938      	ldr	r0, [r7, #16]
 800fa18:	f000 f874 	bl	800fb04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa1c:	4b07      	ldr	r3, [pc, #28]	@ (800fa3c <vPortFree+0xc4>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3301      	adds	r3, #1
 800fa22:	4a06      	ldr	r2, [pc, #24]	@ (800fa3c <vPortFree+0xc4>)
 800fa24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fa26:	f7fe fa5d 	bl	800dee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fa2a:	bf00      	nop
 800fa2c:	3718      	adds	r7, #24
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	2400e02c 	.word	0x2400e02c
 800fa38:	2400e01c 	.word	0x2400e01c
 800fa3c:	2400e028 	.word	0x2400e028

0800fa40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa40:	b480      	push	{r7}
 800fa42:	b085      	sub	sp, #20
 800fa44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa46:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800fa4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa4c:	4b27      	ldr	r3, [pc, #156]	@ (800faec <prvHeapInit+0xac>)
 800fa4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f003 0307 	and.w	r3, r3, #7
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d00c      	beq.n	800fa74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	3307      	adds	r3, #7
 800fa5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f023 0307 	bic.w	r3, r3, #7
 800fa66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fa68:	68ba      	ldr	r2, [r7, #8]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	1ad3      	subs	r3, r2, r3
 800fa6e:	4a1f      	ldr	r2, [pc, #124]	@ (800faec <prvHeapInit+0xac>)
 800fa70:	4413      	add	r3, r2
 800fa72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fa78:	4a1d      	ldr	r2, [pc, #116]	@ (800faf0 <prvHeapInit+0xb0>)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fa7e:	4b1c      	ldr	r3, [pc, #112]	@ (800faf0 <prvHeapInit+0xb0>)
 800fa80:	2200      	movs	r2, #0
 800fa82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	68ba      	ldr	r2, [r7, #8]
 800fa88:	4413      	add	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fa8c:	2208      	movs	r2, #8
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	1a9b      	subs	r3, r3, r2
 800fa92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f023 0307 	bic.w	r3, r3, #7
 800fa9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	4a15      	ldr	r2, [pc, #84]	@ (800faf4 <prvHeapInit+0xb4>)
 800faa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800faa2:	4b14      	ldr	r3, [pc, #80]	@ (800faf4 <prvHeapInit+0xb4>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2200      	movs	r2, #0
 800faa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800faaa:	4b12      	ldr	r3, [pc, #72]	@ (800faf4 <prvHeapInit+0xb4>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	1ad2      	subs	r2, r2, r3
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fac0:	4b0c      	ldr	r3, [pc, #48]	@ (800faf4 <prvHeapInit+0xb4>)
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	4a0a      	ldr	r2, [pc, #40]	@ (800faf8 <prvHeapInit+0xb8>)
 800face:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	4a09      	ldr	r2, [pc, #36]	@ (800fafc <prvHeapInit+0xbc>)
 800fad6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fad8:	4b09      	ldr	r3, [pc, #36]	@ (800fb00 <prvHeapInit+0xc0>)
 800fada:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fade:	601a      	str	r2, [r3, #0]
}
 800fae0:	bf00      	nop
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	24006810 	.word	0x24006810
 800faf0:	2400e010 	.word	0x2400e010
 800faf4:	2400e018 	.word	0x2400e018
 800faf8:	2400e020 	.word	0x2400e020
 800fafc:	2400e01c 	.word	0x2400e01c
 800fb00:	2400e02c 	.word	0x2400e02c

0800fb04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb0c:	4b28      	ldr	r3, [pc, #160]	@ (800fbb0 <prvInsertBlockIntoFreeList+0xac>)
 800fb0e:	60fb      	str	r3, [r7, #12]
 800fb10:	e002      	b.n	800fb18 <prvInsertBlockIntoFreeList+0x14>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	60fb      	str	r3, [r7, #12]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d8f7      	bhi.n	800fb12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d108      	bne.n	800fb46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	685a      	ldr	r2, [r3, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	441a      	add	r2, r3
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	68ba      	ldr	r2, [r7, #8]
 800fb50:	441a      	add	r2, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d118      	bne.n	800fb8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	4b15      	ldr	r3, [pc, #84]	@ (800fbb4 <prvInsertBlockIntoFreeList+0xb0>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d00d      	beq.n	800fb82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	685a      	ldr	r2, [r3, #4]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	441a      	add	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	601a      	str	r2, [r3, #0]
 800fb80:	e008      	b.n	800fb94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fb82:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb4 <prvInsertBlockIntoFreeList+0xb0>)
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	601a      	str	r2, [r3, #0]
 800fb8a:	e003      	b.n	800fb94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d002      	beq.n	800fba2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fba2:	bf00      	nop
 800fba4:	3714      	adds	r7, #20
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	2400e010 	.word	0x2400e010
 800fbb4:	2400e018 	.word	0x2400e018

0800fbb8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800fbc2:	f007 fc83 	bl	80174cc <sys_timeouts_sleeptime>
 800fbc6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbce:	d10b      	bne.n	800fbe8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800fbd0:	4813      	ldr	r0, [pc, #76]	@ (800fc20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fbd2:	f00a fd3c 	bl	801a64e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f00a fcc4 	bl	801a568 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800fbe0:	480f      	ldr	r0, [pc, #60]	@ (800fc20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fbe2:	f00a fd25 	bl	801a630 <sys_mutex_lock>
    return;
 800fbe6:	e018      	b.n	800fc1a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d102      	bne.n	800fbf4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800fbee:	f007 fc33 	bl	8017458 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fbf2:	e7e6      	b.n	800fbc2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800fbf4:	480a      	ldr	r0, [pc, #40]	@ (800fc20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fbf6:	f00a fd2a 	bl	801a64e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	6839      	ldr	r1, [r7, #0]
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f00a fcb2 	bl	801a568 <sys_arch_mbox_fetch>
 800fc04:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800fc06:	4806      	ldr	r0, [pc, #24]	@ (800fc20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fc08:	f00a fd12 	bl	801a630 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc12:	d102      	bne.n	800fc1a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fc14:	f007 fc20 	bl	8017458 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fc18:	e7d3      	b.n	800fbc2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	2400e03c 	.word	0x2400e03c

0800fc24 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800fc2c:	4810      	ldr	r0, [pc, #64]	@ (800fc70 <tcpip_thread+0x4c>)
 800fc2e:	f00a fcff 	bl	801a630 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800fc32:	4b10      	ldr	r3, [pc, #64]	@ (800fc74 <tcpip_thread+0x50>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d005      	beq.n	800fc46 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800fc3a:	4b0e      	ldr	r3, [pc, #56]	@ (800fc74 <tcpip_thread+0x50>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4a0e      	ldr	r2, [pc, #56]	@ (800fc78 <tcpip_thread+0x54>)
 800fc40:	6812      	ldr	r2, [r2, #0]
 800fc42:	4610      	mov	r0, r2
 800fc44:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fc46:	f107 030c 	add.w	r3, r7, #12
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	480b      	ldr	r0, [pc, #44]	@ (800fc7c <tcpip_thread+0x58>)
 800fc4e:	f7ff ffb3 	bl	800fbb8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d106      	bne.n	800fc66 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fc58:	4b09      	ldr	r3, [pc, #36]	@ (800fc80 <tcpip_thread+0x5c>)
 800fc5a:	2291      	movs	r2, #145	@ 0x91
 800fc5c:	4909      	ldr	r1, [pc, #36]	@ (800fc84 <tcpip_thread+0x60>)
 800fc5e:	480a      	ldr	r0, [pc, #40]	@ (800fc88 <tcpip_thread+0x64>)
 800fc60:	f00a fe40 	bl	801a8e4 <iprintf>
      continue;
 800fc64:	e003      	b.n	800fc6e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 f80f 	bl	800fc8c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fc6e:	e7ea      	b.n	800fc46 <tcpip_thread+0x22>
 800fc70:	2400e03c 	.word	0x2400e03c
 800fc74:	2400e030 	.word	0x2400e030
 800fc78:	2400e034 	.word	0x2400e034
 800fc7c:	2400e038 	.word	0x2400e038
 800fc80:	0801b860 	.word	0x0801b860
 800fc84:	0801b890 	.word	0x0801b890
 800fc88:	0801b8b0 	.word	0x0801b8b0

0800fc8c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b02      	cmp	r3, #2
 800fc9a:	d026      	beq.n	800fcea <tcpip_thread_handle_msg+0x5e>
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	dc2b      	bgt.n	800fcf8 <tcpip_thread_handle_msg+0x6c>
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d002      	beq.n	800fcaa <tcpip_thread_handle_msg+0x1e>
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d015      	beq.n	800fcd4 <tcpip_thread_handle_msg+0x48>
 800fca8:	e026      	b.n	800fcf8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	6850      	ldr	r0, [r2, #4]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	6892      	ldr	r2, [r2, #8]
 800fcb6:	4611      	mov	r1, r2
 800fcb8:	4798      	blx	r3
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d004      	beq.n	800fcca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f001 fdcb 	bl	8011860 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fcca:	6879      	ldr	r1, [r7, #4]
 800fccc:	200a      	movs	r0, #10
 800fcce:	f000 ff1b 	bl	8010b08 <memp_free>
      break;
 800fcd2:	e018      	b.n	800fd06 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	6892      	ldr	r2, [r2, #8]
 800fcdc:	4610      	mov	r0, r2
 800fcde:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800fce0:	6879      	ldr	r1, [r7, #4]
 800fce2:	2009      	movs	r0, #9
 800fce4:	f000 ff10 	bl	8010b08 <memp_free>
      break;
 800fce8:	e00d      	b.n	800fd06 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	6892      	ldr	r2, [r2, #8]
 800fcf2:	4610      	mov	r0, r2
 800fcf4:	4798      	blx	r3
      break;
 800fcf6:	e006      	b.n	800fd06 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fcf8:	4b05      	ldr	r3, [pc, #20]	@ (800fd10 <tcpip_thread_handle_msg+0x84>)
 800fcfa:	22cf      	movs	r2, #207	@ 0xcf
 800fcfc:	4905      	ldr	r1, [pc, #20]	@ (800fd14 <tcpip_thread_handle_msg+0x88>)
 800fcfe:	4806      	ldr	r0, [pc, #24]	@ (800fd18 <tcpip_thread_handle_msg+0x8c>)
 800fd00:	f00a fdf0 	bl	801a8e4 <iprintf>
      break;
 800fd04:	bf00      	nop
  }
}
 800fd06:	bf00      	nop
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	0801b860 	.word	0x0801b860
 800fd14:	0801b890 	.word	0x0801b890
 800fd18:	0801b8b0 	.word	0x0801b8b0

0800fd1c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fd28:	481a      	ldr	r0, [pc, #104]	@ (800fd94 <tcpip_inpkt+0x78>)
 800fd2a:	f00a fc4e 	bl	801a5ca <sys_mbox_valid>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d105      	bne.n	800fd40 <tcpip_inpkt+0x24>
 800fd34:	4b18      	ldr	r3, [pc, #96]	@ (800fd98 <tcpip_inpkt+0x7c>)
 800fd36:	22fc      	movs	r2, #252	@ 0xfc
 800fd38:	4918      	ldr	r1, [pc, #96]	@ (800fd9c <tcpip_inpkt+0x80>)
 800fd3a:	4819      	ldr	r0, [pc, #100]	@ (800fda0 <tcpip_inpkt+0x84>)
 800fd3c:	f00a fdd2 	bl	801a8e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800fd40:	200a      	movs	r0, #10
 800fd42:	f000 fe6b 	bl	8010a1c <memp_malloc>
 800fd46:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d102      	bne.n	800fd54 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800fd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd52:	e01a      	b.n	800fd8a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	2200      	movs	r2, #0
 800fd58:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fd6c:	6979      	ldr	r1, [r7, #20]
 800fd6e:	4809      	ldr	r0, [pc, #36]	@ (800fd94 <tcpip_inpkt+0x78>)
 800fd70:	f00a fbe0 	bl	801a534 <sys_mbox_trypost>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d006      	beq.n	800fd88 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fd7a:	6979      	ldr	r1, [r7, #20]
 800fd7c:	200a      	movs	r0, #10
 800fd7e:	f000 fec3 	bl	8010b08 <memp_free>
    return ERR_MEM;
 800fd82:	f04f 33ff 	mov.w	r3, #4294967295
 800fd86:	e000      	b.n	800fd8a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800fd88:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	2400e038 	.word	0x2400e038
 800fd98:	0801b860 	.word	0x0801b860
 800fd9c:	0801b8d8 	.word	0x0801b8d8
 800fda0:	0801b8b0 	.word	0x0801b8b0

0800fda4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fdb4:	f003 0318 	and.w	r3, r3, #24
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d006      	beq.n	800fdca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800fdbc:	4a08      	ldr	r2, [pc, #32]	@ (800fde0 <tcpip_input+0x3c>)
 800fdbe:	6839      	ldr	r1, [r7, #0]
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f7ff ffab 	bl	800fd1c <tcpip_inpkt>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	e005      	b.n	800fdd6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800fdca:	4a06      	ldr	r2, [pc, #24]	@ (800fde4 <tcpip_input+0x40>)
 800fdcc:	6839      	ldr	r1, [r7, #0]
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff ffa4 	bl	800fd1c <tcpip_inpkt>
 800fdd4:	4603      	mov	r3, r0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3708      	adds	r7, #8
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	0801a355 	.word	0x0801a355
 800fde4:	08019245 	.word	0x08019245

0800fde8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fdf2:	4819      	ldr	r0, [pc, #100]	@ (800fe58 <tcpip_try_callback+0x70>)
 800fdf4:	f00a fbe9 	bl	801a5ca <sys_mbox_valid>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcpip_try_callback+0x24>
 800fdfe:	4b17      	ldr	r3, [pc, #92]	@ (800fe5c <tcpip_try_callback+0x74>)
 800fe00:	f240 125d 	movw	r2, #349	@ 0x15d
 800fe04:	4916      	ldr	r1, [pc, #88]	@ (800fe60 <tcpip_try_callback+0x78>)
 800fe06:	4817      	ldr	r0, [pc, #92]	@ (800fe64 <tcpip_try_callback+0x7c>)
 800fe08:	f00a fd6c 	bl	801a8e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800fe0c:	2009      	movs	r0, #9
 800fe0e:	f000 fe05 	bl	8010a1c <memp_malloc>
 800fe12:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d102      	bne.n	800fe20 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800fe1a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1e:	e017      	b.n	800fe50 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2201      	movs	r2, #1
 800fe24:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fe32:	68f9      	ldr	r1, [r7, #12]
 800fe34:	4808      	ldr	r0, [pc, #32]	@ (800fe58 <tcpip_try_callback+0x70>)
 800fe36:	f00a fb7d 	bl	801a534 <sys_mbox_trypost>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d006      	beq.n	800fe4e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800fe40:	68f9      	ldr	r1, [r7, #12]
 800fe42:	2009      	movs	r0, #9
 800fe44:	f000 fe60 	bl	8010b08 <memp_free>
    return ERR_MEM;
 800fe48:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4c:	e000      	b.n	800fe50 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	2400e038 	.word	0x2400e038
 800fe5c:	0801b860 	.word	0x0801b860
 800fe60:	0801b8d8 	.word	0x0801b8d8
 800fe64:	0801b8b0 	.word	0x0801b8b0

0800fe68 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af02      	add	r7, sp, #8
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  lwip_init();
 800fe72:	f000 f92e 	bl	80100d2 <lwip_init>

  tcpip_init_done = initfunc;
 800fe76:	4a17      	ldr	r2, [pc, #92]	@ (800fed4 <tcpip_init+0x6c>)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800fe7c:	4a16      	ldr	r2, [pc, #88]	@ (800fed8 <tcpip_init+0x70>)
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800fe82:	2106      	movs	r1, #6
 800fe84:	4815      	ldr	r0, [pc, #84]	@ (800fedc <tcpip_init+0x74>)
 800fe86:	f00a fb3b 	bl	801a500 <sys_mbox_new>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d006      	beq.n	800fe9e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800fe90:	4b13      	ldr	r3, [pc, #76]	@ (800fee0 <tcpip_init+0x78>)
 800fe92:	f240 2261 	movw	r2, #609	@ 0x261
 800fe96:	4913      	ldr	r1, [pc, #76]	@ (800fee4 <tcpip_init+0x7c>)
 800fe98:	4813      	ldr	r0, [pc, #76]	@ (800fee8 <tcpip_init+0x80>)
 800fe9a:	f00a fd23 	bl	801a8e4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800fe9e:	4813      	ldr	r0, [pc, #76]	@ (800feec <tcpip_init+0x84>)
 800fea0:	f00a fbb0 	bl	801a604 <sys_mutex_new>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d006      	beq.n	800feb8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800feaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fee0 <tcpip_init+0x78>)
 800feac:	f240 2265 	movw	r2, #613	@ 0x265
 800feb0:	490f      	ldr	r1, [pc, #60]	@ (800fef0 <tcpip_init+0x88>)
 800feb2:	480d      	ldr	r0, [pc, #52]	@ (800fee8 <tcpip_init+0x80>)
 800feb4:	f00a fd16 	bl	801a8e4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800feb8:	2318      	movs	r3, #24
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fec0:	2200      	movs	r2, #0
 800fec2:	490c      	ldr	r1, [pc, #48]	@ (800fef4 <tcpip_init+0x8c>)
 800fec4:	480c      	ldr	r0, [pc, #48]	@ (800fef8 <tcpip_init+0x90>)
 800fec6:	f00a fbcf 	bl	801a668 <sys_thread_new>
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	2400e030 	.word	0x2400e030
 800fed8:	2400e034 	.word	0x2400e034
 800fedc:	2400e038 	.word	0x2400e038
 800fee0:	0801b860 	.word	0x0801b860
 800fee4:	0801b8e8 	.word	0x0801b8e8
 800fee8:	0801b8b0 	.word	0x0801b8b0
 800feec:	2400e03c 	.word	0x2400e03c
 800fef0:	0801b90c 	.word	0x0801b90c
 800fef4:	0800fc25 	.word	0x0800fc25
 800fef8:	0801b930 	.word	0x0801b930

0800fefc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ff06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff0a:	021b      	lsls	r3, r3, #8
 800ff0c:	b21a      	sxth	r2, r3
 800ff0e:	88fb      	ldrh	r3, [r7, #6]
 800ff10:	0a1b      	lsrs	r3, r3, #8
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	b21b      	sxth	r3, r3
 800ff16:	4313      	orrs	r3, r2
 800ff18:	b21b      	sxth	r3, r3
 800ff1a:	b29b      	uxth	r3, r3
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	061a      	lsls	r2, r3, #24
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	021b      	lsls	r3, r3, #8
 800ff38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ff3c:	431a      	orrs	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	0a1b      	lsrs	r3, r3, #8
 800ff42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ff46:	431a      	orrs	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	0e1b      	lsrs	r3, r3, #24
 800ff4c:	4313      	orrs	r3, r2
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	370c      	adds	r7, #12
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr

0800ff5a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b089      	sub	sp, #36	@ 0x24
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	f003 0301 	and.w	r3, r3, #1
 800ff76:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d00d      	beq.n	800ff9a <lwip_standard_chksum+0x40>
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	dd0a      	ble.n	800ff9a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ff84:	69fa      	ldr	r2, [r7, #28]
 800ff86:	1c53      	adds	r3, r2, #1
 800ff88:	61fb      	str	r3, [r7, #28]
 800ff8a:	f107 030e 	add.w	r3, r7, #14
 800ff8e:	3301      	adds	r3, #1
 800ff90:	7812      	ldrb	r2, [r2, #0]
 800ff92:	701a      	strb	r2, [r3, #0]
    len--;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ff9e:	e00a      	b.n	800ffb6 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	1c9a      	adds	r2, r3, #2
 800ffa4:	61ba      	str	r2, [r7, #24]
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	4413      	add	r3, r2
 800ffae:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	3b02      	subs	r3, #2
 800ffb4:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	dcf1      	bgt.n	800ffa0 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dd04      	ble.n	800ffcc <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ffc2:	f107 030e 	add.w	r3, r7, #14
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	7812      	ldrb	r2, [r2, #0]
 800ffca:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ffcc:	89fb      	ldrh	r3, [r7, #14]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	0c1a      	lsrs	r2, r3, #16
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	4413      	add	r3, r2
 800ffe0:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	0c1a      	lsrs	r2, r3, #16
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	4413      	add	r3, r2
 800ffec:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d007      	beq.n	8010004 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	021b      	lsls	r3, r3, #8
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	0a1b      	lsrs	r3, r3, #8
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	4313      	orrs	r3, r2
 8010002:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	b29b      	uxth	r3, r3
}
 8010008:	4618      	mov	r0, r3
 801000a:	3724      	adds	r7, #36	@ 0x24
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	460b      	mov	r3, r1
 801001e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010020:	887b      	ldrh	r3, [r7, #2]
 8010022:	4619      	mov	r1, r3
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff ff98 	bl	800ff5a <lwip_standard_chksum>
 801002a:	4603      	mov	r3, r0
 801002c:	43db      	mvns	r3, r3
 801002e:	b29b      	uxth	r3, r3
}
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8010044:	2300      	movs	r3, #0
 8010046:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	613b      	str	r3, [r7, #16]
 801004c:	e02b      	b.n	80100a6 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	685a      	ldr	r2, [r3, #4]
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	895b      	ldrh	r3, [r3, #10]
 8010056:	4619      	mov	r1, r3
 8010058:	4610      	mov	r0, r2
 801005a:	f7ff ff7e 	bl	800ff5a <lwip_standard_chksum>
 801005e:	4603      	mov	r3, r0
 8010060:	461a      	mov	r2, r3
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	4413      	add	r3, r2
 8010066:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	0c1a      	lsrs	r2, r3, #16
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	b29b      	uxth	r3, r3
 8010070:	4413      	add	r3, r2
 8010072:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	895b      	ldrh	r3, [r3, #10]
 8010078:	f003 0301 	and.w	r3, r3, #1
 801007c:	b29b      	uxth	r3, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00e      	beq.n	80100a0 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	bf0c      	ite	eq
 8010088:	2301      	moveq	r3, #1
 801008a:	2300      	movne	r3, #0
 801008c:	b2db      	uxtb	r3, r3
 801008e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	021b      	lsls	r3, r3, #8
 8010094:	b29a      	uxth	r2, r3
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	0a1b      	lsrs	r3, r3, #8
 801009a:	b2db      	uxtb	r3, r3
 801009c:	4313      	orrs	r3, r2
 801009e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	613b      	str	r3, [r7, #16]
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d1d0      	bne.n	801004e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d007      	beq.n	80100c2 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	021b      	lsls	r3, r3, #8
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	0a1b      	lsrs	r3, r3, #8
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	4313      	orrs	r3, r2
 80100c0:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	43db      	mvns	r3, r3
 80100c8:	b29b      	uxth	r3, r3
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80100d8:	2300      	movs	r3, #0
 80100da:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80100dc:	f00a fa86 	bl	801a5ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80100e0:	f000 f8d4 	bl	801028c <mem_init>
  memp_init();
 80100e4:	f000 fc2c 	bl	8010940 <memp_init>
  pbuf_init();
  netif_init();
 80100e8:	f000 fd38 	bl	8010b5c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80100ec:	f007 fa26 	bl	801753c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80100f0:	f001 ff4c 	bl	8011f8c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80100f4:	f007 f968 	bl	80173c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80100f8:	bf00      	nop
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	4603      	mov	r3, r0
 8010108:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801010a:	4b05      	ldr	r3, [pc, #20]	@ (8010120 <ptr_to_mem+0x20>)
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	88fb      	ldrh	r3, [r7, #6]
 8010110:	4413      	add	r3, r2
}
 8010112:	4618      	mov	r0, r3
 8010114:	370c      	adds	r7, #12
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	2400e058 	.word	0x2400e058

08010124 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801012c:	4b05      	ldr	r3, [pc, #20]	@ (8010144 <mem_to_ptr+0x20>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	b29b      	uxth	r3, r3
}
 8010136:	4618      	mov	r0, r3
 8010138:	370c      	adds	r7, #12
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	2400e058 	.word	0x2400e058

08010148 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010148:	b590      	push	{r4, r7, lr}
 801014a:	b085      	sub	sp, #20
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010150:	4b45      	ldr	r3, [pc, #276]	@ (8010268 <plug_holes+0x120>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	429a      	cmp	r2, r3
 8010158:	d206      	bcs.n	8010168 <plug_holes+0x20>
 801015a:	4b44      	ldr	r3, [pc, #272]	@ (801026c <plug_holes+0x124>)
 801015c:	f240 12df 	movw	r2, #479	@ 0x1df
 8010160:	4943      	ldr	r1, [pc, #268]	@ (8010270 <plug_holes+0x128>)
 8010162:	4844      	ldr	r0, [pc, #272]	@ (8010274 <plug_holes+0x12c>)
 8010164:	f00a fbbe 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010168:	4b43      	ldr	r3, [pc, #268]	@ (8010278 <plug_holes+0x130>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	429a      	cmp	r2, r3
 8010170:	d306      	bcc.n	8010180 <plug_holes+0x38>
 8010172:	4b3e      	ldr	r3, [pc, #248]	@ (801026c <plug_holes+0x124>)
 8010174:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010178:	4940      	ldr	r1, [pc, #256]	@ (801027c <plug_holes+0x134>)
 801017a:	483e      	ldr	r0, [pc, #248]	@ (8010274 <plug_holes+0x12c>)
 801017c:	f00a fbb2 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	791b      	ldrb	r3, [r3, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d006      	beq.n	8010196 <plug_holes+0x4e>
 8010188:	4b38      	ldr	r3, [pc, #224]	@ (801026c <plug_holes+0x124>)
 801018a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801018e:	493c      	ldr	r1, [pc, #240]	@ (8010280 <plug_holes+0x138>)
 8010190:	4838      	ldr	r0, [pc, #224]	@ (8010274 <plug_holes+0x12c>)
 8010192:	f00a fba7 	bl	801a8e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	881b      	ldrh	r3, [r3, #0]
 801019a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801019e:	d906      	bls.n	80101ae <plug_holes+0x66>
 80101a0:	4b32      	ldr	r3, [pc, #200]	@ (801026c <plug_holes+0x124>)
 80101a2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80101a6:	4937      	ldr	r1, [pc, #220]	@ (8010284 <plug_holes+0x13c>)
 80101a8:	4832      	ldr	r0, [pc, #200]	@ (8010274 <plug_holes+0x12c>)
 80101aa:	f00a fb9b 	bl	801a8e4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	881b      	ldrh	r3, [r3, #0]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7ff ffa4 	bl	8010100 <ptr_to_mem>
 80101b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d024      	beq.n	801020c <plug_holes+0xc4>
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	791b      	ldrb	r3, [r3, #4]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d120      	bne.n	801020c <plug_holes+0xc4>
 80101ca:	4b2b      	ldr	r3, [pc, #172]	@ (8010278 <plug_holes+0x130>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d01b      	beq.n	801020c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80101d4:	4b2c      	ldr	r3, [pc, #176]	@ (8010288 <plug_holes+0x140>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d102      	bne.n	80101e4 <plug_holes+0x9c>
      lfree = mem;
 80101de:	4a2a      	ldr	r2, [pc, #168]	@ (8010288 <plug_holes+0x140>)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	881a      	ldrh	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80101f4:	d00a      	beq.n	801020c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	881b      	ldrh	r3, [r3, #0]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7ff ff80 	bl	8010100 <ptr_to_mem>
 8010200:	4604      	mov	r4, r0
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7ff ff8e 	bl	8010124 <mem_to_ptr>
 8010208:	4603      	mov	r3, r0
 801020a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	885b      	ldrh	r3, [r3, #2]
 8010210:	4618      	mov	r0, r3
 8010212:	f7ff ff75 	bl	8010100 <ptr_to_mem>
 8010216:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010218:	68ba      	ldr	r2, [r7, #8]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	429a      	cmp	r2, r3
 801021e:	d01f      	beq.n	8010260 <plug_holes+0x118>
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	791b      	ldrb	r3, [r3, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d11b      	bne.n	8010260 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010228:	4b17      	ldr	r3, [pc, #92]	@ (8010288 <plug_holes+0x140>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	429a      	cmp	r2, r3
 8010230:	d102      	bne.n	8010238 <plug_holes+0xf0>
      lfree = pmem;
 8010232:	4a15      	ldr	r2, [pc, #84]	@ (8010288 <plug_holes+0x140>)
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	881a      	ldrh	r2, [r3, #0]
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010248:	d00a      	beq.n	8010260 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	881b      	ldrh	r3, [r3, #0]
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff ff56 	bl	8010100 <ptr_to_mem>
 8010254:	4604      	mov	r4, r0
 8010256:	68b8      	ldr	r0, [r7, #8]
 8010258:	f7ff ff64 	bl	8010124 <mem_to_ptr>
 801025c:	4603      	mov	r3, r0
 801025e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010260:	bf00      	nop
 8010262:	3714      	adds	r7, #20
 8010264:	46bd      	mov	sp, r7
 8010266:	bd90      	pop	{r4, r7, pc}
 8010268:	2400e058 	.word	0x2400e058
 801026c:	0801b940 	.word	0x0801b940
 8010270:	0801b970 	.word	0x0801b970
 8010274:	0801b988 	.word	0x0801b988
 8010278:	2400e05c 	.word	0x2400e05c
 801027c:	0801b9b0 	.word	0x0801b9b0
 8010280:	0801b9cc 	.word	0x0801b9cc
 8010284:	0801b9e8 	.word	0x0801b9e8
 8010288:	2400e064 	.word	0x2400e064

0801028c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010292:	4b1d      	ldr	r3, [pc, #116]	@ (8010308 <mem_init+0x7c>)
 8010294:	4a1d      	ldr	r2, [pc, #116]	@ (801030c <mem_init+0x80>)
 8010296:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010298:	4b1b      	ldr	r3, [pc, #108]	@ (8010308 <mem_init+0x7c>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80102a4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80102b2:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 80102b6:	f7ff ff23 	bl	8010100 <ptr_to_mem>
 80102ba:	4603      	mov	r3, r0
 80102bc:	4a14      	ldr	r2, [pc, #80]	@ (8010310 <mem_init+0x84>)
 80102be:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80102c0:	4b13      	ldr	r3, [pc, #76]	@ (8010310 <mem_init+0x84>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2201      	movs	r2, #1
 80102c6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80102c8:	4b11      	ldr	r3, [pc, #68]	@ (8010310 <mem_init+0x84>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80102d0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80102d2:	4b0f      	ldr	r3, [pc, #60]	@ (8010310 <mem_init+0x84>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80102da:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80102dc:	4b0a      	ldr	r3, [pc, #40]	@ (8010308 <mem_init+0x7c>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a0c      	ldr	r2, [pc, #48]	@ (8010314 <mem_init+0x88>)
 80102e2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80102e4:	480c      	ldr	r0, [pc, #48]	@ (8010318 <mem_init+0x8c>)
 80102e6:	f00a f98d 	bl	801a604 <sys_mutex_new>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80102f0:	4b0a      	ldr	r3, [pc, #40]	@ (801031c <mem_init+0x90>)
 80102f2:	f240 221f 	movw	r2, #543	@ 0x21f
 80102f6:	490a      	ldr	r1, [pc, #40]	@ (8010320 <mem_init+0x94>)
 80102f8:	480a      	ldr	r0, [pc, #40]	@ (8010324 <mem_init+0x98>)
 80102fa:	f00a faf3 	bl	801a8e4 <iprintf>
  }
}
 80102fe:	bf00      	nop
 8010300:	3708      	adds	r7, #8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	2400e058 	.word	0x2400e058
 801030c:	30000200 	.word	0x30000200
 8010310:	2400e05c 	.word	0x2400e05c
 8010314:	2400e064 	.word	0x2400e064
 8010318:	2400e060 	.word	0x2400e060
 801031c:	0801b940 	.word	0x0801b940
 8010320:	0801ba14 	.word	0x0801ba14
 8010324:	0801b988 	.word	0x0801b988

08010328 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b086      	sub	sp, #24
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7ff fef7 	bl	8010124 <mem_to_ptr>
 8010336:	4603      	mov	r3, r0
 8010338:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	881b      	ldrh	r3, [r3, #0]
 801033e:	4618      	mov	r0, r3
 8010340:	f7ff fede 	bl	8010100 <ptr_to_mem>
 8010344:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	885b      	ldrh	r3, [r3, #2]
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff fed8 	bl	8010100 <ptr_to_mem>
 8010350:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	881b      	ldrh	r3, [r3, #0]
 8010356:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801035a:	d818      	bhi.n	801038e <mem_link_valid+0x66>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	885b      	ldrh	r3, [r3, #2]
 8010360:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010364:	d813      	bhi.n	801038e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801036a:	8afa      	ldrh	r2, [r7, #22]
 801036c:	429a      	cmp	r2, r3
 801036e:	d004      	beq.n	801037a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	881b      	ldrh	r3, [r3, #0]
 8010374:	8afa      	ldrh	r2, [r7, #22]
 8010376:	429a      	cmp	r2, r3
 8010378:	d109      	bne.n	801038e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801037a:	4b08      	ldr	r3, [pc, #32]	@ (801039c <mem_link_valid+0x74>)
 801037c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	429a      	cmp	r2, r3
 8010382:	d006      	beq.n	8010392 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	885b      	ldrh	r3, [r3, #2]
 8010388:	8afa      	ldrh	r2, [r7, #22]
 801038a:	429a      	cmp	r2, r3
 801038c:	d001      	beq.n	8010392 <mem_link_valid+0x6a>
    return 0;
 801038e:	2300      	movs	r3, #0
 8010390:	e000      	b.n	8010394 <mem_link_valid+0x6c>
  }
  return 1;
 8010392:	2301      	movs	r3, #1
}
 8010394:	4618      	mov	r0, r3
 8010396:	3718      	adds	r7, #24
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	2400e05c 	.word	0x2400e05c

080103a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b088      	sub	sp, #32
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d070      	beq.n	8010490 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f003 0303 	and.w	r3, r3, #3
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00d      	beq.n	80103d4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80103b8:	4b37      	ldr	r3, [pc, #220]	@ (8010498 <mem_free+0xf8>)
 80103ba:	f240 2273 	movw	r2, #627	@ 0x273
 80103be:	4937      	ldr	r1, [pc, #220]	@ (801049c <mem_free+0xfc>)
 80103c0:	4837      	ldr	r0, [pc, #220]	@ (80104a0 <mem_free+0x100>)
 80103c2:	f00a fa8f 	bl	801a8e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80103c6:	f00a f96f 	bl	801a6a8 <sys_arch_protect>
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f00a f979 	bl	801a6c4 <sys_arch_unprotect>
    return;
 80103d2:	e05e      	b.n	8010492 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	3b08      	subs	r3, #8
 80103d8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80103da:	4b32      	ldr	r3, [pc, #200]	@ (80104a4 <mem_free+0x104>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	69fa      	ldr	r2, [r7, #28]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d306      	bcc.n	80103f2 <mem_free+0x52>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f103 020c 	add.w	r2, r3, #12
 80103ea:	4b2f      	ldr	r3, [pc, #188]	@ (80104a8 <mem_free+0x108>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d90d      	bls.n	801040e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80103f2:	4b29      	ldr	r3, [pc, #164]	@ (8010498 <mem_free+0xf8>)
 80103f4:	f240 227f 	movw	r2, #639	@ 0x27f
 80103f8:	492c      	ldr	r1, [pc, #176]	@ (80104ac <mem_free+0x10c>)
 80103fa:	4829      	ldr	r0, [pc, #164]	@ (80104a0 <mem_free+0x100>)
 80103fc:	f00a fa72 	bl	801a8e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010400:	f00a f952 	bl	801a6a8 <sys_arch_protect>
 8010404:	6138      	str	r0, [r7, #16]
 8010406:	6938      	ldr	r0, [r7, #16]
 8010408:	f00a f95c 	bl	801a6c4 <sys_arch_unprotect>
    return;
 801040c:	e041      	b.n	8010492 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801040e:	4828      	ldr	r0, [pc, #160]	@ (80104b0 <mem_free+0x110>)
 8010410:	f00a f90e 	bl	801a630 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	791b      	ldrb	r3, [r3, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d110      	bne.n	801043e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801041c:	4b1e      	ldr	r3, [pc, #120]	@ (8010498 <mem_free+0xf8>)
 801041e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010422:	4924      	ldr	r1, [pc, #144]	@ (80104b4 <mem_free+0x114>)
 8010424:	481e      	ldr	r0, [pc, #120]	@ (80104a0 <mem_free+0x100>)
 8010426:	f00a fa5d 	bl	801a8e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801042a:	4821      	ldr	r0, [pc, #132]	@ (80104b0 <mem_free+0x110>)
 801042c:	f00a f90f 	bl	801a64e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010430:	f00a f93a 	bl	801a6a8 <sys_arch_protect>
 8010434:	6178      	str	r0, [r7, #20]
 8010436:	6978      	ldr	r0, [r7, #20]
 8010438:	f00a f944 	bl	801a6c4 <sys_arch_unprotect>
    return;
 801043c:	e029      	b.n	8010492 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801043e:	69f8      	ldr	r0, [r7, #28]
 8010440:	f7ff ff72 	bl	8010328 <mem_link_valid>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d110      	bne.n	801046c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801044a:	4b13      	ldr	r3, [pc, #76]	@ (8010498 <mem_free+0xf8>)
 801044c:	f240 2295 	movw	r2, #661	@ 0x295
 8010450:	4919      	ldr	r1, [pc, #100]	@ (80104b8 <mem_free+0x118>)
 8010452:	4813      	ldr	r0, [pc, #76]	@ (80104a0 <mem_free+0x100>)
 8010454:	f00a fa46 	bl	801a8e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010458:	4815      	ldr	r0, [pc, #84]	@ (80104b0 <mem_free+0x110>)
 801045a:	f00a f8f8 	bl	801a64e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801045e:	f00a f923 	bl	801a6a8 <sys_arch_protect>
 8010462:	61b8      	str	r0, [r7, #24]
 8010464:	69b8      	ldr	r0, [r7, #24]
 8010466:	f00a f92d 	bl	801a6c4 <sys_arch_unprotect>
    return;
 801046a:	e012      	b.n	8010492 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	2200      	movs	r2, #0
 8010470:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010472:	4b12      	ldr	r3, [pc, #72]	@ (80104bc <mem_free+0x11c>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	69fa      	ldr	r2, [r7, #28]
 8010478:	429a      	cmp	r2, r3
 801047a:	d202      	bcs.n	8010482 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801047c:	4a0f      	ldr	r2, [pc, #60]	@ (80104bc <mem_free+0x11c>)
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010482:	69f8      	ldr	r0, [r7, #28]
 8010484:	f7ff fe60 	bl	8010148 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010488:	4809      	ldr	r0, [pc, #36]	@ (80104b0 <mem_free+0x110>)
 801048a:	f00a f8e0 	bl	801a64e <sys_mutex_unlock>
 801048e:	e000      	b.n	8010492 <mem_free+0xf2>
    return;
 8010490:	bf00      	nop
}
 8010492:	3720      	adds	r7, #32
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	0801b940 	.word	0x0801b940
 801049c:	0801ba30 	.word	0x0801ba30
 80104a0:	0801b988 	.word	0x0801b988
 80104a4:	2400e058 	.word	0x2400e058
 80104a8:	2400e05c 	.word	0x2400e05c
 80104ac:	0801ba54 	.word	0x0801ba54
 80104b0:	2400e060 	.word	0x2400e060
 80104b4:	0801ba70 	.word	0x0801ba70
 80104b8:	0801ba98 	.word	0x0801ba98
 80104bc:	2400e064 	.word	0x2400e064

080104c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	460b      	mov	r3, r1
 80104ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80104cc:	887b      	ldrh	r3, [r7, #2]
 80104ce:	3303      	adds	r3, #3
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	f023 0303 	bic.w	r3, r3, #3
 80104d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80104d8:	8bfb      	ldrh	r3, [r7, #30]
 80104da:	2b0b      	cmp	r3, #11
 80104dc:	d801      	bhi.n	80104e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80104de:	230c      	movs	r3, #12
 80104e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80104e2:	8bfb      	ldrh	r3, [r7, #30]
 80104e4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80104e8:	d803      	bhi.n	80104f2 <mem_trim+0x32>
 80104ea:	8bfa      	ldrh	r2, [r7, #30]
 80104ec:	887b      	ldrh	r3, [r7, #2]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d201      	bcs.n	80104f6 <mem_trim+0x36>
    return NULL;
 80104f2:	2300      	movs	r3, #0
 80104f4:	e0d8      	b.n	80106a8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80104f6:	4b6e      	ldr	r3, [pc, #440]	@ (80106b0 <mem_trim+0x1f0>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d304      	bcc.n	801050a <mem_trim+0x4a>
 8010500:	4b6c      	ldr	r3, [pc, #432]	@ (80106b4 <mem_trim+0x1f4>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	429a      	cmp	r2, r3
 8010508:	d306      	bcc.n	8010518 <mem_trim+0x58>
 801050a:	4b6b      	ldr	r3, [pc, #428]	@ (80106b8 <mem_trim+0x1f8>)
 801050c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010510:	496a      	ldr	r1, [pc, #424]	@ (80106bc <mem_trim+0x1fc>)
 8010512:	486b      	ldr	r0, [pc, #428]	@ (80106c0 <mem_trim+0x200>)
 8010514:	f00a f9e6 	bl	801a8e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010518:	4b65      	ldr	r3, [pc, #404]	@ (80106b0 <mem_trim+0x1f0>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	429a      	cmp	r2, r3
 8010520:	d304      	bcc.n	801052c <mem_trim+0x6c>
 8010522:	4b64      	ldr	r3, [pc, #400]	@ (80106b4 <mem_trim+0x1f4>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	429a      	cmp	r2, r3
 801052a:	d307      	bcc.n	801053c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801052c:	f00a f8bc 	bl	801a6a8 <sys_arch_protect>
 8010530:	60b8      	str	r0, [r7, #8]
 8010532:	68b8      	ldr	r0, [r7, #8]
 8010534:	f00a f8c6 	bl	801a6c4 <sys_arch_unprotect>
    return rmem;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	e0b5      	b.n	80106a8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	3b08      	subs	r3, #8
 8010540:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010542:	69b8      	ldr	r0, [r7, #24]
 8010544:	f7ff fdee 	bl	8010124 <mem_to_ptr>
 8010548:	4603      	mov	r3, r0
 801054a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	881a      	ldrh	r2, [r3, #0]
 8010550:	8afb      	ldrh	r3, [r7, #22]
 8010552:	1ad3      	subs	r3, r2, r3
 8010554:	b29b      	uxth	r3, r3
 8010556:	3b08      	subs	r3, #8
 8010558:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801055a:	8bfa      	ldrh	r2, [r7, #30]
 801055c:	8abb      	ldrh	r3, [r7, #20]
 801055e:	429a      	cmp	r2, r3
 8010560:	d906      	bls.n	8010570 <mem_trim+0xb0>
 8010562:	4b55      	ldr	r3, [pc, #340]	@ (80106b8 <mem_trim+0x1f8>)
 8010564:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8010568:	4956      	ldr	r1, [pc, #344]	@ (80106c4 <mem_trim+0x204>)
 801056a:	4855      	ldr	r0, [pc, #340]	@ (80106c0 <mem_trim+0x200>)
 801056c:	f00a f9ba 	bl	801a8e4 <iprintf>
  if (newsize > size) {
 8010570:	8bfa      	ldrh	r2, [r7, #30]
 8010572:	8abb      	ldrh	r3, [r7, #20]
 8010574:	429a      	cmp	r2, r3
 8010576:	d901      	bls.n	801057c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010578:	2300      	movs	r3, #0
 801057a:	e095      	b.n	80106a8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801057c:	8bfa      	ldrh	r2, [r7, #30]
 801057e:	8abb      	ldrh	r3, [r7, #20]
 8010580:	429a      	cmp	r2, r3
 8010582:	d101      	bne.n	8010588 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	e08f      	b.n	80106a8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010588:	484f      	ldr	r0, [pc, #316]	@ (80106c8 <mem_trim+0x208>)
 801058a:	f00a f851 	bl	801a630 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	881b      	ldrh	r3, [r3, #0]
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff fdb4 	bl	8010100 <ptr_to_mem>
 8010598:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	791b      	ldrb	r3, [r3, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d13f      	bne.n	8010622 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	881b      	ldrh	r3, [r3, #0]
 80105a6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80105aa:	d106      	bne.n	80105ba <mem_trim+0xfa>
 80105ac:	4b42      	ldr	r3, [pc, #264]	@ (80106b8 <mem_trim+0x1f8>)
 80105ae:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80105b2:	4946      	ldr	r1, [pc, #280]	@ (80106cc <mem_trim+0x20c>)
 80105b4:	4842      	ldr	r0, [pc, #264]	@ (80106c0 <mem_trim+0x200>)
 80105b6:	f00a f995 	bl	801a8e4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	881b      	ldrh	r3, [r3, #0]
 80105be:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80105c0:	8afa      	ldrh	r2, [r7, #22]
 80105c2:	8bfb      	ldrh	r3, [r7, #30]
 80105c4:	4413      	add	r3, r2
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	3308      	adds	r3, #8
 80105ca:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80105cc:	4b40      	ldr	r3, [pc, #256]	@ (80106d0 <mem_trim+0x210>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	693a      	ldr	r2, [r7, #16]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d106      	bne.n	80105e4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80105d6:	89fb      	ldrh	r3, [r7, #14]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7ff fd91 	bl	8010100 <ptr_to_mem>
 80105de:	4603      	mov	r3, r0
 80105e0:	4a3b      	ldr	r2, [pc, #236]	@ (80106d0 <mem_trim+0x210>)
 80105e2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80105e4:	89fb      	ldrh	r3, [r7, #14]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7ff fd8a 	bl	8010100 <ptr_to_mem>
 80105ec:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	2200      	movs	r2, #0
 80105f2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	89ba      	ldrh	r2, [r7, #12]
 80105f8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	8afa      	ldrh	r2, [r7, #22]
 80105fe:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	89fa      	ldrh	r2, [r7, #14]
 8010604:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	881b      	ldrh	r3, [r3, #0]
 801060a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801060e:	d047      	beq.n	80106a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	881b      	ldrh	r3, [r3, #0]
 8010614:	4618      	mov	r0, r3
 8010616:	f7ff fd73 	bl	8010100 <ptr_to_mem>
 801061a:	4602      	mov	r2, r0
 801061c:	89fb      	ldrh	r3, [r7, #14]
 801061e:	8053      	strh	r3, [r2, #2]
 8010620:	e03e      	b.n	80106a0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010622:	8bfb      	ldrh	r3, [r7, #30]
 8010624:	f103 0214 	add.w	r2, r3, #20
 8010628:	8abb      	ldrh	r3, [r7, #20]
 801062a:	429a      	cmp	r2, r3
 801062c:	d838      	bhi.n	80106a0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801062e:	8afa      	ldrh	r2, [r7, #22]
 8010630:	8bfb      	ldrh	r3, [r7, #30]
 8010632:	4413      	add	r3, r2
 8010634:	b29b      	uxth	r3, r3
 8010636:	3308      	adds	r3, #8
 8010638:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010642:	d106      	bne.n	8010652 <mem_trim+0x192>
 8010644:	4b1c      	ldr	r3, [pc, #112]	@ (80106b8 <mem_trim+0x1f8>)
 8010646:	f240 3216 	movw	r2, #790	@ 0x316
 801064a:	4920      	ldr	r1, [pc, #128]	@ (80106cc <mem_trim+0x20c>)
 801064c:	481c      	ldr	r0, [pc, #112]	@ (80106c0 <mem_trim+0x200>)
 801064e:	f00a f949 	bl	801a8e4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010652:	89fb      	ldrh	r3, [r7, #14]
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff fd53 	bl	8010100 <ptr_to_mem>
 801065a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801065c:	4b1c      	ldr	r3, [pc, #112]	@ (80106d0 <mem_trim+0x210>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	693a      	ldr	r2, [r7, #16]
 8010662:	429a      	cmp	r2, r3
 8010664:	d202      	bcs.n	801066c <mem_trim+0x1ac>
      lfree = mem2;
 8010666:	4a1a      	ldr	r2, [pc, #104]	@ (80106d0 <mem_trim+0x210>)
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	2200      	movs	r2, #0
 8010670:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	881a      	ldrh	r2, [r3, #0]
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	8afa      	ldrh	r2, [r7, #22]
 801067e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010680:	69bb      	ldr	r3, [r7, #24]
 8010682:	89fa      	ldrh	r2, [r7, #14]
 8010684:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801068e:	d007      	beq.n	80106a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	4618      	mov	r0, r3
 8010696:	f7ff fd33 	bl	8010100 <ptr_to_mem>
 801069a:	4602      	mov	r2, r0
 801069c:	89fb      	ldrh	r3, [r7, #14]
 801069e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80106a0:	4809      	ldr	r0, [pc, #36]	@ (80106c8 <mem_trim+0x208>)
 80106a2:	f009 ffd4 	bl	801a64e <sys_mutex_unlock>
  return rmem;
 80106a6:	687b      	ldr	r3, [r7, #4]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3720      	adds	r7, #32
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	2400e058 	.word	0x2400e058
 80106b4:	2400e05c 	.word	0x2400e05c
 80106b8:	0801b940 	.word	0x0801b940
 80106bc:	0801bacc 	.word	0x0801bacc
 80106c0:	0801b988 	.word	0x0801b988
 80106c4:	0801bae4 	.word	0x0801bae4
 80106c8:	2400e060 	.word	0x2400e060
 80106cc:	0801bb04 	.word	0x0801bb04
 80106d0:	2400e064 	.word	0x2400e064

080106d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b088      	sub	sp, #32
 80106d8:	af00      	add	r7, sp, #0
 80106da:	4603      	mov	r3, r0
 80106dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80106de:	88fb      	ldrh	r3, [r7, #6]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d101      	bne.n	80106e8 <mem_malloc+0x14>
    return NULL;
 80106e4:	2300      	movs	r3, #0
 80106e6:	e0e2      	b.n	80108ae <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	3303      	adds	r3, #3
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	f023 0303 	bic.w	r3, r3, #3
 80106f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80106f4:	8bbb      	ldrh	r3, [r7, #28]
 80106f6:	2b0b      	cmp	r3, #11
 80106f8:	d801      	bhi.n	80106fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80106fa:	230c      	movs	r3, #12
 80106fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80106fe:	8bbb      	ldrh	r3, [r7, #28]
 8010700:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010704:	d803      	bhi.n	801070e <mem_malloc+0x3a>
 8010706:	8bba      	ldrh	r2, [r7, #28]
 8010708:	88fb      	ldrh	r3, [r7, #6]
 801070a:	429a      	cmp	r2, r3
 801070c:	d201      	bcs.n	8010712 <mem_malloc+0x3e>
    return NULL;
 801070e:	2300      	movs	r3, #0
 8010710:	e0cd      	b.n	80108ae <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010712:	4869      	ldr	r0, [pc, #420]	@ (80108b8 <mem_malloc+0x1e4>)
 8010714:	f009 ff8c 	bl	801a630 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010718:	4b68      	ldr	r3, [pc, #416]	@ (80108bc <mem_malloc+0x1e8>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4618      	mov	r0, r3
 801071e:	f7ff fd01 	bl	8010124 <mem_to_ptr>
 8010722:	4603      	mov	r3, r0
 8010724:	83fb      	strh	r3, [r7, #30]
 8010726:	e0b7      	b.n	8010898 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010728:	8bfb      	ldrh	r3, [r7, #30]
 801072a:	4618      	mov	r0, r3
 801072c:	f7ff fce8 	bl	8010100 <ptr_to_mem>
 8010730:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	791b      	ldrb	r3, [r3, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	f040 80a7 	bne.w	801088a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	881b      	ldrh	r3, [r3, #0]
 8010740:	461a      	mov	r2, r3
 8010742:	8bfb      	ldrh	r3, [r7, #30]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	f1a3 0208 	sub.w	r2, r3, #8
 801074a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801074c:	429a      	cmp	r2, r3
 801074e:	f0c0 809c 	bcc.w	801088a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	461a      	mov	r2, r3
 8010758:	8bfb      	ldrh	r3, [r7, #30]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	f1a3 0208 	sub.w	r2, r3, #8
 8010760:	8bbb      	ldrh	r3, [r7, #28]
 8010762:	3314      	adds	r3, #20
 8010764:	429a      	cmp	r2, r3
 8010766:	d333      	bcc.n	80107d0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010768:	8bfa      	ldrh	r2, [r7, #30]
 801076a:	8bbb      	ldrh	r3, [r7, #28]
 801076c:	4413      	add	r3, r2
 801076e:	b29b      	uxth	r3, r3
 8010770:	3308      	adds	r3, #8
 8010772:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010774:	8a7b      	ldrh	r3, [r7, #18]
 8010776:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801077a:	d106      	bne.n	801078a <mem_malloc+0xb6>
 801077c:	4b50      	ldr	r3, [pc, #320]	@ (80108c0 <mem_malloc+0x1ec>)
 801077e:	f240 3287 	movw	r2, #903	@ 0x387
 8010782:	4950      	ldr	r1, [pc, #320]	@ (80108c4 <mem_malloc+0x1f0>)
 8010784:	4850      	ldr	r0, [pc, #320]	@ (80108c8 <mem_malloc+0x1f4>)
 8010786:	f00a f8ad 	bl	801a8e4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801078a:	8a7b      	ldrh	r3, [r7, #18]
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff fcb7 	bl	8010100 <ptr_to_mem>
 8010792:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	881a      	ldrh	r2, [r3, #0]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	8bfa      	ldrh	r2, [r7, #30]
 80107a6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	8a7a      	ldrh	r2, [r7, #18]
 80107ac:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	2201      	movs	r2, #1
 80107b2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	881b      	ldrh	r3, [r3, #0]
 80107b8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80107bc:	d00b      	beq.n	80107d6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	881b      	ldrh	r3, [r3, #0]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff fc9c 	bl	8010100 <ptr_to_mem>
 80107c8:	4602      	mov	r2, r0
 80107ca:	8a7b      	ldrh	r3, [r7, #18]
 80107cc:	8053      	strh	r3, [r2, #2]
 80107ce:	e002      	b.n	80107d6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	2201      	movs	r2, #1
 80107d4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80107d6:	4b39      	ldr	r3, [pc, #228]	@ (80108bc <mem_malloc+0x1e8>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d127      	bne.n	8010830 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80107e0:	4b36      	ldr	r3, [pc, #216]	@ (80108bc <mem_malloc+0x1e8>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80107e6:	e005      	b.n	80107f4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	881b      	ldrh	r3, [r3, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ff fc87 	bl	8010100 <ptr_to_mem>
 80107f2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	791b      	ldrb	r3, [r3, #4]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d004      	beq.n	8010806 <mem_malloc+0x132>
 80107fc:	4b33      	ldr	r3, [pc, #204]	@ (80108cc <mem_malloc+0x1f8>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	69ba      	ldr	r2, [r7, #24]
 8010802:	429a      	cmp	r2, r3
 8010804:	d1f0      	bne.n	80107e8 <mem_malloc+0x114>
          }
          lfree = cur;
 8010806:	4a2d      	ldr	r2, [pc, #180]	@ (80108bc <mem_malloc+0x1e8>)
 8010808:	69bb      	ldr	r3, [r7, #24]
 801080a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801080c:	4b2b      	ldr	r3, [pc, #172]	@ (80108bc <mem_malloc+0x1e8>)
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	4b2e      	ldr	r3, [pc, #184]	@ (80108cc <mem_malloc+0x1f8>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	429a      	cmp	r2, r3
 8010816:	d00b      	beq.n	8010830 <mem_malloc+0x15c>
 8010818:	4b28      	ldr	r3, [pc, #160]	@ (80108bc <mem_malloc+0x1e8>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	791b      	ldrb	r3, [r3, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d006      	beq.n	8010830 <mem_malloc+0x15c>
 8010822:	4b27      	ldr	r3, [pc, #156]	@ (80108c0 <mem_malloc+0x1ec>)
 8010824:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8010828:	4929      	ldr	r1, [pc, #164]	@ (80108d0 <mem_malloc+0x1fc>)
 801082a:	4827      	ldr	r0, [pc, #156]	@ (80108c8 <mem_malloc+0x1f4>)
 801082c:	f00a f85a 	bl	801a8e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010830:	4821      	ldr	r0, [pc, #132]	@ (80108b8 <mem_malloc+0x1e4>)
 8010832:	f009 ff0c 	bl	801a64e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010836:	8bba      	ldrh	r2, [r7, #28]
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	4413      	add	r3, r2
 801083c:	3308      	adds	r3, #8
 801083e:	4a23      	ldr	r2, [pc, #140]	@ (80108cc <mem_malloc+0x1f8>)
 8010840:	6812      	ldr	r2, [r2, #0]
 8010842:	4293      	cmp	r3, r2
 8010844:	d906      	bls.n	8010854 <mem_malloc+0x180>
 8010846:	4b1e      	ldr	r3, [pc, #120]	@ (80108c0 <mem_malloc+0x1ec>)
 8010848:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801084c:	4921      	ldr	r1, [pc, #132]	@ (80108d4 <mem_malloc+0x200>)
 801084e:	481e      	ldr	r0, [pc, #120]	@ (80108c8 <mem_malloc+0x1f4>)
 8010850:	f00a f848 	bl	801a8e4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	f003 0303 	and.w	r3, r3, #3
 801085a:	2b00      	cmp	r3, #0
 801085c:	d006      	beq.n	801086c <mem_malloc+0x198>
 801085e:	4b18      	ldr	r3, [pc, #96]	@ (80108c0 <mem_malloc+0x1ec>)
 8010860:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8010864:	491c      	ldr	r1, [pc, #112]	@ (80108d8 <mem_malloc+0x204>)
 8010866:	4818      	ldr	r0, [pc, #96]	@ (80108c8 <mem_malloc+0x1f4>)
 8010868:	f00a f83c 	bl	801a8e4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	f003 0303 	and.w	r3, r3, #3
 8010872:	2b00      	cmp	r3, #0
 8010874:	d006      	beq.n	8010884 <mem_malloc+0x1b0>
 8010876:	4b12      	ldr	r3, [pc, #72]	@ (80108c0 <mem_malloc+0x1ec>)
 8010878:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801087c:	4917      	ldr	r1, [pc, #92]	@ (80108dc <mem_malloc+0x208>)
 801087e:	4812      	ldr	r0, [pc, #72]	@ (80108c8 <mem_malloc+0x1f4>)
 8010880:	f00a f830 	bl	801a8e4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	3308      	adds	r3, #8
 8010888:	e011      	b.n	80108ae <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801088a:	8bfb      	ldrh	r3, [r7, #30]
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff fc37 	bl	8010100 <ptr_to_mem>
 8010892:	4603      	mov	r3, r0
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010898:	8bfa      	ldrh	r2, [r7, #30]
 801089a:	8bbb      	ldrh	r3, [r7, #28]
 801089c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 80108a0:	429a      	cmp	r2, r3
 80108a2:	f4ff af41 	bcc.w	8010728 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80108a6:	4804      	ldr	r0, [pc, #16]	@ (80108b8 <mem_malloc+0x1e4>)
 80108a8:	f009 fed1 	bl	801a64e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	2400e060 	.word	0x2400e060
 80108bc:	2400e064 	.word	0x2400e064
 80108c0:	0801b940 	.word	0x0801b940
 80108c4:	0801bb04 	.word	0x0801bb04
 80108c8:	0801b988 	.word	0x0801b988
 80108cc:	2400e05c 	.word	0x2400e05c
 80108d0:	0801bb18 	.word	0x0801bb18
 80108d4:	0801bb34 	.word	0x0801bb34
 80108d8:	0801bb64 	.word	0x0801bb64
 80108dc:	0801bb94 	.word	0x0801bb94

080108e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	3303      	adds	r3, #3
 80108f6:	f023 0303 	bic.w	r3, r3, #3
 80108fa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80108fc:	2300      	movs	r3, #0
 80108fe:	60fb      	str	r3, [r7, #12]
 8010900:	e011      	b.n	8010926 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	689b      	ldr	r3, [r3, #8]
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	461a      	mov	r2, r3
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	4413      	add	r3, r2
 801091e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	3301      	adds	r3, #1
 8010924:	60fb      	str	r3, [r7, #12]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	885b      	ldrh	r3, [r3, #2]
 801092a:	461a      	mov	r2, r3
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	4293      	cmp	r3, r2
 8010930:	dbe7      	blt.n	8010902 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010932:	bf00      	nop
 8010934:	bf00      	nop
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010946:	2300      	movs	r3, #0
 8010948:	80fb      	strh	r3, [r7, #6]
 801094a:	e009      	b.n	8010960 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801094c:	88fb      	ldrh	r3, [r7, #6]
 801094e:	4a08      	ldr	r2, [pc, #32]	@ (8010970 <memp_init+0x30>)
 8010950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010954:	4618      	mov	r0, r3
 8010956:	f7ff ffc3 	bl	80108e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801095a:	88fb      	ldrh	r3, [r7, #6]
 801095c:	3301      	adds	r3, #1
 801095e:	80fb      	strh	r3, [r7, #6]
 8010960:	88fb      	ldrh	r3, [r7, #6]
 8010962:	2b0d      	cmp	r3, #13
 8010964:	d9f2      	bls.n	801094c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010966:	bf00      	nop
 8010968:	bf00      	nop
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	0801e4c8 	.word	0x0801e4c8

08010974 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801097c:	f009 fe94 	bl	801a6a8 <sys_arch_protect>
 8010980:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d015      	beq.n	80109bc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	6812      	ldr	r2, [r2, #0]
 8010998:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	f003 0303 	and.w	r3, r3, #3
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d006      	beq.n	80109b2 <do_memp_malloc_pool+0x3e>
 80109a4:	4b09      	ldr	r3, [pc, #36]	@ (80109cc <do_memp_malloc_pool+0x58>)
 80109a6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80109aa:	4909      	ldr	r1, [pc, #36]	@ (80109d0 <do_memp_malloc_pool+0x5c>)
 80109ac:	4809      	ldr	r0, [pc, #36]	@ (80109d4 <do_memp_malloc_pool+0x60>)
 80109ae:	f009 ff99 	bl	801a8e4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	f009 fe86 	bl	801a6c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	e003      	b.n	80109c4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f009 fe81 	bl	801a6c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3710      	adds	r7, #16
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	0801bbb8 	.word	0x0801bbb8
 80109d0:	0801bbe8 	.word	0x0801bbe8
 80109d4:	0801bc0c 	.word	0x0801bc0c

080109d8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <memp_malloc_pool+0x1c>
 80109e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010a10 <memp_malloc_pool+0x38>)
 80109e8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80109ec:	4909      	ldr	r1, [pc, #36]	@ (8010a14 <memp_malloc_pool+0x3c>)
 80109ee:	480a      	ldr	r0, [pc, #40]	@ (8010a18 <memp_malloc_pool+0x40>)
 80109f0:	f009 ff78 	bl	801a8e4 <iprintf>
  if (desc == NULL) {
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d101      	bne.n	80109fe <memp_malloc_pool+0x26>
    return NULL;
 80109fa:	2300      	movs	r3, #0
 80109fc:	e003      	b.n	8010a06 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f7ff ffb8 	bl	8010974 <do_memp_malloc_pool>
 8010a04:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	0801bbb8 	.word	0x0801bbb8
 8010a14:	0801bc34 	.word	0x0801bc34
 8010a18:	0801bc0c 	.word	0x0801bc0c

08010a1c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	4603      	mov	r3, r0
 8010a24:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010a26:	79fb      	ldrb	r3, [r7, #7]
 8010a28:	2b0d      	cmp	r3, #13
 8010a2a:	d908      	bls.n	8010a3e <memp_malloc+0x22>
 8010a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a58 <memp_malloc+0x3c>)
 8010a2e:	f240 1257 	movw	r2, #343	@ 0x157
 8010a32:	490a      	ldr	r1, [pc, #40]	@ (8010a5c <memp_malloc+0x40>)
 8010a34:	480a      	ldr	r0, [pc, #40]	@ (8010a60 <memp_malloc+0x44>)
 8010a36:	f009 ff55 	bl	801a8e4 <iprintf>
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	e008      	b.n	8010a50 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010a3e:	79fb      	ldrb	r3, [r7, #7]
 8010a40:	4a08      	ldr	r2, [pc, #32]	@ (8010a64 <memp_malloc+0x48>)
 8010a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff ff94 	bl	8010974 <do_memp_malloc_pool>
 8010a4c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3710      	adds	r7, #16
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	0801bbb8 	.word	0x0801bbb8
 8010a5c:	0801bc48 	.word	0x0801bc48
 8010a60:	0801bc0c 	.word	0x0801bc0c
 8010a64:	0801e4c8 	.word	0x0801e4c8

08010a68 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	f003 0303 	and.w	r3, r3, #3
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d006      	beq.n	8010a8a <do_memp_free_pool+0x22>
 8010a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8010ab4 <do_memp_free_pool+0x4c>)
 8010a7e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8010a82:	490d      	ldr	r1, [pc, #52]	@ (8010ab8 <do_memp_free_pool+0x50>)
 8010a84:	480d      	ldr	r0, [pc, #52]	@ (8010abc <do_memp_free_pool+0x54>)
 8010a86:	f009 ff2d 	bl	801a8e4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010a8e:	f009 fe0b 	bl	801a6a8 <sys_arch_protect>
 8010a92:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	689b      	ldr	r3, [r3, #8]
 8010aa2:	68fa      	ldr	r2, [r7, #12]
 8010aa4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010aa6:	68b8      	ldr	r0, [r7, #8]
 8010aa8:	f009 fe0c 	bl	801a6c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010aac:	bf00      	nop
 8010aae:	3710      	adds	r7, #16
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	0801bbb8 	.word	0x0801bbb8
 8010ab8:	0801bc68 	.word	0x0801bc68
 8010abc:	0801bc0c 	.word	0x0801bc0c

08010ac0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d106      	bne.n	8010ade <memp_free_pool+0x1e>
 8010ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8010afc <memp_free_pool+0x3c>)
 8010ad2:	f240 1295 	movw	r2, #405	@ 0x195
 8010ad6:	490a      	ldr	r1, [pc, #40]	@ (8010b00 <memp_free_pool+0x40>)
 8010ad8:	480a      	ldr	r0, [pc, #40]	@ (8010b04 <memp_free_pool+0x44>)
 8010ada:	f009 ff03 	bl	801a8e4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d007      	beq.n	8010af4 <memp_free_pool+0x34>
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d004      	beq.n	8010af4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010aea:	6839      	ldr	r1, [r7, #0]
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7ff ffbb 	bl	8010a68 <do_memp_free_pool>
 8010af2:	e000      	b.n	8010af6 <memp_free_pool+0x36>
    return;
 8010af4:	bf00      	nop
}
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	0801bbb8 	.word	0x0801bbb8
 8010b00:	0801bc34 	.word	0x0801bc34
 8010b04:	0801bc0c 	.word	0x0801bc0c

08010b08 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	4603      	mov	r3, r0
 8010b10:	6039      	str	r1, [r7, #0]
 8010b12:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010b14:	79fb      	ldrb	r3, [r7, #7]
 8010b16:	2b0d      	cmp	r3, #13
 8010b18:	d907      	bls.n	8010b2a <memp_free+0x22>
 8010b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010b4c <memp_free+0x44>)
 8010b1c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010b20:	490b      	ldr	r1, [pc, #44]	@ (8010b50 <memp_free+0x48>)
 8010b22:	480c      	ldr	r0, [pc, #48]	@ (8010b54 <memp_free+0x4c>)
 8010b24:	f009 fede 	bl	801a8e4 <iprintf>
 8010b28:	e00c      	b.n	8010b44 <memp_free+0x3c>

  if (mem == NULL) {
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d008      	beq.n	8010b42 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010b30:	79fb      	ldrb	r3, [r7, #7]
 8010b32:	4a09      	ldr	r2, [pc, #36]	@ (8010b58 <memp_free+0x50>)
 8010b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b38:	6839      	ldr	r1, [r7, #0]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7ff ff94 	bl	8010a68 <do_memp_free_pool>
 8010b40:	e000      	b.n	8010b44 <memp_free+0x3c>
    return;
 8010b42:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	0801bbb8 	.word	0x0801bbb8
 8010b50:	0801bc88 	.word	0x0801bc88
 8010b54:	0801bc0c 	.word	0x0801bc0c
 8010b58:	0801e4c8 	.word	0x0801e4c8

08010b5c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010b60:	bf00      	nop
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
	...

08010b6c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b086      	sub	sp, #24
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
 8010b78:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d108      	bne.n	8010b92 <netif_add+0x26>
 8010b80:	4b57      	ldr	r3, [pc, #348]	@ (8010ce0 <netif_add+0x174>)
 8010b82:	f240 1227 	movw	r2, #295	@ 0x127
 8010b86:	4957      	ldr	r1, [pc, #348]	@ (8010ce4 <netif_add+0x178>)
 8010b88:	4857      	ldr	r0, [pc, #348]	@ (8010ce8 <netif_add+0x17c>)
 8010b8a:	f009 feab 	bl	801a8e4 <iprintf>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e0a2      	b.n	8010cd8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d108      	bne.n	8010baa <netif_add+0x3e>
 8010b98:	4b51      	ldr	r3, [pc, #324]	@ (8010ce0 <netif_add+0x174>)
 8010b9a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8010b9e:	4953      	ldr	r1, [pc, #332]	@ (8010cec <netif_add+0x180>)
 8010ba0:	4851      	ldr	r0, [pc, #324]	@ (8010ce8 <netif_add+0x17c>)
 8010ba2:	f009 fe9f 	bl	801a8e4 <iprintf>
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	e096      	b.n	8010cd8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d101      	bne.n	8010bb4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8010cf0 <netif_add+0x184>)
 8010bb2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d101      	bne.n	8010bbe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010bba:	4b4d      	ldr	r3, [pc, #308]	@ (8010cf0 <netif_add+0x184>)
 8010bbc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d101      	bne.n	8010bc8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8010cf0 <netif_add+0x184>)
 8010bc6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	4a45      	ldr	r2, [pc, #276]	@ (8010cf4 <netif_add+0x188>)
 8010bde:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6a3a      	ldr	r2, [r7, #32]
 8010bf8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8010cf8 <netif_add+0x18c>)
 8010bfc:	781a      	ldrb	r2, [r3, #0]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c08:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	68b9      	ldr	r1, [r7, #8]
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f000 f917 	bl	8010e44 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	4798      	blx	r3
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d001      	beq.n	8010c26 <netif_add+0xba>
    return NULL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	e058      	b.n	8010cd8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c2c:	2bff      	cmp	r3, #255	@ 0xff
 8010c2e:	d103      	bne.n	8010c38 <netif_add+0xcc>
        netif->num = 0;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8010cfc <netif_add+0x190>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	617b      	str	r3, [r7, #20]
 8010c42:	e02b      	b.n	8010c9c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d106      	bne.n	8010c5a <netif_add+0xee>
 8010c4c:	4b24      	ldr	r3, [pc, #144]	@ (8010ce0 <netif_add+0x174>)
 8010c4e:	f240 128b 	movw	r2, #395	@ 0x18b
 8010c52:	492b      	ldr	r1, [pc, #172]	@ (8010d00 <netif_add+0x194>)
 8010c54:	4824      	ldr	r0, [pc, #144]	@ (8010ce8 <netif_add+0x17c>)
 8010c56:	f009 fe45 	bl	801a8e4 <iprintf>
        num_netifs++;
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	2bff      	cmp	r3, #255	@ 0xff
 8010c64:	dd06      	ble.n	8010c74 <netif_add+0x108>
 8010c66:	4b1e      	ldr	r3, [pc, #120]	@ (8010ce0 <netif_add+0x174>)
 8010c68:	f240 128d 	movw	r2, #397	@ 0x18d
 8010c6c:	4925      	ldr	r1, [pc, #148]	@ (8010d04 <netif_add+0x198>)
 8010c6e:	481e      	ldr	r0, [pc, #120]	@ (8010ce8 <netif_add+0x17c>)
 8010c70:	f009 fe38 	bl	801a8e4 <iprintf>
        if (netif2->num == netif->num) {
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d108      	bne.n	8010c96 <netif_add+0x12a>
          netif->num++;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	b2da      	uxtb	r2, r3
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8010c94:	e005      	b.n	8010ca2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	617b      	str	r3, [r7, #20]
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1d0      	bne.n	8010c44 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d1be      	bne.n	8010c26 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010cae:	2bfe      	cmp	r3, #254	@ 0xfe
 8010cb0:	d103      	bne.n	8010cba <netif_add+0x14e>
    netif_num = 0;
 8010cb2:	4b11      	ldr	r3, [pc, #68]	@ (8010cf8 <netif_add+0x18c>)
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	701a      	strb	r2, [r3, #0]
 8010cb8:	e006      	b.n	8010cc8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8010cf8 <netif_add+0x18c>)
 8010cc6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8010cfc <netif_add+0x190>)
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8010cfc <netif_add+0x190>)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3718      	adds	r7, #24
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	0801bca4 	.word	0x0801bca4
 8010ce4:	0801bd38 	.word	0x0801bd38
 8010ce8:	0801bcf4 	.word	0x0801bcf4
 8010cec:	0801bd54 	.word	0x0801bd54
 8010cf0:	0801e540 	.word	0x0801e540
 8010cf4:	0801111f 	.word	0x0801111f
 8010cf8:	24014b74 	.word	0x24014b74
 8010cfc:	24014b6c 	.word	0x24014b6c
 8010d00:	0801bd78 	.word	0x0801bd78
 8010d04:	0801bd8c 	.word	0x0801bd8c

08010d08 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f002 fc87 	bl	8013628 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010d1a:	6839      	ldr	r1, [r7, #0]
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f007 f8c7 	bl	8017eb0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8010d22:	6839      	ldr	r1, [r7, #0]
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f001 f901 	bl	8011f2c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 8010d2a:	bf00      	nop
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <netif_do_set_ipaddr+0x20>
 8010d46:	4b1d      	ldr	r3, [pc, #116]	@ (8010dbc <netif_do_set_ipaddr+0x88>)
 8010d48:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8010d4c:	491c      	ldr	r1, [pc, #112]	@ (8010dc0 <netif_do_set_ipaddr+0x8c>)
 8010d4e:	481d      	ldr	r0, [pc, #116]	@ (8010dc4 <netif_do_set_ipaddr+0x90>)
 8010d50:	f009 fdc8 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d106      	bne.n	8010d68 <netif_do_set_ipaddr+0x34>
 8010d5a:	4b18      	ldr	r3, [pc, #96]	@ (8010dbc <netif_do_set_ipaddr+0x88>)
 8010d5c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8010d60:	4917      	ldr	r1, [pc, #92]	@ (8010dc0 <netif_do_set_ipaddr+0x8c>)
 8010d62:	4818      	ldr	r0, [pc, #96]	@ (8010dc4 <netif_do_set_ipaddr+0x90>)
 8010d64:	f009 fdbe 	bl	801a8e4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d01c      	beq.n	8010db0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	3304      	adds	r3, #4
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010d86:	f107 0314 	add.w	r3, r7, #20
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7ff ffbb 	bl	8010d08 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <netif_do_set_ipaddr+0x6a>
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	e000      	b.n	8010da0 <netif_do_set_ipaddr+0x6c>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010da4:	2101      	movs	r1, #1
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f000 f8d2 	bl	8010f50 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010dac:	2301      	movs	r3, #1
 8010dae:	e000      	b.n	8010db2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3718      	adds	r7, #24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	0801bca4 	.word	0x0801bca4
 8010dc0:	0801bdbc 	.word	0x0801bdbc
 8010dc4:	0801bcf4 	.word	0x0801bcf4

08010dc8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b085      	sub	sp, #20
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	681a      	ldr	r2, [r3, #0]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	3308      	adds	r3, #8
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d00a      	beq.n	8010df8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d002      	beq.n	8010dee <netif_do_set_netmask+0x26>
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	e000      	b.n	8010df0 <netif_do_set_netmask+0x28>
 8010dee:	2300      	movs	r3, #0
 8010df0:	68fa      	ldr	r2, [r7, #12]
 8010df2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010df4:	2301      	movs	r3, #1
 8010df6:	e000      	b.n	8010dfa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010df8:	2300      	movs	r3, #0
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3714      	adds	r7, #20
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr

08010e06 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010e06:	b480      	push	{r7}
 8010e08:	b085      	sub	sp, #20
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	60f8      	str	r0, [r7, #12]
 8010e0e:	60b9      	str	r1, [r7, #8]
 8010e10:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	330c      	adds	r3, #12
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d00a      	beq.n	8010e36 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d002      	beq.n	8010e2c <netif_do_set_gw+0x26>
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	e000      	b.n	8010e2e <netif_do_set_gw+0x28>
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	68fa      	ldr	r2, [r7, #12]
 8010e30:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010e32:	2301      	movs	r3, #1
 8010e34:	e000      	b.n	8010e38 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3714      	adds	r7, #20
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b088      	sub	sp, #32
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
 8010e50:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010e52:	2300      	movs	r3, #0
 8010e54:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010e56:	2300      	movs	r3, #0
 8010e58:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d101      	bne.n	8010e64 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010e60:	4b1c      	ldr	r3, [pc, #112]	@ (8010ed4 <netif_set_addr+0x90>)
 8010e62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d101      	bne.n	8010e6e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8010ed4 <netif_set_addr+0x90>)
 8010e6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d101      	bne.n	8010e78 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010e74:	4b17      	ldr	r3, [pc, #92]	@ (8010ed4 <netif_set_addr+0x90>)
 8010e76:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d003      	beq.n	8010e86 <netif_set_addr+0x42>
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d101      	bne.n	8010e8a <netif_set_addr+0x46>
 8010e86:	2301      	movs	r3, #1
 8010e88:	e000      	b.n	8010e8c <netif_set_addr+0x48>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d006      	beq.n	8010ea2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010e94:	f107 0310 	add.w	r3, r7, #16
 8010e98:	461a      	mov	r2, r3
 8010e9a:	68b9      	ldr	r1, [r7, #8]
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f7ff ff49 	bl	8010d34 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010ea2:	69fa      	ldr	r2, [r7, #28]
 8010ea4:	6879      	ldr	r1, [r7, #4]
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f7ff ff8e 	bl	8010dc8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010eac:	69ba      	ldr	r2, [r7, #24]
 8010eae:	6839      	ldr	r1, [r7, #0]
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f7ff ffa8 	bl	8010e06 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010ebc:	f107 0310 	add.w	r3, r7, #16
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	68b9      	ldr	r1, [r7, #8]
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f7ff ff35 	bl	8010d34 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010eca:	bf00      	nop
 8010ecc:	3720      	adds	r7, #32
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	0801e540 	.word	0x0801e540

08010ed8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010ee0:	4a04      	ldr	r2, [pc, #16]	@ (8010ef4 <netif_set_default+0x1c>)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010ee6:	bf00      	nop
 8010ee8:	370c      	adds	r7, #12
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop
 8010ef4:	24014b70 	.word	0x24014b70

08010ef8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d107      	bne.n	8010f16 <netif_set_up+0x1e>
 8010f06:	4b0f      	ldr	r3, [pc, #60]	@ (8010f44 <netif_set_up+0x4c>)
 8010f08:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010f0c:	490e      	ldr	r1, [pc, #56]	@ (8010f48 <netif_set_up+0x50>)
 8010f0e:	480f      	ldr	r0, [pc, #60]	@ (8010f4c <netif_set_up+0x54>)
 8010f10:	f009 fce8 	bl	801a8e4 <iprintf>
 8010f14:	e013      	b.n	8010f3e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f1c:	f003 0301 	and.w	r3, r3, #1
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d10c      	bne.n	8010f3e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f2a:	f043 0301 	orr.w	r3, r3, #1
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010f36:	2103      	movs	r1, #3
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f809 	bl	8010f50 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010f3e:	3708      	adds	r7, #8
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	0801bca4 	.word	0x0801bca4
 8010f48:	0801be2c 	.word	0x0801be2c
 8010f4c:	0801bcf4 	.word	0x0801bcf4

08010f50 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	460b      	mov	r3, r1
 8010f5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d106      	bne.n	8010f70 <netif_issue_reports+0x20>
 8010f62:	4b18      	ldr	r3, [pc, #96]	@ (8010fc4 <netif_issue_reports+0x74>)
 8010f64:	f240 326d 	movw	r2, #877	@ 0x36d
 8010f68:	4917      	ldr	r1, [pc, #92]	@ (8010fc8 <netif_issue_reports+0x78>)
 8010f6a:	4818      	ldr	r0, [pc, #96]	@ (8010fcc <netif_issue_reports+0x7c>)
 8010f6c:	f009 fcba 	bl	801a8e4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f76:	f003 0304 	and.w	r3, r3, #4
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d01e      	beq.n	8010fbc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f84:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d017      	beq.n	8010fbc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010f8c:	78fb      	ldrb	r3, [r7, #3]
 8010f8e:	f003 0301 	and.w	r3, r3, #1
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d013      	beq.n	8010fbe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	3304      	adds	r3, #4
 8010f9a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d00e      	beq.n	8010fbe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010fa6:	f003 0308 	and.w	r3, r3, #8
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d007      	beq.n	8010fbe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f007 fee5 	bl	8018d84 <etharp_request>
 8010fba:	e000      	b.n	8010fbe <netif_issue_reports+0x6e>
    return;
 8010fbc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010fbe:	3708      	adds	r7, #8
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	0801bca4 	.word	0x0801bca4
 8010fc8:	0801be48 	.word	0x0801be48
 8010fcc:	0801bcf4 	.word	0x0801bcf4

08010fd0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d107      	bne.n	8010fee <netif_set_down+0x1e>
 8010fde:	4b12      	ldr	r3, [pc, #72]	@ (8011028 <netif_set_down+0x58>)
 8010fe0:	f240 329b 	movw	r2, #923	@ 0x39b
 8010fe4:	4911      	ldr	r1, [pc, #68]	@ (801102c <netif_set_down+0x5c>)
 8010fe6:	4812      	ldr	r0, [pc, #72]	@ (8011030 <netif_set_down+0x60>)
 8010fe8:	f009 fc7c 	bl	801a8e4 <iprintf>
 8010fec:	e019      	b.n	8011022 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010ff4:	f003 0301 	and.w	r3, r3, #1
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d012      	beq.n	8011022 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011002:	f023 0301 	bic.w	r3, r3, #1
 8011006:	b2da      	uxtb	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011014:	f003 0308 	and.w	r3, r3, #8
 8011018:	2b00      	cmp	r3, #0
 801101a:	d002      	beq.n	8011022 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f007 fa6f 	bl	8018500 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	0801bca4 	.word	0x0801bca4
 801102c:	0801be6c 	.word	0x0801be6c
 8011030:	0801bcf4 	.word	0x0801bcf4

08011034 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d107      	bne.n	8011052 <netif_set_link_up+0x1e>
 8011042:	4b13      	ldr	r3, [pc, #76]	@ (8011090 <netif_set_link_up+0x5c>)
 8011044:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011048:	4912      	ldr	r1, [pc, #72]	@ (8011094 <netif_set_link_up+0x60>)
 801104a:	4813      	ldr	r0, [pc, #76]	@ (8011098 <netif_set_link_up+0x64>)
 801104c:	f009 fc4a 	bl	801a8e4 <iprintf>
 8011050:	e01b      	b.n	801108a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011058:	f003 0304 	and.w	r3, r3, #4
 801105c:	2b00      	cmp	r3, #0
 801105e:	d114      	bne.n	801108a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011066:	f043 0304 	orr.w	r3, r3, #4
 801106a:	b2da      	uxtb	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011072:	2103      	movs	r1, #3
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7ff ff6b 	bl	8010f50 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	69db      	ldr	r3, [r3, #28]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <netif_set_link_up+0x56>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	69db      	ldr	r3, [r3, #28]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	0801bca4 	.word	0x0801bca4
 8011094:	0801be8c 	.word	0x0801be8c
 8011098:	0801bcf4 	.word	0x0801bcf4

0801109c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d107      	bne.n	80110ba <netif_set_link_down+0x1e>
 80110aa:	4b11      	ldr	r3, [pc, #68]	@ (80110f0 <netif_set_link_down+0x54>)
 80110ac:	f240 4206 	movw	r2, #1030	@ 0x406
 80110b0:	4910      	ldr	r1, [pc, #64]	@ (80110f4 <netif_set_link_down+0x58>)
 80110b2:	4811      	ldr	r0, [pc, #68]	@ (80110f8 <netif_set_link_down+0x5c>)
 80110b4:	f009 fc16 	bl	801a8e4 <iprintf>
 80110b8:	e017      	b.n	80110ea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110c0:	f003 0304 	and.w	r3, r3, #4
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d010      	beq.n	80110ea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110ce:	f023 0304 	bic.w	r3, r3, #4
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	69db      	ldr	r3, [r3, #28]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d003      	beq.n	80110ea <netif_set_link_down+0x4e>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	69db      	ldr	r3, [r3, #28]
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80110ea:	3708      	adds	r7, #8
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	0801bca4 	.word	0x0801bca4
 80110f4:	0801beb0 	.word	0x0801beb0
 80110f8:	0801bcf4 	.word	0x0801bcf4

080110fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d002      	beq.n	8011112 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	683a      	ldr	r2, [r7, #0]
 8011110:	61da      	str	r2, [r3, #28]
  }
}
 8011112:	bf00      	nop
 8011114:	370c      	adds	r7, #12
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr

0801111e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801111e:	b480      	push	{r7}
 8011120:	b085      	sub	sp, #20
 8011122:	af00      	add	r7, sp, #0
 8011124:	60f8      	str	r0, [r7, #12]
 8011126:	60b9      	str	r1, [r7, #8]
 8011128:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801112a:	f06f 030b 	mvn.w	r3, #11
}
 801112e:	4618      	mov	r0, r3
 8011130:	3714      	adds	r7, #20
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr
	...

0801113c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	4603      	mov	r3, r0
 8011144:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011146:	79fb      	ldrb	r3, [r7, #7]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d013      	beq.n	8011174 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801114c:	4b0d      	ldr	r3, [pc, #52]	@ (8011184 <netif_get_by_index+0x48>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	60fb      	str	r3, [r7, #12]
 8011152:	e00c      	b.n	801116e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801115a:	3301      	adds	r3, #1
 801115c:	b2db      	uxtb	r3, r3
 801115e:	79fa      	ldrb	r2, [r7, #7]
 8011160:	429a      	cmp	r2, r3
 8011162:	d101      	bne.n	8011168 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	e006      	b.n	8011176 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	60fb      	str	r3, [r7, #12]
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d1ef      	bne.n	8011154 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011174:	2300      	movs	r3, #0
}
 8011176:	4618      	mov	r0, r3
 8011178:	3714      	adds	r7, #20
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop
 8011184:	24014b6c 	.word	0x24014b6c

08011188 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801118e:	f009 fa8b 	bl	801a6a8 <sys_arch_protect>
 8011192:	6038      	str	r0, [r7, #0]
 8011194:	4b0d      	ldr	r3, [pc, #52]	@ (80111cc <pbuf_free_ooseq+0x44>)
 8011196:	2200      	movs	r2, #0
 8011198:	701a      	strb	r2, [r3, #0]
 801119a:	6838      	ldr	r0, [r7, #0]
 801119c:	f009 fa92 	bl	801a6c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80111a0:	4b0b      	ldr	r3, [pc, #44]	@ (80111d0 <pbuf_free_ooseq+0x48>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	607b      	str	r3, [r7, #4]
 80111a6:	e00a      	b.n	80111be <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d003      	beq.n	80111b8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f002 fa77 	bl	80136a4 <tcp_free_ooseq>
      return;
 80111b6:	e005      	b.n	80111c4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	607b      	str	r3, [r7, #4]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1f1      	bne.n	80111a8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80111c4:	3708      	adds	r7, #8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	24014b75 	.word	0x24014b75
 80111d0:	24014b88 	.word	0x24014b88

080111d4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80111dc:	f7ff ffd4 	bl	8011188 <pbuf_free_ooseq>
}
 80111e0:	bf00      	nop
 80111e2:	3708      	adds	r7, #8
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}

080111e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80111ee:	f009 fa5b 	bl	801a6a8 <sys_arch_protect>
 80111f2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80111f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011234 <pbuf_pool_is_empty+0x4c>)
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80111fa:	4b0e      	ldr	r3, [pc, #56]	@ (8011234 <pbuf_pool_is_empty+0x4c>)
 80111fc:	2201      	movs	r2, #1
 80111fe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f009 fa5f 	bl	801a6c4 <sys_arch_unprotect>

  if (!queued) {
 8011206:	78fb      	ldrb	r3, [r7, #3]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d10f      	bne.n	801122c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801120c:	2100      	movs	r1, #0
 801120e:	480a      	ldr	r0, [pc, #40]	@ (8011238 <pbuf_pool_is_empty+0x50>)
 8011210:	f7fe fdea 	bl	800fde8 <tcpip_try_callback>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d008      	beq.n	801122c <pbuf_pool_is_empty+0x44>
 801121a:	f009 fa45 	bl	801a6a8 <sys_arch_protect>
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	4b04      	ldr	r3, [pc, #16]	@ (8011234 <pbuf_pool_is_empty+0x4c>)
 8011222:	2200      	movs	r2, #0
 8011224:	701a      	strb	r2, [r3, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f009 fa4c 	bl	801a6c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801122c:	bf00      	nop
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	24014b75 	.word	0x24014b75
 8011238:	080111d5 	.word	0x080111d5

0801123c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801123c:	b480      	push	{r7}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	4611      	mov	r1, r2
 8011248:	461a      	mov	r2, r3
 801124a:	460b      	mov	r3, r1
 801124c:	80fb      	strh	r3, [r7, #6]
 801124e:	4613      	mov	r3, r2
 8011250:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2200      	movs	r2, #0
 8011256:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	88fa      	ldrh	r2, [r7, #6]
 8011262:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	88ba      	ldrh	r2, [r7, #4]
 8011268:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801126a:	8b3b      	ldrh	r3, [r7, #24]
 801126c:	b2da      	uxtb	r2, r3
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	7f3a      	ldrb	r2, [r7, #28]
 8011276:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2201      	movs	r2, #1
 801127c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2200      	movs	r2, #0
 8011282:	73da      	strb	r2, [r3, #15]
}
 8011284:	bf00      	nop
 8011286:	3714      	adds	r7, #20
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b08c      	sub	sp, #48	@ 0x30
 8011294:	af02      	add	r7, sp, #8
 8011296:	4603      	mov	r3, r0
 8011298:	71fb      	strb	r3, [r7, #7]
 801129a:	460b      	mov	r3, r1
 801129c:	80bb      	strh	r3, [r7, #4]
 801129e:	4613      	mov	r3, r2
 80112a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80112a2:	79fb      	ldrb	r3, [r7, #7]
 80112a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80112a6:	887b      	ldrh	r3, [r7, #2]
 80112a8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80112ac:	f000 8082 	beq.w	80113b4 <pbuf_alloc+0x124>
 80112b0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80112b4:	f300 80ca 	bgt.w	801144c <pbuf_alloc+0x1bc>
 80112b8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80112bc:	d010      	beq.n	80112e0 <pbuf_alloc+0x50>
 80112be:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80112c2:	f300 80c3 	bgt.w	801144c <pbuf_alloc+0x1bc>
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d002      	beq.n	80112d0 <pbuf_alloc+0x40>
 80112ca:	2b41      	cmp	r3, #65	@ 0x41
 80112cc:	f040 80be 	bne.w	801144c <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80112d0:	887a      	ldrh	r2, [r7, #2]
 80112d2:	88bb      	ldrh	r3, [r7, #4]
 80112d4:	4619      	mov	r1, r3
 80112d6:	2000      	movs	r0, #0
 80112d8:	f000 f8d4 	bl	8011484 <pbuf_alloc_reference>
 80112dc:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80112de:	e0bf      	b.n	8011460 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80112e0:	2300      	movs	r3, #0
 80112e2:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80112e4:	2300      	movs	r3, #0
 80112e6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80112e8:	88bb      	ldrh	r3, [r7, #4]
 80112ea:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80112ec:	200d      	movs	r0, #13
 80112ee:	f7ff fb95 	bl	8010a1c <memp_malloc>
 80112f2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d109      	bne.n	801130e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 80112fa:	f7ff ff75 	bl	80111e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80112fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <pbuf_alloc+0x7a>
            pbuf_free(p);
 8011304:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011306:	f000 faab 	bl	8011860 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801130a:	2300      	movs	r3, #0
 801130c:	e0a9      	b.n	8011462 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801130e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011310:	3303      	adds	r3, #3
 8011312:	b29b      	uxth	r3, r3
 8011314:	f023 0303 	bic.w	r3, r3, #3
 8011318:	b29a      	uxth	r2, r3
 801131a:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 801131e:	1a9b      	subs	r3, r3, r2
 8011320:	b29b      	uxth	r3, r3
 8011322:	8b7a      	ldrh	r2, [r7, #26]
 8011324:	4293      	cmp	r3, r2
 8011326:	bf28      	it	cs
 8011328:	4613      	movcs	r3, r2
 801132a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801132c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801132e:	3310      	adds	r3, #16
 8011330:	693a      	ldr	r2, [r7, #16]
 8011332:	4413      	add	r3, r2
 8011334:	3303      	adds	r3, #3
 8011336:	f023 0303 	bic.w	r3, r3, #3
 801133a:	4618      	mov	r0, r3
 801133c:	89f9      	ldrh	r1, [r7, #14]
 801133e:	8b7a      	ldrh	r2, [r7, #26]
 8011340:	2300      	movs	r3, #0
 8011342:	9301      	str	r3, [sp, #4]
 8011344:	887b      	ldrh	r3, [r7, #2]
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	460b      	mov	r3, r1
 801134a:	4601      	mov	r1, r0
 801134c:	6938      	ldr	r0, [r7, #16]
 801134e:	f7ff ff75 	bl	801123c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	f003 0303 	and.w	r3, r3, #3
 801135a:	2b00      	cmp	r3, #0
 801135c:	d006      	beq.n	801136c <pbuf_alloc+0xdc>
 801135e:	4b43      	ldr	r3, [pc, #268]	@ (801146c <pbuf_alloc+0x1dc>)
 8011360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011364:	4942      	ldr	r1, [pc, #264]	@ (8011470 <pbuf_alloc+0x1e0>)
 8011366:	4843      	ldr	r0, [pc, #268]	@ (8011474 <pbuf_alloc+0x1e4>)
 8011368:	f009 fabc 	bl	801a8e4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801136c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801136e:	3303      	adds	r3, #3
 8011370:	f023 0303 	bic.w	r3, r3, #3
 8011374:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8011378:	4293      	cmp	r3, r2
 801137a:	d106      	bne.n	801138a <pbuf_alloc+0xfa>
 801137c:	4b3b      	ldr	r3, [pc, #236]	@ (801146c <pbuf_alloc+0x1dc>)
 801137e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011382:	493d      	ldr	r1, [pc, #244]	@ (8011478 <pbuf_alloc+0x1e8>)
 8011384:	483b      	ldr	r0, [pc, #236]	@ (8011474 <pbuf_alloc+0x1e4>)
 8011386:	f009 faad 	bl	801a8e4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801138c:	2b00      	cmp	r3, #0
 801138e:	d102      	bne.n	8011396 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	627b      	str	r3, [r7, #36]	@ 0x24
 8011394:	e002      	b.n	801139c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	693a      	ldr	r2, [r7, #16]
 801139a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80113a0:	8b7a      	ldrh	r2, [r7, #26]
 80113a2:	89fb      	ldrh	r3, [r7, #14]
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80113a8:	2300      	movs	r3, #0
 80113aa:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80113ac:	8b7b      	ldrh	r3, [r7, #26]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d19c      	bne.n	80112ec <pbuf_alloc+0x5c>
      break;
 80113b2:	e055      	b.n	8011460 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80113b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80113b6:	3303      	adds	r3, #3
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	f023 0303 	bic.w	r3, r3, #3
 80113be:	b29a      	uxth	r2, r3
 80113c0:	88bb      	ldrh	r3, [r7, #4]
 80113c2:	3303      	adds	r3, #3
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	f023 0303 	bic.w	r3, r3, #3
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	4413      	add	r3, r2
 80113ce:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80113d0:	8b3b      	ldrh	r3, [r7, #24]
 80113d2:	3310      	adds	r3, #16
 80113d4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80113d6:	8b3a      	ldrh	r2, [r7, #24]
 80113d8:	88bb      	ldrh	r3, [r7, #4]
 80113da:	3303      	adds	r3, #3
 80113dc:	f023 0303 	bic.w	r3, r3, #3
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d306      	bcc.n	80113f2 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80113e4:	8afa      	ldrh	r2, [r7, #22]
 80113e6:	88bb      	ldrh	r3, [r7, #4]
 80113e8:	3303      	adds	r3, #3
 80113ea:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d201      	bcs.n	80113f6 <pbuf_alloc+0x166>
        return NULL;
 80113f2:	2300      	movs	r3, #0
 80113f4:	e035      	b.n	8011462 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80113f6:	8afb      	ldrh	r3, [r7, #22]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff f96b 	bl	80106d4 <mem_malloc>
 80113fe:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011402:	2b00      	cmp	r3, #0
 8011404:	d101      	bne.n	801140a <pbuf_alloc+0x17a>
        return NULL;
 8011406:	2300      	movs	r3, #0
 8011408:	e02b      	b.n	8011462 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801140a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801140c:	3310      	adds	r3, #16
 801140e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011410:	4413      	add	r3, r2
 8011412:	3303      	adds	r3, #3
 8011414:	f023 0303 	bic.w	r3, r3, #3
 8011418:	4618      	mov	r0, r3
 801141a:	88b9      	ldrh	r1, [r7, #4]
 801141c:	88ba      	ldrh	r2, [r7, #4]
 801141e:	2300      	movs	r3, #0
 8011420:	9301      	str	r3, [sp, #4]
 8011422:	887b      	ldrh	r3, [r7, #2]
 8011424:	9300      	str	r3, [sp, #0]
 8011426:	460b      	mov	r3, r1
 8011428:	4601      	mov	r1, r0
 801142a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801142c:	f7ff ff06 	bl	801123c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	f003 0303 	and.w	r3, r3, #3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d010      	beq.n	801145e <pbuf_alloc+0x1ce>
 801143c:	4b0b      	ldr	r3, [pc, #44]	@ (801146c <pbuf_alloc+0x1dc>)
 801143e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011442:	490e      	ldr	r1, [pc, #56]	@ (801147c <pbuf_alloc+0x1ec>)
 8011444:	480b      	ldr	r0, [pc, #44]	@ (8011474 <pbuf_alloc+0x1e4>)
 8011446:	f009 fa4d 	bl	801a8e4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801144a:	e008      	b.n	801145e <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801144c:	4b07      	ldr	r3, [pc, #28]	@ (801146c <pbuf_alloc+0x1dc>)
 801144e:	f240 1227 	movw	r2, #295	@ 0x127
 8011452:	490b      	ldr	r1, [pc, #44]	@ (8011480 <pbuf_alloc+0x1f0>)
 8011454:	4807      	ldr	r0, [pc, #28]	@ (8011474 <pbuf_alloc+0x1e4>)
 8011456:	f009 fa45 	bl	801a8e4 <iprintf>
      return NULL;
 801145a:	2300      	movs	r3, #0
 801145c:	e001      	b.n	8011462 <pbuf_alloc+0x1d2>
      break;
 801145e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011462:	4618      	mov	r0, r3
 8011464:	3728      	adds	r7, #40	@ 0x28
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	0801bed4 	.word	0x0801bed4
 8011470:	0801bf04 	.word	0x0801bf04
 8011474:	0801bf34 	.word	0x0801bf34
 8011478:	0801bf5c 	.word	0x0801bf5c
 801147c:	0801bf90 	.word	0x0801bf90
 8011480:	0801bfbc 	.word	0x0801bfbc

08011484 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af02      	add	r7, sp, #8
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	460b      	mov	r3, r1
 801148e:	807b      	strh	r3, [r7, #2]
 8011490:	4613      	mov	r3, r2
 8011492:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011494:	883b      	ldrh	r3, [r7, #0]
 8011496:	2b41      	cmp	r3, #65	@ 0x41
 8011498:	d009      	beq.n	80114ae <pbuf_alloc_reference+0x2a>
 801149a:	883b      	ldrh	r3, [r7, #0]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d006      	beq.n	80114ae <pbuf_alloc_reference+0x2a>
 80114a0:	4b0f      	ldr	r3, [pc, #60]	@ (80114e0 <pbuf_alloc_reference+0x5c>)
 80114a2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80114a6:	490f      	ldr	r1, [pc, #60]	@ (80114e4 <pbuf_alloc_reference+0x60>)
 80114a8:	480f      	ldr	r0, [pc, #60]	@ (80114e8 <pbuf_alloc_reference+0x64>)
 80114aa:	f009 fa1b 	bl	801a8e4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80114ae:	200c      	movs	r0, #12
 80114b0:	f7ff fab4 	bl	8010a1c <memp_malloc>
 80114b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d101      	bne.n	80114c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80114bc:	2300      	movs	r3, #0
 80114be:	e00b      	b.n	80114d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80114c0:	8879      	ldrh	r1, [r7, #2]
 80114c2:	887a      	ldrh	r2, [r7, #2]
 80114c4:	2300      	movs	r3, #0
 80114c6:	9301      	str	r3, [sp, #4]
 80114c8:	883b      	ldrh	r3, [r7, #0]
 80114ca:	9300      	str	r3, [sp, #0]
 80114cc:	460b      	mov	r3, r1
 80114ce:	6879      	ldr	r1, [r7, #4]
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	f7ff feb3 	bl	801123c <pbuf_init_alloced_pbuf>
  return p;
 80114d6:	68fb      	ldr	r3, [r7, #12]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3710      	adds	r7, #16
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	0801bed4 	.word	0x0801bed4
 80114e4:	0801bfd8 	.word	0x0801bfd8
 80114e8:	0801bf34 	.word	0x0801bf34

080114ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b088      	sub	sp, #32
 80114f0:	af02      	add	r7, sp, #8
 80114f2:	607b      	str	r3, [r7, #4]
 80114f4:	4603      	mov	r3, r0
 80114f6:	73fb      	strb	r3, [r7, #15]
 80114f8:	460b      	mov	r3, r1
 80114fa:	81bb      	strh	r3, [r7, #12]
 80114fc:	4613      	mov	r3, r2
 80114fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
 8011502:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011504:	8a7b      	ldrh	r3, [r7, #18]
 8011506:	3303      	adds	r3, #3
 8011508:	f023 0203 	bic.w	r2, r3, #3
 801150c:	89bb      	ldrh	r3, [r7, #12]
 801150e:	441a      	add	r2, r3
 8011510:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011512:	429a      	cmp	r2, r3
 8011514:	d901      	bls.n	801151a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011516:	2300      	movs	r3, #0
 8011518:	e018      	b.n	801154c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801151a:	6a3b      	ldr	r3, [r7, #32]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d007      	beq.n	8011530 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011520:	8a7b      	ldrh	r3, [r7, #18]
 8011522:	3303      	adds	r3, #3
 8011524:	f023 0303 	bic.w	r3, r3, #3
 8011528:	6a3a      	ldr	r2, [r7, #32]
 801152a:	4413      	add	r3, r2
 801152c:	617b      	str	r3, [r7, #20]
 801152e:	e001      	b.n	8011534 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011530:	2300      	movs	r3, #0
 8011532:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	89b9      	ldrh	r1, [r7, #12]
 8011538:	89ba      	ldrh	r2, [r7, #12]
 801153a:	2302      	movs	r3, #2
 801153c:	9301      	str	r3, [sp, #4]
 801153e:	897b      	ldrh	r3, [r7, #10]
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	460b      	mov	r3, r1
 8011544:	6979      	ldr	r1, [r7, #20]
 8011546:	f7ff fe79 	bl	801123c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801154a:	687b      	ldr	r3, [r7, #4]
}
 801154c:	4618      	mov	r0, r3
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	460b      	mov	r3, r1
 801155e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d106      	bne.n	8011574 <pbuf_realloc+0x20>
 8011566:	4b3a      	ldr	r3, [pc, #232]	@ (8011650 <pbuf_realloc+0xfc>)
 8011568:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801156c:	4939      	ldr	r1, [pc, #228]	@ (8011654 <pbuf_realloc+0x100>)
 801156e:	483a      	ldr	r0, [pc, #232]	@ (8011658 <pbuf_realloc+0x104>)
 8011570:	f009 f9b8 	bl	801a8e4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	891b      	ldrh	r3, [r3, #8]
 8011578:	887a      	ldrh	r2, [r7, #2]
 801157a:	429a      	cmp	r2, r3
 801157c:	d263      	bcs.n	8011646 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	891a      	ldrh	r2, [r3, #8]
 8011582:	887b      	ldrh	r3, [r7, #2]
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011588:	887b      	ldrh	r3, [r7, #2]
 801158a:	817b      	strh	r3, [r7, #10]
  q = p;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011590:	e018      	b.n	80115c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	895b      	ldrh	r3, [r3, #10]
 8011596:	897a      	ldrh	r2, [r7, #10]
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	891a      	ldrh	r2, [r3, #8]
 80115a0:	893b      	ldrh	r3, [r7, #8]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d106      	bne.n	80115c4 <pbuf_realloc+0x70>
 80115b6:	4b26      	ldr	r3, [pc, #152]	@ (8011650 <pbuf_realloc+0xfc>)
 80115b8:	f240 12af 	movw	r2, #431	@ 0x1af
 80115bc:	4927      	ldr	r1, [pc, #156]	@ (801165c <pbuf_realloc+0x108>)
 80115be:	4826      	ldr	r0, [pc, #152]	@ (8011658 <pbuf_realloc+0x104>)
 80115c0:	f009 f990 	bl	801a8e4 <iprintf>
  while (rem_len > q->len) {
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	895b      	ldrh	r3, [r3, #10]
 80115c8:	897a      	ldrh	r2, [r7, #10]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d8e1      	bhi.n	8011592 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	7b1b      	ldrb	r3, [r3, #12]
 80115d2:	f003 030f 	and.w	r3, r3, #15
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d121      	bne.n	801161e <pbuf_realloc+0xca>
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	895b      	ldrh	r3, [r3, #10]
 80115de:	897a      	ldrh	r2, [r7, #10]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d01c      	beq.n	801161e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	7b5b      	ldrb	r3, [r3, #13]
 80115e8:	f003 0302 	and.w	r3, r3, #2
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d116      	bne.n	801161e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	685a      	ldr	r2, [r3, #4]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	897b      	ldrh	r3, [r7, #10]
 80115fc:	4413      	add	r3, r2
 80115fe:	b29b      	uxth	r3, r3
 8011600:	4619      	mov	r1, r3
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f7fe ff5c 	bl	80104c0 <mem_trim>
 8011608:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d106      	bne.n	801161e <pbuf_realloc+0xca>
 8011610:	4b0f      	ldr	r3, [pc, #60]	@ (8011650 <pbuf_realloc+0xfc>)
 8011612:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011616:	4912      	ldr	r1, [pc, #72]	@ (8011660 <pbuf_realloc+0x10c>)
 8011618:	480f      	ldr	r0, [pc, #60]	@ (8011658 <pbuf_realloc+0x104>)
 801161a:	f009 f963 	bl	801a8e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	897a      	ldrh	r2, [r7, #10]
 8011622:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	895a      	ldrh	r2, [r3, #10]
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d004      	beq.n	801163e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4618      	mov	r0, r3
 801163a:	f000 f911 	bl	8011860 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2200      	movs	r2, #0
 8011642:	601a      	str	r2, [r3, #0]
 8011644:	e000      	b.n	8011648 <pbuf_realloc+0xf4>
    return;
 8011646:	bf00      	nop

}
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	0801bed4 	.word	0x0801bed4
 8011654:	0801bfec 	.word	0x0801bfec
 8011658:	0801bf34 	.word	0x0801bf34
 801165c:	0801c004 	.word	0x0801c004
 8011660:	0801c01c 	.word	0x0801c01c

08011664 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b086      	sub	sp, #24
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	4613      	mov	r3, r2
 8011670:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d106      	bne.n	8011686 <pbuf_add_header_impl+0x22>
 8011678:	4b2b      	ldr	r3, [pc, #172]	@ (8011728 <pbuf_add_header_impl+0xc4>)
 801167a:	f240 12df 	movw	r2, #479	@ 0x1df
 801167e:	492b      	ldr	r1, [pc, #172]	@ (801172c <pbuf_add_header_impl+0xc8>)
 8011680:	482b      	ldr	r0, [pc, #172]	@ (8011730 <pbuf_add_header_impl+0xcc>)
 8011682:	f009 f92f 	bl	801a8e4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d003      	beq.n	8011694 <pbuf_add_header_impl+0x30>
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011692:	d301      	bcc.n	8011698 <pbuf_add_header_impl+0x34>
    return 1;
 8011694:	2301      	movs	r3, #1
 8011696:	e043      	b.n	8011720 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d101      	bne.n	80116a2 <pbuf_add_header_impl+0x3e>
    return 0;
 801169e:	2300      	movs	r3, #0
 80116a0:	e03e      	b.n	8011720 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	891a      	ldrh	r2, [r3, #8]
 80116aa:	8a7b      	ldrh	r3, [r7, #18]
 80116ac:	4413      	add	r3, r2
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	8a7a      	ldrh	r2, [r7, #18]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d901      	bls.n	80116ba <pbuf_add_header_impl+0x56>
    return 1;
 80116b6:	2301      	movs	r3, #1
 80116b8:	e032      	b.n	8011720 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	7b1b      	ldrb	r3, [r3, #12]
 80116be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80116c0:	8a3b      	ldrh	r3, [r7, #16]
 80116c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00c      	beq.n	80116e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	425b      	negs	r3, r3
 80116d2:	4413      	add	r3, r2
 80116d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	3310      	adds	r3, #16
 80116da:	697a      	ldr	r2, [r7, #20]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d20d      	bcs.n	80116fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80116e0:	2301      	movs	r3, #1
 80116e2:	e01d      	b.n	8011720 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80116e4:	79fb      	ldrb	r3, [r7, #7]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d006      	beq.n	80116f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	685a      	ldr	r2, [r3, #4]
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	425b      	negs	r3, r3
 80116f2:	4413      	add	r3, r2
 80116f4:	617b      	str	r3, [r7, #20]
 80116f6:	e001      	b.n	80116fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80116f8:	2301      	movs	r3, #1
 80116fa:	e011      	b.n	8011720 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	697a      	ldr	r2, [r7, #20]
 8011700:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	895a      	ldrh	r2, [r3, #10]
 8011706:	8a7b      	ldrh	r3, [r7, #18]
 8011708:	4413      	add	r3, r2
 801170a:	b29a      	uxth	r2, r3
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	891a      	ldrh	r2, [r3, #8]
 8011714:	8a7b      	ldrh	r3, [r7, #18]
 8011716:	4413      	add	r3, r2
 8011718:	b29a      	uxth	r2, r3
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	811a      	strh	r2, [r3, #8]


  return 0;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3718      	adds	r7, #24
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	0801bed4 	.word	0x0801bed4
 801172c:	0801c038 	.word	0x0801c038
 8011730:	0801bf34 	.word	0x0801bf34

08011734 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801173e:	2200      	movs	r2, #0
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f7ff ff8e 	bl	8011664 <pbuf_add_header_impl>
 8011748:	4603      	mov	r3, r0
}
 801174a:	4618      	mov	r0, r3
 801174c:	3708      	adds	r7, #8
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
	...

08011754 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d106      	bne.n	8011772 <pbuf_remove_header+0x1e>
 8011764:	4b20      	ldr	r3, [pc, #128]	@ (80117e8 <pbuf_remove_header+0x94>)
 8011766:	f240 224b 	movw	r2, #587	@ 0x24b
 801176a:	4920      	ldr	r1, [pc, #128]	@ (80117ec <pbuf_remove_header+0x98>)
 801176c:	4820      	ldr	r0, [pc, #128]	@ (80117f0 <pbuf_remove_header+0x9c>)
 801176e:	f009 f8b9 	bl	801a8e4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d003      	beq.n	8011780 <pbuf_remove_header+0x2c>
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801177e:	d301      	bcc.n	8011784 <pbuf_remove_header+0x30>
    return 1;
 8011780:	2301      	movs	r3, #1
 8011782:	e02c      	b.n	80117de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d101      	bne.n	801178e <pbuf_remove_header+0x3a>
    return 0;
 801178a:	2300      	movs	r3, #0
 801178c:	e027      	b.n	80117de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	895b      	ldrh	r3, [r3, #10]
 8011796:	89fa      	ldrh	r2, [r7, #14]
 8011798:	429a      	cmp	r2, r3
 801179a:	d908      	bls.n	80117ae <pbuf_remove_header+0x5a>
 801179c:	4b12      	ldr	r3, [pc, #72]	@ (80117e8 <pbuf_remove_header+0x94>)
 801179e:	f240 2255 	movw	r2, #597	@ 0x255
 80117a2:	4914      	ldr	r1, [pc, #80]	@ (80117f4 <pbuf_remove_header+0xa0>)
 80117a4:	4812      	ldr	r0, [pc, #72]	@ (80117f0 <pbuf_remove_header+0x9c>)
 80117a6:	f009 f89d 	bl	801a8e4 <iprintf>
 80117aa:	2301      	movs	r3, #1
 80117ac:	e017      	b.n	80117de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	685a      	ldr	r2, [r3, #4]
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	441a      	add	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	895a      	ldrh	r2, [r3, #10]
 80117c4:	89fb      	ldrh	r3, [r7, #14]
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	b29a      	uxth	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	891a      	ldrh	r2, [r3, #8]
 80117d2:	89fb      	ldrh	r3, [r7, #14]
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80117dc:	2300      	movs	r3, #0
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	bf00      	nop
 80117e8:	0801bed4 	.word	0x0801bed4
 80117ec:	0801c038 	.word	0x0801c038
 80117f0:	0801bf34 	.word	0x0801bf34
 80117f4:	0801c044 	.word	0x0801c044

080117f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	460b      	mov	r3, r1
 8011802:	807b      	strh	r3, [r7, #2]
 8011804:	4613      	mov	r3, r2
 8011806:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801180c:	2b00      	cmp	r3, #0
 801180e:	da08      	bge.n	8011822 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011810:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011814:	425b      	negs	r3, r3
 8011816:	4619      	mov	r1, r3
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f7ff ff9b 	bl	8011754 <pbuf_remove_header>
 801181e:	4603      	mov	r3, r0
 8011820:	e007      	b.n	8011832 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011826:	787a      	ldrb	r2, [r7, #1]
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7ff ff1a 	bl	8011664 <pbuf_add_header_impl>
 8011830:	4603      	mov	r3, r0
  }
}
 8011832:	4618      	mov	r0, r3
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}

0801183a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b082      	sub	sp, #8
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	460b      	mov	r3, r1
 8011844:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011846:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801184a:	2201      	movs	r2, #1
 801184c:	4619      	mov	r1, r3
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f7ff ffd2 	bl	80117f8 <pbuf_header_impl>
 8011854:	4603      	mov	r3, r0
}
 8011856:	4618      	mov	r0, r3
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
	...

08011860 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b088      	sub	sp, #32
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d10b      	bne.n	8011886 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d106      	bne.n	8011882 <pbuf_free+0x22>
 8011874:	4b3b      	ldr	r3, [pc, #236]	@ (8011964 <pbuf_free+0x104>)
 8011876:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801187a:	493b      	ldr	r1, [pc, #236]	@ (8011968 <pbuf_free+0x108>)
 801187c:	483b      	ldr	r0, [pc, #236]	@ (801196c <pbuf_free+0x10c>)
 801187e:	f009 f831 	bl	801a8e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011882:	2300      	movs	r3, #0
 8011884:	e069      	b.n	801195a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011886:	2300      	movs	r3, #0
 8011888:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801188a:	e062      	b.n	8011952 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801188c:	f008 ff0c 	bl	801a6a8 <sys_arch_protect>
 8011890:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	7b9b      	ldrb	r3, [r3, #14]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d106      	bne.n	80118a8 <pbuf_free+0x48>
 801189a:	4b32      	ldr	r3, [pc, #200]	@ (8011964 <pbuf_free+0x104>)
 801189c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80118a0:	4933      	ldr	r1, [pc, #204]	@ (8011970 <pbuf_free+0x110>)
 80118a2:	4832      	ldr	r0, [pc, #200]	@ (801196c <pbuf_free+0x10c>)
 80118a4:	f009 f81e 	bl	801a8e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	7b9b      	ldrb	r3, [r3, #14]
 80118ac:	3b01      	subs	r3, #1
 80118ae:	b2da      	uxtb	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	739a      	strb	r2, [r3, #14]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	7b9b      	ldrb	r3, [r3, #14]
 80118b8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80118ba:	69b8      	ldr	r0, [r7, #24]
 80118bc:	f008 ff02 	bl	801a6c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80118c0:	7dfb      	ldrb	r3, [r7, #23]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d143      	bne.n	801194e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	7b1b      	ldrb	r3, [r3, #12]
 80118d0:	f003 030f 	and.w	r3, r3, #15
 80118d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	7b5b      	ldrb	r3, [r3, #13]
 80118da:	f003 0302 	and.w	r3, r3, #2
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d011      	beq.n	8011906 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	691b      	ldr	r3, [r3, #16]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d106      	bne.n	80118fc <pbuf_free+0x9c>
 80118ee:	4b1d      	ldr	r3, [pc, #116]	@ (8011964 <pbuf_free+0x104>)
 80118f0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80118f4:	491f      	ldr	r1, [pc, #124]	@ (8011974 <pbuf_free+0x114>)
 80118f6:	481d      	ldr	r0, [pc, #116]	@ (801196c <pbuf_free+0x10c>)
 80118f8:	f008 fff4 	bl	801a8e4 <iprintf>
        pc->custom_free_function(p);
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	4798      	blx	r3
 8011904:	e01d      	b.n	8011942 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011906:	7bfb      	ldrb	r3, [r7, #15]
 8011908:	2b02      	cmp	r3, #2
 801190a:	d104      	bne.n	8011916 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801190c:	6879      	ldr	r1, [r7, #4]
 801190e:	200d      	movs	r0, #13
 8011910:	f7ff f8fa 	bl	8010b08 <memp_free>
 8011914:	e015      	b.n	8011942 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011916:	7bfb      	ldrb	r3, [r7, #15]
 8011918:	2b01      	cmp	r3, #1
 801191a:	d104      	bne.n	8011926 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801191c:	6879      	ldr	r1, [r7, #4]
 801191e:	200c      	movs	r0, #12
 8011920:	f7ff f8f2 	bl	8010b08 <memp_free>
 8011924:	e00d      	b.n	8011942 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011926:	7bfb      	ldrb	r3, [r7, #15]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d103      	bne.n	8011934 <pbuf_free+0xd4>
          mem_free(p);
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7fe fd37 	bl	80103a0 <mem_free>
 8011932:	e006      	b.n	8011942 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011934:	4b0b      	ldr	r3, [pc, #44]	@ (8011964 <pbuf_free+0x104>)
 8011936:	f240 320f 	movw	r2, #783	@ 0x30f
 801193a:	490f      	ldr	r1, [pc, #60]	@ (8011978 <pbuf_free+0x118>)
 801193c:	480b      	ldr	r0, [pc, #44]	@ (801196c <pbuf_free+0x10c>)
 801193e:	f008 ffd1 	bl	801a8e4 <iprintf>
        }
      }
      count++;
 8011942:	7ffb      	ldrb	r3, [r7, #31]
 8011944:	3301      	adds	r3, #1
 8011946:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	607b      	str	r3, [r7, #4]
 801194c:	e001      	b.n	8011952 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801194e:	2300      	movs	r3, #0
 8011950:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d199      	bne.n	801188c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011958:	7ffb      	ldrb	r3, [r7, #31]
}
 801195a:	4618      	mov	r0, r3
 801195c:	3720      	adds	r7, #32
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	0801bed4 	.word	0x0801bed4
 8011968:	0801c038 	.word	0x0801c038
 801196c:	0801bf34 	.word	0x0801bf34
 8011970:	0801c064 	.word	0x0801c064
 8011974:	0801c07c 	.word	0x0801c07c
 8011978:	0801c0a0 	.word	0x0801c0a0

0801197c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011984:	2300      	movs	r3, #0
 8011986:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011988:	e005      	b.n	8011996 <pbuf_clen+0x1a>
    ++len;
 801198a:	89fb      	ldrh	r3, [r7, #14]
 801198c:	3301      	adds	r3, #1
 801198e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d1f6      	bne.n	801198a <pbuf_clen+0xe>
  }
  return len;
 801199c:	89fb      	ldrh	r3, [r7, #14]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr
	...

080119ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d016      	beq.n	80119e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80119ba:	f008 fe75 	bl	801a6a8 <sys_arch_protect>
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	7b9b      	ldrb	r3, [r3, #14]
 80119c4:	3301      	adds	r3, #1
 80119c6:	b2da      	uxtb	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	739a      	strb	r2, [r3, #14]
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f008 fe79 	bl	801a6c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	7b9b      	ldrb	r3, [r3, #14]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d106      	bne.n	80119e8 <pbuf_ref+0x3c>
 80119da:	4b05      	ldr	r3, [pc, #20]	@ (80119f0 <pbuf_ref+0x44>)
 80119dc:	f240 3242 	movw	r2, #834	@ 0x342
 80119e0:	4904      	ldr	r1, [pc, #16]	@ (80119f4 <pbuf_ref+0x48>)
 80119e2:	4805      	ldr	r0, [pc, #20]	@ (80119f8 <pbuf_ref+0x4c>)
 80119e4:	f008 ff7e 	bl	801a8e4 <iprintf>
  }
}
 80119e8:	bf00      	nop
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	0801bed4 	.word	0x0801bed4
 80119f4:	0801c0b4 	.word	0x0801c0b4
 80119f8:	0801bf34 	.word	0x0801bf34

080119fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d002      	beq.n	8011a12 <pbuf_cat+0x16>
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d107      	bne.n	8011a22 <pbuf_cat+0x26>
 8011a12:	4b20      	ldr	r3, [pc, #128]	@ (8011a94 <pbuf_cat+0x98>)
 8011a14:	f240 3259 	movw	r2, #857	@ 0x359
 8011a18:	491f      	ldr	r1, [pc, #124]	@ (8011a98 <pbuf_cat+0x9c>)
 8011a1a:	4820      	ldr	r0, [pc, #128]	@ (8011a9c <pbuf_cat+0xa0>)
 8011a1c:	f008 ff62 	bl	801a8e4 <iprintf>
 8011a20:	e034      	b.n	8011a8c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	60fb      	str	r3, [r7, #12]
 8011a26:	e00a      	b.n	8011a3e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	891a      	ldrh	r2, [r3, #8]
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	891b      	ldrh	r3, [r3, #8]
 8011a30:	4413      	add	r3, r2
 8011a32:	b29a      	uxth	r2, r3
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	60fb      	str	r3, [r7, #12]
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d1f0      	bne.n	8011a28 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	891a      	ldrh	r2, [r3, #8]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	895b      	ldrh	r3, [r3, #10]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d006      	beq.n	8011a60 <pbuf_cat+0x64>
 8011a52:	4b10      	ldr	r3, [pc, #64]	@ (8011a94 <pbuf_cat+0x98>)
 8011a54:	f240 3262 	movw	r2, #866	@ 0x362
 8011a58:	4911      	ldr	r1, [pc, #68]	@ (8011aa0 <pbuf_cat+0xa4>)
 8011a5a:	4810      	ldr	r0, [pc, #64]	@ (8011a9c <pbuf_cat+0xa0>)
 8011a5c:	f008 ff42 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d006      	beq.n	8011a76 <pbuf_cat+0x7a>
 8011a68:	4b0a      	ldr	r3, [pc, #40]	@ (8011a94 <pbuf_cat+0x98>)
 8011a6a:	f240 3263 	movw	r2, #867	@ 0x363
 8011a6e:	490d      	ldr	r1, [pc, #52]	@ (8011aa4 <pbuf_cat+0xa8>)
 8011a70:	480a      	ldr	r0, [pc, #40]	@ (8011a9c <pbuf_cat+0xa0>)
 8011a72:	f008 ff37 	bl	801a8e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	891a      	ldrh	r2, [r3, #8]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	891b      	ldrh	r3, [r3, #8]
 8011a7e:	4413      	add	r3, r2
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	683a      	ldr	r2, [r7, #0]
 8011a8a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	0801bed4 	.word	0x0801bed4
 8011a98:	0801c0c8 	.word	0x0801c0c8
 8011a9c:	0801bf34 	.word	0x0801bf34
 8011aa0:	0801c100 	.word	0x0801c100
 8011aa4:	0801c130 	.word	0x0801c130

08011aa8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011ab2:	6839      	ldr	r1, [r7, #0]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f7ff ffa1 	bl	80119fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011aba:	6838      	ldr	r0, [r7, #0]
 8011abc:	f7ff ff76 	bl	80119ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	617b      	str	r3, [r7, #20]
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d008      	beq.n	8011af2 <pbuf_copy+0x2a>
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d005      	beq.n	8011af2 <pbuf_copy+0x2a>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	891a      	ldrh	r2, [r3, #8]
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	891b      	ldrh	r3, [r3, #8]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d209      	bcs.n	8011b06 <pbuf_copy+0x3e>
 8011af2:	4b57      	ldr	r3, [pc, #348]	@ (8011c50 <pbuf_copy+0x188>)
 8011af4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8011af8:	4956      	ldr	r1, [pc, #344]	@ (8011c54 <pbuf_copy+0x18c>)
 8011afa:	4857      	ldr	r0, [pc, #348]	@ (8011c58 <pbuf_copy+0x190>)
 8011afc:	f008 fef2 	bl	801a8e4 <iprintf>
 8011b00:	f06f 030f 	mvn.w	r3, #15
 8011b04:	e09f      	b.n	8011c46 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	895b      	ldrh	r3, [r3, #10]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	1ad2      	subs	r2, r2, r3
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	895b      	ldrh	r3, [r3, #10]
 8011b14:	4619      	mov	r1, r3
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	1acb      	subs	r3, r1, r3
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d306      	bcc.n	8011b2c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	895b      	ldrh	r3, [r3, #10]
 8011b22:	461a      	mov	r2, r3
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	1ad3      	subs	r3, r2, r3
 8011b28:	60fb      	str	r3, [r7, #12]
 8011b2a:	e005      	b.n	8011b38 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	895b      	ldrh	r3, [r3, #10]
 8011b30:	461a      	mov	r2, r3
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	1ad3      	subs	r3, r2, r3
 8011b36:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	685a      	ldr	r2, [r3, #4]
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	18d0      	adds	r0, r2, r3
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	685a      	ldr	r2, [r3, #4]
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	4413      	add	r3, r2
 8011b48:	68fa      	ldr	r2, [r7, #12]
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	f009 f803 	bl	801ab56 <memcpy>
    offset_to += len;
 8011b50:	697a      	ldr	r2, [r7, #20]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	4413      	add	r3, r2
 8011b56:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011b58:	693a      	ldr	r2, [r7, #16]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	895b      	ldrh	r3, [r3, #10]
 8011b64:	461a      	mov	r2, r3
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d906      	bls.n	8011b7a <pbuf_copy+0xb2>
 8011b6c:	4b38      	ldr	r3, [pc, #224]	@ (8011c50 <pbuf_copy+0x188>)
 8011b6e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8011b72:	493a      	ldr	r1, [pc, #232]	@ (8011c5c <pbuf_copy+0x194>)
 8011b74:	4838      	ldr	r0, [pc, #224]	@ (8011c58 <pbuf_copy+0x190>)
 8011b76:	f008 feb5 	bl	801a8e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	895b      	ldrh	r3, [r3, #10]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d906      	bls.n	8011b94 <pbuf_copy+0xcc>
 8011b86:	4b32      	ldr	r3, [pc, #200]	@ (8011c50 <pbuf_copy+0x188>)
 8011b88:	f240 32da 	movw	r2, #986	@ 0x3da
 8011b8c:	4934      	ldr	r1, [pc, #208]	@ (8011c60 <pbuf_copy+0x198>)
 8011b8e:	4832      	ldr	r0, [pc, #200]	@ (8011c58 <pbuf_copy+0x190>)
 8011b90:	f008 fea8 	bl	801a8e4 <iprintf>
    if (offset_from >= p_from->len) {
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	895b      	ldrh	r3, [r3, #10]
 8011b98:	461a      	mov	r2, r3
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d304      	bcc.n	8011baa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	895b      	ldrh	r3, [r3, #10]
 8011bae:	461a      	mov	r2, r3
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d114      	bne.n	8011be0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d10c      	bne.n	8011be0 <pbuf_copy+0x118>
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d009      	beq.n	8011be0 <pbuf_copy+0x118>
 8011bcc:	4b20      	ldr	r3, [pc, #128]	@ (8011c50 <pbuf_copy+0x188>)
 8011bce:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8011bd2:	4924      	ldr	r1, [pc, #144]	@ (8011c64 <pbuf_copy+0x19c>)
 8011bd4:	4820      	ldr	r0, [pc, #128]	@ (8011c58 <pbuf_copy+0x190>)
 8011bd6:	f008 fe85 	bl	801a8e4 <iprintf>
 8011bda:	f06f 030f 	mvn.w	r3, #15
 8011bde:	e032      	b.n	8011c46 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d013      	beq.n	8011c0e <pbuf_copy+0x146>
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	895a      	ldrh	r2, [r3, #10]
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	891b      	ldrh	r3, [r3, #8]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d10d      	bne.n	8011c0e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d009      	beq.n	8011c0e <pbuf_copy+0x146>
 8011bfa:	4b15      	ldr	r3, [pc, #84]	@ (8011c50 <pbuf_copy+0x188>)
 8011bfc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8011c00:	4919      	ldr	r1, [pc, #100]	@ (8011c68 <pbuf_copy+0x1a0>)
 8011c02:	4815      	ldr	r0, [pc, #84]	@ (8011c58 <pbuf_copy+0x190>)
 8011c04:	f008 fe6e 	bl	801a8e4 <iprintf>
 8011c08:	f06f 0305 	mvn.w	r3, #5
 8011c0c:	e01b      	b.n	8011c46 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d013      	beq.n	8011c3c <pbuf_copy+0x174>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	895a      	ldrh	r2, [r3, #10]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	891b      	ldrh	r3, [r3, #8]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d10d      	bne.n	8011c3c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d009      	beq.n	8011c3c <pbuf_copy+0x174>
 8011c28:	4b09      	ldr	r3, [pc, #36]	@ (8011c50 <pbuf_copy+0x188>)
 8011c2a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8011c2e:	490e      	ldr	r1, [pc, #56]	@ (8011c68 <pbuf_copy+0x1a0>)
 8011c30:	4809      	ldr	r0, [pc, #36]	@ (8011c58 <pbuf_copy+0x190>)
 8011c32:	f008 fe57 	bl	801a8e4 <iprintf>
 8011c36:	f06f 0305 	mvn.w	r3, #5
 8011c3a:	e004      	b.n	8011c46 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	f47f af61 	bne.w	8011b06 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011c44:	2300      	movs	r3, #0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3718      	adds	r7, #24
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	0801bed4 	.word	0x0801bed4
 8011c54:	0801c17c 	.word	0x0801c17c
 8011c58:	0801bf34 	.word	0x0801bf34
 8011c5c:	0801c1ac 	.word	0x0801c1ac
 8011c60:	0801c1c4 	.word	0x0801c1c4
 8011c64:	0801c1e0 	.word	0x0801c1e0
 8011c68:	0801c1f0 	.word	0x0801c1f0

08011c6c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b088      	sub	sp, #32
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	4611      	mov	r1, r2
 8011c78:	461a      	mov	r2, r3
 8011c7a:	460b      	mov	r3, r1
 8011c7c:	80fb      	strh	r3, [r7, #6]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011c86:	2300      	movs	r3, #0
 8011c88:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d108      	bne.n	8011ca2 <pbuf_copy_partial+0x36>
 8011c90:	4b2b      	ldr	r3, [pc, #172]	@ (8011d40 <pbuf_copy_partial+0xd4>)
 8011c92:	f240 420a 	movw	r2, #1034	@ 0x40a
 8011c96:	492b      	ldr	r1, [pc, #172]	@ (8011d44 <pbuf_copy_partial+0xd8>)
 8011c98:	482b      	ldr	r0, [pc, #172]	@ (8011d48 <pbuf_copy_partial+0xdc>)
 8011c9a:	f008 fe23 	bl	801a8e4 <iprintf>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e04a      	b.n	8011d38 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d108      	bne.n	8011cba <pbuf_copy_partial+0x4e>
 8011ca8:	4b25      	ldr	r3, [pc, #148]	@ (8011d40 <pbuf_copy_partial+0xd4>)
 8011caa:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011cae:	4927      	ldr	r1, [pc, #156]	@ (8011d4c <pbuf_copy_partial+0xe0>)
 8011cb0:	4825      	ldr	r0, [pc, #148]	@ (8011d48 <pbuf_copy_partial+0xdc>)
 8011cb2:	f008 fe17 	bl	801a8e4 <iprintf>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	e03e      	b.n	8011d38 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	61fb      	str	r3, [r7, #28]
 8011cbe:	e034      	b.n	8011d2a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011cc0:	88bb      	ldrh	r3, [r7, #4]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d00a      	beq.n	8011cdc <pbuf_copy_partial+0x70>
 8011cc6:	69fb      	ldr	r3, [r7, #28]
 8011cc8:	895b      	ldrh	r3, [r3, #10]
 8011cca:	88ba      	ldrh	r2, [r7, #4]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d305      	bcc.n	8011cdc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	895b      	ldrh	r3, [r3, #10]
 8011cd4:	88ba      	ldrh	r2, [r7, #4]
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	80bb      	strh	r3, [r7, #4]
 8011cda:	e023      	b.n	8011d24 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	895a      	ldrh	r2, [r3, #10]
 8011ce0:	88bb      	ldrh	r3, [r7, #4]
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011ce6:	8b3a      	ldrh	r2, [r7, #24]
 8011ce8:	88fb      	ldrh	r3, [r7, #6]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d901      	bls.n	8011cf2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011cee:	88fb      	ldrh	r3, [r7, #6]
 8011cf0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011cf2:	8b7b      	ldrh	r3, [r7, #26]
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	18d0      	adds	r0, r2, r3
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	685a      	ldr	r2, [r3, #4]
 8011cfc:	88bb      	ldrh	r3, [r7, #4]
 8011cfe:	4413      	add	r3, r2
 8011d00:	8b3a      	ldrh	r2, [r7, #24]
 8011d02:	4619      	mov	r1, r3
 8011d04:	f008 ff27 	bl	801ab56 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011d08:	8afa      	ldrh	r2, [r7, #22]
 8011d0a:	8b3b      	ldrh	r3, [r7, #24]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011d10:	8b7a      	ldrh	r2, [r7, #26]
 8011d12:	8b3b      	ldrh	r3, [r7, #24]
 8011d14:	4413      	add	r3, r2
 8011d16:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011d18:	88fa      	ldrh	r2, [r7, #6]
 8011d1a:	8b3b      	ldrh	r3, [r7, #24]
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011d20:	2300      	movs	r3, #0
 8011d22:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	61fb      	str	r3, [r7, #28]
 8011d2a:	88fb      	ldrh	r3, [r7, #6]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <pbuf_copy_partial+0xca>
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d1c4      	bne.n	8011cc0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011d36:	8afb      	ldrh	r3, [r7, #22]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3720      	adds	r7, #32
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	0801bed4 	.word	0x0801bed4
 8011d44:	0801c21c 	.word	0x0801c21c
 8011d48:	0801bf34 	.word	0x0801bf34
 8011d4c:	0801c23c 	.word	0x0801c23c

08011d50 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b084      	sub	sp, #16
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	4603      	mov	r3, r0
 8011d58:	603a      	str	r2, [r7, #0]
 8011d5a:	71fb      	strb	r3, [r7, #7]
 8011d5c:	460b      	mov	r3, r1
 8011d5e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	8919      	ldrh	r1, [r3, #8]
 8011d64:	88ba      	ldrh	r2, [r7, #4]
 8011d66:	79fb      	ldrb	r3, [r7, #7]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7ff fa91 	bl	8011290 <pbuf_alloc>
 8011d6e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d101      	bne.n	8011d7a <pbuf_clone+0x2a>
    return NULL;
 8011d76:	2300      	movs	r3, #0
 8011d78:	e011      	b.n	8011d9e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011d7a:	6839      	ldr	r1, [r7, #0]
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f7ff fea3 	bl	8011ac8 <pbuf_copy>
 8011d82:	4603      	mov	r3, r0
 8011d84:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011d86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d006      	beq.n	8011d9c <pbuf_clone+0x4c>
 8011d8e:	4b06      	ldr	r3, [pc, #24]	@ (8011da8 <pbuf_clone+0x58>)
 8011d90:	f240 5224 	movw	r2, #1316	@ 0x524
 8011d94:	4905      	ldr	r1, [pc, #20]	@ (8011dac <pbuf_clone+0x5c>)
 8011d96:	4806      	ldr	r0, [pc, #24]	@ (8011db0 <pbuf_clone+0x60>)
 8011d98:	f008 fda4 	bl	801a8e4 <iprintf>
  return q;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3710      	adds	r7, #16
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	0801bed4 	.word	0x0801bed4
 8011dac:	0801c348 	.word	0x0801c348
 8011db0:	0801bf34 	.word	0x0801bf34

08011db4 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	7a1b      	ldrb	r3, [r3, #8]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d00b      	beq.n	8011de0 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	7a1a      	ldrb	r2, [r3, #8]
 8011dcc:	4b15      	ldr	r3, [pc, #84]	@ (8011e24 <raw_input_local_match+0x70>)
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d001      	beq.n	8011de0 <raw_input_local_match+0x2c>
    return 0;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	e01b      	b.n	8011e18 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011de0:	78fb      	ldrb	r3, [r7, #3]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d008      	beq.n	8011df8 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d003      	beq.n	8011df4 <raw_input_local_match+0x40>
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d110      	bne.n	8011e16 <raw_input_local_match+0x62>
          return 1;
 8011df4:	2301      	movs	r3, #1
 8011df6:	e00f      	b.n	8011e18 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d009      	beq.n	8011e12 <raw_input_local_match+0x5e>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d005      	beq.n	8011e12 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	4b06      	ldr	r3, [pc, #24]	@ (8011e24 <raw_input_local_match+0x70>)
 8011e0c:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d101      	bne.n	8011e16 <raw_input_local_match+0x62>
        return 1;
 8011e12:	2301      	movs	r3, #1
 8011e14:	e000      	b.n	8011e18 <raw_input_local_match+0x64>
      }
  }

  return 0;
 8011e16:	2300      	movs	r3, #0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	2400e040 	.word	0x2400e040

08011e28 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8011e28:	b590      	push	{r4, r7, lr}
 8011e2a:	b089      	sub	sp, #36	@ 0x24
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 8011e32:	2300      	movs	r3, #0
 8011e34:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011e36:	4b37      	ldr	r3, [pc, #220]	@ (8011f14 <raw_input+0xec>)
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	4a36      	ldr	r2, [pc, #216]	@ (8011f14 <raw_input+0xec>)
 8011e3c:	6812      	ldr	r2, [r2, #0]
 8011e3e:	4611      	mov	r1, r2
 8011e40:	4618      	mov	r0, r3
 8011e42:	f007 fc07 	bl	8019654 <ip4_addr_isbroadcast_u32>
 8011e46:	4603      	mov	r3, r0
 8011e48:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	7a5b      	ldrb	r3, [r3, #9]
 8011e50:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8011e52:	2300      	movs	r3, #0
 8011e54:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8011e56:	4b30      	ldr	r3, [pc, #192]	@ (8011f18 <raw_input+0xf0>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8011e5c:	e052      	b.n	8011f04 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	7c1b      	ldrb	r3, [r3, #16]
 8011e62:	461a      	mov	r2, r3
 8011e64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d146      	bne.n	8011efa <raw_input+0xd2>
 8011e6c:	7dbb      	ldrb	r3, [r7, #22]
 8011e6e:	4619      	mov	r1, r3
 8011e70:	69f8      	ldr	r0, [r7, #28]
 8011e72:	f7ff ff9f 	bl	8011db4 <raw_input_local_match>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d03e      	beq.n	8011efa <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	7c5b      	ldrb	r3, [r3, #17]
 8011e80:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d005      	beq.n	8011e94 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011e88:	69fb      	ldr	r3, [r7, #28]
 8011e8a:	685a      	ldr	r2, [r3, #4]
 8011e8c:	4b21      	ldr	r3, [pc, #132]	@ (8011f14 <raw_input+0xec>)
 8011e8e:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d132      	bne.n	8011efa <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	695b      	ldr	r3, [r3, #20]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d02e      	beq.n	8011efa <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8011ea2:	2302      	movs	r3, #2
 8011ea4:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	695c      	ldr	r4, [r3, #20]
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	6998      	ldr	r0, [r3, #24]
 8011eae:	4b1b      	ldr	r3, [pc, #108]	@ (8011f1c <raw_input+0xf4>)
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	69f9      	ldr	r1, [r7, #28]
 8011eb4:	47a0      	blx	r4
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d011      	beq.n	8011ee4 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00a      	beq.n	8011ee0 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	68da      	ldr	r2, [r3, #12]
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8011ed2:	4b11      	ldr	r3, [pc, #68]	@ (8011f18 <raw_input+0xf0>)
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	69fb      	ldr	r3, [r7, #28]
 8011ed8:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 8011eda:	4a0f      	ldr	r2, [pc, #60]	@ (8011f18 <raw_input+0xf0>)
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e013      	b.n	8011f0c <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	693a      	ldr	r2, [r7, #16]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d005      	beq.n	8011efa <raw_input+0xd2>
 8011eee:	4b0c      	ldr	r3, [pc, #48]	@ (8011f20 <raw_input+0xf8>)
 8011ef0:	22c0      	movs	r2, #192	@ 0xc0
 8011ef2:	490c      	ldr	r1, [pc, #48]	@ (8011f24 <raw_input+0xfc>)
 8011ef4:	480c      	ldr	r0, [pc, #48]	@ (8011f28 <raw_input+0x100>)
 8011ef6:	f008 fcf5 	bl	801a8e4 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 8011efa:	69fb      	ldr	r3, [r7, #28]
 8011efc:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d1a9      	bne.n	8011e5e <raw_input+0x36>
  }
  return ret;
 8011f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3724      	adds	r7, #36	@ 0x24
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd90      	pop	{r4, r7, pc}
 8011f14:	2400e040 	.word	0x2400e040
 8011f18:	24014b78 	.word	0x24014b78
 8011f1c:	2400e050 	.word	0x2400e050
 8011f20:	0801c35c 	.word	0x0801c35c
 8011f24:	0801c38c 	.word	0x0801c38c
 8011f28:	0801c3d8 	.word	0x0801c3d8

08011f2c <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b085      	sub	sp, #20
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d01e      	beq.n	8011f7a <raw_netif_ip_addr_changed+0x4e>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d01a      	beq.n	8011f7a <raw_netif_ip_addr_changed+0x4e>
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d017      	beq.n	8011f7a <raw_netif_ip_addr_changed+0x4e>
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d013      	beq.n	8011f7a <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8011f52:	4b0d      	ldr	r3, [pc, #52]	@ (8011f88 <raw_netif_ip_addr_changed+0x5c>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	60fb      	str	r3, [r7, #12]
 8011f58:	e00c      	b.n	8011f74 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d103      	bne.n	8011f6e <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	68db      	ldr	r3, [r3, #12]
 8011f72:	60fb      	str	r3, [r7, #12]
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1ef      	bne.n	8011f5a <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011f7a:	bf00      	nop
 8011f7c:	3714      	adds	r7, #20
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr
 8011f86:	bf00      	nop
 8011f88:	24014b78 	.word	0x24014b78

08011f8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011f90:	f008 fba8 	bl	801a6e4 <rand>
 8011f94:	4603      	mov	r3, r0
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	4b01      	ldr	r3, [pc, #4]	@ (8011fac <tcp_init+0x20>)
 8011fa6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011fa8:	bf00      	nop
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	240049b8 	.word	0x240049b8

08011fb0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	7d1b      	ldrb	r3, [r3, #20]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d105      	bne.n	8011fcc <tcp_free+0x1c>
 8011fc0:	4b06      	ldr	r3, [pc, #24]	@ (8011fdc <tcp_free+0x2c>)
 8011fc2:	22d4      	movs	r2, #212	@ 0xd4
 8011fc4:	4906      	ldr	r1, [pc, #24]	@ (8011fe0 <tcp_free+0x30>)
 8011fc6:	4807      	ldr	r0, [pc, #28]	@ (8011fe4 <tcp_free+0x34>)
 8011fc8:	f008 fc8c 	bl	801a8e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011fcc:	6879      	ldr	r1, [r7, #4]
 8011fce:	2002      	movs	r0, #2
 8011fd0:	f7fe fd9a 	bl	8010b08 <memp_free>
}
 8011fd4:	bf00      	nop
 8011fd6:	3708      	adds	r7, #8
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	0801c4a0 	.word	0x0801c4a0
 8011fe0:	0801c4d0 	.word	0x0801c4d0
 8011fe4:	0801c4e4 	.word	0x0801c4e4

08011fe8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	7d1b      	ldrb	r3, [r3, #20]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d105      	bne.n	8012004 <tcp_free_listen+0x1c>
 8011ff8:	4b06      	ldr	r3, [pc, #24]	@ (8012014 <tcp_free_listen+0x2c>)
 8011ffa:	22df      	movs	r2, #223	@ 0xdf
 8011ffc:	4906      	ldr	r1, [pc, #24]	@ (8012018 <tcp_free_listen+0x30>)
 8011ffe:	4807      	ldr	r0, [pc, #28]	@ (801201c <tcp_free_listen+0x34>)
 8012000:	f008 fc70 	bl	801a8e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012004:	6879      	ldr	r1, [r7, #4]
 8012006:	2003      	movs	r0, #3
 8012008:	f7fe fd7e 	bl	8010b08 <memp_free>
}
 801200c:	bf00      	nop
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	0801c4a0 	.word	0x0801c4a0
 8012018:	0801c50c 	.word	0x0801c50c
 801201c:	0801c4e4 	.word	0x0801c4e4

08012020 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012024:	f000 fea6 	bl	8012d74 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012028:	4b07      	ldr	r3, [pc, #28]	@ (8012048 <tcp_tmr+0x28>)
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	3301      	adds	r3, #1
 801202e:	b2da      	uxtb	r2, r3
 8012030:	4b05      	ldr	r3, [pc, #20]	@ (8012048 <tcp_tmr+0x28>)
 8012032:	701a      	strb	r2, [r3, #0]
 8012034:	4b04      	ldr	r3, [pc, #16]	@ (8012048 <tcp_tmr+0x28>)
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	f003 0301 	and.w	r3, r3, #1
 801203c:	2b00      	cmp	r3, #0
 801203e:	d001      	beq.n	8012044 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012040:	f000 fb56 	bl	80126f0 <tcp_slowtmr>
  }
}
 8012044:	bf00      	nop
 8012046:	bd80      	pop	{r7, pc}
 8012048:	24014b91 	.word	0x24014b91

0801204c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d105      	bne.n	8012068 <tcp_remove_listener+0x1c>
 801205c:	4b0d      	ldr	r3, [pc, #52]	@ (8012094 <tcp_remove_listener+0x48>)
 801205e:	22ff      	movs	r2, #255	@ 0xff
 8012060:	490d      	ldr	r1, [pc, #52]	@ (8012098 <tcp_remove_listener+0x4c>)
 8012062:	480e      	ldr	r0, [pc, #56]	@ (801209c <tcp_remove_listener+0x50>)
 8012064:	f008 fc3e 	bl	801a8e4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	60fb      	str	r3, [r7, #12]
 801206c:	e00a      	b.n	8012084 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012072:	683a      	ldr	r2, [r7, #0]
 8012074:	429a      	cmp	r2, r3
 8012076:	d102      	bne.n	801207e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	2200      	movs	r2, #0
 801207c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	60fb      	str	r3, [r7, #12]
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d1f1      	bne.n	801206e <tcp_remove_listener+0x22>
    }
  }
}
 801208a:	bf00      	nop
 801208c:	bf00      	nop
 801208e:	3710      	adds	r7, #16
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	0801c4a0 	.word	0x0801c4a0
 8012098:	0801c528 	.word	0x0801c528
 801209c:	0801c4e4 	.word	0x0801c4e4

080120a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d106      	bne.n	80120bc <tcp_listen_closed+0x1c>
 80120ae:	4b14      	ldr	r3, [pc, #80]	@ (8012100 <tcp_listen_closed+0x60>)
 80120b0:	f240 1211 	movw	r2, #273	@ 0x111
 80120b4:	4913      	ldr	r1, [pc, #76]	@ (8012104 <tcp_listen_closed+0x64>)
 80120b6:	4814      	ldr	r0, [pc, #80]	@ (8012108 <tcp_listen_closed+0x68>)
 80120b8:	f008 fc14 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	7d1b      	ldrb	r3, [r3, #20]
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	d006      	beq.n	80120d2 <tcp_listen_closed+0x32>
 80120c4:	4b0e      	ldr	r3, [pc, #56]	@ (8012100 <tcp_listen_closed+0x60>)
 80120c6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80120ca:	4910      	ldr	r1, [pc, #64]	@ (801210c <tcp_listen_closed+0x6c>)
 80120cc:	480e      	ldr	r0, [pc, #56]	@ (8012108 <tcp_listen_closed+0x68>)
 80120ce:	f008 fc09 	bl	801a8e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80120d2:	2301      	movs	r3, #1
 80120d4:	60fb      	str	r3, [r7, #12]
 80120d6:	e00b      	b.n	80120f0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80120d8:	4a0d      	ldr	r2, [pc, #52]	@ (8012110 <tcp_listen_closed+0x70>)
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	6879      	ldr	r1, [r7, #4]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7ff ffb1 	bl	801204c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	3301      	adds	r3, #1
 80120ee:	60fb      	str	r3, [r7, #12]
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2b03      	cmp	r3, #3
 80120f4:	d9f0      	bls.n	80120d8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80120f6:	bf00      	nop
 80120f8:	bf00      	nop
 80120fa:	3710      	adds	r7, #16
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	0801c4a0 	.word	0x0801c4a0
 8012104:	0801c550 	.word	0x0801c550
 8012108:	0801c4e4 	.word	0x0801c4e4
 801210c:	0801c55c 	.word	0x0801c55c
 8012110:	0801e518 	.word	0x0801e518

08012114 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012114:	b5b0      	push	{r4, r5, r7, lr}
 8012116:	b088      	sub	sp, #32
 8012118:	af04      	add	r7, sp, #16
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	460b      	mov	r3, r1
 801211e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d106      	bne.n	8012134 <tcp_close_shutdown+0x20>
 8012126:	4b63      	ldr	r3, [pc, #396]	@ (80122b4 <tcp_close_shutdown+0x1a0>)
 8012128:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801212c:	4962      	ldr	r1, [pc, #392]	@ (80122b8 <tcp_close_shutdown+0x1a4>)
 801212e:	4863      	ldr	r0, [pc, #396]	@ (80122bc <tcp_close_shutdown+0x1a8>)
 8012130:	f008 fbd8 	bl	801a8e4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012134:	78fb      	ldrb	r3, [r7, #3]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d067      	beq.n	801220a <tcp_close_shutdown+0xf6>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	7d1b      	ldrb	r3, [r3, #20]
 801213e:	2b04      	cmp	r3, #4
 8012140:	d003      	beq.n	801214a <tcp_close_shutdown+0x36>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	7d1b      	ldrb	r3, [r3, #20]
 8012146:	2b07      	cmp	r3, #7
 8012148:	d15f      	bne.n	801220a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801214e:	2b00      	cmp	r3, #0
 8012150:	d105      	bne.n	801215e <tcp_close_shutdown+0x4a>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012156:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801215a:	4293      	cmp	r3, r2
 801215c:	d055      	beq.n	801220a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	8b5b      	ldrh	r3, [r3, #26]
 8012162:	f003 0310 	and.w	r3, r3, #16
 8012166:	2b00      	cmp	r3, #0
 8012168:	d106      	bne.n	8012178 <tcp_close_shutdown+0x64>
 801216a:	4b52      	ldr	r3, [pc, #328]	@ (80122b4 <tcp_close_shutdown+0x1a0>)
 801216c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012170:	4953      	ldr	r1, [pc, #332]	@ (80122c0 <tcp_close_shutdown+0x1ac>)
 8012172:	4852      	ldr	r0, [pc, #328]	@ (80122bc <tcp_close_shutdown+0x1a8>)
 8012174:	f008 fbb6 	bl	801a8e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012180:	687d      	ldr	r5, [r7, #4]
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	3304      	adds	r3, #4
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	8ad2      	ldrh	r2, [r2, #22]
 801218a:	6879      	ldr	r1, [r7, #4]
 801218c:	8b09      	ldrh	r1, [r1, #24]
 801218e:	9102      	str	r1, [sp, #8]
 8012190:	9201      	str	r2, [sp, #4]
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	462b      	mov	r3, r5
 8012196:	4622      	mov	r2, r4
 8012198:	4601      	mov	r1, r0
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f004 fe92 	bl	8016ec4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f001 f8cb 	bl	801333c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80121a6:	4b47      	ldr	r3, [pc, #284]	@ (80122c4 <tcp_close_shutdown+0x1b0>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d105      	bne.n	80121bc <tcp_close_shutdown+0xa8>
 80121b0:	4b44      	ldr	r3, [pc, #272]	@ (80122c4 <tcp_close_shutdown+0x1b0>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	4a43      	ldr	r2, [pc, #268]	@ (80122c4 <tcp_close_shutdown+0x1b0>)
 80121b8:	6013      	str	r3, [r2, #0]
 80121ba:	e013      	b.n	80121e4 <tcp_close_shutdown+0xd0>
 80121bc:	4b41      	ldr	r3, [pc, #260]	@ (80122c4 <tcp_close_shutdown+0x1b0>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	60fb      	str	r3, [r7, #12]
 80121c2:	e00c      	b.n	80121de <tcp_close_shutdown+0xca>
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	68db      	ldr	r3, [r3, #12]
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d104      	bne.n	80121d8 <tcp_close_shutdown+0xc4>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	68da      	ldr	r2, [r3, #12]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	60da      	str	r2, [r3, #12]
 80121d6:	e005      	b.n	80121e4 <tcp_close_shutdown+0xd0>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	60fb      	str	r3, [r7, #12]
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d1ef      	bne.n	80121c4 <tcp_close_shutdown+0xb0>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2200      	movs	r2, #0
 80121e8:	60da      	str	r2, [r3, #12]
 80121ea:	4b37      	ldr	r3, [pc, #220]	@ (80122c8 <tcp_close_shutdown+0x1b4>)
 80121ec:	2201      	movs	r2, #1
 80121ee:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80121f0:	4b36      	ldr	r3, [pc, #216]	@ (80122cc <tcp_close_shutdown+0x1b8>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d102      	bne.n	8012200 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80121fa:	f003 fd61 	bl	8015cc0 <tcp_trigger_input_pcb_close>
 80121fe:	e002      	b.n	8012206 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7ff fed5 	bl	8011fb0 <tcp_free>
      }
      return ERR_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	e050      	b.n	80122ac <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	7d1b      	ldrb	r3, [r3, #20]
 801220e:	2b02      	cmp	r3, #2
 8012210:	d03b      	beq.n	801228a <tcp_close_shutdown+0x176>
 8012212:	2b02      	cmp	r3, #2
 8012214:	dc44      	bgt.n	80122a0 <tcp_close_shutdown+0x18c>
 8012216:	2b00      	cmp	r3, #0
 8012218:	d002      	beq.n	8012220 <tcp_close_shutdown+0x10c>
 801221a:	2b01      	cmp	r3, #1
 801221c:	d02a      	beq.n	8012274 <tcp_close_shutdown+0x160>
 801221e:	e03f      	b.n	80122a0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	8adb      	ldrh	r3, [r3, #22]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d021      	beq.n	801226c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012228:	4b29      	ldr	r3, [pc, #164]	@ (80122d0 <tcp_close_shutdown+0x1bc>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	687a      	ldr	r2, [r7, #4]
 801222e:	429a      	cmp	r2, r3
 8012230:	d105      	bne.n	801223e <tcp_close_shutdown+0x12a>
 8012232:	4b27      	ldr	r3, [pc, #156]	@ (80122d0 <tcp_close_shutdown+0x1bc>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	68db      	ldr	r3, [r3, #12]
 8012238:	4a25      	ldr	r2, [pc, #148]	@ (80122d0 <tcp_close_shutdown+0x1bc>)
 801223a:	6013      	str	r3, [r2, #0]
 801223c:	e013      	b.n	8012266 <tcp_close_shutdown+0x152>
 801223e:	4b24      	ldr	r3, [pc, #144]	@ (80122d0 <tcp_close_shutdown+0x1bc>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	60bb      	str	r3, [r7, #8]
 8012244:	e00c      	b.n	8012260 <tcp_close_shutdown+0x14c>
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	429a      	cmp	r2, r3
 801224e:	d104      	bne.n	801225a <tcp_close_shutdown+0x146>
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	68da      	ldr	r2, [r3, #12]
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	60da      	str	r2, [r3, #12]
 8012258:	e005      	b.n	8012266 <tcp_close_shutdown+0x152>
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	60bb      	str	r3, [r7, #8]
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d1ef      	bne.n	8012246 <tcp_close_shutdown+0x132>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2200      	movs	r2, #0
 801226a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7ff fe9f 	bl	8011fb0 <tcp_free>
      break;
 8012272:	e01a      	b.n	80122aa <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f7ff ff13 	bl	80120a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801227a:	6879      	ldr	r1, [r7, #4]
 801227c:	4815      	ldr	r0, [pc, #84]	@ (80122d4 <tcp_close_shutdown+0x1c0>)
 801227e:	f001 f8ad 	bl	80133dc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f7ff feb0 	bl	8011fe8 <tcp_free_listen>
      break;
 8012288:	e00f      	b.n	80122aa <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801228a:	6879      	ldr	r1, [r7, #4]
 801228c:	480d      	ldr	r0, [pc, #52]	@ (80122c4 <tcp_close_shutdown+0x1b0>)
 801228e:	f001 f8a5 	bl	80133dc <tcp_pcb_remove>
 8012292:	4b0d      	ldr	r3, [pc, #52]	@ (80122c8 <tcp_close_shutdown+0x1b4>)
 8012294:	2201      	movs	r2, #1
 8012296:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f7ff fe89 	bl	8011fb0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801229e:	e004      	b.n	80122aa <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 f819 	bl	80122d8 <tcp_close_shutdown_fin>
 80122a6:	4603      	mov	r3, r0
 80122a8:	e000      	b.n	80122ac <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80122aa:	2300      	movs	r3, #0
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3710      	adds	r7, #16
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bdb0      	pop	{r4, r5, r7, pc}
 80122b4:	0801c4a0 	.word	0x0801c4a0
 80122b8:	0801c574 	.word	0x0801c574
 80122bc:	0801c4e4 	.word	0x0801c4e4
 80122c0:	0801c594 	.word	0x0801c594
 80122c4:	24014b88 	.word	0x24014b88
 80122c8:	24014b90 	.word	0x24014b90
 80122cc:	24014bc8 	.word	0x24014bc8
 80122d0:	24014b80 	.word	0x24014b80
 80122d4:	24014b84 	.word	0x24014b84

080122d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d106      	bne.n	80122f4 <tcp_close_shutdown_fin+0x1c>
 80122e6:	4b2e      	ldr	r3, [pc, #184]	@ (80123a0 <tcp_close_shutdown_fin+0xc8>)
 80122e8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80122ec:	492d      	ldr	r1, [pc, #180]	@ (80123a4 <tcp_close_shutdown_fin+0xcc>)
 80122ee:	482e      	ldr	r0, [pc, #184]	@ (80123a8 <tcp_close_shutdown_fin+0xd0>)
 80122f0:	f008 faf8 	bl	801a8e4 <iprintf>

  switch (pcb->state) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	7d1b      	ldrb	r3, [r3, #20]
 80122f8:	2b07      	cmp	r3, #7
 80122fa:	d020      	beq.n	801233e <tcp_close_shutdown_fin+0x66>
 80122fc:	2b07      	cmp	r3, #7
 80122fe:	dc2b      	bgt.n	8012358 <tcp_close_shutdown_fin+0x80>
 8012300:	2b03      	cmp	r3, #3
 8012302:	d002      	beq.n	801230a <tcp_close_shutdown_fin+0x32>
 8012304:	2b04      	cmp	r3, #4
 8012306:	d00d      	beq.n	8012324 <tcp_close_shutdown_fin+0x4c>
 8012308:	e026      	b.n	8012358 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f003 fee8 	bl	80160e0 <tcp_send_fin>
 8012310:	4603      	mov	r3, r0
 8012312:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d11f      	bne.n	801235c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2205      	movs	r2, #5
 8012320:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012322:	e01b      	b.n	801235c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f003 fedb 	bl	80160e0 <tcp_send_fin>
 801232a:	4603      	mov	r3, r0
 801232c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d114      	bne.n	8012360 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2205      	movs	r2, #5
 801233a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801233c:	e010      	b.n	8012360 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f003 fece 	bl	80160e0 <tcp_send_fin>
 8012344:	4603      	mov	r3, r0
 8012346:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d109      	bne.n	8012364 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2209      	movs	r2, #9
 8012354:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012356:	e005      	b.n	8012364 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	e01c      	b.n	8012396 <tcp_close_shutdown_fin+0xbe>
      break;
 801235c:	bf00      	nop
 801235e:	e002      	b.n	8012366 <tcp_close_shutdown_fin+0x8e>
      break;
 8012360:	bf00      	nop
 8012362:	e000      	b.n	8012366 <tcp_close_shutdown_fin+0x8e>
      break;
 8012364:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d103      	bne.n	8012376 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f003 fff4 	bl	801635c <tcp_output>
 8012374:	e00d      	b.n	8012392 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801237e:	d108      	bne.n	8012392 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	8b5b      	ldrh	r3, [r3, #26]
 8012384:	f043 0308 	orr.w	r3, r3, #8
 8012388:	b29a      	uxth	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	e001      	b.n	8012396 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012396:	4618      	mov	r0, r3
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	0801c4a0 	.word	0x0801c4a0
 80123a4:	0801c550 	.word	0x0801c550
 80123a8:	0801c4e4 	.word	0x0801c4e4

080123ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d109      	bne.n	80123ce <tcp_close+0x22>
 80123ba:	4b0f      	ldr	r3, [pc, #60]	@ (80123f8 <tcp_close+0x4c>)
 80123bc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80123c0:	490e      	ldr	r1, [pc, #56]	@ (80123fc <tcp_close+0x50>)
 80123c2:	480f      	ldr	r0, [pc, #60]	@ (8012400 <tcp_close+0x54>)
 80123c4:	f008 fa8e 	bl	801a8e4 <iprintf>
 80123c8:	f06f 030f 	mvn.w	r3, #15
 80123cc:	e00f      	b.n	80123ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	7d1b      	ldrb	r3, [r3, #20]
 80123d2:	2b01      	cmp	r3, #1
 80123d4:	d006      	beq.n	80123e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	8b5b      	ldrh	r3, [r3, #26]
 80123da:	f043 0310 	orr.w	r3, r3, #16
 80123de:	b29a      	uxth	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80123e4:	2101      	movs	r1, #1
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7ff fe94 	bl	8012114 <tcp_close_shutdown>
 80123ec:	4603      	mov	r3, r0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	0801c4a0 	.word	0x0801c4a0
 80123fc:	0801c5b0 	.word	0x0801c5b0
 8012400:	0801c4e4 	.word	0x0801c4e4

08012404 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b08e      	sub	sp, #56	@ 0x38
 8012408:	af04      	add	r7, sp, #16
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d107      	bne.n	8012424 <tcp_abandon+0x20>
 8012414:	4b52      	ldr	r3, [pc, #328]	@ (8012560 <tcp_abandon+0x15c>)
 8012416:	f240 223d 	movw	r2, #573	@ 0x23d
 801241a:	4952      	ldr	r1, [pc, #328]	@ (8012564 <tcp_abandon+0x160>)
 801241c:	4852      	ldr	r0, [pc, #328]	@ (8012568 <tcp_abandon+0x164>)
 801241e:	f008 fa61 	bl	801a8e4 <iprintf>
 8012422:	e099      	b.n	8012558 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	7d1b      	ldrb	r3, [r3, #20]
 8012428:	2b01      	cmp	r3, #1
 801242a:	d106      	bne.n	801243a <tcp_abandon+0x36>
 801242c:	4b4c      	ldr	r3, [pc, #304]	@ (8012560 <tcp_abandon+0x15c>)
 801242e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012432:	494e      	ldr	r1, [pc, #312]	@ (801256c <tcp_abandon+0x168>)
 8012434:	484c      	ldr	r0, [pc, #304]	@ (8012568 <tcp_abandon+0x164>)
 8012436:	f008 fa55 	bl	801a8e4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	7d1b      	ldrb	r3, [r3, #20]
 801243e:	2b0a      	cmp	r3, #10
 8012440:	d107      	bne.n	8012452 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012442:	6879      	ldr	r1, [r7, #4]
 8012444:	484a      	ldr	r0, [pc, #296]	@ (8012570 <tcp_abandon+0x16c>)
 8012446:	f000 ffc9 	bl	80133dc <tcp_pcb_remove>
    tcp_free(pcb);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7ff fdb0 	bl	8011fb0 <tcp_free>
 8012450:	e082      	b.n	8012558 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012452:	2300      	movs	r3, #0
 8012454:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012456:	2300      	movs	r3, #0
 8012458:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801245e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012464:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801246c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	691b      	ldr	r3, [r3, #16]
 8012472:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	7d1b      	ldrb	r3, [r3, #20]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d126      	bne.n	80124ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	8adb      	ldrh	r3, [r3, #22]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d02e      	beq.n	80124e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012484:	4b3b      	ldr	r3, [pc, #236]	@ (8012574 <tcp_abandon+0x170>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	429a      	cmp	r2, r3
 801248c:	d105      	bne.n	801249a <tcp_abandon+0x96>
 801248e:	4b39      	ldr	r3, [pc, #228]	@ (8012574 <tcp_abandon+0x170>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	4a37      	ldr	r2, [pc, #220]	@ (8012574 <tcp_abandon+0x170>)
 8012496:	6013      	str	r3, [r2, #0]
 8012498:	e013      	b.n	80124c2 <tcp_abandon+0xbe>
 801249a:	4b36      	ldr	r3, [pc, #216]	@ (8012574 <tcp_abandon+0x170>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	61fb      	str	r3, [r7, #28]
 80124a0:	e00c      	b.n	80124bc <tcp_abandon+0xb8>
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	68db      	ldr	r3, [r3, #12]
 80124a6:	687a      	ldr	r2, [r7, #4]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d104      	bne.n	80124b6 <tcp_abandon+0xb2>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	68da      	ldr	r2, [r3, #12]
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	60da      	str	r2, [r3, #12]
 80124b4:	e005      	b.n	80124c2 <tcp_abandon+0xbe>
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	61fb      	str	r3, [r7, #28]
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1ef      	bne.n	80124a2 <tcp_abandon+0x9e>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	60da      	str	r2, [r3, #12]
 80124c8:	e00b      	b.n	80124e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	8adb      	ldrh	r3, [r3, #22]
 80124d2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	4828      	ldr	r0, [pc, #160]	@ (8012578 <tcp_abandon+0x174>)
 80124d8:	f000 ff80 	bl	80133dc <tcp_pcb_remove>
 80124dc:	4b27      	ldr	r3, [pc, #156]	@ (801257c <tcp_abandon+0x178>)
 80124de:	2201      	movs	r2, #1
 80124e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d004      	beq.n	80124f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124ee:	4618      	mov	r0, r3
 80124f0:	f000 fd22 	bl	8012f38 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d004      	beq.n	8012506 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012500:	4618      	mov	r0, r3
 8012502:	f000 fd19 	bl	8012f38 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801250a:	2b00      	cmp	r3, #0
 801250c:	d004      	beq.n	8012518 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012512:	4618      	mov	r0, r3
 8012514:	f000 fd10 	bl	8012f38 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801251a:	2b00      	cmp	r3, #0
 801251c:	d00e      	beq.n	801253c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801251e:	6879      	ldr	r1, [r7, #4]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	3304      	adds	r3, #4
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	8b12      	ldrh	r2, [r2, #24]
 8012528:	9202      	str	r2, [sp, #8]
 801252a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801252c:	9201      	str	r2, [sp, #4]
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	460b      	mov	r3, r1
 8012532:	697a      	ldr	r2, [r7, #20]
 8012534:	69b9      	ldr	r1, [r7, #24]
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f004 fcc4 	bl	8016ec4 <tcp_rst>
    }
    last_state = pcb->state;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	7d1b      	ldrb	r3, [r3, #20]
 8012540:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7ff fd34 	bl	8011fb0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d004      	beq.n	8012558 <tcp_abandon+0x154>
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	f06f 010c 	mvn.w	r1, #12
 8012554:	68f8      	ldr	r0, [r7, #12]
 8012556:	4798      	blx	r3
  }
}
 8012558:	3728      	adds	r7, #40	@ 0x28
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	0801c4a0 	.word	0x0801c4a0
 8012564:	0801c5e4 	.word	0x0801c5e4
 8012568:	0801c4e4 	.word	0x0801c4e4
 801256c:	0801c600 	.word	0x0801c600
 8012570:	24014b8c 	.word	0x24014b8c
 8012574:	24014b80 	.word	0x24014b80
 8012578:	24014b88 	.word	0x24014b88
 801257c:	24014b90 	.word	0x24014b90

08012580 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012588:	2101      	movs	r1, #1
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7ff ff3a 	bl	8012404 <tcp_abandon>
}
 8012590:	bf00      	nop
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d106      	bne.n	80125b4 <tcp_update_rcv_ann_wnd+0x1c>
 80125a6:	4b25      	ldr	r3, [pc, #148]	@ (801263c <tcp_update_rcv_ann_wnd+0xa4>)
 80125a8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80125ac:	4924      	ldr	r1, [pc, #144]	@ (8012640 <tcp_update_rcv_ann_wnd+0xa8>)
 80125ae:	4825      	ldr	r0, [pc, #148]	@ (8012644 <tcp_update_rcv_ann_wnd+0xac>)
 80125b0:	f008 f998 	bl	801a8e4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125b8:	687a      	ldr	r2, [r7, #4]
 80125ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80125bc:	4413      	add	r3, r2
 80125be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80125c8:	f640 3168 	movw	r1, #2920	@ 0xb68
 80125cc:	428a      	cmp	r2, r1
 80125ce:	bf28      	it	cs
 80125d0:	460a      	movcs	r2, r1
 80125d2:	b292      	uxth	r2, r2
 80125d4:	4413      	add	r3, r2
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	1ad3      	subs	r3, r2, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	db08      	blt.n	80125f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125ea:	68fa      	ldr	r2, [r7, #12]
 80125ec:	1ad3      	subs	r3, r2, r3
 80125ee:	e020      	b.n	8012632 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	dd03      	ble.n	8012606 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2200      	movs	r2, #0
 8012602:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012604:	e014      	b.n	8012630 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801260e:	1ad3      	subs	r3, r2, r3
 8012610:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012618:	d306      	bcc.n	8012628 <tcp_update_rcv_ann_wnd+0x90>
 801261a:	4b08      	ldr	r3, [pc, #32]	@ (801263c <tcp_update_rcv_ann_wnd+0xa4>)
 801261c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8012620:	4909      	ldr	r1, [pc, #36]	@ (8012648 <tcp_update_rcv_ann_wnd+0xb0>)
 8012622:	4808      	ldr	r0, [pc, #32]	@ (8012644 <tcp_update_rcv_ann_wnd+0xac>)
 8012624:	f008 f95e 	bl	801a8e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	b29a      	uxth	r2, r3
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8012630:	2300      	movs	r3, #0
  }
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
 801263a:	bf00      	nop
 801263c:	0801c4a0 	.word	0x0801c4a0
 8012640:	0801c6fc 	.word	0x0801c6fc
 8012644:	0801c4e4 	.word	0x0801c4e4
 8012648:	0801c720 	.word	0x0801c720

0801264c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	460b      	mov	r3, r1
 8012656:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d107      	bne.n	801266e <tcp_recved+0x22>
 801265e:	4b20      	ldr	r3, [pc, #128]	@ (80126e0 <tcp_recved+0x94>)
 8012660:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012664:	491f      	ldr	r1, [pc, #124]	@ (80126e4 <tcp_recved+0x98>)
 8012666:	4820      	ldr	r0, [pc, #128]	@ (80126e8 <tcp_recved+0x9c>)
 8012668:	f008 f93c 	bl	801a8e4 <iprintf>
 801266c:	e034      	b.n	80126d8 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	7d1b      	ldrb	r3, [r3, #20]
 8012672:	2b01      	cmp	r3, #1
 8012674:	d106      	bne.n	8012684 <tcp_recved+0x38>
 8012676:	4b1a      	ldr	r3, [pc, #104]	@ (80126e0 <tcp_recved+0x94>)
 8012678:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801267c:	491b      	ldr	r1, [pc, #108]	@ (80126ec <tcp_recved+0xa0>)
 801267e:	481a      	ldr	r0, [pc, #104]	@ (80126e8 <tcp_recved+0x9c>)
 8012680:	f008 f930 	bl	801a8e4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012688:	887b      	ldrh	r3, [r7, #2]
 801268a:	4413      	add	r3, r2
 801268c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801268e:	89fb      	ldrh	r3, [r7, #14]
 8012690:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012694:	4293      	cmp	r3, r2
 8012696:	d804      	bhi.n	80126a2 <tcp_recved+0x56>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801269c:	89fa      	ldrh	r2, [r7, #14]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d204      	bcs.n	80126ac <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80126a8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80126aa:	e002      	b.n	80126b2 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	89fa      	ldrh	r2, [r7, #14]
 80126b0:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f7ff ff70 	bl	8012598 <tcp_update_rcv_ann_wnd>
 80126b8:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80126c0:	4293      	cmp	r3, r2
 80126c2:	d909      	bls.n	80126d8 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	8b5b      	ldrh	r3, [r3, #26]
 80126c8:	f043 0302 	orr.w	r3, r3, #2
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f003 fe42 	bl	801635c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80126d8:	3710      	adds	r7, #16
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	0801c4a0 	.word	0x0801c4a0
 80126e4:	0801c73c 	.word	0x0801c73c
 80126e8:	0801c4e4 	.word	0x0801c4e4
 80126ec:	0801c754 	.word	0x0801c754

080126f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80126f0:	b5b0      	push	{r4, r5, r7, lr}
 80126f2:	b090      	sub	sp, #64	@ 0x40
 80126f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80126f6:	2300      	movs	r3, #0
 80126f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80126fc:	4b95      	ldr	r3, [pc, #596]	@ (8012954 <tcp_slowtmr+0x264>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	3301      	adds	r3, #1
 8012702:	4a94      	ldr	r2, [pc, #592]	@ (8012954 <tcp_slowtmr+0x264>)
 8012704:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012706:	4b94      	ldr	r3, [pc, #592]	@ (8012958 <tcp_slowtmr+0x268>)
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	3301      	adds	r3, #1
 801270c:	b2da      	uxtb	r2, r3
 801270e:	4b92      	ldr	r3, [pc, #584]	@ (8012958 <tcp_slowtmr+0x268>)
 8012710:	701a      	strb	r2, [r3, #0]
 8012712:	e000      	b.n	8012716 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012714:	bf00      	nop
  prev = NULL;
 8012716:	2300      	movs	r3, #0
 8012718:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801271a:	4b90      	ldr	r3, [pc, #576]	@ (801295c <tcp_slowtmr+0x26c>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012720:	e29d      	b.n	8012c5e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012724:	7d1b      	ldrb	r3, [r3, #20]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d106      	bne.n	8012738 <tcp_slowtmr+0x48>
 801272a:	4b8d      	ldr	r3, [pc, #564]	@ (8012960 <tcp_slowtmr+0x270>)
 801272c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012730:	498c      	ldr	r1, [pc, #560]	@ (8012964 <tcp_slowtmr+0x274>)
 8012732:	488d      	ldr	r0, [pc, #564]	@ (8012968 <tcp_slowtmr+0x278>)
 8012734:	f008 f8d6 	bl	801a8e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801273a:	7d1b      	ldrb	r3, [r3, #20]
 801273c:	2b01      	cmp	r3, #1
 801273e:	d106      	bne.n	801274e <tcp_slowtmr+0x5e>
 8012740:	4b87      	ldr	r3, [pc, #540]	@ (8012960 <tcp_slowtmr+0x270>)
 8012742:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8012746:	4989      	ldr	r1, [pc, #548]	@ (801296c <tcp_slowtmr+0x27c>)
 8012748:	4887      	ldr	r0, [pc, #540]	@ (8012968 <tcp_slowtmr+0x278>)
 801274a:	f008 f8cb 	bl	801a8e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012750:	7d1b      	ldrb	r3, [r3, #20]
 8012752:	2b0a      	cmp	r3, #10
 8012754:	d106      	bne.n	8012764 <tcp_slowtmr+0x74>
 8012756:	4b82      	ldr	r3, [pc, #520]	@ (8012960 <tcp_slowtmr+0x270>)
 8012758:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801275c:	4984      	ldr	r1, [pc, #528]	@ (8012970 <tcp_slowtmr+0x280>)
 801275e:	4882      	ldr	r0, [pc, #520]	@ (8012968 <tcp_slowtmr+0x278>)
 8012760:	f008 f8c0 	bl	801a8e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012766:	7f9a      	ldrb	r2, [r3, #30]
 8012768:	4b7b      	ldr	r3, [pc, #492]	@ (8012958 <tcp_slowtmr+0x268>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	429a      	cmp	r2, r3
 801276e:	d105      	bne.n	801277c <tcp_slowtmr+0x8c>
      prev = pcb;
 8012770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012772:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801277a:	e270      	b.n	8012c5e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801277c:	4b76      	ldr	r3, [pc, #472]	@ (8012958 <tcp_slowtmr+0x268>)
 801277e:	781a      	ldrb	r2, [r3, #0]
 8012780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012782:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012784:	2300      	movs	r3, #0
 8012786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801278a:	2300      	movs	r3, #0
 801278c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012792:	7d1b      	ldrb	r3, [r3, #20]
 8012794:	2b02      	cmp	r3, #2
 8012796:	d10a      	bne.n	80127ae <tcp_slowtmr+0xbe>
 8012798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801279a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801279e:	2b05      	cmp	r3, #5
 80127a0:	d905      	bls.n	80127ae <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80127a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127a6:	3301      	adds	r3, #1
 80127a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80127ac:	e11e      	b.n	80129ec <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80127ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80127b4:	2b0b      	cmp	r3, #11
 80127b6:	d905      	bls.n	80127c4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80127b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127bc:	3301      	adds	r3, #1
 80127be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80127c2:	e113      	b.n	80129ec <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80127c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d075      	beq.n	80128ba <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80127ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d006      	beq.n	80127e4 <tcp_slowtmr+0xf4>
 80127d6:	4b62      	ldr	r3, [pc, #392]	@ (8012960 <tcp_slowtmr+0x270>)
 80127d8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80127dc:	4965      	ldr	r1, [pc, #404]	@ (8012974 <tcp_slowtmr+0x284>)
 80127de:	4862      	ldr	r0, [pc, #392]	@ (8012968 <tcp_slowtmr+0x278>)
 80127e0:	f008 f880 	bl	801a8e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80127e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d106      	bne.n	80127fa <tcp_slowtmr+0x10a>
 80127ec:	4b5c      	ldr	r3, [pc, #368]	@ (8012960 <tcp_slowtmr+0x270>)
 80127ee:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80127f2:	4961      	ldr	r1, [pc, #388]	@ (8012978 <tcp_slowtmr+0x288>)
 80127f4:	485c      	ldr	r0, [pc, #368]	@ (8012968 <tcp_slowtmr+0x278>)
 80127f6:	f008 f875 	bl	801a8e4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80127fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127fc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012800:	2b0b      	cmp	r3, #11
 8012802:	d905      	bls.n	8012810 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8012804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012808:	3301      	adds	r3, #1
 801280a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801280e:	e0ed      	b.n	80129ec <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012812:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012816:	3b01      	subs	r3, #1
 8012818:	4a58      	ldr	r2, [pc, #352]	@ (801297c <tcp_slowtmr+0x28c>)
 801281a:	5cd3      	ldrb	r3, [r2, r3]
 801281c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012820:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012824:	7c7a      	ldrb	r2, [r7, #17]
 8012826:	429a      	cmp	r2, r3
 8012828:	d907      	bls.n	801283a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801282c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012830:	3301      	adds	r3, #1
 8012832:	b2da      	uxtb	r2, r3
 8012834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012836:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012840:	7c7a      	ldrb	r2, [r7, #17]
 8012842:	429a      	cmp	r2, r3
 8012844:	f200 80d2 	bhi.w	80129ec <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8012848:	2301      	movs	r3, #1
 801284a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801284e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012852:	2b00      	cmp	r3, #0
 8012854:	d108      	bne.n	8012868 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012858:	f004 fc28 	bl	80170ac <tcp_zero_window_probe>
 801285c:	4603      	mov	r3, r0
 801285e:	2b00      	cmp	r3, #0
 8012860:	d014      	beq.n	801288c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012862:	2300      	movs	r3, #0
 8012864:	623b      	str	r3, [r7, #32]
 8012866:	e011      	b.n	801288c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801286a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801286e:	4619      	mov	r1, r3
 8012870:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012872:	f003 faed 	bl	8015e50 <tcp_split_unsent_seg>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d107      	bne.n	801288c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801287c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801287e:	f003 fd6d 	bl	801635c <tcp_output>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d101      	bne.n	801288c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8012888:	2300      	movs	r3, #0
 801288a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	2b00      	cmp	r3, #0
 8012890:	f000 80ac 	beq.w	80129ec <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012896:	2200      	movs	r2, #0
 8012898:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801289c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801289e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80128a2:	2b06      	cmp	r3, #6
 80128a4:	f200 80a2 	bhi.w	80129ec <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80128a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80128ae:	3301      	adds	r3, #1
 80128b0:	b2da      	uxtb	r2, r3
 80128b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80128b8:	e098      	b.n	80129ec <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80128ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	db0f      	blt.n	80128e4 <tcp_slowtmr+0x1f4>
 80128c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80128ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d008      	beq.n	80128e4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80128d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80128d8:	b29b      	uxth	r3, r3
 80128da:	3301      	adds	r3, #1
 80128dc:	b29b      	uxth	r3, r3
 80128de:	b21a      	sxth	r2, r3
 80128e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128e2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80128e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128e6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80128ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80128f0:	429a      	cmp	r2, r3
 80128f2:	db7b      	blt.n	80129ec <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80128f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80128f6:	f004 f825 	bl	8016944 <tcp_rexmit_rto_prepare>
 80128fa:	4603      	mov	r3, r0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d007      	beq.n	8012910 <tcp_slowtmr+0x220>
 8012900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012904:	2b00      	cmp	r3, #0
 8012906:	d171      	bne.n	80129ec <tcp_slowtmr+0x2fc>
 8012908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801290a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801290c:	2b00      	cmp	r3, #0
 801290e:	d06d      	beq.n	80129ec <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012912:	7d1b      	ldrb	r3, [r3, #20]
 8012914:	2b02      	cmp	r3, #2
 8012916:	d03a      	beq.n	801298e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801291a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801291e:	2b0c      	cmp	r3, #12
 8012920:	bf28      	it	cs
 8012922:	230c      	movcs	r3, #12
 8012924:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012928:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801292c:	10db      	asrs	r3, r3, #3
 801292e:	b21b      	sxth	r3, r3
 8012930:	461a      	mov	r2, r3
 8012932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012934:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012938:	4413      	add	r3, r2
 801293a:	7efa      	ldrb	r2, [r7, #27]
 801293c:	4910      	ldr	r1, [pc, #64]	@ (8012980 <tcp_slowtmr+0x290>)
 801293e:	5c8a      	ldrb	r2, [r1, r2]
 8012940:	4093      	lsls	r3, r2
 8012942:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801294a:	4293      	cmp	r3, r2
 801294c:	dc1a      	bgt.n	8012984 <tcp_slowtmr+0x294>
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	b21a      	sxth	r2, r3
 8012952:	e019      	b.n	8012988 <tcp_slowtmr+0x298>
 8012954:	24014b7c 	.word	0x24014b7c
 8012958:	24014b92 	.word	0x24014b92
 801295c:	24014b88 	.word	0x24014b88
 8012960:	0801c4a0 	.word	0x0801c4a0
 8012964:	0801c7e4 	.word	0x0801c7e4
 8012968:	0801c4e4 	.word	0x0801c4e4
 801296c:	0801c810 	.word	0x0801c810
 8012970:	0801c83c 	.word	0x0801c83c
 8012974:	0801c86c 	.word	0x0801c86c
 8012978:	0801c8a0 	.word	0x0801c8a0
 801297c:	0801e510 	.word	0x0801e510
 8012980:	0801e500 	.word	0x0801e500
 8012984:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801298a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012990:	2200      	movs	r2, #0
 8012992:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012996:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801299a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80129a0:	4293      	cmp	r3, r2
 80129a2:	bf28      	it	cs
 80129a4:	4613      	movcs	r3, r2
 80129a6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80129a8:	8a7b      	ldrh	r3, [r7, #18]
 80129aa:	085b      	lsrs	r3, r3, #1
 80129ac:	b29a      	uxth	r2, r3
 80129ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80129b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80129ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80129be:	005b      	lsls	r3, r3, #1
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d206      	bcs.n	80129d4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80129c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80129ca:	005b      	lsls	r3, r3, #1
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80129d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129d6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80129d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80129de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129e0:	2200      	movs	r2, #0
 80129e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80129e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80129e8:	f004 f81c 	bl	8016a24 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80129ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ee:	7d1b      	ldrb	r3, [r3, #20]
 80129f0:	2b06      	cmp	r3, #6
 80129f2:	d111      	bne.n	8012a18 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80129f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129f6:	8b5b      	ldrh	r3, [r3, #26]
 80129f8:	f003 0310 	and.w	r3, r3, #16
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d00b      	beq.n	8012a18 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a00:	4b9c      	ldr	r3, [pc, #624]	@ (8012c74 <tcp_slowtmr+0x584>)
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a06:	6a1b      	ldr	r3, [r3, #32]
 8012a08:	1ad3      	subs	r3, r2, r3
 8012a0a:	2b28      	cmp	r3, #40	@ 0x28
 8012a0c:	d904      	bls.n	8012a18 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a12:	3301      	adds	r3, #1
 8012a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a1a:	7a5b      	ldrb	r3, [r3, #9]
 8012a1c:	f003 0308 	and.w	r3, r3, #8
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d04a      	beq.n	8012aba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a26:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012a28:	2b04      	cmp	r3, #4
 8012a2a:	d003      	beq.n	8012a34 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a2e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012a30:	2b07      	cmp	r3, #7
 8012a32:	d142      	bne.n	8012aba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a34:	4b8f      	ldr	r3, [pc, #572]	@ (8012c74 <tcp_slowtmr+0x584>)
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a3a:	6a1b      	ldr	r3, [r3, #32]
 8012a3c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a40:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012a44:	4b8c      	ldr	r3, [pc, #560]	@ (8012c78 <tcp_slowtmr+0x588>)
 8012a46:	440b      	add	r3, r1
 8012a48:	498c      	ldr	r1, [pc, #560]	@ (8012c7c <tcp_slowtmr+0x58c>)
 8012a4a:	fba1 1303 	umull	r1, r3, r1, r3
 8012a4e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d90a      	bls.n	8012a6a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8012a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a58:	3301      	adds	r3, #1
 8012a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012a62:	3301      	adds	r3, #1
 8012a64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012a68:	e027      	b.n	8012aba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a6a:	4b82      	ldr	r3, [pc, #520]	@ (8012c74 <tcp_slowtmr+0x584>)
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a70:	6a1b      	ldr	r3, [r3, #32]
 8012a72:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a76:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a7c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012a80:	4618      	mov	r0, r3
 8012a82:	4b7f      	ldr	r3, [pc, #508]	@ (8012c80 <tcp_slowtmr+0x590>)
 8012a84:	fb00 f303 	mul.w	r3, r0, r3
 8012a88:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012a8a:	497c      	ldr	r1, [pc, #496]	@ (8012c7c <tcp_slowtmr+0x58c>)
 8012a8c:	fba1 1303 	umull	r1, r3, r1, r3
 8012a90:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d911      	bls.n	8012aba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012a96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a98:	f004 fac8 	bl	801702c <tcp_keepalive>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8012aa2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d107      	bne.n	8012aba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	b2da      	uxtb	r2, r3
 8012ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8012aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d011      	beq.n	8012ae6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8012c74 <tcp_slowtmr+0x584>)
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ac8:	6a1b      	ldr	r3, [r3, #32]
 8012aca:	1ad2      	subs	r2, r2, r3
 8012acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ace:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	005b      	lsls	r3, r3, #1
 8012ad8:	440b      	add	r3, r1
 8012ada:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d302      	bcc.n	8012ae6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8012ae0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ae2:	f000 fddf 	bl	80136a4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8012ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ae8:	7d1b      	ldrb	r3, [r3, #20]
 8012aea:	2b03      	cmp	r3, #3
 8012aec:	d10b      	bne.n	8012b06 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012aee:	4b61      	ldr	r3, [pc, #388]	@ (8012c74 <tcp_slowtmr+0x584>)
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af4:	6a1b      	ldr	r3, [r3, #32]
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	2b28      	cmp	r3, #40	@ 0x28
 8012afa:	d904      	bls.n	8012b06 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8012afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b00:	3301      	adds	r3, #1
 8012b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8012b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b08:	7d1b      	ldrb	r3, [r3, #20]
 8012b0a:	2b09      	cmp	r3, #9
 8012b0c:	d10b      	bne.n	8012b26 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b0e:	4b59      	ldr	r3, [pc, #356]	@ (8012c74 <tcp_slowtmr+0x584>)
 8012b10:	681a      	ldr	r2, [r3, #0]
 8012b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b14:	6a1b      	ldr	r3, [r3, #32]
 8012b16:	1ad3      	subs	r3, r2, r3
 8012b18:	2bf0      	cmp	r3, #240	@ 0xf0
 8012b1a:	d904      	bls.n	8012b26 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b20:	3301      	adds	r3, #1
 8012b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8012b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d060      	beq.n	8012bf0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8012b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b34:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8012b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012b38:	f000 fc00 	bl	801333c <tcp_pcb_purge>
      if (prev != NULL) {
 8012b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d010      	beq.n	8012b64 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012b42:	4b50      	ldr	r3, [pc, #320]	@ (8012c84 <tcp_slowtmr+0x594>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d106      	bne.n	8012b5a <tcp_slowtmr+0x46a>
 8012b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8012c88 <tcp_slowtmr+0x598>)
 8012b4e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8012b52:	494e      	ldr	r1, [pc, #312]	@ (8012c8c <tcp_slowtmr+0x59c>)
 8012b54:	484e      	ldr	r0, [pc, #312]	@ (8012c90 <tcp_slowtmr+0x5a0>)
 8012b56:	f007 fec5 	bl	801a8e4 <iprintf>
        prev->next = pcb->next;
 8012b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b5c:	68da      	ldr	r2, [r3, #12]
 8012b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b60:	60da      	str	r2, [r3, #12]
 8012b62:	e00f      	b.n	8012b84 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012b64:	4b47      	ldr	r3, [pc, #284]	@ (8012c84 <tcp_slowtmr+0x594>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d006      	beq.n	8012b7c <tcp_slowtmr+0x48c>
 8012b6e:	4b46      	ldr	r3, [pc, #280]	@ (8012c88 <tcp_slowtmr+0x598>)
 8012b70:	f240 5271 	movw	r2, #1393	@ 0x571
 8012b74:	4947      	ldr	r1, [pc, #284]	@ (8012c94 <tcp_slowtmr+0x5a4>)
 8012b76:	4846      	ldr	r0, [pc, #280]	@ (8012c90 <tcp_slowtmr+0x5a0>)
 8012b78:	f007 feb4 	bl	801a8e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b7e:	68db      	ldr	r3, [r3, #12]
 8012b80:	4a40      	ldr	r2, [pc, #256]	@ (8012c84 <tcp_slowtmr+0x594>)
 8012b82:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8012b84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d013      	beq.n	8012bb4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b8e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b92:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012b94:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8012b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b98:	3304      	adds	r3, #4
 8012b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b9c:	8ad2      	ldrh	r2, [r2, #22]
 8012b9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012ba0:	8b09      	ldrh	r1, [r1, #24]
 8012ba2:	9102      	str	r1, [sp, #8]
 8012ba4:	9201      	str	r2, [sp, #4]
 8012ba6:	9300      	str	r3, [sp, #0]
 8012ba8:	462b      	mov	r3, r5
 8012baa:	4622      	mov	r2, r4
 8012bac:	4601      	mov	r1, r0
 8012bae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012bb0:	f004 f988 	bl	8016ec4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8012bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb6:	691b      	ldr	r3, [r3, #16]
 8012bb8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bbc:	7d1b      	ldrb	r3, [r3, #20]
 8012bbe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012bca:	6838      	ldr	r0, [r7, #0]
 8012bcc:	f7ff f9f0 	bl	8011fb0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8012bd0:	4b31      	ldr	r3, [pc, #196]	@ (8012c98 <tcp_slowtmr+0x5a8>)
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d004      	beq.n	8012be6 <tcp_slowtmr+0x4f6>
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f06f 010c 	mvn.w	r1, #12
 8012be2:	68b8      	ldr	r0, [r7, #8]
 8012be4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012be6:	4b2c      	ldr	r3, [pc, #176]	@ (8012c98 <tcp_slowtmr+0x5a8>)
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d037      	beq.n	8012c5e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012bee:	e592      	b.n	8012716 <tcp_slowtmr+0x26>
      prev = pcb;
 8012bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8012bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bfc:	7f1b      	ldrb	r3, [r3, #28]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	b2da      	uxtb	r2, r3
 8012c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c04:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c08:	7f1a      	ldrb	r2, [r3, #28]
 8012c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c0c:	7f5b      	ldrb	r3, [r3, #29]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d325      	bcc.n	8012c5e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c14:	2200      	movs	r2, #0
 8012c16:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8012c18:	4b1f      	ldr	r3, [pc, #124]	@ (8012c98 <tcp_slowtmr+0x5a8>)
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00b      	beq.n	8012c40 <tcp_slowtmr+0x550>
 8012c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c30:	6912      	ldr	r2, [r2, #16]
 8012c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012c34:	4610      	mov	r0, r2
 8012c36:	4798      	blx	r3
 8012c38:	4603      	mov	r3, r0
 8012c3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012c3e:	e002      	b.n	8012c46 <tcp_slowtmr+0x556>
 8012c40:	2300      	movs	r3, #0
 8012c42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8012c46:	4b14      	ldr	r3, [pc, #80]	@ (8012c98 <tcp_slowtmr+0x5a8>)
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	f47f ad62 	bne.w	8012714 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012c50:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d102      	bne.n	8012c5e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012c58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c5a:	f003 fb7f 	bl	801635c <tcp_output>
  while (pcb != NULL) {
 8012c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	f47f ad5e 	bne.w	8012722 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012c66:	2300      	movs	r3, #0
 8012c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8012c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8012c9c <tcp_slowtmr+0x5ac>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012c70:	e069      	b.n	8012d46 <tcp_slowtmr+0x656>
 8012c72:	bf00      	nop
 8012c74:	24014b7c 	.word	0x24014b7c
 8012c78:	000a4cb8 	.word	0x000a4cb8
 8012c7c:	10624dd3 	.word	0x10624dd3
 8012c80:	000124f8 	.word	0x000124f8
 8012c84:	24014b88 	.word	0x24014b88
 8012c88:	0801c4a0 	.word	0x0801c4a0
 8012c8c:	0801c8d8 	.word	0x0801c8d8
 8012c90:	0801c4e4 	.word	0x0801c4e4
 8012c94:	0801c904 	.word	0x0801c904
 8012c98:	24014b90 	.word	0x24014b90
 8012c9c:	24014b8c 	.word	0x24014b8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca2:	7d1b      	ldrb	r3, [r3, #20]
 8012ca4:	2b0a      	cmp	r3, #10
 8012ca6:	d006      	beq.n	8012cb6 <tcp_slowtmr+0x5c6>
 8012ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8012d58 <tcp_slowtmr+0x668>)
 8012caa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8012cae:	492b      	ldr	r1, [pc, #172]	@ (8012d5c <tcp_slowtmr+0x66c>)
 8012cb0:	482b      	ldr	r0, [pc, #172]	@ (8012d60 <tcp_slowtmr+0x670>)
 8012cb2:	f007 fe17 	bl	801a8e4 <iprintf>
    pcb_remove = 0;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012cbc:	4b29      	ldr	r3, [pc, #164]	@ (8012d64 <tcp_slowtmr+0x674>)
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc2:	6a1b      	ldr	r3, [r3, #32]
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	2bf0      	cmp	r3, #240	@ 0xf0
 8012cc8:	d904      	bls.n	8012cd4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8012cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cce:	3301      	adds	r3, #1
 8012cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d02f      	beq.n	8012d3c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cde:	f000 fb2d 	bl	801333c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d010      	beq.n	8012d0a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8012d68 <tcp_slowtmr+0x678>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d106      	bne.n	8012d00 <tcp_slowtmr+0x610>
 8012cf2:	4b19      	ldr	r3, [pc, #100]	@ (8012d58 <tcp_slowtmr+0x668>)
 8012cf4:	f240 52af 	movw	r2, #1455	@ 0x5af
 8012cf8:	491c      	ldr	r1, [pc, #112]	@ (8012d6c <tcp_slowtmr+0x67c>)
 8012cfa:	4819      	ldr	r0, [pc, #100]	@ (8012d60 <tcp_slowtmr+0x670>)
 8012cfc:	f007 fdf2 	bl	801a8e4 <iprintf>
        prev->next = pcb->next;
 8012d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d02:	68da      	ldr	r2, [r3, #12]
 8012d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d06:	60da      	str	r2, [r3, #12]
 8012d08:	e00f      	b.n	8012d2a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012d0a:	4b17      	ldr	r3, [pc, #92]	@ (8012d68 <tcp_slowtmr+0x678>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d006      	beq.n	8012d22 <tcp_slowtmr+0x632>
 8012d14:	4b10      	ldr	r3, [pc, #64]	@ (8012d58 <tcp_slowtmr+0x668>)
 8012d16:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012d1a:	4915      	ldr	r1, [pc, #84]	@ (8012d70 <tcp_slowtmr+0x680>)
 8012d1c:	4810      	ldr	r0, [pc, #64]	@ (8012d60 <tcp_slowtmr+0x670>)
 8012d1e:	f007 fde1 	bl	801a8e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d24:	68db      	ldr	r3, [r3, #12]
 8012d26:	4a10      	ldr	r2, [pc, #64]	@ (8012d68 <tcp_slowtmr+0x678>)
 8012d28:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d2c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012d34:	69f8      	ldr	r0, [r7, #28]
 8012d36:	f7ff f93b 	bl	8011fb0 <tcp_free>
 8012d3a:	e004      	b.n	8012d46 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d1a9      	bne.n	8012ca0 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012d4c:	bf00      	nop
 8012d4e:	bf00      	nop
 8012d50:	3730      	adds	r7, #48	@ 0x30
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bdb0      	pop	{r4, r5, r7, pc}
 8012d56:	bf00      	nop
 8012d58:	0801c4a0 	.word	0x0801c4a0
 8012d5c:	0801c930 	.word	0x0801c930
 8012d60:	0801c4e4 	.word	0x0801c4e4
 8012d64:	24014b7c 	.word	0x24014b7c
 8012d68:	24014b8c 	.word	0x24014b8c
 8012d6c:	0801c960 	.word	0x0801c960
 8012d70:	0801c988 	.word	0x0801c988

08012d74 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8012e30 <tcp_fasttmr+0xbc>)
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	3301      	adds	r3, #1
 8012d80:	b2da      	uxtb	r2, r3
 8012d82:	4b2b      	ldr	r3, [pc, #172]	@ (8012e30 <tcp_fasttmr+0xbc>)
 8012d84:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012d86:	4b2b      	ldr	r3, [pc, #172]	@ (8012e34 <tcp_fasttmr+0xc0>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012d8c:	e048      	b.n	8012e20 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	7f9a      	ldrb	r2, [r3, #30]
 8012d92:	4b27      	ldr	r3, [pc, #156]	@ (8012e30 <tcp_fasttmr+0xbc>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d03f      	beq.n	8012e1a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012d9a:	4b25      	ldr	r3, [pc, #148]	@ (8012e30 <tcp_fasttmr+0xbc>)
 8012d9c:	781a      	ldrb	r2, [r3, #0]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	8b5b      	ldrh	r3, [r3, #26]
 8012da6:	f003 0301 	and.w	r3, r3, #1
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d010      	beq.n	8012dd0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	8b5b      	ldrh	r3, [r3, #26]
 8012db2:	f043 0302 	orr.w	r3, r3, #2
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f003 facd 	bl	801635c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	8b5b      	ldrh	r3, [r3, #26]
 8012dc6:	f023 0303 	bic.w	r3, r3, #3
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	8b5b      	ldrh	r3, [r3, #26]
 8012dd4:	f003 0308 	and.w	r3, r3, #8
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d009      	beq.n	8012df0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	8b5b      	ldrh	r3, [r3, #26]
 8012de0:	f023 0308 	bic.w	r3, r3, #8
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff fa74 	bl	80122d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	68db      	ldr	r3, [r3, #12]
 8012df4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d00a      	beq.n	8012e14 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8012e38 <tcp_fasttmr+0xc4>)
 8012e00:	2200      	movs	r2, #0
 8012e02:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f000 f819 	bl	8012e3c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8012e38 <tcp_fasttmr+0xc4>)
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d000      	beq.n	8012e14 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012e12:	e7b8      	b.n	8012d86 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	607b      	str	r3, [r7, #4]
 8012e18:	e002      	b.n	8012e20 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d1b3      	bne.n	8012d8e <tcp_fasttmr+0x1a>
    }
  }
}
 8012e26:	bf00      	nop
 8012e28:	bf00      	nop
 8012e2a:	3708      	adds	r7, #8
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}
 8012e30:	24014b92 	.word	0x24014b92
 8012e34:	24014b88 	.word	0x24014b88
 8012e38:	24014b90 	.word	0x24014b90

08012e3c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012e3c:	b590      	push	{r4, r7, lr}
 8012e3e:	b085      	sub	sp, #20
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d109      	bne.n	8012e5e <tcp_process_refused_data+0x22>
 8012e4a:	4b38      	ldr	r3, [pc, #224]	@ (8012f2c <tcp_process_refused_data+0xf0>)
 8012e4c:	f240 6209 	movw	r2, #1545	@ 0x609
 8012e50:	4937      	ldr	r1, [pc, #220]	@ (8012f30 <tcp_process_refused_data+0xf4>)
 8012e52:	4838      	ldr	r0, [pc, #224]	@ (8012f34 <tcp_process_refused_data+0xf8>)
 8012e54:	f007 fd46 	bl	801a8e4 <iprintf>
 8012e58:	f06f 030f 	mvn.w	r3, #15
 8012e5c:	e061      	b.n	8012f22 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012e62:	7b5b      	ldrb	r3, [r3, #13]
 8012e64:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012e6a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d00b      	beq.n	8012e94 <tcp_process_refused_data+0x58>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6918      	ldr	r0, [r3, #16]
 8012e86:	2300      	movs	r3, #0
 8012e88:	68ba      	ldr	r2, [r7, #8]
 8012e8a:	6879      	ldr	r1, [r7, #4]
 8012e8c:	47a0      	blx	r4
 8012e8e:	4603      	mov	r3, r0
 8012e90:	73fb      	strb	r3, [r7, #15]
 8012e92:	e007      	b.n	8012ea4 <tcp_process_refused_data+0x68>
 8012e94:	2300      	movs	r3, #0
 8012e96:	68ba      	ldr	r2, [r7, #8]
 8012e98:	6879      	ldr	r1, [r7, #4]
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	f000 f8a6 	bl	8012fec <tcp_recv_null>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d12b      	bne.n	8012f04 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012eac:	7bbb      	ldrb	r3, [r7, #14]
 8012eae:	f003 0320 	and.w	r3, r3, #32
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d034      	beq.n	8012f20 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012eba:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d005      	beq.n	8012ece <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	b29a      	uxth	r2, r3
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d00b      	beq.n	8012ef0 <tcp_process_refused_data+0xb4>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6918      	ldr	r0, [r3, #16]
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	6879      	ldr	r1, [r7, #4]
 8012ee8:	47a0      	blx	r4
 8012eea:	4603      	mov	r3, r0
 8012eec:	73fb      	strb	r3, [r7, #15]
 8012eee:	e001      	b.n	8012ef4 <tcp_process_refused_data+0xb8>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ef8:	f113 0f0d 	cmn.w	r3, #13
 8012efc:	d110      	bne.n	8012f20 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8012efe:	f06f 030c 	mvn.w	r3, #12
 8012f02:	e00e      	b.n	8012f22 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f08:	f113 0f0d 	cmn.w	r3, #13
 8012f0c:	d102      	bne.n	8012f14 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012f0e:	f06f 030c 	mvn.w	r3, #12
 8012f12:	e006      	b.n	8012f22 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8012f1a:	f06f 0304 	mvn.w	r3, #4
 8012f1e:	e000      	b.n	8012f22 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012f20:	2300      	movs	r3, #0
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3714      	adds	r7, #20
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd90      	pop	{r4, r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	0801c4a0 	.word	0x0801c4a0
 8012f30:	0801c9b0 	.word	0x0801c9b0
 8012f34:	0801c4e4 	.word	0x0801c4e4

08012f38 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b084      	sub	sp, #16
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012f40:	e007      	b.n	8012f52 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f000 f80a 	bl	8012f62 <tcp_seg_free>
    seg = next;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d1f4      	bne.n	8012f42 <tcp_segs_free+0xa>
  }
}
 8012f58:	bf00      	nop
 8012f5a:	bf00      	nop
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}

08012f62 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012f62:	b580      	push	{r7, lr}
 8012f64:	b082      	sub	sp, #8
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d00c      	beq.n	8012f8a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d004      	beq.n	8012f82 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	685b      	ldr	r3, [r3, #4]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7fe fc6f 	bl	8011860 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012f82:	6879      	ldr	r1, [r7, #4]
 8012f84:	2004      	movs	r0, #4
 8012f86:	f7fd fdbf 	bl	8010b08 <memp_free>
  }
}
 8012f8a:	bf00      	nop
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d106      	bne.n	8012fb0 <tcp_seg_copy+0x1c>
 8012fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8012fe0 <tcp_seg_copy+0x4c>)
 8012fa4:	f240 6282 	movw	r2, #1666	@ 0x682
 8012fa8:	490e      	ldr	r1, [pc, #56]	@ (8012fe4 <tcp_seg_copy+0x50>)
 8012faa:	480f      	ldr	r0, [pc, #60]	@ (8012fe8 <tcp_seg_copy+0x54>)
 8012fac:	f007 fc9a 	bl	801a8e4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012fb0:	2004      	movs	r0, #4
 8012fb2:	f7fd fd33 	bl	8010a1c <memp_malloc>
 8012fb6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d101      	bne.n	8012fc2 <tcp_seg_copy+0x2e>
    return NULL;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e00a      	b.n	8012fd8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012fc2:	2210      	movs	r2, #16
 8012fc4:	6879      	ldr	r1, [r7, #4]
 8012fc6:	68f8      	ldr	r0, [r7, #12]
 8012fc8:	f007 fdc5 	bl	801ab56 <memcpy>
  pbuf_ref(cseg->p);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7fe fceb 	bl	80119ac <pbuf_ref>
  return cseg;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3710      	adds	r7, #16
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	0801c4a0 	.word	0x0801c4a0
 8012fe4:	0801c9f4 	.word	0x0801c9f4
 8012fe8:	0801c4e4 	.word	0x0801c4e4

08012fec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b084      	sub	sp, #16
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	60b9      	str	r1, [r7, #8]
 8012ff6:	607a      	str	r2, [r7, #4]
 8012ff8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d109      	bne.n	8013014 <tcp_recv_null+0x28>
 8013000:	4b12      	ldr	r3, [pc, #72]	@ (801304c <tcp_recv_null+0x60>)
 8013002:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013006:	4912      	ldr	r1, [pc, #72]	@ (8013050 <tcp_recv_null+0x64>)
 8013008:	4812      	ldr	r0, [pc, #72]	@ (8013054 <tcp_recv_null+0x68>)
 801300a:	f007 fc6b 	bl	801a8e4 <iprintf>
 801300e:	f06f 030f 	mvn.w	r3, #15
 8013012:	e016      	b.n	8013042 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d009      	beq.n	801302e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	891b      	ldrh	r3, [r3, #8]
 801301e:	4619      	mov	r1, r3
 8013020:	68b8      	ldr	r0, [r7, #8]
 8013022:	f7ff fb13 	bl	801264c <tcp_recved>
    pbuf_free(p);
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f7fe fc1a 	bl	8011860 <pbuf_free>
 801302c:	e008      	b.n	8013040 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801302e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d104      	bne.n	8013040 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013036:	68b8      	ldr	r0, [r7, #8]
 8013038:	f7ff f9b8 	bl	80123ac <tcp_close>
 801303c:	4603      	mov	r3, r0
 801303e:	e000      	b.n	8013042 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013040:	2300      	movs	r3, #0
}
 8013042:	4618      	mov	r0, r3
 8013044:	3710      	adds	r7, #16
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	0801c4a0 	.word	0x0801c4a0
 8013050:	0801ca10 	.word	0x0801ca10
 8013054:	0801c4e4 	.word	0x0801c4e4

08013058 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b086      	sub	sp, #24
 801305c:	af00      	add	r7, sp, #0
 801305e:	4603      	mov	r3, r0
 8013060:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013066:	2b00      	cmp	r3, #0
 8013068:	db01      	blt.n	801306e <tcp_kill_prio+0x16>
 801306a:	79fb      	ldrb	r3, [r7, #7]
 801306c:	e000      	b.n	8013070 <tcp_kill_prio+0x18>
 801306e:	237f      	movs	r3, #127	@ 0x7f
 8013070:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013072:	7afb      	ldrb	r3, [r7, #11]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d034      	beq.n	80130e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013078:	7afb      	ldrb	r3, [r7, #11]
 801307a:	3b01      	subs	r3, #1
 801307c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801307e:	2300      	movs	r3, #0
 8013080:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013082:	2300      	movs	r3, #0
 8013084:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013086:	4b19      	ldr	r3, [pc, #100]	@ (80130ec <tcp_kill_prio+0x94>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	617b      	str	r3, [r7, #20]
 801308c:	e01f      	b.n	80130ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	7d5b      	ldrb	r3, [r3, #21]
 8013092:	7afa      	ldrb	r2, [r7, #11]
 8013094:	429a      	cmp	r2, r3
 8013096:	d80c      	bhi.n	80130b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801309c:	7afa      	ldrb	r2, [r7, #11]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d112      	bne.n	80130c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80130a2:	4b13      	ldr	r3, [pc, #76]	@ (80130f0 <tcp_kill_prio+0x98>)
 80130a4:	681a      	ldr	r2, [r3, #0]
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	6a1b      	ldr	r3, [r3, #32]
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	68fa      	ldr	r2, [r7, #12]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d80a      	bhi.n	80130c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80130b2:	4b0f      	ldr	r3, [pc, #60]	@ (80130f0 <tcp_kill_prio+0x98>)
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	6a1b      	ldr	r3, [r3, #32]
 80130ba:	1ad3      	subs	r3, r2, r3
 80130bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	7d5b      	ldrb	r3, [r3, #21]
 80130c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	617b      	str	r3, [r7, #20]
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d1dc      	bne.n	801308e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d004      	beq.n	80130e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80130da:	6938      	ldr	r0, [r7, #16]
 80130dc:	f7ff fa50 	bl	8012580 <tcp_abort>
 80130e0:	e000      	b.n	80130e4 <tcp_kill_prio+0x8c>
    return;
 80130e2:	bf00      	nop
  }
}
 80130e4:	3718      	adds	r7, #24
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	24014b88 	.word	0x24014b88
 80130f0:	24014b7c 	.word	0x24014b7c

080130f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b086      	sub	sp, #24
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	4603      	mov	r3, r0
 80130fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80130fe:	79fb      	ldrb	r3, [r7, #7]
 8013100:	2b08      	cmp	r3, #8
 8013102:	d009      	beq.n	8013118 <tcp_kill_state+0x24>
 8013104:	79fb      	ldrb	r3, [r7, #7]
 8013106:	2b09      	cmp	r3, #9
 8013108:	d006      	beq.n	8013118 <tcp_kill_state+0x24>
 801310a:	4b1a      	ldr	r3, [pc, #104]	@ (8013174 <tcp_kill_state+0x80>)
 801310c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013110:	4919      	ldr	r1, [pc, #100]	@ (8013178 <tcp_kill_state+0x84>)
 8013112:	481a      	ldr	r0, [pc, #104]	@ (801317c <tcp_kill_state+0x88>)
 8013114:	f007 fbe6 	bl	801a8e4 <iprintf>

  inactivity = 0;
 8013118:	2300      	movs	r3, #0
 801311a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801311c:	2300      	movs	r3, #0
 801311e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013120:	4b17      	ldr	r3, [pc, #92]	@ (8013180 <tcp_kill_state+0x8c>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	617b      	str	r3, [r7, #20]
 8013126:	e017      	b.n	8013158 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	7d1b      	ldrb	r3, [r3, #20]
 801312c:	79fa      	ldrb	r2, [r7, #7]
 801312e:	429a      	cmp	r2, r3
 8013130:	d10f      	bne.n	8013152 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013132:	4b14      	ldr	r3, [pc, #80]	@ (8013184 <tcp_kill_state+0x90>)
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	6a1b      	ldr	r3, [r3, #32]
 801313a:	1ad3      	subs	r3, r2, r3
 801313c:	68fa      	ldr	r2, [r7, #12]
 801313e:	429a      	cmp	r2, r3
 8013140:	d807      	bhi.n	8013152 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013142:	4b10      	ldr	r3, [pc, #64]	@ (8013184 <tcp_kill_state+0x90>)
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	6a1b      	ldr	r3, [r3, #32]
 801314a:	1ad3      	subs	r3, r2, r3
 801314c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	68db      	ldr	r3, [r3, #12]
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d1e4      	bne.n	8013128 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d003      	beq.n	801316c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013164:	2100      	movs	r1, #0
 8013166:	6938      	ldr	r0, [r7, #16]
 8013168:	f7ff f94c 	bl	8012404 <tcp_abandon>
  }
}
 801316c:	bf00      	nop
 801316e:	3718      	adds	r7, #24
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	0801c4a0 	.word	0x0801c4a0
 8013178:	0801ca2c 	.word	0x0801ca2c
 801317c:	0801c4e4 	.word	0x0801c4e4
 8013180:	24014b88 	.word	0x24014b88
 8013184:	24014b7c 	.word	0x24014b7c

08013188 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801318e:	2300      	movs	r3, #0
 8013190:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013192:	2300      	movs	r3, #0
 8013194:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013196:	4b12      	ldr	r3, [pc, #72]	@ (80131e0 <tcp_kill_timewait+0x58>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	60fb      	str	r3, [r7, #12]
 801319c:	e012      	b.n	80131c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801319e:	4b11      	ldr	r3, [pc, #68]	@ (80131e4 <tcp_kill_timewait+0x5c>)
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	6a1b      	ldr	r3, [r3, #32]
 80131a6:	1ad3      	subs	r3, r2, r3
 80131a8:	687a      	ldr	r2, [r7, #4]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d807      	bhi.n	80131be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80131ae:	4b0d      	ldr	r3, [pc, #52]	@ (80131e4 <tcp_kill_timewait+0x5c>)
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	6a1b      	ldr	r3, [r3, #32]
 80131b6:	1ad3      	subs	r3, r2, r3
 80131b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	68db      	ldr	r3, [r3, #12]
 80131c2:	60fb      	str	r3, [r7, #12]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1e9      	bne.n	801319e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d002      	beq.n	80131d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80131d0:	68b8      	ldr	r0, [r7, #8]
 80131d2:	f7ff f9d5 	bl	8012580 <tcp_abort>
  }
}
 80131d6:	bf00      	nop
 80131d8:	3710      	adds	r7, #16
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	24014b8c 	.word	0x24014b8c
 80131e4:	24014b7c 	.word	0x24014b7c

080131e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80131ee:	4b10      	ldr	r3, [pc, #64]	@ (8013230 <tcp_handle_closepend+0x48>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80131f4:	e014      	b.n	8013220 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	68db      	ldr	r3, [r3, #12]
 80131fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	8b5b      	ldrh	r3, [r3, #26]
 8013200:	f003 0308 	and.w	r3, r3, #8
 8013204:	2b00      	cmp	r3, #0
 8013206:	d009      	beq.n	801321c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	8b5b      	ldrh	r3, [r3, #26]
 801320c:	f023 0308 	bic.w	r3, r3, #8
 8013210:	b29a      	uxth	r2, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7ff f85e 	bl	80122d8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d1e7      	bne.n	80131f6 <tcp_handle_closepend+0xe>
  }
}
 8013226:	bf00      	nop
 8013228:	bf00      	nop
 801322a:	3708      	adds	r7, #8
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	24014b88 	.word	0x24014b88

08013234 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801323e:	2002      	movs	r0, #2
 8013240:	f7fd fbec 	bl	8010a1c <memp_malloc>
 8013244:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d126      	bne.n	801329a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801324c:	f7ff ffcc 	bl	80131e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013250:	f7ff ff9a 	bl	8013188 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013254:	2002      	movs	r0, #2
 8013256:	f7fd fbe1 	bl	8010a1c <memp_malloc>
 801325a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d11b      	bne.n	801329a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013262:	2009      	movs	r0, #9
 8013264:	f7ff ff46 	bl	80130f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013268:	2002      	movs	r0, #2
 801326a:	f7fd fbd7 	bl	8010a1c <memp_malloc>
 801326e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d111      	bne.n	801329a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013276:	2008      	movs	r0, #8
 8013278:	f7ff ff3c 	bl	80130f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801327c:	2002      	movs	r0, #2
 801327e:	f7fd fbcd 	bl	8010a1c <memp_malloc>
 8013282:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d107      	bne.n	801329a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801328a:	79fb      	ldrb	r3, [r7, #7]
 801328c:	4618      	mov	r0, r3
 801328e:	f7ff fee3 	bl	8013058 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013292:	2002      	movs	r0, #2
 8013294:	f7fd fbc2 	bl	8010a1c <memp_malloc>
 8013298:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d03f      	beq.n	8013320 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80132a0:	229c      	movs	r2, #156	@ 0x9c
 80132a2:	2100      	movs	r1, #0
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f007 fb82 	bl	801a9ae <memset>
    pcb->prio = prio;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	79fa      	ldrb	r2, [r7, #7]
 80132ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80132b6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80132c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	22ff      	movs	r2, #255	@ 0xff
 80132ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80132d6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2206      	movs	r2, #6
 80132dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2206      	movs	r2, #6
 80132e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80132ec:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2201      	movs	r2, #1
 80132f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80132f6:	4b0d      	ldr	r3, [pc, #52]	@ (801332c <tcp_alloc+0xf8>)
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80132fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013330 <tcp_alloc+0xfc>)
 8013300:	781a      	ldrb	r2, [r3, #0]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801330c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	4a08      	ldr	r2, [pc, #32]	@ (8013334 <tcp_alloc+0x100>)
 8013314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	4a07      	ldr	r2, [pc, #28]	@ (8013338 <tcp_alloc+0x104>)
 801331c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013320:	68fb      	ldr	r3, [r7, #12]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	24014b7c 	.word	0x24014b7c
 8013330:	24014b92 	.word	0x24014b92
 8013334:	08012fed 	.word	0x08012fed
 8013338:	006ddd00 	.word	0x006ddd00

0801333c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d107      	bne.n	801335a <tcp_pcb_purge+0x1e>
 801334a:	4b21      	ldr	r3, [pc, #132]	@ (80133d0 <tcp_pcb_purge+0x94>)
 801334c:	f640 0251 	movw	r2, #2129	@ 0x851
 8013350:	4920      	ldr	r1, [pc, #128]	@ (80133d4 <tcp_pcb_purge+0x98>)
 8013352:	4821      	ldr	r0, [pc, #132]	@ (80133d8 <tcp_pcb_purge+0x9c>)
 8013354:	f007 fac6 	bl	801a8e4 <iprintf>
 8013358:	e037      	b.n	80133ca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	7d1b      	ldrb	r3, [r3, #20]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d033      	beq.n	80133ca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013366:	2b0a      	cmp	r3, #10
 8013368:	d02f      	beq.n	80133ca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801336e:	2b01      	cmp	r3, #1
 8013370:	d02b      	beq.n	80133ca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013376:	2b00      	cmp	r3, #0
 8013378:	d007      	beq.n	801338a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801337e:	4618      	mov	r0, r3
 8013380:	f7fe fa6e 	bl	8011860 <pbuf_free>
      pcb->refused_data = NULL;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2200      	movs	r2, #0
 8013388:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f000 f986 	bl	80136a4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801339e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff fdc7 	bl	8012f38 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7ff fdc2 	bl	8012f38 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2200      	movs	r2, #0
 80133b8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2200      	movs	r2, #0
 80133c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80133ca:	3708      	adds	r7, #8
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	0801c4a0 	.word	0x0801c4a0
 80133d4:	0801caec 	.word	0x0801caec
 80133d8:	0801c4e4 	.word	0x0801c4e4

080133dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d106      	bne.n	80133fa <tcp_pcb_remove+0x1e>
 80133ec:	4b3e      	ldr	r3, [pc, #248]	@ (80134e8 <tcp_pcb_remove+0x10c>)
 80133ee:	f640 0283 	movw	r2, #2179	@ 0x883
 80133f2:	493e      	ldr	r1, [pc, #248]	@ (80134ec <tcp_pcb_remove+0x110>)
 80133f4:	483e      	ldr	r0, [pc, #248]	@ (80134f0 <tcp_pcb_remove+0x114>)
 80133f6:	f007 fa75 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d106      	bne.n	801340e <tcp_pcb_remove+0x32>
 8013400:	4b39      	ldr	r3, [pc, #228]	@ (80134e8 <tcp_pcb_remove+0x10c>)
 8013402:	f640 0284 	movw	r2, #2180	@ 0x884
 8013406:	493b      	ldr	r1, [pc, #236]	@ (80134f4 <tcp_pcb_remove+0x118>)
 8013408:	4839      	ldr	r0, [pc, #228]	@ (80134f0 <tcp_pcb_remove+0x114>)
 801340a:	f007 fa6b 	bl	801a8e4 <iprintf>

  TCP_RMV(pcblist, pcb);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	683a      	ldr	r2, [r7, #0]
 8013414:	429a      	cmp	r2, r3
 8013416:	d105      	bne.n	8013424 <tcp_pcb_remove+0x48>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	68da      	ldr	r2, [r3, #12]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	e013      	b.n	801344c <tcp_pcb_remove+0x70>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	60fb      	str	r3, [r7, #12]
 801342a:	e00c      	b.n	8013446 <tcp_pcb_remove+0x6a>
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	683a      	ldr	r2, [r7, #0]
 8013432:	429a      	cmp	r2, r3
 8013434:	d104      	bne.n	8013440 <tcp_pcb_remove+0x64>
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	68da      	ldr	r2, [r3, #12]
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	60da      	str	r2, [r3, #12]
 801343e:	e005      	b.n	801344c <tcp_pcb_remove+0x70>
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	68db      	ldr	r3, [r3, #12]
 8013444:	60fb      	str	r3, [r7, #12]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d1ef      	bne.n	801342c <tcp_pcb_remove+0x50>
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	2200      	movs	r2, #0
 8013450:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013452:	6838      	ldr	r0, [r7, #0]
 8013454:	f7ff ff72 	bl	801333c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	7d1b      	ldrb	r3, [r3, #20]
 801345c:	2b0a      	cmp	r3, #10
 801345e:	d013      	beq.n	8013488 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013464:	2b01      	cmp	r3, #1
 8013466:	d00f      	beq.n	8013488 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	8b5b      	ldrh	r3, [r3, #26]
 801346c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013470:	2b00      	cmp	r3, #0
 8013472:	d009      	beq.n	8013488 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	8b5b      	ldrh	r3, [r3, #26]
 8013478:	f043 0302 	orr.w	r3, r3, #2
 801347c:	b29a      	uxth	r2, r3
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013482:	6838      	ldr	r0, [r7, #0]
 8013484:	f002 ff6a 	bl	801635c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	7d1b      	ldrb	r3, [r3, #20]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d020      	beq.n	80134d2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013494:	2b00      	cmp	r3, #0
 8013496:	d006      	beq.n	80134a6 <tcp_pcb_remove+0xca>
 8013498:	4b13      	ldr	r3, [pc, #76]	@ (80134e8 <tcp_pcb_remove+0x10c>)
 801349a:	f640 0293 	movw	r2, #2195	@ 0x893
 801349e:	4916      	ldr	r1, [pc, #88]	@ (80134f8 <tcp_pcb_remove+0x11c>)
 80134a0:	4813      	ldr	r0, [pc, #76]	@ (80134f0 <tcp_pcb_remove+0x114>)
 80134a2:	f007 fa1f 	bl	801a8e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d006      	beq.n	80134bc <tcp_pcb_remove+0xe0>
 80134ae:	4b0e      	ldr	r3, [pc, #56]	@ (80134e8 <tcp_pcb_remove+0x10c>)
 80134b0:	f640 0294 	movw	r2, #2196	@ 0x894
 80134b4:	4911      	ldr	r1, [pc, #68]	@ (80134fc <tcp_pcb_remove+0x120>)
 80134b6:	480e      	ldr	r0, [pc, #56]	@ (80134f0 <tcp_pcb_remove+0x114>)
 80134b8:	f007 fa14 	bl	801a8e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d006      	beq.n	80134d2 <tcp_pcb_remove+0xf6>
 80134c4:	4b08      	ldr	r3, [pc, #32]	@ (80134e8 <tcp_pcb_remove+0x10c>)
 80134c6:	f640 0296 	movw	r2, #2198	@ 0x896
 80134ca:	490d      	ldr	r1, [pc, #52]	@ (8013500 <tcp_pcb_remove+0x124>)
 80134cc:	4808      	ldr	r0, [pc, #32]	@ (80134f0 <tcp_pcb_remove+0x114>)
 80134ce:	f007 fa09 	bl	801a8e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	2200      	movs	r2, #0
 80134d6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	2200      	movs	r2, #0
 80134dc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80134de:	bf00      	nop
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	0801c4a0 	.word	0x0801c4a0
 80134ec:	0801cb08 	.word	0x0801cb08
 80134f0:	0801c4e4 	.word	0x0801c4e4
 80134f4:	0801cb24 	.word	0x0801cb24
 80134f8:	0801cb44 	.word	0x0801cb44
 80134fc:	0801cb5c 	.word	0x0801cb5c
 8013500:	0801cb78 	.word	0x0801cb78

08013504 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d106      	bne.n	8013520 <tcp_next_iss+0x1c>
 8013512:	4b0a      	ldr	r3, [pc, #40]	@ (801353c <tcp_next_iss+0x38>)
 8013514:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013518:	4909      	ldr	r1, [pc, #36]	@ (8013540 <tcp_next_iss+0x3c>)
 801351a:	480a      	ldr	r0, [pc, #40]	@ (8013544 <tcp_next_iss+0x40>)
 801351c:	f007 f9e2 	bl	801a8e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013520:	4b09      	ldr	r3, [pc, #36]	@ (8013548 <tcp_next_iss+0x44>)
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	4b09      	ldr	r3, [pc, #36]	@ (801354c <tcp_next_iss+0x48>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4413      	add	r3, r2
 801352a:	4a07      	ldr	r2, [pc, #28]	@ (8013548 <tcp_next_iss+0x44>)
 801352c:	6013      	str	r3, [r2, #0]
  return iss;
 801352e:	4b06      	ldr	r3, [pc, #24]	@ (8013548 <tcp_next_iss+0x44>)
 8013530:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013532:	4618      	mov	r0, r3
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	0801c4a0 	.word	0x0801c4a0
 8013540:	0801cb90 	.word	0x0801cb90
 8013544:	0801c4e4 	.word	0x0801c4e4
 8013548:	240049bc 	.word	0x240049bc
 801354c:	24014b7c 	.word	0x24014b7c

08013550 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b086      	sub	sp, #24
 8013554:	af00      	add	r7, sp, #0
 8013556:	4603      	mov	r3, r0
 8013558:	60b9      	str	r1, [r7, #8]
 801355a:	607a      	str	r2, [r7, #4]
 801355c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d106      	bne.n	8013572 <tcp_eff_send_mss_netif+0x22>
 8013564:	4b14      	ldr	r3, [pc, #80]	@ (80135b8 <tcp_eff_send_mss_netif+0x68>)
 8013566:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801356a:	4914      	ldr	r1, [pc, #80]	@ (80135bc <tcp_eff_send_mss_netif+0x6c>)
 801356c:	4814      	ldr	r0, [pc, #80]	@ (80135c0 <tcp_eff_send_mss_netif+0x70>)
 801356e:	f007 f9b9 	bl	801a8e4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013578:	89fb      	ldrh	r3, [r7, #14]
 801357a:	e019      	b.n	80135b0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013580:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013582:	8afb      	ldrh	r3, [r7, #22]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d012      	beq.n	80135ae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013588:	2328      	movs	r3, #40	@ 0x28
 801358a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801358c:	8afa      	ldrh	r2, [r7, #22]
 801358e:	8abb      	ldrh	r3, [r7, #20]
 8013590:	429a      	cmp	r2, r3
 8013592:	d904      	bls.n	801359e <tcp_eff_send_mss_netif+0x4e>
 8013594:	8afa      	ldrh	r2, [r7, #22]
 8013596:	8abb      	ldrh	r3, [r7, #20]
 8013598:	1ad3      	subs	r3, r2, r3
 801359a:	b29b      	uxth	r3, r3
 801359c:	e000      	b.n	80135a0 <tcp_eff_send_mss_netif+0x50>
 801359e:	2300      	movs	r3, #0
 80135a0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80135a2:	8a7a      	ldrh	r2, [r7, #18]
 80135a4:	89fb      	ldrh	r3, [r7, #14]
 80135a6:	4293      	cmp	r3, r2
 80135a8:	bf28      	it	cs
 80135aa:	4613      	movcs	r3, r2
 80135ac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80135ae:	89fb      	ldrh	r3, [r7, #14]
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3718      	adds	r7, #24
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	0801c4a0 	.word	0x0801c4a0
 80135bc:	0801cbac 	.word	0x0801cbac
 80135c0:	0801c4e4 	.word	0x0801c4e4

080135c4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d119      	bne.n	801360c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80135d8:	4b10      	ldr	r3, [pc, #64]	@ (801361c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80135da:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80135de:	4910      	ldr	r1, [pc, #64]	@ (8013620 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80135e0:	4810      	ldr	r0, [pc, #64]	@ (8013624 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80135e2:	f007 f97f 	bl	801a8e4 <iprintf>

  while (pcb != NULL) {
 80135e6:	e011      	b.n	801360c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d108      	bne.n	8013606 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80135fa:	68f8      	ldr	r0, [r7, #12]
 80135fc:	f7fe ffc0 	bl	8012580 <tcp_abort>
      pcb = next;
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	60fb      	str	r3, [r7, #12]
 8013604:	e002      	b.n	801360c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	68db      	ldr	r3, [r3, #12]
 801360a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d1ea      	bne.n	80135e8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013612:	bf00      	nop
 8013614:	bf00      	nop
 8013616:	3710      	adds	r7, #16
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	0801c4a0 	.word	0x0801c4a0
 8013620:	0801cbd4 	.word	0x0801cbd4
 8013624:	0801c4e4 	.word	0x0801c4e4

08013628 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d02a      	beq.n	801368e <tcp_netif_ip_addr_changed+0x66>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d026      	beq.n	801368e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013640:	4b15      	ldr	r3, [pc, #84]	@ (8013698 <tcp_netif_ip_addr_changed+0x70>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	4619      	mov	r1, r3
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7ff ffbc 	bl	80135c4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801364c:	4b13      	ldr	r3, [pc, #76]	@ (801369c <tcp_netif_ip_addr_changed+0x74>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	4619      	mov	r1, r3
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f7ff ffb6 	bl	80135c4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d017      	beq.n	801368e <tcp_netif_ip_addr_changed+0x66>
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d013      	beq.n	801368e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013666:	4b0e      	ldr	r3, [pc, #56]	@ (80136a0 <tcp_netif_ip_addr_changed+0x78>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	60fb      	str	r3, [r7, #12]
 801366c:	e00c      	b.n	8013688 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681a      	ldr	r2, [r3, #0]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	429a      	cmp	r2, r3
 8013678:	d103      	bne.n	8013682 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	60fb      	str	r3, [r7, #12]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d1ef      	bne.n	801366e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801368e:	bf00      	nop
 8013690:	3710      	adds	r7, #16
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	24014b88 	.word	0x24014b88
 801369c:	24014b80 	.word	0x24014b80
 80136a0:	24014b84 	.word	0x24014b84

080136a4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b082      	sub	sp, #8
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d007      	beq.n	80136c4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7ff fc3d 	bl	8012f38 <tcp_segs_free>
    pcb->ooseq = NULL;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2200      	movs	r2, #0
 80136c2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80136c4:	bf00      	nop
 80136c6:	3708      	adds	r7, #8
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80136cc:	b590      	push	{r4, r7, lr}
 80136ce:	b08d      	sub	sp, #52	@ 0x34
 80136d0:	af04      	add	r7, sp, #16
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d105      	bne.n	80136e8 <tcp_input+0x1c>
 80136dc:	4b9b      	ldr	r3, [pc, #620]	@ (801394c <tcp_input+0x280>)
 80136de:	2283      	movs	r2, #131	@ 0x83
 80136e0:	499b      	ldr	r1, [pc, #620]	@ (8013950 <tcp_input+0x284>)
 80136e2:	489c      	ldr	r0, [pc, #624]	@ (8013954 <tcp_input+0x288>)
 80136e4:	f007 f8fe 	bl	801a8e4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	4a9a      	ldr	r2, [pc, #616]	@ (8013958 <tcp_input+0x28c>)
 80136ee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	895b      	ldrh	r3, [r3, #10]
 80136f4:	2b13      	cmp	r3, #19
 80136f6:	f240 83d1 	bls.w	8013e9c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80136fa:	4b98      	ldr	r3, [pc, #608]	@ (801395c <tcp_input+0x290>)
 80136fc:	695b      	ldr	r3, [r3, #20]
 80136fe:	4a97      	ldr	r2, [pc, #604]	@ (801395c <tcp_input+0x290>)
 8013700:	6812      	ldr	r2, [r2, #0]
 8013702:	4611      	mov	r1, r2
 8013704:	4618      	mov	r0, r3
 8013706:	f005 ffa5 	bl	8019654 <ip4_addr_isbroadcast_u32>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	f040 83c7 	bne.w	8013ea0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013712:	4b92      	ldr	r3, [pc, #584]	@ (801395c <tcp_input+0x290>)
 8013714:	695b      	ldr	r3, [r3, #20]
 8013716:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801371a:	2be0      	cmp	r3, #224	@ 0xe0
 801371c:	f000 83c0 	beq.w	8013ea0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013720:	4b8d      	ldr	r3, [pc, #564]	@ (8013958 <tcp_input+0x28c>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	899b      	ldrh	r3, [r3, #12]
 8013726:	b29b      	uxth	r3, r3
 8013728:	4618      	mov	r0, r3
 801372a:	f7fc fbe7 	bl	800fefc <lwip_htons>
 801372e:	4603      	mov	r3, r0
 8013730:	0b1b      	lsrs	r3, r3, #12
 8013732:	b29b      	uxth	r3, r3
 8013734:	b2db      	uxtb	r3, r3
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801373a:	7cbb      	ldrb	r3, [r7, #18]
 801373c:	2b13      	cmp	r3, #19
 801373e:	f240 83b1 	bls.w	8013ea4 <tcp_input+0x7d8>
 8013742:	7cbb      	ldrb	r3, [r7, #18]
 8013744:	b29a      	uxth	r2, r3
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	891b      	ldrh	r3, [r3, #8]
 801374a:	429a      	cmp	r2, r3
 801374c:	f200 83aa 	bhi.w	8013ea4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013750:	7cbb      	ldrb	r3, [r7, #18]
 8013752:	b29b      	uxth	r3, r3
 8013754:	3b14      	subs	r3, #20
 8013756:	b29a      	uxth	r2, r3
 8013758:	4b81      	ldr	r3, [pc, #516]	@ (8013960 <tcp_input+0x294>)
 801375a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801375c:	4b81      	ldr	r3, [pc, #516]	@ (8013964 <tcp_input+0x298>)
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	895a      	ldrh	r2, [r3, #10]
 8013766:	7cbb      	ldrb	r3, [r7, #18]
 8013768:	b29b      	uxth	r3, r3
 801376a:	429a      	cmp	r2, r3
 801376c:	d309      	bcc.n	8013782 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801376e:	4b7c      	ldr	r3, [pc, #496]	@ (8013960 <tcp_input+0x294>)
 8013770:	881a      	ldrh	r2, [r3, #0]
 8013772:	4b7d      	ldr	r3, [pc, #500]	@ (8013968 <tcp_input+0x29c>)
 8013774:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013776:	7cbb      	ldrb	r3, [r7, #18]
 8013778:	4619      	mov	r1, r3
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f7fd ffea 	bl	8011754 <pbuf_remove_header>
 8013780:	e04e      	b.n	8013820 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d105      	bne.n	8013796 <tcp_input+0xca>
 801378a:	4b70      	ldr	r3, [pc, #448]	@ (801394c <tcp_input+0x280>)
 801378c:	22c2      	movs	r2, #194	@ 0xc2
 801378e:	4977      	ldr	r1, [pc, #476]	@ (801396c <tcp_input+0x2a0>)
 8013790:	4870      	ldr	r0, [pc, #448]	@ (8013954 <tcp_input+0x288>)
 8013792:	f007 f8a7 	bl	801a8e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013796:	2114      	movs	r1, #20
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7fd ffdb 	bl	8011754 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	895a      	ldrh	r2, [r3, #10]
 80137a2:	4b71      	ldr	r3, [pc, #452]	@ (8013968 <tcp_input+0x29c>)
 80137a4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80137a6:	4b6e      	ldr	r3, [pc, #440]	@ (8013960 <tcp_input+0x294>)
 80137a8:	881a      	ldrh	r2, [r3, #0]
 80137aa:	4b6f      	ldr	r3, [pc, #444]	@ (8013968 <tcp_input+0x29c>)
 80137ac:	881b      	ldrh	r3, [r3, #0]
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80137b2:	4b6d      	ldr	r3, [pc, #436]	@ (8013968 <tcp_input+0x29c>)
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	4619      	mov	r1, r3
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7fd ffcb 	bl	8011754 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	895b      	ldrh	r3, [r3, #10]
 80137c4:	8a3a      	ldrh	r2, [r7, #16]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	f200 836e 	bhi.w	8013ea8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	4a64      	ldr	r2, [pc, #400]	@ (8013964 <tcp_input+0x298>)
 80137d4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	8a3a      	ldrh	r2, [r7, #16]
 80137dc:	4611      	mov	r1, r2
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fd ffb8 	bl	8011754 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	891a      	ldrh	r2, [r3, #8]
 80137e8:	8a3b      	ldrh	r3, [r7, #16]
 80137ea:	1ad3      	subs	r3, r2, r3
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	895b      	ldrh	r3, [r3, #10]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d005      	beq.n	8013806 <tcp_input+0x13a>
 80137fa:	4b54      	ldr	r3, [pc, #336]	@ (801394c <tcp_input+0x280>)
 80137fc:	22df      	movs	r2, #223	@ 0xdf
 80137fe:	495c      	ldr	r1, [pc, #368]	@ (8013970 <tcp_input+0x2a4>)
 8013800:	4854      	ldr	r0, [pc, #336]	@ (8013954 <tcp_input+0x288>)
 8013802:	f007 f86f 	bl	801a8e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	891a      	ldrh	r2, [r3, #8]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	891b      	ldrh	r3, [r3, #8]
 8013810:	429a      	cmp	r2, r3
 8013812:	d005      	beq.n	8013820 <tcp_input+0x154>
 8013814:	4b4d      	ldr	r3, [pc, #308]	@ (801394c <tcp_input+0x280>)
 8013816:	22e0      	movs	r2, #224	@ 0xe0
 8013818:	4956      	ldr	r1, [pc, #344]	@ (8013974 <tcp_input+0x2a8>)
 801381a:	484e      	ldr	r0, [pc, #312]	@ (8013954 <tcp_input+0x288>)
 801381c:	f007 f862 	bl	801a8e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013820:	4b4d      	ldr	r3, [pc, #308]	@ (8013958 <tcp_input+0x28c>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	b29b      	uxth	r3, r3
 8013828:	4a4b      	ldr	r2, [pc, #300]	@ (8013958 <tcp_input+0x28c>)
 801382a:	6814      	ldr	r4, [r2, #0]
 801382c:	4618      	mov	r0, r3
 801382e:	f7fc fb65 	bl	800fefc <lwip_htons>
 8013832:	4603      	mov	r3, r0
 8013834:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013836:	4b48      	ldr	r3, [pc, #288]	@ (8013958 <tcp_input+0x28c>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	885b      	ldrh	r3, [r3, #2]
 801383c:	b29b      	uxth	r3, r3
 801383e:	4a46      	ldr	r2, [pc, #280]	@ (8013958 <tcp_input+0x28c>)
 8013840:	6814      	ldr	r4, [r2, #0]
 8013842:	4618      	mov	r0, r3
 8013844:	f7fc fb5a 	bl	800fefc <lwip_htons>
 8013848:	4603      	mov	r3, r0
 801384a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801384c:	4b42      	ldr	r3, [pc, #264]	@ (8013958 <tcp_input+0x28c>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	4a41      	ldr	r2, [pc, #260]	@ (8013958 <tcp_input+0x28c>)
 8013854:	6814      	ldr	r4, [r2, #0]
 8013856:	4618      	mov	r0, r3
 8013858:	f7fc fb66 	bl	800ff28 <lwip_htonl>
 801385c:	4603      	mov	r3, r0
 801385e:	6063      	str	r3, [r4, #4]
 8013860:	6863      	ldr	r3, [r4, #4]
 8013862:	4a45      	ldr	r2, [pc, #276]	@ (8013978 <tcp_input+0x2ac>)
 8013864:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013866:	4b3c      	ldr	r3, [pc, #240]	@ (8013958 <tcp_input+0x28c>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	689b      	ldr	r3, [r3, #8]
 801386c:	4a3a      	ldr	r2, [pc, #232]	@ (8013958 <tcp_input+0x28c>)
 801386e:	6814      	ldr	r4, [r2, #0]
 8013870:	4618      	mov	r0, r3
 8013872:	f7fc fb59 	bl	800ff28 <lwip_htonl>
 8013876:	4603      	mov	r3, r0
 8013878:	60a3      	str	r3, [r4, #8]
 801387a:	68a3      	ldr	r3, [r4, #8]
 801387c:	4a3f      	ldr	r2, [pc, #252]	@ (801397c <tcp_input+0x2b0>)
 801387e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013880:	4b35      	ldr	r3, [pc, #212]	@ (8013958 <tcp_input+0x28c>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	89db      	ldrh	r3, [r3, #14]
 8013886:	b29b      	uxth	r3, r3
 8013888:	4a33      	ldr	r2, [pc, #204]	@ (8013958 <tcp_input+0x28c>)
 801388a:	6814      	ldr	r4, [r2, #0]
 801388c:	4618      	mov	r0, r3
 801388e:	f7fc fb35 	bl	800fefc <lwip_htons>
 8013892:	4603      	mov	r3, r0
 8013894:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013896:	4b30      	ldr	r3, [pc, #192]	@ (8013958 <tcp_input+0x28c>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	899b      	ldrh	r3, [r3, #12]
 801389c:	b29b      	uxth	r3, r3
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fc fb2c 	bl	800fefc <lwip_htons>
 80138a4:	4603      	mov	r3, r0
 80138a6:	b2db      	uxtb	r3, r3
 80138a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80138ac:	b2da      	uxtb	r2, r3
 80138ae:	4b34      	ldr	r3, [pc, #208]	@ (8013980 <tcp_input+0x2b4>)
 80138b0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	891a      	ldrh	r2, [r3, #8]
 80138b6:	4b33      	ldr	r3, [pc, #204]	@ (8013984 <tcp_input+0x2b8>)
 80138b8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80138ba:	4b31      	ldr	r3, [pc, #196]	@ (8013980 <tcp_input+0x2b4>)
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	f003 0303 	and.w	r3, r3, #3
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00c      	beq.n	80138e0 <tcp_input+0x214>
    tcplen++;
 80138c6:	4b2f      	ldr	r3, [pc, #188]	@ (8013984 <tcp_input+0x2b8>)
 80138c8:	881b      	ldrh	r3, [r3, #0]
 80138ca:	3301      	adds	r3, #1
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	4b2d      	ldr	r3, [pc, #180]	@ (8013984 <tcp_input+0x2b8>)
 80138d0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	891a      	ldrh	r2, [r3, #8]
 80138d6:	4b2b      	ldr	r3, [pc, #172]	@ (8013984 <tcp_input+0x2b8>)
 80138d8:	881b      	ldrh	r3, [r3, #0]
 80138da:	429a      	cmp	r2, r3
 80138dc:	f200 82e6 	bhi.w	8013eac <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80138e0:	2300      	movs	r3, #0
 80138e2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138e4:	4b28      	ldr	r3, [pc, #160]	@ (8013988 <tcp_input+0x2bc>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	61fb      	str	r3, [r7, #28]
 80138ea:	e09d      	b.n	8013a28 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	7d1b      	ldrb	r3, [r3, #20]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d105      	bne.n	8013900 <tcp_input+0x234>
 80138f4:	4b15      	ldr	r3, [pc, #84]	@ (801394c <tcp_input+0x280>)
 80138f6:	22fb      	movs	r2, #251	@ 0xfb
 80138f8:	4924      	ldr	r1, [pc, #144]	@ (801398c <tcp_input+0x2c0>)
 80138fa:	4816      	ldr	r0, [pc, #88]	@ (8013954 <tcp_input+0x288>)
 80138fc:	f006 fff2 	bl	801a8e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	7d1b      	ldrb	r3, [r3, #20]
 8013904:	2b0a      	cmp	r3, #10
 8013906:	d105      	bne.n	8013914 <tcp_input+0x248>
 8013908:	4b10      	ldr	r3, [pc, #64]	@ (801394c <tcp_input+0x280>)
 801390a:	22fc      	movs	r2, #252	@ 0xfc
 801390c:	4920      	ldr	r1, [pc, #128]	@ (8013990 <tcp_input+0x2c4>)
 801390e:	4811      	ldr	r0, [pc, #68]	@ (8013954 <tcp_input+0x288>)
 8013910:	f006 ffe8 	bl	801a8e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	7d1b      	ldrb	r3, [r3, #20]
 8013918:	2b01      	cmp	r3, #1
 801391a:	d105      	bne.n	8013928 <tcp_input+0x25c>
 801391c:	4b0b      	ldr	r3, [pc, #44]	@ (801394c <tcp_input+0x280>)
 801391e:	22fd      	movs	r2, #253	@ 0xfd
 8013920:	491c      	ldr	r1, [pc, #112]	@ (8013994 <tcp_input+0x2c8>)
 8013922:	480c      	ldr	r0, [pc, #48]	@ (8013954 <tcp_input+0x288>)
 8013924:	f006 ffde 	bl	801a8e4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	7a1b      	ldrb	r3, [r3, #8]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d033      	beq.n	8013998 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	7a1a      	ldrb	r2, [r3, #8]
 8013934:	4b09      	ldr	r3, [pc, #36]	@ (801395c <tcp_input+0x290>)
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801393c:	3301      	adds	r3, #1
 801393e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013940:	429a      	cmp	r2, r3
 8013942:	d029      	beq.n	8013998 <tcp_input+0x2cc>
      prev = pcb;
 8013944:	69fb      	ldr	r3, [r7, #28]
 8013946:	61bb      	str	r3, [r7, #24]
      continue;
 8013948:	e06b      	b.n	8013a22 <tcp_input+0x356>
 801394a:	bf00      	nop
 801394c:	0801cc08 	.word	0x0801cc08
 8013950:	0801cc3c 	.word	0x0801cc3c
 8013954:	0801cc54 	.word	0x0801cc54
 8013958:	24014ba4 	.word	0x24014ba4
 801395c:	2400e040 	.word	0x2400e040
 8013960:	24014ba8 	.word	0x24014ba8
 8013964:	24014bac 	.word	0x24014bac
 8013968:	24014baa 	.word	0x24014baa
 801396c:	0801cc7c 	.word	0x0801cc7c
 8013970:	0801cc8c 	.word	0x0801cc8c
 8013974:	0801cc98 	.word	0x0801cc98
 8013978:	24014bb4 	.word	0x24014bb4
 801397c:	24014bb8 	.word	0x24014bb8
 8013980:	24014bc0 	.word	0x24014bc0
 8013984:	24014bbe 	.word	0x24014bbe
 8013988:	24014b88 	.word	0x24014b88
 801398c:	0801ccb8 	.word	0x0801ccb8
 8013990:	0801cce0 	.word	0x0801cce0
 8013994:	0801cd0c 	.word	0x0801cd0c
    }

    if (pcb->remote_port == tcphdr->src &&
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	8b1a      	ldrh	r2, [r3, #24]
 801399c:	4b72      	ldr	r3, [pc, #456]	@ (8013b68 <tcp_input+0x49c>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d13a      	bne.n	8013a1e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	8ada      	ldrh	r2, [r3, #22]
 80139ac:	4b6e      	ldr	r3, [pc, #440]	@ (8013b68 <tcp_input+0x49c>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	885b      	ldrh	r3, [r3, #2]
 80139b2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d132      	bne.n	8013a1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	685a      	ldr	r2, [r3, #4]
 80139bc:	4b6b      	ldr	r3, [pc, #428]	@ (8013b6c <tcp_input+0x4a0>)
 80139be:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d12c      	bne.n	8013a1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80139c4:	69fb      	ldr	r3, [r7, #28]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	4b68      	ldr	r3, [pc, #416]	@ (8013b6c <tcp_input+0x4a0>)
 80139ca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d126      	bne.n	8013a1e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80139d0:	69fb      	ldr	r3, [r7, #28]
 80139d2:	68db      	ldr	r3, [r3, #12]
 80139d4:	69fa      	ldr	r2, [r7, #28]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d106      	bne.n	80139e8 <tcp_input+0x31c>
 80139da:	4b65      	ldr	r3, [pc, #404]	@ (8013b70 <tcp_input+0x4a4>)
 80139dc:	f240 120d 	movw	r2, #269	@ 0x10d
 80139e0:	4964      	ldr	r1, [pc, #400]	@ (8013b74 <tcp_input+0x4a8>)
 80139e2:	4865      	ldr	r0, [pc, #404]	@ (8013b78 <tcp_input+0x4ac>)
 80139e4:	f006 ff7e 	bl	801a8e4 <iprintf>
      if (prev != NULL) {
 80139e8:	69bb      	ldr	r3, [r7, #24]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00a      	beq.n	8013a04 <tcp_input+0x338>
        prev->next = pcb->next;
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	68da      	ldr	r2, [r3, #12]
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80139f6:	4b61      	ldr	r3, [pc, #388]	@ (8013b7c <tcp_input+0x4b0>)
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80139fe:	4a5f      	ldr	r2, [pc, #380]	@ (8013b7c <tcp_input+0x4b0>)
 8013a00:	69fb      	ldr	r3, [r7, #28]
 8013a02:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	69fa      	ldr	r2, [r7, #28]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d111      	bne.n	8013a32 <tcp_input+0x366>
 8013a0e:	4b58      	ldr	r3, [pc, #352]	@ (8013b70 <tcp_input+0x4a4>)
 8013a10:	f240 1215 	movw	r2, #277	@ 0x115
 8013a14:	495a      	ldr	r1, [pc, #360]	@ (8013b80 <tcp_input+0x4b4>)
 8013a16:	4858      	ldr	r0, [pc, #352]	@ (8013b78 <tcp_input+0x4ac>)
 8013a18:	f006 ff64 	bl	801a8e4 <iprintf>
      break;
 8013a1c:	e009      	b.n	8013a32 <tcp_input+0x366>
    }
    prev = pcb;
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a22:	69fb      	ldr	r3, [r7, #28]
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	61fb      	str	r3, [r7, #28]
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	f47f af5e 	bne.w	80138ec <tcp_input+0x220>
 8013a30:	e000      	b.n	8013a34 <tcp_input+0x368>
      break;
 8013a32:	bf00      	nop
  }

  if (pcb == NULL) {
 8013a34:	69fb      	ldr	r3, [r7, #28]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	f040 80aa 	bne.w	8013b90 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a3c:	4b51      	ldr	r3, [pc, #324]	@ (8013b84 <tcp_input+0x4b8>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	61fb      	str	r3, [r7, #28]
 8013a42:	e03f      	b.n	8013ac4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	7d1b      	ldrb	r3, [r3, #20]
 8013a48:	2b0a      	cmp	r3, #10
 8013a4a:	d006      	beq.n	8013a5a <tcp_input+0x38e>
 8013a4c:	4b48      	ldr	r3, [pc, #288]	@ (8013b70 <tcp_input+0x4a4>)
 8013a4e:	f240 121f 	movw	r2, #287	@ 0x11f
 8013a52:	494d      	ldr	r1, [pc, #308]	@ (8013b88 <tcp_input+0x4bc>)
 8013a54:	4848      	ldr	r0, [pc, #288]	@ (8013b78 <tcp_input+0x4ac>)
 8013a56:	f006 ff45 	bl	801a8e4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	7a1b      	ldrb	r3, [r3, #8]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d009      	beq.n	8013a76 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a62:	69fb      	ldr	r3, [r7, #28]
 8013a64:	7a1a      	ldrb	r2, [r3, #8]
 8013a66:	4b41      	ldr	r3, [pc, #260]	@ (8013b6c <tcp_input+0x4a0>)
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013a6e:	3301      	adds	r3, #1
 8013a70:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d122      	bne.n	8013abc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	8b1a      	ldrh	r2, [r3, #24]
 8013a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8013b68 <tcp_input+0x49c>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	881b      	ldrh	r3, [r3, #0]
 8013a80:	b29b      	uxth	r3, r3
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d11b      	bne.n	8013abe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	8ada      	ldrh	r2, [r3, #22]
 8013a8a:	4b37      	ldr	r3, [pc, #220]	@ (8013b68 <tcp_input+0x49c>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	885b      	ldrh	r3, [r3, #2]
 8013a90:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d113      	bne.n	8013abe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	685a      	ldr	r2, [r3, #4]
 8013a9a:	4b34      	ldr	r3, [pc, #208]	@ (8013b6c <tcp_input+0x4a0>)
 8013a9c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d10d      	bne.n	8013abe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	4b31      	ldr	r3, [pc, #196]	@ (8013b6c <tcp_input+0x4a0>)
 8013aa8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d107      	bne.n	8013abe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013aae:	69f8      	ldr	r0, [r7, #28]
 8013ab0:	f000 fb56 	bl	8014160 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f7fd fed3 	bl	8011860 <pbuf_free>
        return;
 8013aba:	e1fd      	b.n	8013eb8 <tcp_input+0x7ec>
        continue;
 8013abc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	68db      	ldr	r3, [r3, #12]
 8013ac2:	61fb      	str	r3, [r7, #28]
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d1bc      	bne.n	8013a44 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013aca:	2300      	movs	r3, #0
 8013acc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ace:	4b2f      	ldr	r3, [pc, #188]	@ (8013b8c <tcp_input+0x4c0>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	617b      	str	r3, [r7, #20]
 8013ad4:	e02a      	b.n	8013b2c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	7a1b      	ldrb	r3, [r3, #8]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00c      	beq.n	8013af8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	7a1a      	ldrb	r2, [r3, #8]
 8013ae2:	4b22      	ldr	r3, [pc, #136]	@ (8013b6c <tcp_input+0x4a0>)
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013aea:	3301      	adds	r3, #1
 8013aec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d002      	beq.n	8013af8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	61bb      	str	r3, [r7, #24]
        continue;
 8013af6:	e016      	b.n	8013b26 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	8ada      	ldrh	r2, [r3, #22]
 8013afc:	4b1a      	ldr	r3, [pc, #104]	@ (8013b68 <tcp_input+0x49c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	885b      	ldrh	r3, [r3, #2]
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d10c      	bne.n	8013b22 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	4b17      	ldr	r3, [pc, #92]	@ (8013b6c <tcp_input+0x4a0>)
 8013b0e:	695b      	ldr	r3, [r3, #20]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d00f      	beq.n	8013b34 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d00d      	beq.n	8013b36 <tcp_input+0x46a>
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d009      	beq.n	8013b36 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	68db      	ldr	r3, [r3, #12]
 8013b2a:	617b      	str	r3, [r7, #20]
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d1d1      	bne.n	8013ad6 <tcp_input+0x40a>
 8013b32:	e000      	b.n	8013b36 <tcp_input+0x46a>
            break;
 8013b34:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d029      	beq.n	8013b90 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013b3c:	69bb      	ldr	r3, [r7, #24]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00a      	beq.n	8013b58 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	68da      	ldr	r2, [r3, #12]
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013b4a:	4b10      	ldr	r3, [pc, #64]	@ (8013b8c <tcp_input+0x4c0>)
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013b52:	4a0e      	ldr	r2, [pc, #56]	@ (8013b8c <tcp_input+0x4c0>)
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013b58:	6978      	ldr	r0, [r7, #20]
 8013b5a:	f000 fa03 	bl	8013f64 <tcp_listen_input>
      }
      pbuf_free(p);
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f7fd fe7e 	bl	8011860 <pbuf_free>
      return;
 8013b64:	e1a8      	b.n	8013eb8 <tcp_input+0x7ec>
 8013b66:	bf00      	nop
 8013b68:	24014ba4 	.word	0x24014ba4
 8013b6c:	2400e040 	.word	0x2400e040
 8013b70:	0801cc08 	.word	0x0801cc08
 8013b74:	0801cd34 	.word	0x0801cd34
 8013b78:	0801cc54 	.word	0x0801cc54
 8013b7c:	24014b88 	.word	0x24014b88
 8013b80:	0801cd60 	.word	0x0801cd60
 8013b84:	24014b8c 	.word	0x24014b8c
 8013b88:	0801cd8c 	.word	0x0801cd8c
 8013b8c:	24014b84 	.word	0x24014b84
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013b90:	69fb      	ldr	r3, [r7, #28]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	f000 8158 	beq.w	8013e48 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013b98:	4b95      	ldr	r3, [pc, #596]	@ (8013df0 <tcp_input+0x724>)
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	891a      	ldrh	r2, [r3, #8]
 8013ba2:	4b93      	ldr	r3, [pc, #588]	@ (8013df0 <tcp_input+0x724>)
 8013ba4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013ba6:	4a92      	ldr	r2, [pc, #584]	@ (8013df0 <tcp_input+0x724>)
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013bac:	4b91      	ldr	r3, [pc, #580]	@ (8013df4 <tcp_input+0x728>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	4a8f      	ldr	r2, [pc, #572]	@ (8013df0 <tcp_input+0x724>)
 8013bb2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013bb4:	4b90      	ldr	r3, [pc, #576]	@ (8013df8 <tcp_input+0x72c>)
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013bba:	4b90      	ldr	r3, [pc, #576]	@ (8013dfc <tcp_input+0x730>)
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8013e00 <tcp_input+0x734>)
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013bc6:	4b8f      	ldr	r3, [pc, #572]	@ (8013e04 <tcp_input+0x738>)
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	f003 0308 	and.w	r3, r3, #8
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d006      	beq.n	8013be0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	7b5b      	ldrb	r3, [r3, #13]
 8013bd6:	f043 0301 	orr.w	r3, r3, #1
 8013bda:	b2da      	uxtb	r2, r3
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d017      	beq.n	8013c18 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013be8:	69f8      	ldr	r0, [r7, #28]
 8013bea:	f7ff f927 	bl	8012e3c <tcp_process_refused_data>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	f113 0f0d 	cmn.w	r3, #13
 8013bf4:	d007      	beq.n	8013c06 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d00c      	beq.n	8013c18 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013bfe:	4b82      	ldr	r3, [pc, #520]	@ (8013e08 <tcp_input+0x73c>)
 8013c00:	881b      	ldrh	r3, [r3, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d008      	beq.n	8013c18 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f040 80e4 	bne.w	8013dd8 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013c10:	69f8      	ldr	r0, [r7, #28]
 8013c12:	f003 f9a9 	bl	8016f68 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013c16:	e0df      	b.n	8013dd8 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013c18:	4a7c      	ldr	r2, [pc, #496]	@ (8013e0c <tcp_input+0x740>)
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013c1e:	69f8      	ldr	r0, [r7, #28]
 8013c20:	f000 fb18 	bl	8014254 <tcp_process>
 8013c24:	4603      	mov	r3, r0
 8013c26:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013c28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c2c:	f113 0f0d 	cmn.w	r3, #13
 8013c30:	f000 80d4 	beq.w	8013ddc <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013c34:	4b71      	ldr	r3, [pc, #452]	@ (8013dfc <tcp_input+0x730>)
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	f003 0308 	and.w	r3, r3, #8
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d015      	beq.n	8013c6c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d008      	beq.n	8013c5c <tcp_input+0x590>
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c50:	69fa      	ldr	r2, [r7, #28]
 8013c52:	6912      	ldr	r2, [r2, #16]
 8013c54:	f06f 010d 	mvn.w	r1, #13
 8013c58:	4610      	mov	r0, r2
 8013c5a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013c5c:	69f9      	ldr	r1, [r7, #28]
 8013c5e:	486c      	ldr	r0, [pc, #432]	@ (8013e10 <tcp_input+0x744>)
 8013c60:	f7ff fbbc 	bl	80133dc <tcp_pcb_remove>
        tcp_free(pcb);
 8013c64:	69f8      	ldr	r0, [r7, #28]
 8013c66:	f7fe f9a3 	bl	8011fb0 <tcp_free>
 8013c6a:	e0da      	b.n	8013e22 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013c70:	4b63      	ldr	r3, [pc, #396]	@ (8013e00 <tcp_input+0x734>)
 8013c72:	881b      	ldrh	r3, [r3, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d01d      	beq.n	8013cb4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013c78:	4b61      	ldr	r3, [pc, #388]	@ (8013e00 <tcp_input+0x734>)
 8013c7a:	881b      	ldrh	r3, [r3, #0]
 8013c7c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013c7e:	69fb      	ldr	r3, [r7, #28]
 8013c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00a      	beq.n	8013c9e <tcp_input+0x5d2>
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c8e:	69fa      	ldr	r2, [r7, #28]
 8013c90:	6910      	ldr	r0, [r2, #16]
 8013c92:	89fa      	ldrh	r2, [r7, #14]
 8013c94:	69f9      	ldr	r1, [r7, #28]
 8013c96:	4798      	blx	r3
 8013c98:	4603      	mov	r3, r0
 8013c9a:	74fb      	strb	r3, [r7, #19]
 8013c9c:	e001      	b.n	8013ca2 <tcp_input+0x5d6>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013ca2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ca6:	f113 0f0d 	cmn.w	r3, #13
 8013caa:	f000 8099 	beq.w	8013de0 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013cae:	4b54      	ldr	r3, [pc, #336]	@ (8013e00 <tcp_input+0x734>)
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013cb4:	69f8      	ldr	r0, [r7, #28]
 8013cb6:	f000 f915 	bl	8013ee4 <tcp_input_delayed_close>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f040 8091 	bne.w	8013de4 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8013df8 <tcp_input+0x72c>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d041      	beq.n	8013d4e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013cca:	69fb      	ldr	r3, [r7, #28]
 8013ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d006      	beq.n	8013ce0 <tcp_input+0x614>
 8013cd2:	4b50      	ldr	r3, [pc, #320]	@ (8013e14 <tcp_input+0x748>)
 8013cd4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013cd8:	494f      	ldr	r1, [pc, #316]	@ (8013e18 <tcp_input+0x74c>)
 8013cda:	4850      	ldr	r0, [pc, #320]	@ (8013e1c <tcp_input+0x750>)
 8013cdc:	f006 fe02 	bl	801a8e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013ce0:	69fb      	ldr	r3, [r7, #28]
 8013ce2:	8b5b      	ldrh	r3, [r3, #26]
 8013ce4:	f003 0310 	and.w	r3, r3, #16
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d008      	beq.n	8013cfe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013cec:	4b42      	ldr	r3, [pc, #264]	@ (8013df8 <tcp_input+0x72c>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7fd fdb5 	bl	8011860 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013cf6:	69f8      	ldr	r0, [r7, #28]
 8013cf8:	f7fe fc42 	bl	8012580 <tcp_abort>
            goto aborted;
 8013cfc:	e091      	b.n	8013e22 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00c      	beq.n	8013d22 <tcp_input+0x656>
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	6918      	ldr	r0, [r3, #16]
 8013d12:	4b39      	ldr	r3, [pc, #228]	@ (8013df8 <tcp_input+0x72c>)
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	2300      	movs	r3, #0
 8013d18:	69f9      	ldr	r1, [r7, #28]
 8013d1a:	47a0      	blx	r4
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	74fb      	strb	r3, [r7, #19]
 8013d20:	e008      	b.n	8013d34 <tcp_input+0x668>
 8013d22:	4b35      	ldr	r3, [pc, #212]	@ (8013df8 <tcp_input+0x72c>)
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	2300      	movs	r3, #0
 8013d28:	69f9      	ldr	r1, [r7, #28]
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	f7ff f95e 	bl	8012fec <tcp_recv_null>
 8013d30:	4603      	mov	r3, r0
 8013d32:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013d34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d38:	f113 0f0d 	cmn.w	r3, #13
 8013d3c:	d054      	beq.n	8013de8 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013d3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d003      	beq.n	8013d4e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013d46:	4b2c      	ldr	r3, [pc, #176]	@ (8013df8 <tcp_input+0x72c>)
 8013d48:	681a      	ldr	r2, [r3, #0]
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8013dfc <tcp_input+0x730>)
 8013d50:	781b      	ldrb	r3, [r3, #0]
 8013d52:	f003 0320 	and.w	r3, r3, #32
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d031      	beq.n	8013dbe <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013d5a:	69fb      	ldr	r3, [r7, #28]
 8013d5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d009      	beq.n	8013d76 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d66:	7b5a      	ldrb	r2, [r3, #13]
 8013d68:	69fb      	ldr	r3, [r7, #28]
 8013d6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d6c:	f042 0220 	orr.w	r2, r2, #32
 8013d70:	b2d2      	uxtb	r2, r2
 8013d72:	735a      	strb	r2, [r3, #13]
 8013d74:	e023      	b.n	8013dbe <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d7a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d005      	beq.n	8013d8e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d86:	3301      	adds	r3, #1
 8013d88:	b29a      	uxth	r2, r3
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d00b      	beq.n	8013db0 <tcp_input+0x6e4>
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	6918      	ldr	r0, [r3, #16]
 8013da2:	2300      	movs	r3, #0
 8013da4:	2200      	movs	r2, #0
 8013da6:	69f9      	ldr	r1, [r7, #28]
 8013da8:	47a0      	blx	r4
 8013daa:	4603      	mov	r3, r0
 8013dac:	74fb      	strb	r3, [r7, #19]
 8013dae:	e001      	b.n	8013db4 <tcp_input+0x6e8>
 8013db0:	2300      	movs	r3, #0
 8013db2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013db4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013db8:	f113 0f0d 	cmn.w	r3, #13
 8013dbc:	d016      	beq.n	8013dec <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013dbe:	4b13      	ldr	r3, [pc, #76]	@ (8013e0c <tcp_input+0x740>)
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013dc4:	69f8      	ldr	r0, [r7, #28]
 8013dc6:	f000 f88d 	bl	8013ee4 <tcp_input_delayed_close>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d127      	bne.n	8013e20 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013dd0:	69f8      	ldr	r0, [r7, #28]
 8013dd2:	f002 fac3 	bl	801635c <tcp_output>
 8013dd6:	e024      	b.n	8013e22 <tcp_input+0x756>
        goto aborted;
 8013dd8:	bf00      	nop
 8013dda:	e022      	b.n	8013e22 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013ddc:	bf00      	nop
 8013dde:	e020      	b.n	8013e22 <tcp_input+0x756>
              goto aborted;
 8013de0:	bf00      	nop
 8013de2:	e01e      	b.n	8013e22 <tcp_input+0x756>
          goto aborted;
 8013de4:	bf00      	nop
 8013de6:	e01c      	b.n	8013e22 <tcp_input+0x756>
            goto aborted;
 8013de8:	bf00      	nop
 8013dea:	e01a      	b.n	8013e22 <tcp_input+0x756>
              goto aborted;
 8013dec:	bf00      	nop
 8013dee:	e018      	b.n	8013e22 <tcp_input+0x756>
 8013df0:	24014b94 	.word	0x24014b94
 8013df4:	24014ba4 	.word	0x24014ba4
 8013df8:	24014bc4 	.word	0x24014bc4
 8013dfc:	24014bc1 	.word	0x24014bc1
 8013e00:	24014bbc 	.word	0x24014bbc
 8013e04:	24014bc0 	.word	0x24014bc0
 8013e08:	24014bbe 	.word	0x24014bbe
 8013e0c:	24014bc8 	.word	0x24014bc8
 8013e10:	24014b88 	.word	0x24014b88
 8013e14:	0801cc08 	.word	0x0801cc08
 8013e18:	0801cdbc 	.word	0x0801cdbc
 8013e1c:	0801cc54 	.word	0x0801cc54
          goto aborted;
 8013e20:	bf00      	nop
    tcp_input_pcb = NULL;
 8013e22:	4b27      	ldr	r3, [pc, #156]	@ (8013ec0 <tcp_input+0x7f4>)
 8013e24:	2200      	movs	r2, #0
 8013e26:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013e28:	4b26      	ldr	r3, [pc, #152]	@ (8013ec4 <tcp_input+0x7f8>)
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013e2e:	4b26      	ldr	r3, [pc, #152]	@ (8013ec8 <tcp_input+0x7fc>)
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d03f      	beq.n	8013eb6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013e36:	4b24      	ldr	r3, [pc, #144]	@ (8013ec8 <tcp_input+0x7fc>)
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7fd fd10 	bl	8011860 <pbuf_free>
      inseg.p = NULL;
 8013e40:	4b21      	ldr	r3, [pc, #132]	@ (8013ec8 <tcp_input+0x7fc>)
 8013e42:	2200      	movs	r2, #0
 8013e44:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013e46:	e036      	b.n	8013eb6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013e48:	4b20      	ldr	r3, [pc, #128]	@ (8013ecc <tcp_input+0x800>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	899b      	ldrh	r3, [r3, #12]
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7fc f853 	bl	800fefc <lwip_htons>
 8013e56:	4603      	mov	r3, r0
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	f003 0304 	and.w	r3, r3, #4
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d118      	bne.n	8013e94 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e62:	4b1b      	ldr	r3, [pc, #108]	@ (8013ed0 <tcp_input+0x804>)
 8013e64:	6819      	ldr	r1, [r3, #0]
 8013e66:	4b1b      	ldr	r3, [pc, #108]	@ (8013ed4 <tcp_input+0x808>)
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8013ed8 <tcp_input+0x80c>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e72:	4b16      	ldr	r3, [pc, #88]	@ (8013ecc <tcp_input+0x800>)
 8013e74:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e76:	885b      	ldrh	r3, [r3, #2]
 8013e78:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e7a:	4a14      	ldr	r2, [pc, #80]	@ (8013ecc <tcp_input+0x800>)
 8013e7c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e7e:	8812      	ldrh	r2, [r2, #0]
 8013e80:	b292      	uxth	r2, r2
 8013e82:	9202      	str	r2, [sp, #8]
 8013e84:	9301      	str	r3, [sp, #4]
 8013e86:	4b15      	ldr	r3, [pc, #84]	@ (8013edc <tcp_input+0x810>)
 8013e88:	9300      	str	r3, [sp, #0]
 8013e8a:	4b15      	ldr	r3, [pc, #84]	@ (8013ee0 <tcp_input+0x814>)
 8013e8c:	4602      	mov	r2, r0
 8013e8e:	2000      	movs	r0, #0
 8013e90:	f003 f818 	bl	8016ec4 <tcp_rst>
    pbuf_free(p);
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f7fd fce3 	bl	8011860 <pbuf_free>
  return;
 8013e9a:	e00c      	b.n	8013eb6 <tcp_input+0x7ea>
    goto dropped;
 8013e9c:	bf00      	nop
 8013e9e:	e006      	b.n	8013eae <tcp_input+0x7e2>
    goto dropped;
 8013ea0:	bf00      	nop
 8013ea2:	e004      	b.n	8013eae <tcp_input+0x7e2>
    goto dropped;
 8013ea4:	bf00      	nop
 8013ea6:	e002      	b.n	8013eae <tcp_input+0x7e2>
      goto dropped;
 8013ea8:	bf00      	nop
 8013eaa:	e000      	b.n	8013eae <tcp_input+0x7e2>
      goto dropped;
 8013eac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f7fd fcd6 	bl	8011860 <pbuf_free>
 8013eb4:	e000      	b.n	8013eb8 <tcp_input+0x7ec>
  return;
 8013eb6:	bf00      	nop
}
 8013eb8:	3724      	adds	r7, #36	@ 0x24
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd90      	pop	{r4, r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	24014bc8 	.word	0x24014bc8
 8013ec4:	24014bc4 	.word	0x24014bc4
 8013ec8:	24014b94 	.word	0x24014b94
 8013ecc:	24014ba4 	.word	0x24014ba4
 8013ed0:	24014bb8 	.word	0x24014bb8
 8013ed4:	24014bbe 	.word	0x24014bbe
 8013ed8:	24014bb4 	.word	0x24014bb4
 8013edc:	2400e050 	.word	0x2400e050
 8013ee0:	2400e054 	.word	0x2400e054

08013ee4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b082      	sub	sp, #8
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d106      	bne.n	8013f00 <tcp_input_delayed_close+0x1c>
 8013ef2:	4b17      	ldr	r3, [pc, #92]	@ (8013f50 <tcp_input_delayed_close+0x6c>)
 8013ef4:	f240 225a 	movw	r2, #602	@ 0x25a
 8013ef8:	4916      	ldr	r1, [pc, #88]	@ (8013f54 <tcp_input_delayed_close+0x70>)
 8013efa:	4817      	ldr	r0, [pc, #92]	@ (8013f58 <tcp_input_delayed_close+0x74>)
 8013efc:	f006 fcf2 	bl	801a8e4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013f00:	4b16      	ldr	r3, [pc, #88]	@ (8013f5c <tcp_input_delayed_close+0x78>)
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	f003 0310 	and.w	r3, r3, #16
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d01c      	beq.n	8013f46 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	8b5b      	ldrh	r3, [r3, #26]
 8013f10:	f003 0310 	and.w	r3, r3, #16
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d10d      	bne.n	8013f34 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d008      	beq.n	8013f34 <tcp_input_delayed_close+0x50>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	6912      	ldr	r2, [r2, #16]
 8013f2c:	f06f 010e 	mvn.w	r1, #14
 8013f30:	4610      	mov	r0, r2
 8013f32:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f34:	6879      	ldr	r1, [r7, #4]
 8013f36:	480a      	ldr	r0, [pc, #40]	@ (8013f60 <tcp_input_delayed_close+0x7c>)
 8013f38:	f7ff fa50 	bl	80133dc <tcp_pcb_remove>
    tcp_free(pcb);
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7fe f837 	bl	8011fb0 <tcp_free>
    return 1;
 8013f42:	2301      	movs	r3, #1
 8013f44:	e000      	b.n	8013f48 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013f46:	2300      	movs	r3, #0
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3708      	adds	r7, #8
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	0801cc08 	.word	0x0801cc08
 8013f54:	0801cdd8 	.word	0x0801cdd8
 8013f58:	0801cc54 	.word	0x0801cc54
 8013f5c:	24014bc1 	.word	0x24014bc1
 8013f60:	24014b88 	.word	0x24014b88

08013f64 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b08b      	sub	sp, #44	@ 0x2c
 8013f68:	af04      	add	r7, sp, #16
 8013f6a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013f6c:	4b6f      	ldr	r3, [pc, #444]	@ (801412c <tcp_listen_input+0x1c8>)
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	f003 0304 	and.w	r3, r3, #4
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	f040 80d2 	bne.w	801411e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d106      	bne.n	8013f8e <tcp_listen_input+0x2a>
 8013f80:	4b6b      	ldr	r3, [pc, #428]	@ (8014130 <tcp_listen_input+0x1cc>)
 8013f82:	f240 2281 	movw	r2, #641	@ 0x281
 8013f86:	496b      	ldr	r1, [pc, #428]	@ (8014134 <tcp_listen_input+0x1d0>)
 8013f88:	486b      	ldr	r0, [pc, #428]	@ (8014138 <tcp_listen_input+0x1d4>)
 8013f8a:	f006 fcab 	bl	801a8e4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013f8e:	4b67      	ldr	r3, [pc, #412]	@ (801412c <tcp_listen_input+0x1c8>)
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	f003 0310 	and.w	r3, r3, #16
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d019      	beq.n	8013fce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f9a:	4b68      	ldr	r3, [pc, #416]	@ (801413c <tcp_listen_input+0x1d8>)
 8013f9c:	6819      	ldr	r1, [r3, #0]
 8013f9e:	4b68      	ldr	r3, [pc, #416]	@ (8014140 <tcp_listen_input+0x1dc>)
 8013fa0:	881b      	ldrh	r3, [r3, #0]
 8013fa2:	461a      	mov	r2, r3
 8013fa4:	4b67      	ldr	r3, [pc, #412]	@ (8014144 <tcp_listen_input+0x1e0>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013faa:	4b67      	ldr	r3, [pc, #412]	@ (8014148 <tcp_listen_input+0x1e4>)
 8013fac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fae:	885b      	ldrh	r3, [r3, #2]
 8013fb0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fb2:	4a65      	ldr	r2, [pc, #404]	@ (8014148 <tcp_listen_input+0x1e4>)
 8013fb4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fb6:	8812      	ldrh	r2, [r2, #0]
 8013fb8:	b292      	uxth	r2, r2
 8013fba:	9202      	str	r2, [sp, #8]
 8013fbc:	9301      	str	r3, [sp, #4]
 8013fbe:	4b63      	ldr	r3, [pc, #396]	@ (801414c <tcp_listen_input+0x1e8>)
 8013fc0:	9300      	str	r3, [sp, #0]
 8013fc2:	4b63      	ldr	r3, [pc, #396]	@ (8014150 <tcp_listen_input+0x1ec>)
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f002 ff7c 	bl	8016ec4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013fcc:	e0a9      	b.n	8014122 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013fce:	4b57      	ldr	r3, [pc, #348]	@ (801412c <tcp_listen_input+0x1c8>)
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	f003 0302 	and.w	r3, r3, #2
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f000 80a3 	beq.w	8014122 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	7d5b      	ldrb	r3, [r3, #21]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7ff f927 	bl	8013234 <tcp_alloc>
 8013fe6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d111      	bne.n	8014012 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	699b      	ldr	r3, [r3, #24]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d00a      	beq.n	801400c <tcp_listen_input+0xa8>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	699b      	ldr	r3, [r3, #24]
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	6910      	ldr	r0, [r2, #16]
 8013ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8014002:	2100      	movs	r1, #0
 8014004:	4798      	blx	r3
 8014006:	4603      	mov	r3, r0
 8014008:	73bb      	strb	r3, [r7, #14]
      return;
 801400a:	e08b      	b.n	8014124 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801400c:	23f0      	movs	r3, #240	@ 0xf0
 801400e:	73bb      	strb	r3, [r7, #14]
      return;
 8014010:	e088      	b.n	8014124 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014012:	4b50      	ldr	r3, [pc, #320]	@ (8014154 <tcp_listen_input+0x1f0>)
 8014014:	695a      	ldr	r2, [r3, #20]
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801401a:	4b4e      	ldr	r3, [pc, #312]	@ (8014154 <tcp_listen_input+0x1f0>)
 801401c:	691a      	ldr	r2, [r3, #16]
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	8ada      	ldrh	r2, [r3, #22]
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801402a:	4b47      	ldr	r3, [pc, #284]	@ (8014148 <tcp_listen_input+0x1e4>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	881b      	ldrh	r3, [r3, #0]
 8014030:	b29a      	uxth	r2, r3
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	2203      	movs	r2, #3
 801403a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801403c:	4b41      	ldr	r3, [pc, #260]	@ (8014144 <tcp_listen_input+0x1e0>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	1c5a      	adds	r2, r3, #1
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801404e:	6978      	ldr	r0, [r7, #20]
 8014050:	f7ff fa58 	bl	8013504 <tcp_next_iss>
 8014054:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	693a      	ldr	r2, [r7, #16]
 801405a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	693a      	ldr	r2, [r7, #16]
 8014060:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	693a      	ldr	r2, [r7, #16]
 8014066:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	693a      	ldr	r2, [r7, #16]
 801406c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801406e:	4b35      	ldr	r3, [pc, #212]	@ (8014144 <tcp_listen_input+0x1e0>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	1e5a      	subs	r2, r3, #1
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	691a      	ldr	r2, [r3, #16]
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	7a5b      	ldrb	r3, [r3, #9]
 801408a:	f003 030c 	and.w	r3, r3, #12
 801408e:	b2da      	uxtb	r2, r3
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	7a1a      	ldrb	r2, [r3, #8]
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801409c:	4b2e      	ldr	r3, [pc, #184]	@ (8014158 <tcp_listen_input+0x1f4>)
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	60da      	str	r2, [r3, #12]
 80140a4:	4a2c      	ldr	r2, [pc, #176]	@ (8014158 <tcp_listen_input+0x1f4>)
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	6013      	str	r3, [r2, #0]
 80140aa:	f003 f8cd 	bl	8017248 <tcp_timer_needed>
 80140ae:	4b2b      	ldr	r3, [pc, #172]	@ (801415c <tcp_listen_input+0x1f8>)
 80140b0:	2201      	movs	r2, #1
 80140b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80140b4:	6978      	ldr	r0, [r7, #20]
 80140b6:	f001 fd8b 	bl	8015bd0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80140ba:	4b23      	ldr	r3, [pc, #140]	@ (8014148 <tcp_listen_input+0x1e4>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	89db      	ldrh	r3, [r3, #14]
 80140c0:	b29a      	uxth	r2, r3
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	3304      	adds	r3, #4
 80140dc:	4618      	mov	r0, r3
 80140de:	f005 f817 	bl	8019110 <ip4_route>
 80140e2:	4601      	mov	r1, r0
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	3304      	adds	r3, #4
 80140e8:	461a      	mov	r2, r3
 80140ea:	4620      	mov	r0, r4
 80140ec:	f7ff fa30 	bl	8013550 <tcp_eff_send_mss_netif>
 80140f0:	4603      	mov	r3, r0
 80140f2:	461a      	mov	r2, r3
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80140f8:	2112      	movs	r1, #18
 80140fa:	6978      	ldr	r0, [r7, #20]
 80140fc:	f002 f840 	bl	8016180 <tcp_enqueue_flags>
 8014100:	4603      	mov	r3, r0
 8014102:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d004      	beq.n	8014116 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801410c:	2100      	movs	r1, #0
 801410e:	6978      	ldr	r0, [r7, #20]
 8014110:	f7fe f978 	bl	8012404 <tcp_abandon>
      return;
 8014114:	e006      	b.n	8014124 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014116:	6978      	ldr	r0, [r7, #20]
 8014118:	f002 f920 	bl	801635c <tcp_output>
  return;
 801411c:	e001      	b.n	8014122 <tcp_listen_input+0x1be>
    return;
 801411e:	bf00      	nop
 8014120:	e000      	b.n	8014124 <tcp_listen_input+0x1c0>
  return;
 8014122:	bf00      	nop
}
 8014124:	371c      	adds	r7, #28
 8014126:	46bd      	mov	sp, r7
 8014128:	bd90      	pop	{r4, r7, pc}
 801412a:	bf00      	nop
 801412c:	24014bc0 	.word	0x24014bc0
 8014130:	0801cc08 	.word	0x0801cc08
 8014134:	0801ce00 	.word	0x0801ce00
 8014138:	0801cc54 	.word	0x0801cc54
 801413c:	24014bb8 	.word	0x24014bb8
 8014140:	24014bbe 	.word	0x24014bbe
 8014144:	24014bb4 	.word	0x24014bb4
 8014148:	24014ba4 	.word	0x24014ba4
 801414c:	2400e050 	.word	0x2400e050
 8014150:	2400e054 	.word	0x2400e054
 8014154:	2400e040 	.word	0x2400e040
 8014158:	24014b88 	.word	0x24014b88
 801415c:	24014b90 	.word	0x24014b90

08014160 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b086      	sub	sp, #24
 8014164:	af04      	add	r7, sp, #16
 8014166:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014168:	4b2f      	ldr	r3, [pc, #188]	@ (8014228 <tcp_timewait_input+0xc8>)
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	f003 0304 	and.w	r3, r3, #4
 8014170:	2b00      	cmp	r3, #0
 8014172:	d153      	bne.n	801421c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d106      	bne.n	8014188 <tcp_timewait_input+0x28>
 801417a:	4b2c      	ldr	r3, [pc, #176]	@ (801422c <tcp_timewait_input+0xcc>)
 801417c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014180:	492b      	ldr	r1, [pc, #172]	@ (8014230 <tcp_timewait_input+0xd0>)
 8014182:	482c      	ldr	r0, [pc, #176]	@ (8014234 <tcp_timewait_input+0xd4>)
 8014184:	f006 fbae 	bl	801a8e4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014188:	4b27      	ldr	r3, [pc, #156]	@ (8014228 <tcp_timewait_input+0xc8>)
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	f003 0302 	and.w	r3, r3, #2
 8014190:	2b00      	cmp	r3, #0
 8014192:	d02a      	beq.n	80141ea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014194:	4b28      	ldr	r3, [pc, #160]	@ (8014238 <tcp_timewait_input+0xd8>)
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801419c:	1ad3      	subs	r3, r2, r3
 801419e:	2b00      	cmp	r3, #0
 80141a0:	db2d      	blt.n	80141fe <tcp_timewait_input+0x9e>
 80141a2:	4b25      	ldr	r3, [pc, #148]	@ (8014238 <tcp_timewait_input+0xd8>)
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141aa:	6879      	ldr	r1, [r7, #4]
 80141ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80141ae:	440b      	add	r3, r1
 80141b0:	1ad3      	subs	r3, r2, r3
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	dc23      	bgt.n	80141fe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141b6:	4b21      	ldr	r3, [pc, #132]	@ (801423c <tcp_timewait_input+0xdc>)
 80141b8:	6819      	ldr	r1, [r3, #0]
 80141ba:	4b21      	ldr	r3, [pc, #132]	@ (8014240 <tcp_timewait_input+0xe0>)
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	461a      	mov	r2, r3
 80141c0:	4b1d      	ldr	r3, [pc, #116]	@ (8014238 <tcp_timewait_input+0xd8>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141c6:	4b1f      	ldr	r3, [pc, #124]	@ (8014244 <tcp_timewait_input+0xe4>)
 80141c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141ca:	885b      	ldrh	r3, [r3, #2]
 80141cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141ce:	4a1d      	ldr	r2, [pc, #116]	@ (8014244 <tcp_timewait_input+0xe4>)
 80141d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141d2:	8812      	ldrh	r2, [r2, #0]
 80141d4:	b292      	uxth	r2, r2
 80141d6:	9202      	str	r2, [sp, #8]
 80141d8:	9301      	str	r3, [sp, #4]
 80141da:	4b1b      	ldr	r3, [pc, #108]	@ (8014248 <tcp_timewait_input+0xe8>)
 80141dc:	9300      	str	r3, [sp, #0]
 80141de:	4b1b      	ldr	r3, [pc, #108]	@ (801424c <tcp_timewait_input+0xec>)
 80141e0:	4602      	mov	r2, r0
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f002 fe6e 	bl	8016ec4 <tcp_rst>
      return;
 80141e8:	e01b      	b.n	8014222 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80141ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014228 <tcp_timewait_input+0xc8>)
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	f003 0301 	and.w	r3, r3, #1
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d003      	beq.n	80141fe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80141f6:	4b16      	ldr	r3, [pc, #88]	@ (8014250 <tcp_timewait_input+0xf0>)
 80141f8:	681a      	ldr	r2, [r3, #0]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80141fe:	4b10      	ldr	r3, [pc, #64]	@ (8014240 <tcp_timewait_input+0xe0>)
 8014200:	881b      	ldrh	r3, [r3, #0]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d00c      	beq.n	8014220 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	8b5b      	ldrh	r3, [r3, #26]
 801420a:	f043 0302 	orr.w	r3, r3, #2
 801420e:	b29a      	uxth	r2, r3
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f002 f8a1 	bl	801635c <tcp_output>
  }
  return;
 801421a:	e001      	b.n	8014220 <tcp_timewait_input+0xc0>
    return;
 801421c:	bf00      	nop
 801421e:	e000      	b.n	8014222 <tcp_timewait_input+0xc2>
  return;
 8014220:	bf00      	nop
}
 8014222:	3708      	adds	r7, #8
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	24014bc0 	.word	0x24014bc0
 801422c:	0801cc08 	.word	0x0801cc08
 8014230:	0801ce20 	.word	0x0801ce20
 8014234:	0801cc54 	.word	0x0801cc54
 8014238:	24014bb4 	.word	0x24014bb4
 801423c:	24014bb8 	.word	0x24014bb8
 8014240:	24014bbe 	.word	0x24014bbe
 8014244:	24014ba4 	.word	0x24014ba4
 8014248:	2400e050 	.word	0x2400e050
 801424c:	2400e054 	.word	0x2400e054
 8014250:	24014b7c 	.word	0x24014b7c

08014254 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014254:	b590      	push	{r4, r7, lr}
 8014256:	b08d      	sub	sp, #52	@ 0x34
 8014258:	af04      	add	r7, sp, #16
 801425a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801425c:	2300      	movs	r3, #0
 801425e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014260:	2300      	movs	r3, #0
 8014262:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d106      	bne.n	8014278 <tcp_process+0x24>
 801426a:	4b9d      	ldr	r3, [pc, #628]	@ (80144e0 <tcp_process+0x28c>)
 801426c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014270:	499c      	ldr	r1, [pc, #624]	@ (80144e4 <tcp_process+0x290>)
 8014272:	489d      	ldr	r0, [pc, #628]	@ (80144e8 <tcp_process+0x294>)
 8014274:	f006 fb36 	bl	801a8e4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014278:	4b9c      	ldr	r3, [pc, #624]	@ (80144ec <tcp_process+0x298>)
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	f003 0304 	and.w	r3, r3, #4
 8014280:	2b00      	cmp	r3, #0
 8014282:	d04e      	beq.n	8014322 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	7d1b      	ldrb	r3, [r3, #20]
 8014288:	2b02      	cmp	r3, #2
 801428a:	d108      	bne.n	801429e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014290:	4b97      	ldr	r3, [pc, #604]	@ (80144f0 <tcp_process+0x29c>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	429a      	cmp	r2, r3
 8014296:	d123      	bne.n	80142e0 <tcp_process+0x8c>
        acceptable = 1;
 8014298:	2301      	movs	r3, #1
 801429a:	76fb      	strb	r3, [r7, #27]
 801429c:	e020      	b.n	80142e0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80142a2:	4b94      	ldr	r3, [pc, #592]	@ (80144f4 <tcp_process+0x2a0>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d102      	bne.n	80142b0 <tcp_process+0x5c>
        acceptable = 1;
 80142aa:	2301      	movs	r3, #1
 80142ac:	76fb      	strb	r3, [r7, #27]
 80142ae:	e017      	b.n	80142e0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142b0:	4b90      	ldr	r3, [pc, #576]	@ (80144f4 <tcp_process+0x2a0>)
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142b8:	1ad3      	subs	r3, r2, r3
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	db10      	blt.n	80142e0 <tcp_process+0x8c>
 80142be:	4b8d      	ldr	r3, [pc, #564]	@ (80144f4 <tcp_process+0x2a0>)
 80142c0:	681a      	ldr	r2, [r3, #0]
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142c6:	6879      	ldr	r1, [r7, #4]
 80142c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80142ca:	440b      	add	r3, r1
 80142cc:	1ad3      	subs	r3, r2, r3
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	dc06      	bgt.n	80142e0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	8b5b      	ldrh	r3, [r3, #26]
 80142d6:	f043 0302 	orr.w	r3, r3, #2
 80142da:	b29a      	uxth	r2, r3
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80142e0:	7efb      	ldrb	r3, [r7, #27]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d01b      	beq.n	801431e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	7d1b      	ldrb	r3, [r3, #20]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d106      	bne.n	80142fc <tcp_process+0xa8>
 80142ee:	4b7c      	ldr	r3, [pc, #496]	@ (80144e0 <tcp_process+0x28c>)
 80142f0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80142f4:	4980      	ldr	r1, [pc, #512]	@ (80144f8 <tcp_process+0x2a4>)
 80142f6:	487c      	ldr	r0, [pc, #496]	@ (80144e8 <tcp_process+0x294>)
 80142f8:	f006 faf4 	bl	801a8e4 <iprintf>
      recv_flags |= TF_RESET;
 80142fc:	4b7f      	ldr	r3, [pc, #508]	@ (80144fc <tcp_process+0x2a8>)
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	f043 0308 	orr.w	r3, r3, #8
 8014304:	b2da      	uxtb	r2, r3
 8014306:	4b7d      	ldr	r3, [pc, #500]	@ (80144fc <tcp_process+0x2a8>)
 8014308:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	8b5b      	ldrh	r3, [r3, #26]
 801430e:	f023 0301 	bic.w	r3, r3, #1
 8014312:	b29a      	uxth	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014318:	f06f 030d 	mvn.w	r3, #13
 801431c:	e37a      	b.n	8014a14 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801431e:	2300      	movs	r3, #0
 8014320:	e378      	b.n	8014a14 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014322:	4b72      	ldr	r3, [pc, #456]	@ (80144ec <tcp_process+0x298>)
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	f003 0302 	and.w	r3, r3, #2
 801432a:	2b00      	cmp	r3, #0
 801432c:	d010      	beq.n	8014350 <tcp_process+0xfc>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	7d1b      	ldrb	r3, [r3, #20]
 8014332:	2b02      	cmp	r3, #2
 8014334:	d00c      	beq.n	8014350 <tcp_process+0xfc>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	7d1b      	ldrb	r3, [r3, #20]
 801433a:	2b03      	cmp	r3, #3
 801433c:	d008      	beq.n	8014350 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	8b5b      	ldrh	r3, [r3, #26]
 8014342:	f043 0302 	orr.w	r3, r3, #2
 8014346:	b29a      	uxth	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801434c:	2300      	movs	r3, #0
 801434e:	e361      	b.n	8014a14 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	8b5b      	ldrh	r3, [r3, #26]
 8014354:	f003 0310 	and.w	r3, r3, #16
 8014358:	2b00      	cmp	r3, #0
 801435a:	d103      	bne.n	8014364 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801435c:	4b68      	ldr	r3, [pc, #416]	@ (8014500 <tcp_process+0x2ac>)
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2200      	movs	r2, #0
 8014368:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	2200      	movs	r2, #0
 8014370:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f001 fc2b 	bl	8015bd0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	7d1b      	ldrb	r3, [r3, #20]
 801437e:	3b02      	subs	r3, #2
 8014380:	2b07      	cmp	r3, #7
 8014382:	f200 8337 	bhi.w	80149f4 <tcp_process+0x7a0>
 8014386:	a201      	add	r2, pc, #4	@ (adr r2, 801438c <tcp_process+0x138>)
 8014388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801438c:	080143ad 	.word	0x080143ad
 8014390:	080145dd 	.word	0x080145dd
 8014394:	08014755 	.word	0x08014755
 8014398:	0801477f 	.word	0x0801477f
 801439c:	080148a3 	.word	0x080148a3
 80143a0:	08014755 	.word	0x08014755
 80143a4:	0801492f 	.word	0x0801492f
 80143a8:	080149bf 	.word	0x080149bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80143ac:	4b4f      	ldr	r3, [pc, #316]	@ (80144ec <tcp_process+0x298>)
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	f003 0310 	and.w	r3, r3, #16
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	f000 80e4 	beq.w	8014582 <tcp_process+0x32e>
 80143ba:	4b4c      	ldr	r3, [pc, #304]	@ (80144ec <tcp_process+0x298>)
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	f003 0302 	and.w	r3, r3, #2
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	f000 80dd 	beq.w	8014582 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143cc:	1c5a      	adds	r2, r3, #1
 80143ce:	4b48      	ldr	r3, [pc, #288]	@ (80144f0 <tcp_process+0x29c>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	f040 80d5 	bne.w	8014582 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80143d8:	4b46      	ldr	r3, [pc, #280]	@ (80144f4 <tcp_process+0x2a0>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	1c5a      	adds	r2, r3, #1
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80143ea:	4b41      	ldr	r3, [pc, #260]	@ (80144f0 <tcp_process+0x29c>)
 80143ec:	681a      	ldr	r2, [r3, #0]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80143f2:	4b44      	ldr	r3, [pc, #272]	@ (8014504 <tcp_process+0x2b0>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	89db      	ldrh	r3, [r3, #14]
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801440c:	4b39      	ldr	r3, [pc, #228]	@ (80144f4 <tcp_process+0x2a0>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	1e5a      	subs	r2, r3, #1
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2204      	movs	r2, #4
 801441a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	3304      	adds	r3, #4
 8014424:	4618      	mov	r0, r3
 8014426:	f004 fe73 	bl	8019110 <ip4_route>
 801442a:	4601      	mov	r1, r0
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	3304      	adds	r3, #4
 8014430:	461a      	mov	r2, r3
 8014432:	4620      	mov	r0, r4
 8014434:	f7ff f88c 	bl	8013550 <tcp_eff_send_mss_netif>
 8014438:	4603      	mov	r3, r0
 801443a:	461a      	mov	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014444:	009a      	lsls	r2, r3, #2
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801444a:	005b      	lsls	r3, r3, #1
 801444c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014450:	428b      	cmp	r3, r1
 8014452:	bf38      	it	cc
 8014454:	460b      	movcc	r3, r1
 8014456:	429a      	cmp	r2, r3
 8014458:	d204      	bcs.n	8014464 <tcp_process+0x210>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	b29b      	uxth	r3, r3
 8014462:	e00d      	b.n	8014480 <tcp_process+0x22c>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014468:	005b      	lsls	r3, r3, #1
 801446a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801446e:	4293      	cmp	r3, r2
 8014470:	d904      	bls.n	801447c <tcp_process+0x228>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014476:	005b      	lsls	r3, r3, #1
 8014478:	b29b      	uxth	r3, r3
 801447a:	e001      	b.n	8014480 <tcp_process+0x22c>
 801447c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014480:	687a      	ldr	r2, [r7, #4]
 8014482:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801448c:	2b00      	cmp	r3, #0
 801448e:	d106      	bne.n	801449e <tcp_process+0x24a>
 8014490:	4b13      	ldr	r3, [pc, #76]	@ (80144e0 <tcp_process+0x28c>)
 8014492:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014496:	491c      	ldr	r1, [pc, #112]	@ (8014508 <tcp_process+0x2b4>)
 8014498:	4813      	ldr	r0, [pc, #76]	@ (80144e8 <tcp_process+0x294>)
 801449a:	f006 fa23 	bl	801a8e4 <iprintf>
        --pcb->snd_queuelen;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80144a4:	3b01      	subs	r3, #1
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144b2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d12a      	bne.n	8014510 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144be:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d106      	bne.n	80144d4 <tcp_process+0x280>
 80144c6:	4b06      	ldr	r3, [pc, #24]	@ (80144e0 <tcp_process+0x28c>)
 80144c8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80144cc:	490f      	ldr	r1, [pc, #60]	@ (801450c <tcp_process+0x2b8>)
 80144ce:	4806      	ldr	r0, [pc, #24]	@ (80144e8 <tcp_process+0x294>)
 80144d0:	f006 fa08 	bl	801a8e4 <iprintf>
          pcb->unsent = rseg->next;
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	66da      	str	r2, [r3, #108]	@ 0x6c
 80144dc:	e01c      	b.n	8014518 <tcp_process+0x2c4>
 80144de:	bf00      	nop
 80144e0:	0801cc08 	.word	0x0801cc08
 80144e4:	0801ce40 	.word	0x0801ce40
 80144e8:	0801cc54 	.word	0x0801cc54
 80144ec:	24014bc0 	.word	0x24014bc0
 80144f0:	24014bb8 	.word	0x24014bb8
 80144f4:	24014bb4 	.word	0x24014bb4
 80144f8:	0801ce5c 	.word	0x0801ce5c
 80144fc:	24014bc1 	.word	0x24014bc1
 8014500:	24014b7c 	.word	0x24014b7c
 8014504:	24014ba4 	.word	0x24014ba4
 8014508:	0801ce7c 	.word	0x0801ce7c
 801450c:	0801ce94 	.word	0x0801ce94
        } else {
          pcb->unacked = rseg->next;
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	681a      	ldr	r2, [r3, #0]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014518:	69f8      	ldr	r0, [r7, #28]
 801451a:	f7fe fd22 	bl	8012f62 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014522:	2b00      	cmp	r3, #0
 8014524:	d104      	bne.n	8014530 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801452c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801452e:	e006      	b.n	801453e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2200      	movs	r2, #0
 8014534:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2200      	movs	r2, #0
 801453a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014544:	2b00      	cmp	r3, #0
 8014546:	d00a      	beq.n	801455e <tcp_process+0x30a>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	6910      	ldr	r0, [r2, #16]
 8014552:	2200      	movs	r2, #0
 8014554:	6879      	ldr	r1, [r7, #4]
 8014556:	4798      	blx	r3
 8014558:	4603      	mov	r3, r0
 801455a:	76bb      	strb	r3, [r7, #26]
 801455c:	e001      	b.n	8014562 <tcp_process+0x30e>
 801455e:	2300      	movs	r3, #0
 8014560:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014562:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014566:	f113 0f0d 	cmn.w	r3, #13
 801456a:	d102      	bne.n	8014572 <tcp_process+0x31e>
          return ERR_ABRT;
 801456c:	f06f 030c 	mvn.w	r3, #12
 8014570:	e250      	b.n	8014a14 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	8b5b      	ldrh	r3, [r3, #26]
 8014576:	f043 0302 	orr.w	r3, r3, #2
 801457a:	b29a      	uxth	r2, r3
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014580:	e23a      	b.n	80149f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014582:	4b98      	ldr	r3, [pc, #608]	@ (80147e4 <tcp_process+0x590>)
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	f003 0310 	and.w	r3, r3, #16
 801458a:	2b00      	cmp	r3, #0
 801458c:	f000 8234 	beq.w	80149f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014590:	4b95      	ldr	r3, [pc, #596]	@ (80147e8 <tcp_process+0x594>)
 8014592:	6819      	ldr	r1, [r3, #0]
 8014594:	4b95      	ldr	r3, [pc, #596]	@ (80147ec <tcp_process+0x598>)
 8014596:	881b      	ldrh	r3, [r3, #0]
 8014598:	461a      	mov	r2, r3
 801459a:	4b95      	ldr	r3, [pc, #596]	@ (80147f0 <tcp_process+0x59c>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145a0:	4b94      	ldr	r3, [pc, #592]	@ (80147f4 <tcp_process+0x5a0>)
 80145a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145a4:	885b      	ldrh	r3, [r3, #2]
 80145a6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145a8:	4a92      	ldr	r2, [pc, #584]	@ (80147f4 <tcp_process+0x5a0>)
 80145aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145ac:	8812      	ldrh	r2, [r2, #0]
 80145ae:	b292      	uxth	r2, r2
 80145b0:	9202      	str	r2, [sp, #8]
 80145b2:	9301      	str	r3, [sp, #4]
 80145b4:	4b90      	ldr	r3, [pc, #576]	@ (80147f8 <tcp_process+0x5a4>)
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	4b90      	ldr	r3, [pc, #576]	@ (80147fc <tcp_process+0x5a8>)
 80145ba:	4602      	mov	r2, r0
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f002 fc81 	bl	8016ec4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80145c8:	2b05      	cmp	r3, #5
 80145ca:	f200 8215 	bhi.w	80149f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2200      	movs	r2, #0
 80145d2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f002 fa4d 	bl	8016a74 <tcp_rexmit_rto>
      break;
 80145da:	e20d      	b.n	80149f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80145dc:	4b81      	ldr	r3, [pc, #516]	@ (80147e4 <tcp_process+0x590>)
 80145de:	781b      	ldrb	r3, [r3, #0]
 80145e0:	f003 0310 	and.w	r3, r3, #16
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f000 80a1 	beq.w	801472c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80145ea:	4b7f      	ldr	r3, [pc, #508]	@ (80147e8 <tcp_process+0x594>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145f2:	1ad3      	subs	r3, r2, r3
 80145f4:	3b01      	subs	r3, #1
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	db7e      	blt.n	80146f8 <tcp_process+0x4a4>
 80145fa:	4b7b      	ldr	r3, [pc, #492]	@ (80147e8 <tcp_process+0x594>)
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	2b00      	cmp	r3, #0
 8014606:	dc77      	bgt.n	80146f8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2204      	movs	r2, #4
 801460c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014612:	2b00      	cmp	r3, #0
 8014614:	d102      	bne.n	801461c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014616:	23fa      	movs	r3, #250	@ 0xfa
 8014618:	76bb      	strb	r3, [r7, #26]
 801461a:	e01d      	b.n	8014658 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014620:	699b      	ldr	r3, [r3, #24]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d106      	bne.n	8014634 <tcp_process+0x3e0>
 8014626:	4b76      	ldr	r3, [pc, #472]	@ (8014800 <tcp_process+0x5ac>)
 8014628:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801462c:	4975      	ldr	r1, [pc, #468]	@ (8014804 <tcp_process+0x5b0>)
 801462e:	4876      	ldr	r0, [pc, #472]	@ (8014808 <tcp_process+0x5b4>)
 8014630:	f006 f958 	bl	801a8e4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014638:	699b      	ldr	r3, [r3, #24]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00a      	beq.n	8014654 <tcp_process+0x400>
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014642:	699b      	ldr	r3, [r3, #24]
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	6910      	ldr	r0, [r2, #16]
 8014648:	2200      	movs	r2, #0
 801464a:	6879      	ldr	r1, [r7, #4]
 801464c:	4798      	blx	r3
 801464e:	4603      	mov	r3, r0
 8014650:	76bb      	strb	r3, [r7, #26]
 8014652:	e001      	b.n	8014658 <tcp_process+0x404>
 8014654:	23f0      	movs	r3, #240	@ 0xf0
 8014656:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014658:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00a      	beq.n	8014676 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014660:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014664:	f113 0f0d 	cmn.w	r3, #13
 8014668:	d002      	beq.n	8014670 <tcp_process+0x41c>
              tcp_abort(pcb);
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f7fd ff88 	bl	8012580 <tcp_abort>
            }
            return ERR_ABRT;
 8014670:	f06f 030c 	mvn.w	r3, #12
 8014674:	e1ce      	b.n	8014a14 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 fae0 	bl	8014c3c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801467c:	4b63      	ldr	r3, [pc, #396]	@ (801480c <tcp_process+0x5b8>)
 801467e:	881b      	ldrh	r3, [r3, #0]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d005      	beq.n	8014690 <tcp_process+0x43c>
            recv_acked--;
 8014684:	4b61      	ldr	r3, [pc, #388]	@ (801480c <tcp_process+0x5b8>)
 8014686:	881b      	ldrh	r3, [r3, #0]
 8014688:	3b01      	subs	r3, #1
 801468a:	b29a      	uxth	r2, r3
 801468c:	4b5f      	ldr	r3, [pc, #380]	@ (801480c <tcp_process+0x5b8>)
 801468e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014694:	009a      	lsls	r2, r3, #2
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	f241 111c 	movw	r1, #4380	@ 0x111c
 80146a0:	428b      	cmp	r3, r1
 80146a2:	bf38      	it	cc
 80146a4:	460b      	movcc	r3, r1
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d204      	bcs.n	80146b4 <tcp_process+0x460>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	e00d      	b.n	80146d0 <tcp_process+0x47c>
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80146b8:	005b      	lsls	r3, r3, #1
 80146ba:	f241 121c 	movw	r2, #4380	@ 0x111c
 80146be:	4293      	cmp	r3, r2
 80146c0:	d904      	bls.n	80146cc <tcp_process+0x478>
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80146c6:	005b      	lsls	r3, r3, #1
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	e001      	b.n	80146d0 <tcp_process+0x47c>
 80146cc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80146d6:	4b4e      	ldr	r3, [pc, #312]	@ (8014810 <tcp_process+0x5bc>)
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	f003 0320 	and.w	r3, r3, #32
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d037      	beq.n	8014752 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	8b5b      	ldrh	r3, [r3, #26]
 80146e6:	f043 0302 	orr.w	r3, r3, #2
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2207      	movs	r2, #7
 80146f4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80146f6:	e02c      	b.n	8014752 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146f8:	4b3b      	ldr	r3, [pc, #236]	@ (80147e8 <tcp_process+0x594>)
 80146fa:	6819      	ldr	r1, [r3, #0]
 80146fc:	4b3b      	ldr	r3, [pc, #236]	@ (80147ec <tcp_process+0x598>)
 80146fe:	881b      	ldrh	r3, [r3, #0]
 8014700:	461a      	mov	r2, r3
 8014702:	4b3b      	ldr	r3, [pc, #236]	@ (80147f0 <tcp_process+0x59c>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014708:	4b3a      	ldr	r3, [pc, #232]	@ (80147f4 <tcp_process+0x5a0>)
 801470a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801470c:	885b      	ldrh	r3, [r3, #2]
 801470e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014710:	4a38      	ldr	r2, [pc, #224]	@ (80147f4 <tcp_process+0x5a0>)
 8014712:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014714:	8812      	ldrh	r2, [r2, #0]
 8014716:	b292      	uxth	r2, r2
 8014718:	9202      	str	r2, [sp, #8]
 801471a:	9301      	str	r3, [sp, #4]
 801471c:	4b36      	ldr	r3, [pc, #216]	@ (80147f8 <tcp_process+0x5a4>)
 801471e:	9300      	str	r3, [sp, #0]
 8014720:	4b36      	ldr	r3, [pc, #216]	@ (80147fc <tcp_process+0x5a8>)
 8014722:	4602      	mov	r2, r0
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f002 fbcd 	bl	8016ec4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801472a:	e167      	b.n	80149fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801472c:	4b2d      	ldr	r3, [pc, #180]	@ (80147e4 <tcp_process+0x590>)
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	f003 0302 	and.w	r3, r3, #2
 8014734:	2b00      	cmp	r3, #0
 8014736:	f000 8161 	beq.w	80149fc <tcp_process+0x7a8>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801473e:	1e5a      	subs	r2, r3, #1
 8014740:	4b2b      	ldr	r3, [pc, #172]	@ (80147f0 <tcp_process+0x59c>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	429a      	cmp	r2, r3
 8014746:	f040 8159 	bne.w	80149fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f002 f9b4 	bl	8016ab8 <tcp_rexmit>
      break;
 8014750:	e154      	b.n	80149fc <tcp_process+0x7a8>
 8014752:	e153      	b.n	80149fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f000 fa71 	bl	8014c3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801475a:	4b2d      	ldr	r3, [pc, #180]	@ (8014810 <tcp_process+0x5bc>)
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	f003 0320 	and.w	r3, r3, #32
 8014762:	2b00      	cmp	r3, #0
 8014764:	f000 814c 	beq.w	8014a00 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	8b5b      	ldrh	r3, [r3, #26]
 801476c:	f043 0302 	orr.w	r3, r3, #2
 8014770:	b29a      	uxth	r2, r3
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2207      	movs	r2, #7
 801477a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801477c:	e140      	b.n	8014a00 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	f000 fa5c 	bl	8014c3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014784:	4b22      	ldr	r3, [pc, #136]	@ (8014810 <tcp_process+0x5bc>)
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	f003 0320 	and.w	r3, r3, #32
 801478c:	2b00      	cmp	r3, #0
 801478e:	d071      	beq.n	8014874 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014790:	4b14      	ldr	r3, [pc, #80]	@ (80147e4 <tcp_process+0x590>)
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	f003 0310 	and.w	r3, r3, #16
 8014798:	2b00      	cmp	r3, #0
 801479a:	d060      	beq.n	801485e <tcp_process+0x60a>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147a0:	4b11      	ldr	r3, [pc, #68]	@ (80147e8 <tcp_process+0x594>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d15a      	bne.n	801485e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d156      	bne.n	801485e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	8b5b      	ldrh	r3, [r3, #26]
 80147b4:	f043 0302 	orr.w	r3, r3, #2
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7fe fdbc 	bl	801333c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80147c4:	4b13      	ldr	r3, [pc, #76]	@ (8014814 <tcp_process+0x5c0>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	687a      	ldr	r2, [r7, #4]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d105      	bne.n	80147da <tcp_process+0x586>
 80147ce:	4b11      	ldr	r3, [pc, #68]	@ (8014814 <tcp_process+0x5c0>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	68db      	ldr	r3, [r3, #12]
 80147d4:	4a0f      	ldr	r2, [pc, #60]	@ (8014814 <tcp_process+0x5c0>)
 80147d6:	6013      	str	r3, [r2, #0]
 80147d8:	e02e      	b.n	8014838 <tcp_process+0x5e4>
 80147da:	4b0e      	ldr	r3, [pc, #56]	@ (8014814 <tcp_process+0x5c0>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	617b      	str	r3, [r7, #20]
 80147e0:	e027      	b.n	8014832 <tcp_process+0x5de>
 80147e2:	bf00      	nop
 80147e4:	24014bc0 	.word	0x24014bc0
 80147e8:	24014bb8 	.word	0x24014bb8
 80147ec:	24014bbe 	.word	0x24014bbe
 80147f0:	24014bb4 	.word	0x24014bb4
 80147f4:	24014ba4 	.word	0x24014ba4
 80147f8:	2400e050 	.word	0x2400e050
 80147fc:	2400e054 	.word	0x2400e054
 8014800:	0801cc08 	.word	0x0801cc08
 8014804:	0801cea8 	.word	0x0801cea8
 8014808:	0801cc54 	.word	0x0801cc54
 801480c:	24014bbc 	.word	0x24014bbc
 8014810:	24014bc1 	.word	0x24014bc1
 8014814:	24014b88 	.word	0x24014b88
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	429a      	cmp	r2, r3
 8014820:	d104      	bne.n	801482c <tcp_process+0x5d8>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	68da      	ldr	r2, [r3, #12]
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	60da      	str	r2, [r3, #12]
 801482a:	e005      	b.n	8014838 <tcp_process+0x5e4>
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	68db      	ldr	r3, [r3, #12]
 8014830:	617b      	str	r3, [r7, #20]
 8014832:	697b      	ldr	r3, [r7, #20]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d1ef      	bne.n	8014818 <tcp_process+0x5c4>
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2200      	movs	r2, #0
 801483c:	60da      	str	r2, [r3, #12]
 801483e:	4b77      	ldr	r3, [pc, #476]	@ (8014a1c <tcp_process+0x7c8>)
 8014840:	2201      	movs	r2, #1
 8014842:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	220a      	movs	r2, #10
 8014848:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801484a:	4b75      	ldr	r3, [pc, #468]	@ (8014a20 <tcp_process+0x7cc>)
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	60da      	str	r2, [r3, #12]
 8014852:	4a73      	ldr	r2, [pc, #460]	@ (8014a20 <tcp_process+0x7cc>)
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6013      	str	r3, [r2, #0]
 8014858:	f002 fcf6 	bl	8017248 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801485c:	e0d2      	b.n	8014a04 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	8b5b      	ldrh	r3, [r3, #26]
 8014862:	f043 0302 	orr.w	r3, r3, #2
 8014866:	b29a      	uxth	r2, r3
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2208      	movs	r2, #8
 8014870:	751a      	strb	r2, [r3, #20]
      break;
 8014872:	e0c7      	b.n	8014a04 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014874:	4b6b      	ldr	r3, [pc, #428]	@ (8014a24 <tcp_process+0x7d0>)
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	f003 0310 	and.w	r3, r3, #16
 801487c:	2b00      	cmp	r3, #0
 801487e:	f000 80c1 	beq.w	8014a04 <tcp_process+0x7b0>
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014886:	4b68      	ldr	r3, [pc, #416]	@ (8014a28 <tcp_process+0x7d4>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	429a      	cmp	r2, r3
 801488c:	f040 80ba 	bne.w	8014a04 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014894:	2b00      	cmp	r3, #0
 8014896:	f040 80b5 	bne.w	8014a04 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2206      	movs	r2, #6
 801489e:	751a      	strb	r2, [r3, #20]
      break;
 80148a0:	e0b0      	b.n	8014a04 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 f9ca 	bl	8014c3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80148a8:	4b60      	ldr	r3, [pc, #384]	@ (8014a2c <tcp_process+0x7d8>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	f003 0320 	and.w	r3, r3, #32
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	f000 80a9 	beq.w	8014a08 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	8b5b      	ldrh	r3, [r3, #26]
 80148ba:	f043 0302 	orr.w	r3, r3, #2
 80148be:	b29a      	uxth	r2, r3
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f7fe fd39 	bl	801333c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80148ca:	4b59      	ldr	r3, [pc, #356]	@ (8014a30 <tcp_process+0x7dc>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d105      	bne.n	80148e0 <tcp_process+0x68c>
 80148d4:	4b56      	ldr	r3, [pc, #344]	@ (8014a30 <tcp_process+0x7dc>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	68db      	ldr	r3, [r3, #12]
 80148da:	4a55      	ldr	r2, [pc, #340]	@ (8014a30 <tcp_process+0x7dc>)
 80148dc:	6013      	str	r3, [r2, #0]
 80148de:	e013      	b.n	8014908 <tcp_process+0x6b4>
 80148e0:	4b53      	ldr	r3, [pc, #332]	@ (8014a30 <tcp_process+0x7dc>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	613b      	str	r3, [r7, #16]
 80148e6:	e00c      	b.n	8014902 <tcp_process+0x6ae>
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d104      	bne.n	80148fc <tcp_process+0x6a8>
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	68da      	ldr	r2, [r3, #12]
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	60da      	str	r2, [r3, #12]
 80148fa:	e005      	b.n	8014908 <tcp_process+0x6b4>
 80148fc:	693b      	ldr	r3, [r7, #16]
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	613b      	str	r3, [r7, #16]
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d1ef      	bne.n	80148e8 <tcp_process+0x694>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2200      	movs	r2, #0
 801490c:	60da      	str	r2, [r3, #12]
 801490e:	4b43      	ldr	r3, [pc, #268]	@ (8014a1c <tcp_process+0x7c8>)
 8014910:	2201      	movs	r2, #1
 8014912:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	220a      	movs	r2, #10
 8014918:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801491a:	4b41      	ldr	r3, [pc, #260]	@ (8014a20 <tcp_process+0x7cc>)
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	60da      	str	r2, [r3, #12]
 8014922:	4a3f      	ldr	r2, [pc, #252]	@ (8014a20 <tcp_process+0x7cc>)
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6013      	str	r3, [r2, #0]
 8014928:	f002 fc8e 	bl	8017248 <tcp_timer_needed>
      }
      break;
 801492c:	e06c      	b.n	8014a08 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 f984 	bl	8014c3c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014934:	4b3b      	ldr	r3, [pc, #236]	@ (8014a24 <tcp_process+0x7d0>)
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	f003 0310 	and.w	r3, r3, #16
 801493c:	2b00      	cmp	r3, #0
 801493e:	d065      	beq.n	8014a0c <tcp_process+0x7b8>
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014944:	4b38      	ldr	r3, [pc, #224]	@ (8014a28 <tcp_process+0x7d4>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	429a      	cmp	r2, r3
 801494a:	d15f      	bne.n	8014a0c <tcp_process+0x7b8>
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014950:	2b00      	cmp	r3, #0
 8014952:	d15b      	bne.n	8014a0c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f7fe fcf1 	bl	801333c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801495a:	4b35      	ldr	r3, [pc, #212]	@ (8014a30 <tcp_process+0x7dc>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	429a      	cmp	r2, r3
 8014962:	d105      	bne.n	8014970 <tcp_process+0x71c>
 8014964:	4b32      	ldr	r3, [pc, #200]	@ (8014a30 <tcp_process+0x7dc>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	4a31      	ldr	r2, [pc, #196]	@ (8014a30 <tcp_process+0x7dc>)
 801496c:	6013      	str	r3, [r2, #0]
 801496e:	e013      	b.n	8014998 <tcp_process+0x744>
 8014970:	4b2f      	ldr	r3, [pc, #188]	@ (8014a30 <tcp_process+0x7dc>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	60fb      	str	r3, [r7, #12]
 8014976:	e00c      	b.n	8014992 <tcp_process+0x73e>
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	68db      	ldr	r3, [r3, #12]
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	429a      	cmp	r2, r3
 8014980:	d104      	bne.n	801498c <tcp_process+0x738>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	68da      	ldr	r2, [r3, #12]
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	60da      	str	r2, [r3, #12]
 801498a:	e005      	b.n	8014998 <tcp_process+0x744>
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	60fb      	str	r3, [r7, #12]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d1ef      	bne.n	8014978 <tcp_process+0x724>
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2200      	movs	r2, #0
 801499c:	60da      	str	r2, [r3, #12]
 801499e:	4b1f      	ldr	r3, [pc, #124]	@ (8014a1c <tcp_process+0x7c8>)
 80149a0:	2201      	movs	r2, #1
 80149a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	220a      	movs	r2, #10
 80149a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80149aa:	4b1d      	ldr	r3, [pc, #116]	@ (8014a20 <tcp_process+0x7cc>)
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	60da      	str	r2, [r3, #12]
 80149b2:	4a1b      	ldr	r2, [pc, #108]	@ (8014a20 <tcp_process+0x7cc>)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6013      	str	r3, [r2, #0]
 80149b8:	f002 fc46 	bl	8017248 <tcp_timer_needed>
      }
      break;
 80149bc:	e026      	b.n	8014a0c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f000 f93c 	bl	8014c3c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80149c4:	4b17      	ldr	r3, [pc, #92]	@ (8014a24 <tcp_process+0x7d0>)
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	f003 0310 	and.w	r3, r3, #16
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d01f      	beq.n	8014a10 <tcp_process+0x7bc>
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149d4:	4b14      	ldr	r3, [pc, #80]	@ (8014a28 <tcp_process+0x7d4>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	429a      	cmp	r2, r3
 80149da:	d119      	bne.n	8014a10 <tcp_process+0x7bc>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d115      	bne.n	8014a10 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80149e4:	4b11      	ldr	r3, [pc, #68]	@ (8014a2c <tcp_process+0x7d8>)
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	f043 0310 	orr.w	r3, r3, #16
 80149ec:	b2da      	uxtb	r2, r3
 80149ee:	4b0f      	ldr	r3, [pc, #60]	@ (8014a2c <tcp_process+0x7d8>)
 80149f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80149f2:	e00d      	b.n	8014a10 <tcp_process+0x7bc>
    default:
      break;
 80149f4:	bf00      	nop
 80149f6:	e00c      	b.n	8014a12 <tcp_process+0x7be>
      break;
 80149f8:	bf00      	nop
 80149fa:	e00a      	b.n	8014a12 <tcp_process+0x7be>
      break;
 80149fc:	bf00      	nop
 80149fe:	e008      	b.n	8014a12 <tcp_process+0x7be>
      break;
 8014a00:	bf00      	nop
 8014a02:	e006      	b.n	8014a12 <tcp_process+0x7be>
      break;
 8014a04:	bf00      	nop
 8014a06:	e004      	b.n	8014a12 <tcp_process+0x7be>
      break;
 8014a08:	bf00      	nop
 8014a0a:	e002      	b.n	8014a12 <tcp_process+0x7be>
      break;
 8014a0c:	bf00      	nop
 8014a0e:	e000      	b.n	8014a12 <tcp_process+0x7be>
      break;
 8014a10:	bf00      	nop
  }
  return ERR_OK;
 8014a12:	2300      	movs	r3, #0
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3724      	adds	r7, #36	@ 0x24
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd90      	pop	{r4, r7, pc}
 8014a1c:	24014b90 	.word	0x24014b90
 8014a20:	24014b8c 	.word	0x24014b8c
 8014a24:	24014bc0 	.word	0x24014bc0
 8014a28:	24014bb8 	.word	0x24014bb8
 8014a2c:	24014bc1 	.word	0x24014bc1
 8014a30:	24014b88 	.word	0x24014b88

08014a34 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014a34:	b590      	push	{r4, r7, lr}
 8014a36:	b085      	sub	sp, #20
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d106      	bne.n	8014a52 <tcp_oos_insert_segment+0x1e>
 8014a44:	4b3b      	ldr	r3, [pc, #236]	@ (8014b34 <tcp_oos_insert_segment+0x100>)
 8014a46:	f240 421f 	movw	r2, #1055	@ 0x41f
 8014a4a:	493b      	ldr	r1, [pc, #236]	@ (8014b38 <tcp_oos_insert_segment+0x104>)
 8014a4c:	483b      	ldr	r0, [pc, #236]	@ (8014b3c <tcp_oos_insert_segment+0x108>)
 8014a4e:	f005 ff49 	bl	801a8e4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	68db      	ldr	r3, [r3, #12]
 8014a56:	899b      	ldrh	r3, [r3, #12]
 8014a58:	b29b      	uxth	r3, r3
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7fb fa4e 	bl	800fefc <lwip_htons>
 8014a60:	4603      	mov	r3, r0
 8014a62:	b2db      	uxtb	r3, r3
 8014a64:	f003 0301 	and.w	r3, r3, #1
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d028      	beq.n	8014abe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014a6c:	6838      	ldr	r0, [r7, #0]
 8014a6e:	f7fe fa63 	bl	8012f38 <tcp_segs_free>
    next = NULL;
 8014a72:	2300      	movs	r3, #0
 8014a74:	603b      	str	r3, [r7, #0]
 8014a76:	e056      	b.n	8014b26 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	899b      	ldrh	r3, [r3, #12]
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fb fa3b 	bl	800fefc <lwip_htons>
 8014a86:	4603      	mov	r3, r0
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	f003 0301 	and.w	r3, r3, #1
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d00d      	beq.n	8014aae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	899b      	ldrh	r3, [r3, #12]
 8014a98:	b29c      	uxth	r4, r3
 8014a9a:	2001      	movs	r0, #1
 8014a9c:	f7fb fa2e 	bl	800fefc <lwip_htons>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	4322      	orrs	r2, r4
 8014aaa:	b292      	uxth	r2, r2
 8014aac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014ab8:	68f8      	ldr	r0, [r7, #12]
 8014aba:	f7fe fa52 	bl	8012f62 <tcp_seg_free>
    while (next &&
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d00e      	beq.n	8014ae2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	891b      	ldrh	r3, [r3, #8]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	4b1d      	ldr	r3, [pc, #116]	@ (8014b40 <tcp_oos_insert_segment+0x10c>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	441a      	add	r2, r3
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	685b      	ldr	r3, [r3, #4]
 8014ad6:	6839      	ldr	r1, [r7, #0]
 8014ad8:	8909      	ldrh	r1, [r1, #8]
 8014ada:	440b      	add	r3, r1
 8014adc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	daca      	bge.n	8014a78 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d01e      	beq.n	8014b26 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	891b      	ldrh	r3, [r3, #8]
 8014aec:	461a      	mov	r2, r3
 8014aee:	4b14      	ldr	r3, [pc, #80]	@ (8014b40 <tcp_oos_insert_segment+0x10c>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	441a      	add	r2, r3
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	dd12      	ble.n	8014b26 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	b29a      	uxth	r2, r3
 8014b08:	4b0d      	ldr	r3, [pc, #52]	@ (8014b40 <tcp_oos_insert_segment+0x10c>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	1ad3      	subs	r3, r2, r3
 8014b10:	b29a      	uxth	r2, r3
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	685a      	ldr	r2, [r3, #4]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	891b      	ldrh	r3, [r3, #8]
 8014b1e:	4619      	mov	r1, r3
 8014b20:	4610      	mov	r0, r2
 8014b22:	f7fc fd17 	bl	8011554 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	683a      	ldr	r2, [r7, #0]
 8014b2a:	601a      	str	r2, [r3, #0]
}
 8014b2c:	bf00      	nop
 8014b2e:	3714      	adds	r7, #20
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd90      	pop	{r4, r7, pc}
 8014b34:	0801cc08 	.word	0x0801cc08
 8014b38:	0801cec8 	.word	0x0801cec8
 8014b3c:	0801cc54 	.word	0x0801cc54
 8014b40:	24014bb4 	.word	0x24014bb4

08014b44 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014b44:	b5b0      	push	{r4, r5, r7, lr}
 8014b46:	b086      	sub	sp, #24
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	60b9      	str	r1, [r7, #8]
 8014b4e:	607a      	str	r2, [r7, #4]
 8014b50:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014b52:	e03e      	b.n	8014bd2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7fc ff0a 	bl	801197c <pbuf_clen>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014b72:	8a7a      	ldrh	r2, [r7, #18]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d906      	bls.n	8014b86 <tcp_free_acked_segments+0x42>
 8014b78:	4b2a      	ldr	r3, [pc, #168]	@ (8014c24 <tcp_free_acked_segments+0xe0>)
 8014b7a:	f240 4257 	movw	r2, #1111	@ 0x457
 8014b7e:	492a      	ldr	r1, [pc, #168]	@ (8014c28 <tcp_free_acked_segments+0xe4>)
 8014b80:	482a      	ldr	r0, [pc, #168]	@ (8014c2c <tcp_free_acked_segments+0xe8>)
 8014b82:	f005 feaf 	bl	801a8e4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014b8c:	8a7b      	ldrh	r3, [r7, #18]
 8014b8e:	1ad3      	subs	r3, r2, r3
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	891a      	ldrh	r2, [r3, #8]
 8014b9c:	4b24      	ldr	r3, [pc, #144]	@ (8014c30 <tcp_free_acked_segments+0xec>)
 8014b9e:	881b      	ldrh	r3, [r3, #0]
 8014ba0:	4413      	add	r3, r2
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	4b22      	ldr	r3, [pc, #136]	@ (8014c30 <tcp_free_acked_segments+0xec>)
 8014ba6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014ba8:	6978      	ldr	r0, [r7, #20]
 8014baa:	f7fe f9da 	bl	8012f62 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d00c      	beq.n	8014bd2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d109      	bne.n	8014bd2 <tcp_free_acked_segments+0x8e>
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d106      	bne.n	8014bd2 <tcp_free_acked_segments+0x8e>
 8014bc4:	4b17      	ldr	r3, [pc, #92]	@ (8014c24 <tcp_free_acked_segments+0xe0>)
 8014bc6:	f240 4261 	movw	r2, #1121	@ 0x461
 8014bca:	491a      	ldr	r1, [pc, #104]	@ (8014c34 <tcp_free_acked_segments+0xf0>)
 8014bcc:	4817      	ldr	r0, [pc, #92]	@ (8014c2c <tcp_free_acked_segments+0xe8>)
 8014bce:	f005 fe89 	bl	801a8e4 <iprintf>
  while (seg_list != NULL &&
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d020      	beq.n	8014c1a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	68db      	ldr	r3, [r3, #12]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fb f9a2 	bl	800ff28 <lwip_htonl>
 8014be4:	4604      	mov	r4, r0
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	891b      	ldrh	r3, [r3, #8]
 8014bea:	461d      	mov	r5, r3
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	899b      	ldrh	r3, [r3, #12]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7fb f981 	bl	800fefc <lwip_htons>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	b2db      	uxtb	r3, r3
 8014bfe:	f003 0303 	and.w	r3, r3, #3
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d001      	beq.n	8014c0a <tcp_free_acked_segments+0xc6>
 8014c06:	2301      	movs	r3, #1
 8014c08:	e000      	b.n	8014c0c <tcp_free_acked_segments+0xc8>
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	442b      	add	r3, r5
 8014c0e:	18e2      	adds	r2, r4, r3
 8014c10:	4b09      	ldr	r3, [pc, #36]	@ (8014c38 <tcp_free_acked_segments+0xf4>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	dd9c      	ble.n	8014b54 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014c1a:	68bb      	ldr	r3, [r7, #8]
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3718      	adds	r7, #24
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bdb0      	pop	{r4, r5, r7, pc}
 8014c24:	0801cc08 	.word	0x0801cc08
 8014c28:	0801cef0 	.word	0x0801cef0
 8014c2c:	0801cc54 	.word	0x0801cc54
 8014c30:	24014bbc 	.word	0x24014bbc
 8014c34:	0801cf18 	.word	0x0801cf18
 8014c38:	24014bb8 	.word	0x24014bb8

08014c3c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014c3c:	b5b0      	push	{r4, r5, r7, lr}
 8014c3e:	b094      	sub	sp, #80	@ 0x50
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014c44:	2300      	movs	r3, #0
 8014c46:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d106      	bne.n	8014c5c <tcp_receive+0x20>
 8014c4e:	4b91      	ldr	r3, [pc, #580]	@ (8014e94 <tcp_receive+0x258>)
 8014c50:	f240 427b 	movw	r2, #1147	@ 0x47b
 8014c54:	4990      	ldr	r1, [pc, #576]	@ (8014e98 <tcp_receive+0x25c>)
 8014c56:	4891      	ldr	r0, [pc, #580]	@ (8014e9c <tcp_receive+0x260>)
 8014c58:	f005 fe44 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	7d1b      	ldrb	r3, [r3, #20]
 8014c60:	2b03      	cmp	r3, #3
 8014c62:	d806      	bhi.n	8014c72 <tcp_receive+0x36>
 8014c64:	4b8b      	ldr	r3, [pc, #556]	@ (8014e94 <tcp_receive+0x258>)
 8014c66:	f240 427c 	movw	r2, #1148	@ 0x47c
 8014c6a:	498d      	ldr	r1, [pc, #564]	@ (8014ea0 <tcp_receive+0x264>)
 8014c6c:	488b      	ldr	r0, [pc, #556]	@ (8014e9c <tcp_receive+0x260>)
 8014c6e:	f005 fe39 	bl	801a8e4 <iprintf>

  if (flags & TCP_ACK) {
 8014c72:	4b8c      	ldr	r3, [pc, #560]	@ (8014ea4 <tcp_receive+0x268>)
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	f003 0310 	and.w	r3, r3, #16
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	f000 8264 	beq.w	8015148 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c86:	461a      	mov	r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c8c:	4413      	add	r3, r2
 8014c8e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014c94:	4b84      	ldr	r3, [pc, #528]	@ (8014ea8 <tcp_receive+0x26c>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	1ad3      	subs	r3, r2, r3
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	db1b      	blt.n	8014cd6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014ca2:	4b81      	ldr	r3, [pc, #516]	@ (8014ea8 <tcp_receive+0x26c>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d106      	bne.n	8014cb8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014cae:	4b7f      	ldr	r3, [pc, #508]	@ (8014eac <tcp_receive+0x270>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	1ad3      	subs	r3, r2, r3
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	db0e      	blt.n	8014cd6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8014eac <tcp_receive+0x270>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d125      	bne.n	8014d10 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cc4:	4b7a      	ldr	r3, [pc, #488]	@ (8014eb0 <tcp_receive+0x274>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	89db      	ldrh	r3, [r3, #14]
 8014cca:	b29a      	uxth	r2, r3
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d91c      	bls.n	8014d10 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014cd6:	4b76      	ldr	r3, [pc, #472]	@ (8014eb0 <tcp_receive+0x274>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	89db      	ldrh	r3, [r3, #14]
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	d205      	bcs.n	8014d00 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8014d00:	4b69      	ldr	r3, [pc, #420]	@ (8014ea8 <tcp_receive+0x26c>)
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014d08:	4b68      	ldr	r3, [pc, #416]	@ (8014eac <tcp_receive+0x270>)
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014d10:	4b66      	ldr	r3, [pc, #408]	@ (8014eac <tcp_receive+0x270>)
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	dc58      	bgt.n	8014dd0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014d1e:	4b65      	ldr	r3, [pc, #404]	@ (8014eb4 <tcp_receive+0x278>)
 8014d20:	881b      	ldrh	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d14b      	bne.n	8014dbe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8014d30:	4413      	add	r3, r2
 8014d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d142      	bne.n	8014dbe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	db3d      	blt.n	8014dbe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014d46:	4b59      	ldr	r3, [pc, #356]	@ (8014eac <tcp_receive+0x270>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d137      	bne.n	8014dbe <tcp_receive+0x182>
              found_dupack = 1;
 8014d4e:	2301      	movs	r3, #1
 8014d50:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014d58:	2bff      	cmp	r3, #255	@ 0xff
 8014d5a:	d007      	beq.n	8014d6c <tcp_receive+0x130>
                ++pcb->dupacks;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014d62:	3301      	adds	r3, #1
 8014d64:	b2da      	uxtb	r2, r3
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014d72:	2b03      	cmp	r3, #3
 8014d74:	d91b      	bls.n	8014dae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d80:	4413      	add	r3, r2
 8014d82:	b29a      	uxth	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d30a      	bcc.n	8014da4 <tcp_receive+0x168>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d98:	4413      	add	r3, r2
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014da2:	e004      	b.n	8014dae <tcp_receive+0x172>
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014daa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014db4:	2b02      	cmp	r3, #2
 8014db6:	d902      	bls.n	8014dbe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f001 fee9 	bl	8016b90 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f040 8161 	bne.w	8015088 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014dce:	e15b      	b.n	8015088 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014dd0:	4b36      	ldr	r3, [pc, #216]	@ (8014eac <tcp_receive+0x270>)
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014dd8:	1ad3      	subs	r3, r2, r3
 8014dda:	3b01      	subs	r3, #1
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	f2c0 814e 	blt.w	801507e <tcp_receive+0x442>
 8014de2:	4b32      	ldr	r3, [pc, #200]	@ (8014eac <tcp_receive+0x270>)
 8014de4:	681a      	ldr	r2, [r3, #0]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	f300 8146 	bgt.w	801507e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	8b5b      	ldrh	r3, [r3, #26]
 8014df6:	f003 0304 	and.w	r3, r3, #4
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d010      	beq.n	8014e20 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	8b5b      	ldrh	r3, [r3, #26]
 8014e02:	f023 0304 	bic.w	r3, r3, #4
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014e2e:	10db      	asrs	r3, r3, #3
 8014e30:	b21b      	sxth	r3, r3
 8014e32:	b29a      	uxth	r2, r3
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	4413      	add	r3, r2
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	b21a      	sxth	r2, r3
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014e48:	4b18      	ldr	r3, [pc, #96]	@ (8014eac <tcp_receive+0x270>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	b29a      	uxth	r2, r3
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	1ad3      	subs	r3, r2, r3
 8014e56:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8014e60:	4b12      	ldr	r3, [pc, #72]	@ (8014eac <tcp_receive+0x270>)
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	7d1b      	ldrb	r3, [r3, #20]
 8014e6c:	2b03      	cmp	r3, #3
 8014e6e:	f240 8097 	bls.w	8014fa0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d245      	bcs.n	8014f0e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	8b5b      	ldrh	r3, [r3, #26]
 8014e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d014      	beq.n	8014eb8 <tcp_receive+0x27c>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	e013      	b.n	8014eba <tcp_receive+0x27e>
 8014e92:	bf00      	nop
 8014e94:	0801cc08 	.word	0x0801cc08
 8014e98:	0801cf38 	.word	0x0801cf38
 8014e9c:	0801cc54 	.word	0x0801cc54
 8014ea0:	0801cf54 	.word	0x0801cf54
 8014ea4:	24014bc0 	.word	0x24014bc0
 8014ea8:	24014bb4 	.word	0x24014bb4
 8014eac:	24014bb8 	.word	0x24014bb8
 8014eb0:	24014ba4 	.word	0x24014ba4
 8014eb4:	24014bbe 	.word	0x24014bbe
 8014eb8:	2302      	movs	r3, #2
 8014eba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014ebe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014ec8:	fb12 f303 	smulbb	r3, r2, r3
 8014ecc:	b29b      	uxth	r3, r3
 8014ece:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014ed0:	4293      	cmp	r3, r2
 8014ed2:	bf28      	it	cs
 8014ed4:	4613      	movcs	r3, r2
 8014ed6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014ede:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014ee0:	4413      	add	r3, r2
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d309      	bcc.n	8014f02 <tcp_receive+0x2c6>
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014ef4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014ef6:	4413      	add	r3, r2
 8014ef8:	b29a      	uxth	r2, r3
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014f00:	e04e      	b.n	8014fa0 <tcp_receive+0x364>
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014f0c:	e048      	b.n	8014fa0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014f14:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014f16:	4413      	add	r3, r2
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d309      	bcc.n	8014f38 <tcp_receive+0x2fc>
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014f2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014f2c:	4413      	add	r3, r2
 8014f2e:	b29a      	uxth	r2, r3
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f36:	e004      	b.n	8014f42 <tcp_receive+0x306>
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d326      	bcc.n	8014fa0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f72:	4413      	add	r3, r2
 8014f74:	b29a      	uxth	r2, r3
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d30a      	bcc.n	8014f96 <tcp_receive+0x35a>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f8a:	4413      	add	r3, r2
 8014f8c:	b29a      	uxth	r2, r3
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014f94:	e004      	b.n	8014fa0 <tcp_receive+0x364>
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fa8:	4a98      	ldr	r2, [pc, #608]	@ (801520c <tcp_receive+0x5d0>)
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f7ff fdca 	bl	8014b44 <tcp_free_acked_segments>
 8014fb0:	4602      	mov	r2, r0
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fbe:	4a94      	ldr	r2, [pc, #592]	@ (8015210 <tcp_receive+0x5d4>)
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7ff fdbf 	bl	8014b44 <tcp_free_acked_segments>
 8014fc6:	4602      	mov	r2, r0
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d104      	bne.n	8014fde <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014fda:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014fdc:	e002      	b.n	8014fe4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d103      	bne.n	8014ffa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015000:	4b84      	ldr	r3, [pc, #528]	@ (8015214 <tcp_receive+0x5d8>)
 8015002:	881b      	ldrh	r3, [r3, #0]
 8015004:	4413      	add	r3, r2
 8015006:	b29a      	uxth	r2, r3
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	8b5b      	ldrh	r3, [r3, #26]
 8015012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015016:	2b00      	cmp	r3, #0
 8015018:	d035      	beq.n	8015086 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801501e:	2b00      	cmp	r3, #0
 8015020:	d118      	bne.n	8015054 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00c      	beq.n	8015044 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	4618      	mov	r0, r3
 8015038:	f7fa ff76 	bl	800ff28 <lwip_htonl>
 801503c:	4603      	mov	r3, r0
 801503e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015040:	2b00      	cmp	r3, #0
 8015042:	dc20      	bgt.n	8015086 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	8b5b      	ldrh	r3, [r3, #26]
 8015048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801504c:	b29a      	uxth	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015052:	e018      	b.n	8015086 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801505c:	68db      	ldr	r3, [r3, #12]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	4618      	mov	r0, r3
 8015062:	f7fa ff61 	bl	800ff28 <lwip_htonl>
 8015066:	4603      	mov	r3, r0
 8015068:	1ae3      	subs	r3, r4, r3
 801506a:	2b00      	cmp	r3, #0
 801506c:	dc0b      	bgt.n	8015086 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	8b5b      	ldrh	r3, [r3, #26]
 8015072:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015076:	b29a      	uxth	r2, r3
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801507c:	e003      	b.n	8015086 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f001 ff72 	bl	8016f68 <tcp_send_empty_ack>
 8015084:	e000      	b.n	8015088 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015086:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801508c:	2b00      	cmp	r3, #0
 801508e:	d05b      	beq.n	8015148 <tcp_receive+0x50c>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015094:	4b60      	ldr	r3, [pc, #384]	@ (8015218 <tcp_receive+0x5dc>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	2b00      	cmp	r3, #0
 801509c:	da54      	bge.n	8015148 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801509e:	4b5f      	ldr	r3, [pc, #380]	@ (801521c <tcp_receive+0x5e0>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	b29a      	uxth	r2, r3
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	1ad3      	subs	r3, r2, r3
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80150b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80150bc:	10db      	asrs	r3, r3, #3
 80150be:	b21b      	sxth	r3, r3
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	1ad3      	subs	r3, r2, r3
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80150d0:	b29a      	uxth	r2, r3
 80150d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80150d6:	4413      	add	r3, r2
 80150d8:	b29b      	uxth	r3, r3
 80150da:	b21a      	sxth	r2, r3
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80150e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	da05      	bge.n	80150f4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80150e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80150ec:	425b      	negs	r3, r3
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80150f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80150fe:	109b      	asrs	r3, r3, #2
 8015100:	b21b      	sxth	r3, r3
 8015102:	b29b      	uxth	r3, r3
 8015104:	1ad3      	subs	r3, r2, r3
 8015106:	b29b      	uxth	r3, r3
 8015108:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015112:	b29a      	uxth	r2, r3
 8015114:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015118:	4413      	add	r3, r2
 801511a:	b29b      	uxth	r3, r3
 801511c:	b21a      	sxth	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015128:	10db      	asrs	r3, r3, #3
 801512a:	b21b      	sxth	r3, r3
 801512c:	b29a      	uxth	r2, r3
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015134:	b29b      	uxth	r3, r3
 8015136:	4413      	add	r3, r2
 8015138:	b29b      	uxth	r3, r3
 801513a:	b21a      	sxth	r2, r3
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2200      	movs	r2, #0
 8015146:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015148:	4b35      	ldr	r3, [pc, #212]	@ (8015220 <tcp_receive+0x5e4>)
 801514a:	881b      	ldrh	r3, [r3, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	f000 84df 	beq.w	8015b10 <tcp_receive+0xed4>
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	7d1b      	ldrb	r3, [r3, #20]
 8015156:	2b06      	cmp	r3, #6
 8015158:	f200 84da 	bhi.w	8015b10 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015160:	4b30      	ldr	r3, [pc, #192]	@ (8015224 <tcp_receive+0x5e8>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	1ad3      	subs	r3, r2, r3
 8015166:	3b01      	subs	r3, #1
 8015168:	2b00      	cmp	r3, #0
 801516a:	f2c0 808f 	blt.w	801528c <tcp_receive+0x650>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015172:	4b2b      	ldr	r3, [pc, #172]	@ (8015220 <tcp_receive+0x5e4>)
 8015174:	881b      	ldrh	r3, [r3, #0]
 8015176:	4619      	mov	r1, r3
 8015178:	4b2a      	ldr	r3, [pc, #168]	@ (8015224 <tcp_receive+0x5e8>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	440b      	add	r3, r1
 801517e:	1ad3      	subs	r3, r2, r3
 8015180:	3301      	adds	r3, #1
 8015182:	2b00      	cmp	r3, #0
 8015184:	f300 8082 	bgt.w	801528c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015188:	4b27      	ldr	r3, [pc, #156]	@ (8015228 <tcp_receive+0x5ec>)
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015192:	4b24      	ldr	r3, [pc, #144]	@ (8015224 <tcp_receive+0x5e8>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801519a:	4b23      	ldr	r3, [pc, #140]	@ (8015228 <tcp_receive+0x5ec>)
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d106      	bne.n	80151b0 <tcp_receive+0x574>
 80151a2:	4b22      	ldr	r3, [pc, #136]	@ (801522c <tcp_receive+0x5f0>)
 80151a4:	f240 5294 	movw	r2, #1428	@ 0x594
 80151a8:	4921      	ldr	r1, [pc, #132]	@ (8015230 <tcp_receive+0x5f4>)
 80151aa:	4822      	ldr	r0, [pc, #136]	@ (8015234 <tcp_receive+0x5f8>)
 80151ac:	f005 fb9a 	bl	801a8e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80151b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d906      	bls.n	80151c8 <tcp_receive+0x58c>
 80151ba:	4b1c      	ldr	r3, [pc, #112]	@ (801522c <tcp_receive+0x5f0>)
 80151bc:	f240 5295 	movw	r2, #1429	@ 0x595
 80151c0:	491d      	ldr	r1, [pc, #116]	@ (8015238 <tcp_receive+0x5fc>)
 80151c2:	481c      	ldr	r0, [pc, #112]	@ (8015234 <tcp_receive+0x5f8>)
 80151c4:	f005 fb8e 	bl	801a8e4 <iprintf>
      off = (u16_t)off32;
 80151c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80151ce:	4b16      	ldr	r3, [pc, #88]	@ (8015228 <tcp_receive+0x5ec>)
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	891b      	ldrh	r3, [r3, #8]
 80151d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80151d8:	429a      	cmp	r2, r3
 80151da:	d906      	bls.n	80151ea <tcp_receive+0x5ae>
 80151dc:	4b13      	ldr	r3, [pc, #76]	@ (801522c <tcp_receive+0x5f0>)
 80151de:	f240 5297 	movw	r2, #1431	@ 0x597
 80151e2:	4916      	ldr	r1, [pc, #88]	@ (801523c <tcp_receive+0x600>)
 80151e4:	4813      	ldr	r0, [pc, #76]	@ (8015234 <tcp_receive+0x5f8>)
 80151e6:	f005 fb7d 	bl	801a8e4 <iprintf>
      inseg.len -= off;
 80151ea:	4b0f      	ldr	r3, [pc, #60]	@ (8015228 <tcp_receive+0x5ec>)
 80151ec:	891a      	ldrh	r2, [r3, #8]
 80151ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80151f2:	1ad3      	subs	r3, r2, r3
 80151f4:	b29a      	uxth	r2, r3
 80151f6:	4b0c      	ldr	r3, [pc, #48]	@ (8015228 <tcp_receive+0x5ec>)
 80151f8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80151fa:	4b0b      	ldr	r3, [pc, #44]	@ (8015228 <tcp_receive+0x5ec>)
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	891a      	ldrh	r2, [r3, #8]
 8015200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015208:	e02a      	b.n	8015260 <tcp_receive+0x624>
 801520a:	bf00      	nop
 801520c:	0801cf70 	.word	0x0801cf70
 8015210:	0801cf78 	.word	0x0801cf78
 8015214:	24014bbc 	.word	0x24014bbc
 8015218:	24014bb8 	.word	0x24014bb8
 801521c:	24014b7c 	.word	0x24014b7c
 8015220:	24014bbe 	.word	0x24014bbe
 8015224:	24014bb4 	.word	0x24014bb4
 8015228:	24014b94 	.word	0x24014b94
 801522c:	0801cc08 	.word	0x0801cc08
 8015230:	0801cf80 	.word	0x0801cf80
 8015234:	0801cc54 	.word	0x0801cc54
 8015238:	0801cf90 	.word	0x0801cf90
 801523c:	0801cfa0 	.word	0x0801cfa0
        off -= p->len;
 8015240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015242:	895b      	ldrh	r3, [r3, #10]
 8015244:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015248:	1ad3      	subs	r3, r2, r3
 801524a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801524e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015250:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015252:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015256:	2200      	movs	r2, #0
 8015258:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801525a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015262:	895b      	ldrh	r3, [r3, #10]
 8015264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015268:	429a      	cmp	r2, r3
 801526a:	d8e9      	bhi.n	8015240 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801526c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015270:	4619      	mov	r1, r3
 8015272:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015274:	f7fc fa6e 	bl	8011754 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801527c:	4a90      	ldr	r2, [pc, #576]	@ (80154c0 <tcp_receive+0x884>)
 801527e:	6013      	str	r3, [r2, #0]
 8015280:	4b90      	ldr	r3, [pc, #576]	@ (80154c4 <tcp_receive+0x888>)
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	4a8e      	ldr	r2, [pc, #568]	@ (80154c0 <tcp_receive+0x884>)
 8015286:	6812      	ldr	r2, [r2, #0]
 8015288:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801528a:	e00d      	b.n	80152a8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801528c:	4b8c      	ldr	r3, [pc, #560]	@ (80154c0 <tcp_receive+0x884>)
 801528e:	681a      	ldr	r2, [r3, #0]
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015294:	1ad3      	subs	r3, r2, r3
 8015296:	2b00      	cmp	r3, #0
 8015298:	da06      	bge.n	80152a8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	8b5b      	ldrh	r3, [r3, #26]
 801529e:	f043 0302 	orr.w	r3, r3, #2
 80152a2:	b29a      	uxth	r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80152a8:	4b85      	ldr	r3, [pc, #532]	@ (80154c0 <tcp_receive+0x884>)
 80152aa:	681a      	ldr	r2, [r3, #0]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152b0:	1ad3      	subs	r3, r2, r3
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f2c0 8427 	blt.w	8015b06 <tcp_receive+0xeca>
 80152b8:	4b81      	ldr	r3, [pc, #516]	@ (80154c0 <tcp_receive+0x884>)
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152c0:	6879      	ldr	r1, [r7, #4]
 80152c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80152c4:	440b      	add	r3, r1
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	3301      	adds	r3, #1
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	f300 841b 	bgt.w	8015b06 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152d4:	4b7a      	ldr	r3, [pc, #488]	@ (80154c0 <tcp_receive+0x884>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	429a      	cmp	r2, r3
 80152da:	f040 8298 	bne.w	801580e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80152de:	4b79      	ldr	r3, [pc, #484]	@ (80154c4 <tcp_receive+0x888>)
 80152e0:	891c      	ldrh	r4, [r3, #8]
 80152e2:	4b78      	ldr	r3, [pc, #480]	@ (80154c4 <tcp_receive+0x888>)
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	899b      	ldrh	r3, [r3, #12]
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7fa fe06 	bl	800fefc <lwip_htons>
 80152f0:	4603      	mov	r3, r0
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	f003 0303 	and.w	r3, r3, #3
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d001      	beq.n	8015300 <tcp_receive+0x6c4>
 80152fc:	2301      	movs	r3, #1
 80152fe:	e000      	b.n	8015302 <tcp_receive+0x6c6>
 8015300:	2300      	movs	r3, #0
 8015302:	4423      	add	r3, r4
 8015304:	b29a      	uxth	r2, r3
 8015306:	4b70      	ldr	r3, [pc, #448]	@ (80154c8 <tcp_receive+0x88c>)
 8015308:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801530e:	4b6e      	ldr	r3, [pc, #440]	@ (80154c8 <tcp_receive+0x88c>)
 8015310:	881b      	ldrh	r3, [r3, #0]
 8015312:	429a      	cmp	r2, r3
 8015314:	d274      	bcs.n	8015400 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015316:	4b6b      	ldr	r3, [pc, #428]	@ (80154c4 <tcp_receive+0x888>)
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	899b      	ldrh	r3, [r3, #12]
 801531c:	b29b      	uxth	r3, r3
 801531e:	4618      	mov	r0, r3
 8015320:	f7fa fdec 	bl	800fefc <lwip_htons>
 8015324:	4603      	mov	r3, r0
 8015326:	b2db      	uxtb	r3, r3
 8015328:	f003 0301 	and.w	r3, r3, #1
 801532c:	2b00      	cmp	r3, #0
 801532e:	d01e      	beq.n	801536e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015330:	4b64      	ldr	r3, [pc, #400]	@ (80154c4 <tcp_receive+0x888>)
 8015332:	68db      	ldr	r3, [r3, #12]
 8015334:	899b      	ldrh	r3, [r3, #12]
 8015336:	b29b      	uxth	r3, r3
 8015338:	b21b      	sxth	r3, r3
 801533a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801533e:	b21c      	sxth	r4, r3
 8015340:	4b60      	ldr	r3, [pc, #384]	@ (80154c4 <tcp_receive+0x888>)
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	899b      	ldrh	r3, [r3, #12]
 8015346:	b29b      	uxth	r3, r3
 8015348:	4618      	mov	r0, r3
 801534a:	f7fa fdd7 	bl	800fefc <lwip_htons>
 801534e:	4603      	mov	r3, r0
 8015350:	b2db      	uxtb	r3, r3
 8015352:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015356:	b29b      	uxth	r3, r3
 8015358:	4618      	mov	r0, r3
 801535a:	f7fa fdcf 	bl	800fefc <lwip_htons>
 801535e:	4603      	mov	r3, r0
 8015360:	b21b      	sxth	r3, r3
 8015362:	4323      	orrs	r3, r4
 8015364:	b21a      	sxth	r2, r3
 8015366:	4b57      	ldr	r3, [pc, #348]	@ (80154c4 <tcp_receive+0x888>)
 8015368:	68db      	ldr	r3, [r3, #12]
 801536a:	b292      	uxth	r2, r2
 801536c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015372:	4b54      	ldr	r3, [pc, #336]	@ (80154c4 <tcp_receive+0x888>)
 8015374:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015376:	4b53      	ldr	r3, [pc, #332]	@ (80154c4 <tcp_receive+0x888>)
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	899b      	ldrh	r3, [r3, #12]
 801537c:	b29b      	uxth	r3, r3
 801537e:	4618      	mov	r0, r3
 8015380:	f7fa fdbc 	bl	800fefc <lwip_htons>
 8015384:	4603      	mov	r3, r0
 8015386:	b2db      	uxtb	r3, r3
 8015388:	f003 0302 	and.w	r3, r3, #2
 801538c:	2b00      	cmp	r3, #0
 801538e:	d005      	beq.n	801539c <tcp_receive+0x760>
            inseg.len -= 1;
 8015390:	4b4c      	ldr	r3, [pc, #304]	@ (80154c4 <tcp_receive+0x888>)
 8015392:	891b      	ldrh	r3, [r3, #8]
 8015394:	3b01      	subs	r3, #1
 8015396:	b29a      	uxth	r2, r3
 8015398:	4b4a      	ldr	r3, [pc, #296]	@ (80154c4 <tcp_receive+0x888>)
 801539a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801539c:	4b49      	ldr	r3, [pc, #292]	@ (80154c4 <tcp_receive+0x888>)
 801539e:	685b      	ldr	r3, [r3, #4]
 80153a0:	4a48      	ldr	r2, [pc, #288]	@ (80154c4 <tcp_receive+0x888>)
 80153a2:	8912      	ldrh	r2, [r2, #8]
 80153a4:	4611      	mov	r1, r2
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fc f8d4 	bl	8011554 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80153ac:	4b45      	ldr	r3, [pc, #276]	@ (80154c4 <tcp_receive+0x888>)
 80153ae:	891c      	ldrh	r4, [r3, #8]
 80153b0:	4b44      	ldr	r3, [pc, #272]	@ (80154c4 <tcp_receive+0x888>)
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	899b      	ldrh	r3, [r3, #12]
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7fa fd9f 	bl	800fefc <lwip_htons>
 80153be:	4603      	mov	r3, r0
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	f003 0303 	and.w	r3, r3, #3
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d001      	beq.n	80153ce <tcp_receive+0x792>
 80153ca:	2301      	movs	r3, #1
 80153cc:	e000      	b.n	80153d0 <tcp_receive+0x794>
 80153ce:	2300      	movs	r3, #0
 80153d0:	4423      	add	r3, r4
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	4b3c      	ldr	r3, [pc, #240]	@ (80154c8 <tcp_receive+0x88c>)
 80153d6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80153d8:	4b3b      	ldr	r3, [pc, #236]	@ (80154c8 <tcp_receive+0x88c>)
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	461a      	mov	r2, r3
 80153de:	4b38      	ldr	r3, [pc, #224]	@ (80154c0 <tcp_receive+0x884>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	441a      	add	r2, r3
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153e8:	6879      	ldr	r1, [r7, #4]
 80153ea:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80153ec:	440b      	add	r3, r1
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d006      	beq.n	8015400 <tcp_receive+0x7c4>
 80153f2:	4b36      	ldr	r3, [pc, #216]	@ (80154cc <tcp_receive+0x890>)
 80153f4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80153f8:	4935      	ldr	r1, [pc, #212]	@ (80154d0 <tcp_receive+0x894>)
 80153fa:	4836      	ldr	r0, [pc, #216]	@ (80154d4 <tcp_receive+0x898>)
 80153fc:	f005 fa72 	bl	801a8e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015404:	2b00      	cmp	r3, #0
 8015406:	f000 80e6 	beq.w	80155d6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801540a:	4b2e      	ldr	r3, [pc, #184]	@ (80154c4 <tcp_receive+0x888>)
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	899b      	ldrh	r3, [r3, #12]
 8015410:	b29b      	uxth	r3, r3
 8015412:	4618      	mov	r0, r3
 8015414:	f7fa fd72 	bl	800fefc <lwip_htons>
 8015418:	4603      	mov	r3, r0
 801541a:	b2db      	uxtb	r3, r3
 801541c:	f003 0301 	and.w	r3, r3, #1
 8015420:	2b00      	cmp	r3, #0
 8015422:	d010      	beq.n	8015446 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015424:	e00a      	b.n	801543c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801542a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015436:	68f8      	ldr	r0, [r7, #12]
 8015438:	f7fd fd93 	bl	8012f62 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015440:	2b00      	cmp	r3, #0
 8015442:	d1f0      	bne.n	8015426 <tcp_receive+0x7ea>
 8015444:	e0c7      	b.n	80155d6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801544a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801544c:	e051      	b.n	80154f2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015450:	68db      	ldr	r3, [r3, #12]
 8015452:	899b      	ldrh	r3, [r3, #12]
 8015454:	b29b      	uxth	r3, r3
 8015456:	4618      	mov	r0, r3
 8015458:	f7fa fd50 	bl	800fefc <lwip_htons>
 801545c:	4603      	mov	r3, r0
 801545e:	b2db      	uxtb	r3, r3
 8015460:	f003 0301 	and.w	r3, r3, #1
 8015464:	2b00      	cmp	r3, #0
 8015466:	d03c      	beq.n	80154e2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015468:	4b16      	ldr	r3, [pc, #88]	@ (80154c4 <tcp_receive+0x888>)
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	899b      	ldrh	r3, [r3, #12]
 801546e:	b29b      	uxth	r3, r3
 8015470:	4618      	mov	r0, r3
 8015472:	f7fa fd43 	bl	800fefc <lwip_htons>
 8015476:	4603      	mov	r3, r0
 8015478:	b2db      	uxtb	r3, r3
 801547a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801547e:	2b00      	cmp	r3, #0
 8015480:	d12f      	bne.n	80154e2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015482:	4b10      	ldr	r3, [pc, #64]	@ (80154c4 <tcp_receive+0x888>)
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	899b      	ldrh	r3, [r3, #12]
 8015488:	b29c      	uxth	r4, r3
 801548a:	2001      	movs	r0, #1
 801548c:	f7fa fd36 	bl	800fefc <lwip_htons>
 8015490:	4603      	mov	r3, r0
 8015492:	461a      	mov	r2, r3
 8015494:	4b0b      	ldr	r3, [pc, #44]	@ (80154c4 <tcp_receive+0x888>)
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	4322      	orrs	r2, r4
 801549a:	b292      	uxth	r2, r2
 801549c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801549e:	4b09      	ldr	r3, [pc, #36]	@ (80154c4 <tcp_receive+0x888>)
 80154a0:	891c      	ldrh	r4, [r3, #8]
 80154a2:	4b08      	ldr	r3, [pc, #32]	@ (80154c4 <tcp_receive+0x888>)
 80154a4:	68db      	ldr	r3, [r3, #12]
 80154a6:	899b      	ldrh	r3, [r3, #12]
 80154a8:	b29b      	uxth	r3, r3
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fa fd26 	bl	800fefc <lwip_htons>
 80154b0:	4603      	mov	r3, r0
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	f003 0303 	and.w	r3, r3, #3
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00d      	beq.n	80154d8 <tcp_receive+0x89c>
 80154bc:	2301      	movs	r3, #1
 80154be:	e00c      	b.n	80154da <tcp_receive+0x89e>
 80154c0:	24014bb4 	.word	0x24014bb4
 80154c4:	24014b94 	.word	0x24014b94
 80154c8:	24014bbe 	.word	0x24014bbe
 80154cc:	0801cc08 	.word	0x0801cc08
 80154d0:	0801cfb0 	.word	0x0801cfb0
 80154d4:	0801cc54 	.word	0x0801cc54
 80154d8:	2300      	movs	r3, #0
 80154da:	4423      	add	r3, r4
 80154dc:	b29a      	uxth	r2, r3
 80154de:	4b98      	ldr	r3, [pc, #608]	@ (8015740 <tcp_receive+0xb04>)
 80154e0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80154e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154e4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80154e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80154ec:	6938      	ldr	r0, [r7, #16]
 80154ee:	f7fd fd38 	bl	8012f62 <tcp_seg_free>
            while (next &&
 80154f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00e      	beq.n	8015516 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80154f8:	4b91      	ldr	r3, [pc, #580]	@ (8015740 <tcp_receive+0xb04>)
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	461a      	mov	r2, r3
 80154fe:	4b91      	ldr	r3, [pc, #580]	@ (8015744 <tcp_receive+0xb08>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	441a      	add	r2, r3
 8015504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015506:	68db      	ldr	r3, [r3, #12]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801550c:	8909      	ldrh	r1, [r1, #8]
 801550e:	440b      	add	r3, r1
 8015510:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015512:	2b00      	cmp	r3, #0
 8015514:	da9b      	bge.n	801544e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015518:	2b00      	cmp	r3, #0
 801551a:	d059      	beq.n	80155d0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801551c:	4b88      	ldr	r3, [pc, #544]	@ (8015740 <tcp_receive+0xb04>)
 801551e:	881b      	ldrh	r3, [r3, #0]
 8015520:	461a      	mov	r2, r3
 8015522:	4b88      	ldr	r3, [pc, #544]	@ (8015744 <tcp_receive+0xb08>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	441a      	add	r2, r3
 8015528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015530:	2b00      	cmp	r3, #0
 8015532:	dd4d      	ble.n	80155d0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015536:	68db      	ldr	r3, [r3, #12]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	b29a      	uxth	r2, r3
 801553c:	4b81      	ldr	r3, [pc, #516]	@ (8015744 <tcp_receive+0xb08>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	b29b      	uxth	r3, r3
 8015542:	1ad3      	subs	r3, r2, r3
 8015544:	b29a      	uxth	r2, r3
 8015546:	4b80      	ldr	r3, [pc, #512]	@ (8015748 <tcp_receive+0xb0c>)
 8015548:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801554a:	4b7f      	ldr	r3, [pc, #508]	@ (8015748 <tcp_receive+0xb0c>)
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	899b      	ldrh	r3, [r3, #12]
 8015550:	b29b      	uxth	r3, r3
 8015552:	4618      	mov	r0, r3
 8015554:	f7fa fcd2 	bl	800fefc <lwip_htons>
 8015558:	4603      	mov	r3, r0
 801555a:	b2db      	uxtb	r3, r3
 801555c:	f003 0302 	and.w	r3, r3, #2
 8015560:	2b00      	cmp	r3, #0
 8015562:	d005      	beq.n	8015570 <tcp_receive+0x934>
                inseg.len -= 1;
 8015564:	4b78      	ldr	r3, [pc, #480]	@ (8015748 <tcp_receive+0xb0c>)
 8015566:	891b      	ldrh	r3, [r3, #8]
 8015568:	3b01      	subs	r3, #1
 801556a:	b29a      	uxth	r2, r3
 801556c:	4b76      	ldr	r3, [pc, #472]	@ (8015748 <tcp_receive+0xb0c>)
 801556e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015570:	4b75      	ldr	r3, [pc, #468]	@ (8015748 <tcp_receive+0xb0c>)
 8015572:	685b      	ldr	r3, [r3, #4]
 8015574:	4a74      	ldr	r2, [pc, #464]	@ (8015748 <tcp_receive+0xb0c>)
 8015576:	8912      	ldrh	r2, [r2, #8]
 8015578:	4611      	mov	r1, r2
 801557a:	4618      	mov	r0, r3
 801557c:	f7fb ffea 	bl	8011554 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015580:	4b71      	ldr	r3, [pc, #452]	@ (8015748 <tcp_receive+0xb0c>)
 8015582:	891c      	ldrh	r4, [r3, #8]
 8015584:	4b70      	ldr	r3, [pc, #448]	@ (8015748 <tcp_receive+0xb0c>)
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	899b      	ldrh	r3, [r3, #12]
 801558a:	b29b      	uxth	r3, r3
 801558c:	4618      	mov	r0, r3
 801558e:	f7fa fcb5 	bl	800fefc <lwip_htons>
 8015592:	4603      	mov	r3, r0
 8015594:	b2db      	uxtb	r3, r3
 8015596:	f003 0303 	and.w	r3, r3, #3
 801559a:	2b00      	cmp	r3, #0
 801559c:	d001      	beq.n	80155a2 <tcp_receive+0x966>
 801559e:	2301      	movs	r3, #1
 80155a0:	e000      	b.n	80155a4 <tcp_receive+0x968>
 80155a2:	2300      	movs	r3, #0
 80155a4:	4423      	add	r3, r4
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	4b65      	ldr	r3, [pc, #404]	@ (8015740 <tcp_receive+0xb04>)
 80155aa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80155ac:	4b64      	ldr	r3, [pc, #400]	@ (8015740 <tcp_receive+0xb04>)
 80155ae:	881b      	ldrh	r3, [r3, #0]
 80155b0:	461a      	mov	r2, r3
 80155b2:	4b64      	ldr	r3, [pc, #400]	@ (8015744 <tcp_receive+0xb08>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	441a      	add	r2, r3
 80155b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d006      	beq.n	80155d0 <tcp_receive+0x994>
 80155c2:	4b62      	ldr	r3, [pc, #392]	@ (801574c <tcp_receive+0xb10>)
 80155c4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80155c8:	4961      	ldr	r1, [pc, #388]	@ (8015750 <tcp_receive+0xb14>)
 80155ca:	4862      	ldr	r0, [pc, #392]	@ (8015754 <tcp_receive+0xb18>)
 80155cc:	f005 f98a 	bl	801a8e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80155d4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80155d6:	4b5a      	ldr	r3, [pc, #360]	@ (8015740 <tcp_receive+0xb04>)
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	461a      	mov	r2, r3
 80155dc:	4b59      	ldr	r3, [pc, #356]	@ (8015744 <tcp_receive+0xb08>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	441a      	add	r2, r3
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80155ea:	4b55      	ldr	r3, [pc, #340]	@ (8015740 <tcp_receive+0xb04>)
 80155ec:	881b      	ldrh	r3, [r3, #0]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d206      	bcs.n	8015600 <tcp_receive+0x9c4>
 80155f2:	4b56      	ldr	r3, [pc, #344]	@ (801574c <tcp_receive+0xb10>)
 80155f4:	f240 6207 	movw	r2, #1543	@ 0x607
 80155f8:	4957      	ldr	r1, [pc, #348]	@ (8015758 <tcp_receive+0xb1c>)
 80155fa:	4856      	ldr	r0, [pc, #344]	@ (8015754 <tcp_receive+0xb18>)
 80155fc:	f005 f972 	bl	801a8e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015604:	4b4e      	ldr	r3, [pc, #312]	@ (8015740 <tcp_receive+0xb04>)
 8015606:	881b      	ldrh	r3, [r3, #0]
 8015608:	1ad3      	subs	r3, r2, r3
 801560a:	b29a      	uxth	r2, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f7fc ffc1 	bl	8012598 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015616:	4b4c      	ldr	r3, [pc, #304]	@ (8015748 <tcp_receive+0xb0c>)
 8015618:	685b      	ldr	r3, [r3, #4]
 801561a:	891b      	ldrh	r3, [r3, #8]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d006      	beq.n	801562e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015620:	4b49      	ldr	r3, [pc, #292]	@ (8015748 <tcp_receive+0xb0c>)
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	4a4d      	ldr	r2, [pc, #308]	@ (801575c <tcp_receive+0xb20>)
 8015626:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015628:	4b47      	ldr	r3, [pc, #284]	@ (8015748 <tcp_receive+0xb0c>)
 801562a:	2200      	movs	r2, #0
 801562c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801562e:	4b46      	ldr	r3, [pc, #280]	@ (8015748 <tcp_receive+0xb0c>)
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	899b      	ldrh	r3, [r3, #12]
 8015634:	b29b      	uxth	r3, r3
 8015636:	4618      	mov	r0, r3
 8015638:	f7fa fc60 	bl	800fefc <lwip_htons>
 801563c:	4603      	mov	r3, r0
 801563e:	b2db      	uxtb	r3, r3
 8015640:	f003 0301 	and.w	r3, r3, #1
 8015644:	2b00      	cmp	r3, #0
 8015646:	f000 80b8 	beq.w	80157ba <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801564a:	4b45      	ldr	r3, [pc, #276]	@ (8015760 <tcp_receive+0xb24>)
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	f043 0320 	orr.w	r3, r3, #32
 8015652:	b2da      	uxtb	r2, r3
 8015654:	4b42      	ldr	r3, [pc, #264]	@ (8015760 <tcp_receive+0xb24>)
 8015656:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015658:	e0af      	b.n	80157ba <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801565e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015664:	68db      	ldr	r3, [r3, #12]
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	4a36      	ldr	r2, [pc, #216]	@ (8015744 <tcp_receive+0xb08>)
 801566a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	891b      	ldrh	r3, [r3, #8]
 8015670:	461c      	mov	r4, r3
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	68db      	ldr	r3, [r3, #12]
 8015676:	899b      	ldrh	r3, [r3, #12]
 8015678:	b29b      	uxth	r3, r3
 801567a:	4618      	mov	r0, r3
 801567c:	f7fa fc3e 	bl	800fefc <lwip_htons>
 8015680:	4603      	mov	r3, r0
 8015682:	b2db      	uxtb	r3, r3
 8015684:	f003 0303 	and.w	r3, r3, #3
 8015688:	2b00      	cmp	r3, #0
 801568a:	d001      	beq.n	8015690 <tcp_receive+0xa54>
 801568c:	2301      	movs	r3, #1
 801568e:	e000      	b.n	8015692 <tcp_receive+0xa56>
 8015690:	2300      	movs	r3, #0
 8015692:	191a      	adds	r2, r3, r4
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015698:	441a      	add	r2, r3
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156a2:	461c      	mov	r4, r3
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	891b      	ldrh	r3, [r3, #8]
 80156a8:	461d      	mov	r5, r3
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	68db      	ldr	r3, [r3, #12]
 80156ae:	899b      	ldrh	r3, [r3, #12]
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fa fc22 	bl	800fefc <lwip_htons>
 80156b8:	4603      	mov	r3, r0
 80156ba:	b2db      	uxtb	r3, r3
 80156bc:	f003 0303 	and.w	r3, r3, #3
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d001      	beq.n	80156c8 <tcp_receive+0xa8c>
 80156c4:	2301      	movs	r3, #1
 80156c6:	e000      	b.n	80156ca <tcp_receive+0xa8e>
 80156c8:	2300      	movs	r3, #0
 80156ca:	442b      	add	r3, r5
 80156cc:	429c      	cmp	r4, r3
 80156ce:	d206      	bcs.n	80156de <tcp_receive+0xaa2>
 80156d0:	4b1e      	ldr	r3, [pc, #120]	@ (801574c <tcp_receive+0xb10>)
 80156d2:	f240 622b 	movw	r2, #1579	@ 0x62b
 80156d6:	4923      	ldr	r1, [pc, #140]	@ (8015764 <tcp_receive+0xb28>)
 80156d8:	481e      	ldr	r0, [pc, #120]	@ (8015754 <tcp_receive+0xb18>)
 80156da:	f005 f903 	bl	801a8e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80156de:	68bb      	ldr	r3, [r7, #8]
 80156e0:	891b      	ldrh	r3, [r3, #8]
 80156e2:	461c      	mov	r4, r3
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	899b      	ldrh	r3, [r3, #12]
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7fa fc05 	bl	800fefc <lwip_htons>
 80156f2:	4603      	mov	r3, r0
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	f003 0303 	and.w	r3, r3, #3
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d001      	beq.n	8015702 <tcp_receive+0xac6>
 80156fe:	2301      	movs	r3, #1
 8015700:	e000      	b.n	8015704 <tcp_receive+0xac8>
 8015702:	2300      	movs	r3, #0
 8015704:	1919      	adds	r1, r3, r4
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801570a:	b28b      	uxth	r3, r1
 801570c:	1ad3      	subs	r3, r2, r3
 801570e:	b29a      	uxth	r2, r3
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f7fc ff3f 	bl	8012598 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	891b      	ldrh	r3, [r3, #8]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d028      	beq.n	8015776 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015724:	4b0d      	ldr	r3, [pc, #52]	@ (801575c <tcp_receive+0xb20>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d01d      	beq.n	8015768 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801572c:	4b0b      	ldr	r3, [pc, #44]	@ (801575c <tcp_receive+0xb20>)
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	4619      	mov	r1, r3
 8015736:	4610      	mov	r0, r2
 8015738:	f7fc f960 	bl	80119fc <pbuf_cat>
 801573c:	e018      	b.n	8015770 <tcp_receive+0xb34>
 801573e:	bf00      	nop
 8015740:	24014bbe 	.word	0x24014bbe
 8015744:	24014bb4 	.word	0x24014bb4
 8015748:	24014b94 	.word	0x24014b94
 801574c:	0801cc08 	.word	0x0801cc08
 8015750:	0801cfe8 	.word	0x0801cfe8
 8015754:	0801cc54 	.word	0x0801cc54
 8015758:	0801d024 	.word	0x0801d024
 801575c:	24014bc4 	.word	0x24014bc4
 8015760:	24014bc1 	.word	0x24014bc1
 8015764:	0801d044 	.word	0x0801d044
            } else {
              recv_data = cseg->p;
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	685b      	ldr	r3, [r3, #4]
 801576c:	4a70      	ldr	r2, [pc, #448]	@ (8015930 <tcp_receive+0xcf4>)
 801576e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	2200      	movs	r2, #0
 8015774:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	899b      	ldrh	r3, [r3, #12]
 801577c:	b29b      	uxth	r3, r3
 801577e:	4618      	mov	r0, r3
 8015780:	f7fa fbbc 	bl	800fefc <lwip_htons>
 8015784:	4603      	mov	r3, r0
 8015786:	b2db      	uxtb	r3, r3
 8015788:	f003 0301 	and.w	r3, r3, #1
 801578c:	2b00      	cmp	r3, #0
 801578e:	d00d      	beq.n	80157ac <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015790:	4b68      	ldr	r3, [pc, #416]	@ (8015934 <tcp_receive+0xcf8>)
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	f043 0320 	orr.w	r3, r3, #32
 8015798:	b2da      	uxtb	r2, r3
 801579a:	4b66      	ldr	r3, [pc, #408]	@ (8015934 <tcp_receive+0xcf8>)
 801579c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	7d1b      	ldrb	r3, [r3, #20]
 80157a2:	2b04      	cmp	r3, #4
 80157a4:	d102      	bne.n	80157ac <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2207      	movs	r2, #7
 80157aa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	681a      	ldr	r2, [r3, #0]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80157b4:	68b8      	ldr	r0, [r7, #8]
 80157b6:	f7fd fbd4 	bl	8012f62 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d008      	beq.n	80157d4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157c6:	68db      	ldr	r3, [r3, #12]
 80157c8:	685a      	ldr	r2, [r3, #4]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80157ce:	429a      	cmp	r2, r3
 80157d0:	f43f af43 	beq.w	801565a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	8b5b      	ldrh	r3, [r3, #26]
 80157d8:	f003 0301 	and.w	r3, r3, #1
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d00e      	beq.n	80157fe <tcp_receive+0xbc2>
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	8b5b      	ldrh	r3, [r3, #26]
 80157e4:	f023 0301 	bic.w	r3, r3, #1
 80157e8:	b29a      	uxth	r2, r3
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	835a      	strh	r2, [r3, #26]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	8b5b      	ldrh	r3, [r3, #26]
 80157f2:	f043 0302 	orr.w	r3, r3, #2
 80157f6:	b29a      	uxth	r2, r3
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80157fc:	e187      	b.n	8015b0e <tcp_receive+0xed2>
        tcp_ack(pcb);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	8b5b      	ldrh	r3, [r3, #26]
 8015802:	f043 0301 	orr.w	r3, r3, #1
 8015806:	b29a      	uxth	r2, r3
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801580c:	e17f      	b.n	8015b0e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015812:	2b00      	cmp	r3, #0
 8015814:	d106      	bne.n	8015824 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015816:	4848      	ldr	r0, [pc, #288]	@ (8015938 <tcp_receive+0xcfc>)
 8015818:	f7fd fbbc 	bl	8012f94 <tcp_seg_copy>
 801581c:	4602      	mov	r2, r0
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	675a      	str	r2, [r3, #116]	@ 0x74
 8015822:	e16c      	b.n	8015afe <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015824:	2300      	movs	r3, #0
 8015826:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801582c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801582e:	e156      	b.n	8015ade <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8015830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	685a      	ldr	r2, [r3, #4]
 8015836:	4b41      	ldr	r3, [pc, #260]	@ (801593c <tcp_receive+0xd00>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	429a      	cmp	r2, r3
 801583c:	d11d      	bne.n	801587a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801583e:	4b3e      	ldr	r3, [pc, #248]	@ (8015938 <tcp_receive+0xcfc>)
 8015840:	891a      	ldrh	r2, [r3, #8]
 8015842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015844:	891b      	ldrh	r3, [r3, #8]
 8015846:	429a      	cmp	r2, r3
 8015848:	f240 814e 	bls.w	8015ae8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801584c:	483a      	ldr	r0, [pc, #232]	@ (8015938 <tcp_receive+0xcfc>)
 801584e:	f7fd fba1 	bl	8012f94 <tcp_seg_copy>
 8015852:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	2b00      	cmp	r3, #0
 8015858:	f000 8148 	beq.w	8015aec <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801585e:	2b00      	cmp	r3, #0
 8015860:	d003      	beq.n	801586a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015864:	697a      	ldr	r2, [r7, #20]
 8015866:	601a      	str	r2, [r3, #0]
 8015868:	e002      	b.n	8015870 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	697a      	ldr	r2, [r7, #20]
 801586e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015870:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015872:	6978      	ldr	r0, [r7, #20]
 8015874:	f7ff f8de 	bl	8014a34 <tcp_oos_insert_segment>
                }
                break;
 8015878:	e138      	b.n	8015aec <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801587a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801587c:	2b00      	cmp	r3, #0
 801587e:	d117      	bne.n	80158b0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015880:	4b2e      	ldr	r3, [pc, #184]	@ (801593c <tcp_receive+0xd00>)
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015886:	68db      	ldr	r3, [r3, #12]
 8015888:	685b      	ldr	r3, [r3, #4]
 801588a:	1ad3      	subs	r3, r2, r3
 801588c:	2b00      	cmp	r3, #0
 801588e:	da57      	bge.n	8015940 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015890:	4829      	ldr	r0, [pc, #164]	@ (8015938 <tcp_receive+0xcfc>)
 8015892:	f7fd fb7f 	bl	8012f94 <tcp_seg_copy>
 8015896:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015898:	69bb      	ldr	r3, [r7, #24]
 801589a:	2b00      	cmp	r3, #0
 801589c:	f000 8128 	beq.w	8015af0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	69ba      	ldr	r2, [r7, #24]
 80158a4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80158a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80158a8:	69b8      	ldr	r0, [r7, #24]
 80158aa:	f7ff f8c3 	bl	8014a34 <tcp_oos_insert_segment>
                  }
                  break;
 80158ae:	e11f      	b.n	8015af0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80158b0:	4b22      	ldr	r3, [pc, #136]	@ (801593c <tcp_receive+0xd00>)
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	1ad3      	subs	r3, r2, r3
 80158bc:	3b01      	subs	r3, #1
 80158be:	2b00      	cmp	r3, #0
 80158c0:	db3e      	blt.n	8015940 <tcp_receive+0xd04>
 80158c2:	4b1e      	ldr	r3, [pc, #120]	@ (801593c <tcp_receive+0xd00>)
 80158c4:	681a      	ldr	r2, [r3, #0]
 80158c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	1ad3      	subs	r3, r2, r3
 80158ce:	3301      	adds	r3, #1
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	dc35      	bgt.n	8015940 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80158d4:	4818      	ldr	r0, [pc, #96]	@ (8015938 <tcp_receive+0xcfc>)
 80158d6:	f7fd fb5d 	bl	8012f94 <tcp_seg_copy>
 80158da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	f000 8108 	beq.w	8015af4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80158e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158e6:	68db      	ldr	r3, [r3, #12]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80158ec:	8912      	ldrh	r2, [r2, #8]
 80158ee:	441a      	add	r2, r3
 80158f0:	4b12      	ldr	r3, [pc, #72]	@ (801593c <tcp_receive+0xd00>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	1ad3      	subs	r3, r2, r3
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	dd12      	ble.n	8015920 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80158fa:	4b10      	ldr	r3, [pc, #64]	@ (801593c <tcp_receive+0xd00>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	b29a      	uxth	r2, r3
 8015900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	b29b      	uxth	r3, r3
 8015908:	1ad3      	subs	r3, r2, r3
 801590a:	b29a      	uxth	r2, r3
 801590c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801590e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015912:	685a      	ldr	r2, [r3, #4]
 8015914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015916:	891b      	ldrh	r3, [r3, #8]
 8015918:	4619      	mov	r1, r3
 801591a:	4610      	mov	r0, r2
 801591c:	f7fb fe1a 	bl	8011554 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015922:	69fa      	ldr	r2, [r7, #28]
 8015924:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015926:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015928:	69f8      	ldr	r0, [r7, #28]
 801592a:	f7ff f883 	bl	8014a34 <tcp_oos_insert_segment>
                  }
                  break;
 801592e:	e0e1      	b.n	8015af4 <tcp_receive+0xeb8>
 8015930:	24014bc4 	.word	0x24014bc4
 8015934:	24014bc1 	.word	0x24014bc1
 8015938:	24014b94 	.word	0x24014b94
 801593c:	24014bb4 	.word	0x24014bb4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015942:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	2b00      	cmp	r3, #0
 801594a:	f040 80c5 	bne.w	8015ad8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801594e:	4b7f      	ldr	r3, [pc, #508]	@ (8015b4c <tcp_receive+0xf10>)
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801595a:	2b00      	cmp	r3, #0
 801595c:	f340 80bc 	ble.w	8015ad8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	899b      	ldrh	r3, [r3, #12]
 8015966:	b29b      	uxth	r3, r3
 8015968:	4618      	mov	r0, r3
 801596a:	f7fa fac7 	bl	800fefc <lwip_htons>
 801596e:	4603      	mov	r3, r0
 8015970:	b2db      	uxtb	r3, r3
 8015972:	f003 0301 	and.w	r3, r3, #1
 8015976:	2b00      	cmp	r3, #0
 8015978:	f040 80be 	bne.w	8015af8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801597c:	4874      	ldr	r0, [pc, #464]	@ (8015b50 <tcp_receive+0xf14>)
 801597e:	f7fd fb09 	bl	8012f94 <tcp_seg_copy>
 8015982:	4602      	mov	r2, r0
 8015984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015986:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	f000 80b5 	beq.w	8015afc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015994:	68db      	ldr	r3, [r3, #12]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801599a:	8912      	ldrh	r2, [r2, #8]
 801599c:	441a      	add	r2, r3
 801599e:	4b6b      	ldr	r3, [pc, #428]	@ (8015b4c <tcp_receive+0xf10>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	1ad3      	subs	r3, r2, r3
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	dd12      	ble.n	80159ce <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80159a8:	4b68      	ldr	r3, [pc, #416]	@ (8015b4c <tcp_receive+0xf10>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159b0:	68db      	ldr	r3, [r3, #12]
 80159b2:	685b      	ldr	r3, [r3, #4]
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	1ad3      	subs	r3, r2, r3
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80159be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159c0:	685a      	ldr	r2, [r3, #4]
 80159c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159c4:	891b      	ldrh	r3, [r3, #8]
 80159c6:	4619      	mov	r1, r3
 80159c8:	4610      	mov	r0, r2
 80159ca:	f7fb fdc3 	bl	8011554 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80159ce:	4b61      	ldr	r3, [pc, #388]	@ (8015b54 <tcp_receive+0xf18>)
 80159d0:	881b      	ldrh	r3, [r3, #0]
 80159d2:	461a      	mov	r2, r3
 80159d4:	4b5d      	ldr	r3, [pc, #372]	@ (8015b4c <tcp_receive+0xf10>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	441a      	add	r2, r3
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159de:	6879      	ldr	r1, [r7, #4]
 80159e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80159e2:	440b      	add	r3, r1
 80159e4:	1ad3      	subs	r3, r2, r3
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	f340 8088 	ble.w	8015afc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80159ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	68db      	ldr	r3, [r3, #12]
 80159f2:	899b      	ldrh	r3, [r3, #12]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7fa fa80 	bl	800fefc <lwip_htons>
 80159fc:	4603      	mov	r3, r0
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	f003 0301 	and.w	r3, r3, #1
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d021      	beq.n	8015a4c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	899b      	ldrh	r3, [r3, #12]
 8015a10:	b29b      	uxth	r3, r3
 8015a12:	b21b      	sxth	r3, r3
 8015a14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015a18:	b21c      	sxth	r4, r3
 8015a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	899b      	ldrh	r3, [r3, #12]
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	4618      	mov	r0, r3
 8015a26:	f7fa fa69 	bl	800fefc <lwip_htons>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7fa fa61 	bl	800fefc <lwip_htons>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	b21b      	sxth	r3, r3
 8015a3e:	4323      	orrs	r3, r4
 8015a40:	b21a      	sxth	r2, r3
 8015a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	b292      	uxth	r2, r2
 8015a4a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a50:	b29a      	uxth	r2, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a56:	4413      	add	r3, r2
 8015a58:	b299      	uxth	r1, r3
 8015a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8015b4c <tcp_receive+0xf10>)
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	1a8a      	subs	r2, r1, r2
 8015a66:	b292      	uxth	r2, r2
 8015a68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	685a      	ldr	r2, [r3, #4]
 8015a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	891b      	ldrh	r3, [r3, #8]
 8015a76:	4619      	mov	r1, r3
 8015a78:	4610      	mov	r0, r2
 8015a7a:	f7fb fd6b 	bl	8011554 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	891c      	ldrh	r4, [r3, #8]
 8015a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	899b      	ldrh	r3, [r3, #12]
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7fa fa34 	bl	800fefc <lwip_htons>
 8015a94:	4603      	mov	r3, r0
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	f003 0303 	and.w	r3, r3, #3
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d001      	beq.n	8015aa4 <tcp_receive+0xe68>
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	e000      	b.n	8015aa6 <tcp_receive+0xe6a>
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	4423      	add	r3, r4
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8015b54 <tcp_receive+0xf18>)
 8015aac:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015aae:	4b29      	ldr	r3, [pc, #164]	@ (8015b54 <tcp_receive+0xf18>)
 8015ab0:	881b      	ldrh	r3, [r3, #0]
 8015ab2:	461a      	mov	r2, r3
 8015ab4:	4b25      	ldr	r3, [pc, #148]	@ (8015b4c <tcp_receive+0xf10>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	441a      	add	r2, r3
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015abe:	6879      	ldr	r1, [r7, #4]
 8015ac0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015ac2:	440b      	add	r3, r1
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d019      	beq.n	8015afc <tcp_receive+0xec0>
 8015ac8:	4b23      	ldr	r3, [pc, #140]	@ (8015b58 <tcp_receive+0xf1c>)
 8015aca:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8015ace:	4923      	ldr	r1, [pc, #140]	@ (8015b5c <tcp_receive+0xf20>)
 8015ad0:	4823      	ldr	r0, [pc, #140]	@ (8015b60 <tcp_receive+0xf24>)
 8015ad2:	f004 ff07 	bl	801a8e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015ad6:	e011      	b.n	8015afc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	f47f aea5 	bne.w	8015830 <tcp_receive+0xbf4>
 8015ae6:	e00a      	b.n	8015afe <tcp_receive+0xec2>
                break;
 8015ae8:	bf00      	nop
 8015aea:	e008      	b.n	8015afe <tcp_receive+0xec2>
                break;
 8015aec:	bf00      	nop
 8015aee:	e006      	b.n	8015afe <tcp_receive+0xec2>
                  break;
 8015af0:	bf00      	nop
 8015af2:	e004      	b.n	8015afe <tcp_receive+0xec2>
                  break;
 8015af4:	bf00      	nop
 8015af6:	e002      	b.n	8015afe <tcp_receive+0xec2>
                  break;
 8015af8:	bf00      	nop
 8015afa:	e000      	b.n	8015afe <tcp_receive+0xec2>
                break;
 8015afc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f001 fa32 	bl	8016f68 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015b04:	e003      	b.n	8015b0e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f001 fa2e 	bl	8016f68 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b0c:	e01a      	b.n	8015b44 <tcp_receive+0xf08>
 8015b0e:	e019      	b.n	8015b44 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015b10:	4b0e      	ldr	r3, [pc, #56]	@ (8015b4c <tcp_receive+0xf10>)
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b18:	1ad3      	subs	r3, r2, r3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	db0a      	blt.n	8015b34 <tcp_receive+0xef8>
 8015b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8015b4c <tcp_receive+0xf10>)
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b26:	6879      	ldr	r1, [r7, #4]
 8015b28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015b2a:	440b      	add	r3, r1
 8015b2c:	1ad3      	subs	r3, r2, r3
 8015b2e:	3301      	adds	r3, #1
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	dd07      	ble.n	8015b44 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	8b5b      	ldrh	r3, [r3, #26]
 8015b38:	f043 0302 	orr.w	r3, r3, #2
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015b42:	e7ff      	b.n	8015b44 <tcp_receive+0xf08>
 8015b44:	bf00      	nop
 8015b46:	3750      	adds	r7, #80	@ 0x50
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8015b4c:	24014bb4 	.word	0x24014bb4
 8015b50:	24014b94 	.word	0x24014b94
 8015b54:	24014bbe 	.word	0x24014bbe
 8015b58:	0801cc08 	.word	0x0801cc08
 8015b5c:	0801cfb0 	.word	0x0801cfb0
 8015b60:	0801cc54 	.word	0x0801cc54

08015b64 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015b64:	b480      	push	{r7}
 8015b66:	b083      	sub	sp, #12
 8015b68:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015b6a:	4b15      	ldr	r3, [pc, #84]	@ (8015bc0 <tcp_get_next_optbyte+0x5c>)
 8015b6c:	881b      	ldrh	r3, [r3, #0]
 8015b6e:	1c5a      	adds	r2, r3, #1
 8015b70:	b291      	uxth	r1, r2
 8015b72:	4a13      	ldr	r2, [pc, #76]	@ (8015bc0 <tcp_get_next_optbyte+0x5c>)
 8015b74:	8011      	strh	r1, [r2, #0]
 8015b76:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015b78:	4b12      	ldr	r3, [pc, #72]	@ (8015bc4 <tcp_get_next_optbyte+0x60>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d004      	beq.n	8015b8a <tcp_get_next_optbyte+0x26>
 8015b80:	4b11      	ldr	r3, [pc, #68]	@ (8015bc8 <tcp_get_next_optbyte+0x64>)
 8015b82:	881b      	ldrh	r3, [r3, #0]
 8015b84:	88fa      	ldrh	r2, [r7, #6]
 8015b86:	429a      	cmp	r2, r3
 8015b88:	d208      	bcs.n	8015b9c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015b8a:	4b10      	ldr	r3, [pc, #64]	@ (8015bcc <tcp_get_next_optbyte+0x68>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	3314      	adds	r3, #20
 8015b90:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015b92:	88fb      	ldrh	r3, [r7, #6]
 8015b94:	683a      	ldr	r2, [r7, #0]
 8015b96:	4413      	add	r3, r2
 8015b98:	781b      	ldrb	r3, [r3, #0]
 8015b9a:	e00b      	b.n	8015bb4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015b9c:	88fb      	ldrh	r3, [r7, #6]
 8015b9e:	b2da      	uxtb	r2, r3
 8015ba0:	4b09      	ldr	r3, [pc, #36]	@ (8015bc8 <tcp_get_next_optbyte+0x64>)
 8015ba2:	881b      	ldrh	r3, [r3, #0]
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	1ad3      	subs	r3, r2, r3
 8015ba8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015baa:	4b06      	ldr	r3, [pc, #24]	@ (8015bc4 <tcp_get_next_optbyte+0x60>)
 8015bac:	681a      	ldr	r2, [r3, #0]
 8015bae:	797b      	ldrb	r3, [r7, #5]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	370c      	adds	r7, #12
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbe:	4770      	bx	lr
 8015bc0:	24014bb0 	.word	0x24014bb0
 8015bc4:	24014bac 	.word	0x24014bac
 8015bc8:	24014baa 	.word	0x24014baa
 8015bcc:	24014ba4 	.word	0x24014ba4

08015bd0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d106      	bne.n	8015bec <tcp_parseopt+0x1c>
 8015bde:	4b33      	ldr	r3, [pc, #204]	@ (8015cac <tcp_parseopt+0xdc>)
 8015be0:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015be4:	4932      	ldr	r1, [pc, #200]	@ (8015cb0 <tcp_parseopt+0xe0>)
 8015be6:	4833      	ldr	r0, [pc, #204]	@ (8015cb4 <tcp_parseopt+0xe4>)
 8015be8:	f004 fe7c 	bl	801a8e4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015bec:	4b32      	ldr	r3, [pc, #200]	@ (8015cb8 <tcp_parseopt+0xe8>)
 8015bee:	881b      	ldrh	r3, [r3, #0]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d057      	beq.n	8015ca4 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015bf4:	4b31      	ldr	r3, [pc, #196]	@ (8015cbc <tcp_parseopt+0xec>)
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	801a      	strh	r2, [r3, #0]
 8015bfa:	e047      	b.n	8015c8c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8015bfc:	f7ff ffb2 	bl	8015b64 <tcp_get_next_optbyte>
 8015c00:	4603      	mov	r3, r0
 8015c02:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015c04:	7bfb      	ldrb	r3, [r7, #15]
 8015c06:	2b02      	cmp	r3, #2
 8015c08:	d006      	beq.n	8015c18 <tcp_parseopt+0x48>
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	dc2b      	bgt.n	8015c66 <tcp_parseopt+0x96>
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d043      	beq.n	8015c9a <tcp_parseopt+0xca>
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d039      	beq.n	8015c8a <tcp_parseopt+0xba>
 8015c16:	e026      	b.n	8015c66 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015c18:	f7ff ffa4 	bl	8015b64 <tcp_get_next_optbyte>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	2b04      	cmp	r3, #4
 8015c20:	d13d      	bne.n	8015c9e <tcp_parseopt+0xce>
 8015c22:	4b26      	ldr	r3, [pc, #152]	@ (8015cbc <tcp_parseopt+0xec>)
 8015c24:	881b      	ldrh	r3, [r3, #0]
 8015c26:	3301      	adds	r3, #1
 8015c28:	4a23      	ldr	r2, [pc, #140]	@ (8015cb8 <tcp_parseopt+0xe8>)
 8015c2a:	8812      	ldrh	r2, [r2, #0]
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	da36      	bge.n	8015c9e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015c30:	f7ff ff98 	bl	8015b64 <tcp_get_next_optbyte>
 8015c34:	4603      	mov	r3, r0
 8015c36:	021b      	lsls	r3, r3, #8
 8015c38:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015c3a:	f7ff ff93 	bl	8015b64 <tcp_get_next_optbyte>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	461a      	mov	r2, r3
 8015c42:	89bb      	ldrh	r3, [r7, #12]
 8015c44:	4313      	orrs	r3, r2
 8015c46:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015c48:	89bb      	ldrh	r3, [r7, #12]
 8015c4a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	d804      	bhi.n	8015c5c <tcp_parseopt+0x8c>
 8015c52:	89bb      	ldrh	r3, [r7, #12]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d001      	beq.n	8015c5c <tcp_parseopt+0x8c>
 8015c58:	89ba      	ldrh	r2, [r7, #12]
 8015c5a:	e001      	b.n	8015c60 <tcp_parseopt+0x90>
 8015c5c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8015c64:	e012      	b.n	8015c8c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015c66:	f7ff ff7d 	bl	8015b64 <tcp_get_next_optbyte>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015c6e:	7afb      	ldrb	r3, [r7, #11]
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d916      	bls.n	8015ca2 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015c74:	7afb      	ldrb	r3, [r7, #11]
 8015c76:	b29a      	uxth	r2, r3
 8015c78:	4b10      	ldr	r3, [pc, #64]	@ (8015cbc <tcp_parseopt+0xec>)
 8015c7a:	881b      	ldrh	r3, [r3, #0]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	3b02      	subs	r3, #2
 8015c82:	b29a      	uxth	r2, r3
 8015c84:	4b0d      	ldr	r3, [pc, #52]	@ (8015cbc <tcp_parseopt+0xec>)
 8015c86:	801a      	strh	r2, [r3, #0]
 8015c88:	e000      	b.n	8015c8c <tcp_parseopt+0xbc>
          break;
 8015c8a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8015cbc <tcp_parseopt+0xec>)
 8015c8e:	881a      	ldrh	r2, [r3, #0]
 8015c90:	4b09      	ldr	r3, [pc, #36]	@ (8015cb8 <tcp_parseopt+0xe8>)
 8015c92:	881b      	ldrh	r3, [r3, #0]
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d3b1      	bcc.n	8015bfc <tcp_parseopt+0x2c>
 8015c98:	e004      	b.n	8015ca4 <tcp_parseopt+0xd4>
          return;
 8015c9a:	bf00      	nop
 8015c9c:	e002      	b.n	8015ca4 <tcp_parseopt+0xd4>
            return;
 8015c9e:	bf00      	nop
 8015ca0:	e000      	b.n	8015ca4 <tcp_parseopt+0xd4>
            return;
 8015ca2:	bf00      	nop
      }
    }
  }
}
 8015ca4:	3710      	adds	r7, #16
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
 8015caa:	bf00      	nop
 8015cac:	0801cc08 	.word	0x0801cc08
 8015cb0:	0801d06c 	.word	0x0801d06c
 8015cb4:	0801cc54 	.word	0x0801cc54
 8015cb8:	24014ba8 	.word	0x24014ba8
 8015cbc:	24014bb0 	.word	0x24014bb0

08015cc0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015cc4:	4b05      	ldr	r3, [pc, #20]	@ (8015cdc <tcp_trigger_input_pcb_close+0x1c>)
 8015cc6:	781b      	ldrb	r3, [r3, #0]
 8015cc8:	f043 0310 	orr.w	r3, r3, #16
 8015ccc:	b2da      	uxtb	r2, r3
 8015cce:	4b03      	ldr	r3, [pc, #12]	@ (8015cdc <tcp_trigger_input_pcb_close+0x1c>)
 8015cd0:	701a      	strb	r2, [r3, #0]
}
 8015cd2:	bf00      	nop
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr
 8015cdc:	24014bc1 	.word	0x24014bc1

08015ce0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b084      	sub	sp, #16
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	60f8      	str	r0, [r7, #12]
 8015ce8:	60b9      	str	r1, [r7, #8]
 8015cea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d00a      	beq.n	8015d08 <tcp_route+0x28>
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	7a1b      	ldrb	r3, [r3, #8]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d006      	beq.n	8015d08 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	7a1b      	ldrb	r3, [r3, #8]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7fb fa1c 	bl	801113c <netif_get_by_index>
 8015d04:	4603      	mov	r3, r0
 8015d06:	e003      	b.n	8015d10 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	f003 fa01 	bl	8019110 <ip4_route>
 8015d0e:	4603      	mov	r3, r0
  }
}
 8015d10:	4618      	mov	r0, r3
 8015d12:	3710      	adds	r7, #16
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015d18:	b590      	push	{r4, r7, lr}
 8015d1a:	b087      	sub	sp, #28
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	60f8      	str	r0, [r7, #12]
 8015d20:	60b9      	str	r1, [r7, #8]
 8015d22:	603b      	str	r3, [r7, #0]
 8015d24:	4613      	mov	r3, r2
 8015d26:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d105      	bne.n	8015d3a <tcp_create_segment+0x22>
 8015d2e:	4b43      	ldr	r3, [pc, #268]	@ (8015e3c <tcp_create_segment+0x124>)
 8015d30:	22a3      	movs	r2, #163	@ 0xa3
 8015d32:	4943      	ldr	r1, [pc, #268]	@ (8015e40 <tcp_create_segment+0x128>)
 8015d34:	4843      	ldr	r0, [pc, #268]	@ (8015e44 <tcp_create_segment+0x12c>)
 8015d36:	f004 fdd5 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d105      	bne.n	8015d4c <tcp_create_segment+0x34>
 8015d40:	4b3e      	ldr	r3, [pc, #248]	@ (8015e3c <tcp_create_segment+0x124>)
 8015d42:	22a4      	movs	r2, #164	@ 0xa4
 8015d44:	4940      	ldr	r1, [pc, #256]	@ (8015e48 <tcp_create_segment+0x130>)
 8015d46:	483f      	ldr	r0, [pc, #252]	@ (8015e44 <tcp_create_segment+0x12c>)
 8015d48:	f004 fdcc 	bl	801a8e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015d50:	009b      	lsls	r3, r3, #2
 8015d52:	b2db      	uxtb	r3, r3
 8015d54:	f003 0304 	and.w	r3, r3, #4
 8015d58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015d5a:	2004      	movs	r0, #4
 8015d5c:	f7fa fe5e 	bl	8010a1c <memp_malloc>
 8015d60:	6138      	str	r0, [r7, #16]
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d104      	bne.n	8015d72 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015d68:	68b8      	ldr	r0, [r7, #8]
 8015d6a:	f7fb fd79 	bl	8011860 <pbuf_free>
    return NULL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	e060      	b.n	8015e34 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015d78:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	68ba      	ldr	r2, [r7, #8]
 8015d84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	891a      	ldrh	r2, [r3, #8]
 8015d8a:	7dfb      	ldrb	r3, [r7, #23]
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d205      	bcs.n	8015d9e <tcp_create_segment+0x86>
 8015d92:	4b2a      	ldr	r3, [pc, #168]	@ (8015e3c <tcp_create_segment+0x124>)
 8015d94:	22b0      	movs	r2, #176	@ 0xb0
 8015d96:	492d      	ldr	r1, [pc, #180]	@ (8015e4c <tcp_create_segment+0x134>)
 8015d98:	482a      	ldr	r0, [pc, #168]	@ (8015e44 <tcp_create_segment+0x12c>)
 8015d9a:	f004 fda3 	bl	801a8e4 <iprintf>
  seg->len = p->tot_len - optlen;
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	891a      	ldrh	r2, [r3, #8]
 8015da2:	7dfb      	ldrb	r3, [r7, #23]
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	1ad3      	subs	r3, r2, r3
 8015da8:	b29a      	uxth	r2, r3
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015dae:	2114      	movs	r1, #20
 8015db0:	68b8      	ldr	r0, [r7, #8]
 8015db2:	f7fb fcbf 	bl	8011734 <pbuf_add_header>
 8015db6:	4603      	mov	r3, r0
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d004      	beq.n	8015dc6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015dbc:	6938      	ldr	r0, [r7, #16]
 8015dbe:	f7fd f8d0 	bl	8012f62 <tcp_seg_free>
    return NULL;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	e036      	b.n	8015e34 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	685a      	ldr	r2, [r3, #4]
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	8ada      	ldrh	r2, [r3, #22]
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	68dc      	ldr	r4, [r3, #12]
 8015dd8:	4610      	mov	r0, r2
 8015dda:	f7fa f88f 	bl	800fefc <lwip_htons>
 8015dde:	4603      	mov	r3, r0
 8015de0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	8b1a      	ldrh	r2, [r3, #24]
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	68dc      	ldr	r4, [r3, #12]
 8015dea:	4610      	mov	r0, r2
 8015dec:	f7fa f886 	bl	800fefc <lwip_htons>
 8015df0:	4603      	mov	r3, r0
 8015df2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	68dc      	ldr	r4, [r3, #12]
 8015df8:	6838      	ldr	r0, [r7, #0]
 8015dfa:	f7fa f895 	bl	800ff28 <lwip_htonl>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015e02:	7dfb      	ldrb	r3, [r7, #23]
 8015e04:	089b      	lsrs	r3, r3, #2
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	3305      	adds	r3, #5
 8015e0a:	b29b      	uxth	r3, r3
 8015e0c:	031b      	lsls	r3, r3, #12
 8015e0e:	b29a      	uxth	r2, r3
 8015e10:	79fb      	ldrb	r3, [r7, #7]
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	4313      	orrs	r3, r2
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	68dc      	ldr	r4, [r3, #12]
 8015e1c:	4610      	mov	r0, r2
 8015e1e:	f7fa f86d 	bl	800fefc <lwip_htons>
 8015e22:	4603      	mov	r3, r0
 8015e24:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	749a      	strb	r2, [r3, #18]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	74da      	strb	r2, [r3, #19]
  return seg;
 8015e32:	693b      	ldr	r3, [r7, #16]
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	371c      	adds	r7, #28
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd90      	pop	{r4, r7, pc}
 8015e3c:	0801d088 	.word	0x0801d088
 8015e40:	0801d0bc 	.word	0x0801d0bc
 8015e44:	0801d0dc 	.word	0x0801d0dc
 8015e48:	0801d104 	.word	0x0801d104
 8015e4c:	0801d128 	.word	0x0801d128

08015e50 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015e50:	b590      	push	{r4, r7, lr}
 8015e52:	b08b      	sub	sp, #44	@ 0x2c
 8015e54:	af02      	add	r7, sp, #8
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	460b      	mov	r3, r1
 8015e5a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	61fb      	str	r3, [r7, #28]
 8015e60:	2300      	movs	r3, #0
 8015e62:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015e64:	2300      	movs	r3, #0
 8015e66:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d106      	bne.n	8015e7c <tcp_split_unsent_seg+0x2c>
 8015e6e:	4b95      	ldr	r3, [pc, #596]	@ (80160c4 <tcp_split_unsent_seg+0x274>)
 8015e70:	f240 324b 	movw	r2, #843	@ 0x34b
 8015e74:	4994      	ldr	r1, [pc, #592]	@ (80160c8 <tcp_split_unsent_seg+0x278>)
 8015e76:	4895      	ldr	r0, [pc, #596]	@ (80160cc <tcp_split_unsent_seg+0x27c>)
 8015e78:	f004 fd34 	bl	801a8e4 <iprintf>

  useg = pcb->unsent;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e80:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d102      	bne.n	8015e8e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015e88:	f04f 33ff 	mov.w	r3, #4294967295
 8015e8c:	e116      	b.n	80160bc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015e8e:	887b      	ldrh	r3, [r7, #2]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d109      	bne.n	8015ea8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015e94:	4b8b      	ldr	r3, [pc, #556]	@ (80160c4 <tcp_split_unsent_seg+0x274>)
 8015e96:	f240 3253 	movw	r2, #851	@ 0x353
 8015e9a:	498d      	ldr	r1, [pc, #564]	@ (80160d0 <tcp_split_unsent_seg+0x280>)
 8015e9c:	488b      	ldr	r0, [pc, #556]	@ (80160cc <tcp_split_unsent_seg+0x27c>)
 8015e9e:	f004 fd21 	bl	801a8e4 <iprintf>
    return ERR_VAL;
 8015ea2:	f06f 0305 	mvn.w	r3, #5
 8015ea6:	e109      	b.n	80160bc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015ea8:	697b      	ldr	r3, [r7, #20]
 8015eaa:	891b      	ldrh	r3, [r3, #8]
 8015eac:	887a      	ldrh	r2, [r7, #2]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d301      	bcc.n	8015eb6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	e102      	b.n	80160bc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015eba:	887a      	ldrh	r2, [r7, #2]
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	d906      	bls.n	8015ece <tcp_split_unsent_seg+0x7e>
 8015ec0:	4b80      	ldr	r3, [pc, #512]	@ (80160c4 <tcp_split_unsent_seg+0x274>)
 8015ec2:	f240 325b 	movw	r2, #859	@ 0x35b
 8015ec6:	4983      	ldr	r1, [pc, #524]	@ (80160d4 <tcp_split_unsent_seg+0x284>)
 8015ec8:	4880      	ldr	r0, [pc, #512]	@ (80160cc <tcp_split_unsent_seg+0x27c>)
 8015eca:	f004 fd0b 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	891b      	ldrh	r3, [r3, #8]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d106      	bne.n	8015ee4 <tcp_split_unsent_seg+0x94>
 8015ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80160c4 <tcp_split_unsent_seg+0x274>)
 8015ed8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8015edc:	497e      	ldr	r1, [pc, #504]	@ (80160d8 <tcp_split_unsent_seg+0x288>)
 8015ede:	487b      	ldr	r0, [pc, #492]	@ (80160cc <tcp_split_unsent_seg+0x27c>)
 8015ee0:	f004 fd00 	bl	801a8e4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	7a9b      	ldrb	r3, [r3, #10]
 8015ee8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015eea:	7bfb      	ldrb	r3, [r7, #15]
 8015eec:	009b      	lsls	r3, r3, #2
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	f003 0304 	and.w	r3, r3, #4
 8015ef4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015ef6:	697b      	ldr	r3, [r7, #20]
 8015ef8:	891a      	ldrh	r2, [r3, #8]
 8015efa:	887b      	ldrh	r3, [r7, #2]
 8015efc:	1ad3      	subs	r3, r2, r3
 8015efe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015f00:	7bbb      	ldrb	r3, [r7, #14]
 8015f02:	b29a      	uxth	r2, r3
 8015f04:	89bb      	ldrh	r3, [r7, #12]
 8015f06:	4413      	add	r3, r2
 8015f08:	b29b      	uxth	r3, r3
 8015f0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015f0e:	4619      	mov	r1, r3
 8015f10:	2036      	movs	r0, #54	@ 0x36
 8015f12:	f7fb f9bd 	bl	8011290 <pbuf_alloc>
 8015f16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	f000 80b7 	beq.w	801608e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	891a      	ldrh	r2, [r3, #8]
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	891b      	ldrh	r3, [r3, #8]
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	b29a      	uxth	r2, r3
 8015f2e:	887b      	ldrh	r3, [r7, #2]
 8015f30:	4413      	add	r3, r2
 8015f32:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	6858      	ldr	r0, [r3, #4]
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	685a      	ldr	r2, [r3, #4]
 8015f3c:	7bbb      	ldrb	r3, [r7, #14]
 8015f3e:	18d1      	adds	r1, r2, r3
 8015f40:	897b      	ldrh	r3, [r7, #10]
 8015f42:	89ba      	ldrh	r2, [r7, #12]
 8015f44:	f7fb fe92 	bl	8011c6c <pbuf_copy_partial>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	89bb      	ldrh	r3, [r7, #12]
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	f040 809f 	bne.w	8016092 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	899b      	ldrh	r3, [r3, #12]
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7f9 ffcd 	bl	800fefc <lwip_htons>
 8015f62:	4603      	mov	r3, r0
 8015f64:	b2db      	uxtb	r3, r3
 8015f66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015f6a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015f70:	7efb      	ldrb	r3, [r7, #27]
 8015f72:	f003 0308 	and.w	r3, r3, #8
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d007      	beq.n	8015f8a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015f7a:	7efb      	ldrb	r3, [r7, #27]
 8015f7c:	f023 0308 	bic.w	r3, r3, #8
 8015f80:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015f82:	7ebb      	ldrb	r3, [r7, #26]
 8015f84:	f043 0308 	orr.w	r3, r3, #8
 8015f88:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015f8a:	7efb      	ldrb	r3, [r7, #27]
 8015f8c:	f003 0301 	and.w	r3, r3, #1
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d007      	beq.n	8015fa4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015f94:	7efb      	ldrb	r3, [r7, #27]
 8015f96:	f023 0301 	bic.w	r3, r3, #1
 8015f9a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015f9c:	7ebb      	ldrb	r3, [r7, #26]
 8015f9e:	f043 0301 	orr.w	r3, r3, #1
 8015fa2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	68db      	ldr	r3, [r3, #12]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7f9 ffbc 	bl	800ff28 <lwip_htonl>
 8015fb0:	4602      	mov	r2, r0
 8015fb2:	887b      	ldrh	r3, [r7, #2]
 8015fb4:	18d1      	adds	r1, r2, r3
 8015fb6:	7eba      	ldrb	r2, [r7, #26]
 8015fb8:	7bfb      	ldrb	r3, [r7, #15]
 8015fba:	9300      	str	r3, [sp, #0]
 8015fbc:	460b      	mov	r3, r1
 8015fbe:	6939      	ldr	r1, [r7, #16]
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f7ff fea9 	bl	8015d18 <tcp_create_segment>
 8015fc6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015fc8:	69fb      	ldr	r3, [r7, #28]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d063      	beq.n	8016096 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7fb fcd2 	bl	801197c <pbuf_clen>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	461a      	mov	r2, r3
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015fe2:	1a9b      	subs	r3, r3, r2
 8015fe4:	b29a      	uxth	r2, r3
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	6858      	ldr	r0, [r3, #4]
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	685b      	ldr	r3, [r3, #4]
 8015ff4:	891a      	ldrh	r2, [r3, #8]
 8015ff6:	89bb      	ldrh	r3, [r7, #12]
 8015ff8:	1ad3      	subs	r3, r2, r3
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	4619      	mov	r1, r3
 8015ffe:	f7fb faa9 	bl	8011554 <pbuf_realloc>
  useg->len -= remainder;
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	891a      	ldrh	r2, [r3, #8]
 8016006:	89bb      	ldrh	r3, [r7, #12]
 8016008:	1ad3      	subs	r3, r2, r3
 801600a:	b29a      	uxth	r2, r3
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	68db      	ldr	r3, [r3, #12]
 8016014:	899b      	ldrh	r3, [r3, #12]
 8016016:	b29c      	uxth	r4, r3
 8016018:	7efb      	ldrb	r3, [r7, #27]
 801601a:	b29b      	uxth	r3, r3
 801601c:	4618      	mov	r0, r3
 801601e:	f7f9 ff6d 	bl	800fefc <lwip_htons>
 8016022:	4603      	mov	r3, r0
 8016024:	461a      	mov	r2, r3
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	68db      	ldr	r3, [r3, #12]
 801602a:	4322      	orrs	r2, r4
 801602c:	b292      	uxth	r2, r2
 801602e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	685b      	ldr	r3, [r3, #4]
 8016034:	4618      	mov	r0, r3
 8016036:	f7fb fca1 	bl	801197c <pbuf_clen>
 801603a:	4603      	mov	r3, r0
 801603c:	461a      	mov	r2, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016044:	4413      	add	r3, r2
 8016046:	b29a      	uxth	r2, r3
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	4618      	mov	r0, r3
 8016054:	f7fb fc92 	bl	801197c <pbuf_clen>
 8016058:	4603      	mov	r3, r0
 801605a:	461a      	mov	r2, r3
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016062:	4413      	add	r3, r2
 8016064:	b29a      	uxth	r2, r3
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	681a      	ldr	r2, [r3, #0]
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	69fa      	ldr	r2, [r7, #28]
 8016078:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801607a:	69fb      	ldr	r3, [r7, #28]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d103      	bne.n	801608a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2200      	movs	r2, #0
 8016086:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801608a:	2300      	movs	r3, #0
 801608c:	e016      	b.n	80160bc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801608e:	bf00      	nop
 8016090:	e002      	b.n	8016098 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016092:	bf00      	nop
 8016094:	e000      	b.n	8016098 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016096:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016098:	69fb      	ldr	r3, [r7, #28]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d006      	beq.n	80160ac <tcp_split_unsent_seg+0x25c>
 801609e:	4b09      	ldr	r3, [pc, #36]	@ (80160c4 <tcp_split_unsent_seg+0x274>)
 80160a0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80160a4:	490d      	ldr	r1, [pc, #52]	@ (80160dc <tcp_split_unsent_seg+0x28c>)
 80160a6:	4809      	ldr	r0, [pc, #36]	@ (80160cc <tcp_split_unsent_seg+0x27c>)
 80160a8:	f004 fc1c 	bl	801a8e4 <iprintf>
  if (p != NULL) {
 80160ac:	693b      	ldr	r3, [r7, #16]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d002      	beq.n	80160b8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80160b2:	6938      	ldr	r0, [r7, #16]
 80160b4:	f7fb fbd4 	bl	8011860 <pbuf_free>
  }

  return ERR_MEM;
 80160b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3724      	adds	r7, #36	@ 0x24
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd90      	pop	{r4, r7, pc}
 80160c4:	0801d088 	.word	0x0801d088
 80160c8:	0801d41c 	.word	0x0801d41c
 80160cc:	0801d0dc 	.word	0x0801d0dc
 80160d0:	0801d440 	.word	0x0801d440
 80160d4:	0801d464 	.word	0x0801d464
 80160d8:	0801d474 	.word	0x0801d474
 80160dc:	0801d484 	.word	0x0801d484

080160e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80160e0:	b590      	push	{r4, r7, lr}
 80160e2:	b085      	sub	sp, #20
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d106      	bne.n	80160fc <tcp_send_fin+0x1c>
 80160ee:	4b21      	ldr	r3, [pc, #132]	@ (8016174 <tcp_send_fin+0x94>)
 80160f0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80160f4:	4920      	ldr	r1, [pc, #128]	@ (8016178 <tcp_send_fin+0x98>)
 80160f6:	4821      	ldr	r0, [pc, #132]	@ (801617c <tcp_send_fin+0x9c>)
 80160f8:	f004 fbf4 	bl	801a8e4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016100:	2b00      	cmp	r3, #0
 8016102:	d02e      	beq.n	8016162 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016108:	60fb      	str	r3, [r7, #12]
 801610a:	e002      	b.n	8016112 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d1f8      	bne.n	801610c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	899b      	ldrh	r3, [r3, #12]
 8016120:	b29b      	uxth	r3, r3
 8016122:	4618      	mov	r0, r3
 8016124:	f7f9 feea 	bl	800fefc <lwip_htons>
 8016128:	4603      	mov	r3, r0
 801612a:	b2db      	uxtb	r3, r3
 801612c:	f003 0307 	and.w	r3, r3, #7
 8016130:	2b00      	cmp	r3, #0
 8016132:	d116      	bne.n	8016162 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	68db      	ldr	r3, [r3, #12]
 8016138:	899b      	ldrh	r3, [r3, #12]
 801613a:	b29c      	uxth	r4, r3
 801613c:	2001      	movs	r0, #1
 801613e:	f7f9 fedd 	bl	800fefc <lwip_htons>
 8016142:	4603      	mov	r3, r0
 8016144:	461a      	mov	r2, r3
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	68db      	ldr	r3, [r3, #12]
 801614a:	4322      	orrs	r2, r4
 801614c:	b292      	uxth	r2, r2
 801614e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	8b5b      	ldrh	r3, [r3, #26]
 8016154:	f043 0320 	orr.w	r3, r3, #32
 8016158:	b29a      	uxth	r2, r3
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801615e:	2300      	movs	r3, #0
 8016160:	e004      	b.n	801616c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016162:	2101      	movs	r1, #1
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f000 f80b 	bl	8016180 <tcp_enqueue_flags>
 801616a:	4603      	mov	r3, r0
}
 801616c:	4618      	mov	r0, r3
 801616e:	3714      	adds	r7, #20
 8016170:	46bd      	mov	sp, r7
 8016172:	bd90      	pop	{r4, r7, pc}
 8016174:	0801d088 	.word	0x0801d088
 8016178:	0801d490 	.word	0x0801d490
 801617c:	0801d0dc 	.word	0x0801d0dc

08016180 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b08a      	sub	sp, #40	@ 0x28
 8016184:	af02      	add	r7, sp, #8
 8016186:	6078      	str	r0, [r7, #4]
 8016188:	460b      	mov	r3, r1
 801618a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801618c:	2300      	movs	r3, #0
 801618e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016190:	2300      	movs	r3, #0
 8016192:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016194:	78fb      	ldrb	r3, [r7, #3]
 8016196:	f003 0303 	and.w	r3, r3, #3
 801619a:	2b00      	cmp	r3, #0
 801619c:	d106      	bne.n	80161ac <tcp_enqueue_flags+0x2c>
 801619e:	4b67      	ldr	r3, [pc, #412]	@ (801633c <tcp_enqueue_flags+0x1bc>)
 80161a0:	f240 4211 	movw	r2, #1041	@ 0x411
 80161a4:	4966      	ldr	r1, [pc, #408]	@ (8016340 <tcp_enqueue_flags+0x1c0>)
 80161a6:	4867      	ldr	r0, [pc, #412]	@ (8016344 <tcp_enqueue_flags+0x1c4>)
 80161a8:	f004 fb9c 	bl	801a8e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d106      	bne.n	80161c0 <tcp_enqueue_flags+0x40>
 80161b2:	4b62      	ldr	r3, [pc, #392]	@ (801633c <tcp_enqueue_flags+0x1bc>)
 80161b4:	f240 4213 	movw	r2, #1043	@ 0x413
 80161b8:	4963      	ldr	r1, [pc, #396]	@ (8016348 <tcp_enqueue_flags+0x1c8>)
 80161ba:	4862      	ldr	r0, [pc, #392]	@ (8016344 <tcp_enqueue_flags+0x1c4>)
 80161bc:	f004 fb92 	bl	801a8e4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80161c0:	78fb      	ldrb	r3, [r7, #3]
 80161c2:	f003 0302 	and.w	r3, r3, #2
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d001      	beq.n	80161ce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80161ca:	2301      	movs	r3, #1
 80161cc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80161ce:	7ffb      	ldrb	r3, [r7, #31]
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	f003 0304 	and.w	r3, r3, #4
 80161d8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80161da:	7dfb      	ldrb	r3, [r7, #23]
 80161dc:	b29b      	uxth	r3, r3
 80161de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80161e2:	4619      	mov	r1, r3
 80161e4:	2036      	movs	r0, #54	@ 0x36
 80161e6:	f7fb f853 	bl	8011290 <pbuf_alloc>
 80161ea:	6138      	str	r0, [r7, #16]
 80161ec:	693b      	ldr	r3, [r7, #16]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d109      	bne.n	8016206 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	8b5b      	ldrh	r3, [r3, #26]
 80161f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80161fa:	b29a      	uxth	r2, r3
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016200:	f04f 33ff 	mov.w	r3, #4294967295
 8016204:	e095      	b.n	8016332 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	895a      	ldrh	r2, [r3, #10]
 801620a:	7dfb      	ldrb	r3, [r7, #23]
 801620c:	b29b      	uxth	r3, r3
 801620e:	429a      	cmp	r2, r3
 8016210:	d206      	bcs.n	8016220 <tcp_enqueue_flags+0xa0>
 8016212:	4b4a      	ldr	r3, [pc, #296]	@ (801633c <tcp_enqueue_flags+0x1bc>)
 8016214:	f240 4239 	movw	r2, #1081	@ 0x439
 8016218:	494c      	ldr	r1, [pc, #304]	@ (801634c <tcp_enqueue_flags+0x1cc>)
 801621a:	484a      	ldr	r0, [pc, #296]	@ (8016344 <tcp_enqueue_flags+0x1c4>)
 801621c:	f004 fb62 	bl	801a8e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016224:	78fa      	ldrb	r2, [r7, #3]
 8016226:	7ffb      	ldrb	r3, [r7, #31]
 8016228:	9300      	str	r3, [sp, #0]
 801622a:	460b      	mov	r3, r1
 801622c:	6939      	ldr	r1, [r7, #16]
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f7ff fd72 	bl	8015d18 <tcp_create_segment>
 8016234:	60f8      	str	r0, [r7, #12]
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d109      	bne.n	8016250 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	8b5b      	ldrh	r3, [r3, #26]
 8016240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016244:	b29a      	uxth	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801624a:	f04f 33ff 	mov.w	r3, #4294967295
 801624e:	e070      	b.n	8016332 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	f003 0303 	and.w	r3, r3, #3
 8016258:	2b00      	cmp	r3, #0
 801625a:	d006      	beq.n	801626a <tcp_enqueue_flags+0xea>
 801625c:	4b37      	ldr	r3, [pc, #220]	@ (801633c <tcp_enqueue_flags+0x1bc>)
 801625e:	f240 4242 	movw	r2, #1090	@ 0x442
 8016262:	493b      	ldr	r1, [pc, #236]	@ (8016350 <tcp_enqueue_flags+0x1d0>)
 8016264:	4837      	ldr	r0, [pc, #220]	@ (8016344 <tcp_enqueue_flags+0x1c4>)
 8016266:	f004 fb3d 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	891b      	ldrh	r3, [r3, #8]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d006      	beq.n	8016280 <tcp_enqueue_flags+0x100>
 8016272:	4b32      	ldr	r3, [pc, #200]	@ (801633c <tcp_enqueue_flags+0x1bc>)
 8016274:	f240 4243 	movw	r2, #1091	@ 0x443
 8016278:	4936      	ldr	r1, [pc, #216]	@ (8016354 <tcp_enqueue_flags+0x1d4>)
 801627a:	4832      	ldr	r0, [pc, #200]	@ (8016344 <tcp_enqueue_flags+0x1c4>)
 801627c:	f004 fb32 	bl	801a8e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016284:	2b00      	cmp	r3, #0
 8016286:	d103      	bne.n	8016290 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	68fa      	ldr	r2, [r7, #12]
 801628c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801628e:	e00d      	b.n	80162ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016294:	61bb      	str	r3, [r7, #24]
 8016296:	e002      	b.n	801629e <tcp_enqueue_flags+0x11e>
 8016298:	69bb      	ldr	r3, [r7, #24]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	61bb      	str	r3, [r7, #24]
 801629e:	69bb      	ldr	r3, [r7, #24]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d1f8      	bne.n	8016298 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80162a6:	69bb      	ldr	r3, [r7, #24]
 80162a8:	68fa      	ldr	r2, [r7, #12]
 80162aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2200      	movs	r2, #0
 80162b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80162b4:	78fb      	ldrb	r3, [r7, #3]
 80162b6:	f003 0302 	and.w	r3, r3, #2
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d104      	bne.n	80162c8 <tcp_enqueue_flags+0x148>
 80162be:	78fb      	ldrb	r3, [r7, #3]
 80162c0:	f003 0301 	and.w	r3, r3, #1
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d004      	beq.n	80162d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80162cc:	1c5a      	adds	r2, r3, #1
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80162d2:	78fb      	ldrb	r3, [r7, #3]
 80162d4:	f003 0301 	and.w	r3, r3, #1
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d006      	beq.n	80162ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	8b5b      	ldrh	r3, [r3, #26]
 80162e0:	f043 0320 	orr.w	r3, r3, #32
 80162e4:	b29a      	uxth	r2, r3
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7fb fb44 	bl	801197c <pbuf_clen>
 80162f4:	4603      	mov	r3, r0
 80162f6:	461a      	mov	r2, r3
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80162fe:	4413      	add	r3, r2
 8016300:	b29a      	uxth	r2, r3
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801630e:	2b00      	cmp	r3, #0
 8016310:	d00e      	beq.n	8016330 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016316:	2b00      	cmp	r3, #0
 8016318:	d10a      	bne.n	8016330 <tcp_enqueue_flags+0x1b0>
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801631e:	2b00      	cmp	r3, #0
 8016320:	d106      	bne.n	8016330 <tcp_enqueue_flags+0x1b0>
 8016322:	4b06      	ldr	r3, [pc, #24]	@ (801633c <tcp_enqueue_flags+0x1bc>)
 8016324:	f240 4265 	movw	r2, #1125	@ 0x465
 8016328:	490b      	ldr	r1, [pc, #44]	@ (8016358 <tcp_enqueue_flags+0x1d8>)
 801632a:	4806      	ldr	r0, [pc, #24]	@ (8016344 <tcp_enqueue_flags+0x1c4>)
 801632c:	f004 fada 	bl	801a8e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016330:	2300      	movs	r3, #0
}
 8016332:	4618      	mov	r0, r3
 8016334:	3720      	adds	r7, #32
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop
 801633c:	0801d088 	.word	0x0801d088
 8016340:	0801d4ac 	.word	0x0801d4ac
 8016344:	0801d0dc 	.word	0x0801d0dc
 8016348:	0801d504 	.word	0x0801d504
 801634c:	0801d524 	.word	0x0801d524
 8016350:	0801d560 	.word	0x0801d560
 8016354:	0801d578 	.word	0x0801d578
 8016358:	0801d5a4 	.word	0x0801d5a4

0801635c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801635c:	b5b0      	push	{r4, r5, r7, lr}
 801635e:	b08a      	sub	sp, #40	@ 0x28
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d106      	bne.n	8016378 <tcp_output+0x1c>
 801636a:	4b8a      	ldr	r3, [pc, #552]	@ (8016594 <tcp_output+0x238>)
 801636c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016370:	4989      	ldr	r1, [pc, #548]	@ (8016598 <tcp_output+0x23c>)
 8016372:	488a      	ldr	r0, [pc, #552]	@ (801659c <tcp_output+0x240>)
 8016374:	f004 fab6 	bl	801a8e4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	7d1b      	ldrb	r3, [r3, #20]
 801637c:	2b01      	cmp	r3, #1
 801637e:	d106      	bne.n	801638e <tcp_output+0x32>
 8016380:	4b84      	ldr	r3, [pc, #528]	@ (8016594 <tcp_output+0x238>)
 8016382:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016386:	4986      	ldr	r1, [pc, #536]	@ (80165a0 <tcp_output+0x244>)
 8016388:	4884      	ldr	r0, [pc, #528]	@ (801659c <tcp_output+0x240>)
 801638a:	f004 faab 	bl	801a8e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801638e:	4b85      	ldr	r3, [pc, #532]	@ (80165a4 <tcp_output+0x248>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	429a      	cmp	r2, r3
 8016396:	d101      	bne.n	801639c <tcp_output+0x40>
    return ERR_OK;
 8016398:	2300      	movs	r3, #0
 801639a:	e1ce      	b.n	801673a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80163a8:	4293      	cmp	r3, r2
 80163aa:	bf28      	it	cs
 80163ac:	4613      	movcs	r3, r2
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80163b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d10b      	bne.n	80163d6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	8b5b      	ldrh	r3, [r3, #26]
 80163c2:	f003 0302 	and.w	r3, r3, #2
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f000 81aa 	beq.w	8016720 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f000 fdcb 	bl	8016f68 <tcp_send_empty_ack>
 80163d2:	4603      	mov	r3, r0
 80163d4:	e1b1      	b.n	801673a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80163d6:	6879      	ldr	r1, [r7, #4]
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	3304      	adds	r3, #4
 80163dc:	461a      	mov	r2, r3
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f7ff fc7e 	bl	8015ce0 <tcp_route>
 80163e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d102      	bne.n	80163f2 <tcp_output+0x96>
    return ERR_RTE;
 80163ec:	f06f 0303 	mvn.w	r3, #3
 80163f0:	e1a3      	b.n	801673a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d003      	beq.n	8016400 <tcp_output+0xa4>
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d111      	bne.n	8016424 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016400:	697b      	ldr	r3, [r7, #20]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d002      	beq.n	801640c <tcp_output+0xb0>
 8016406:	697b      	ldr	r3, [r7, #20]
 8016408:	3304      	adds	r3, #4
 801640a:	e000      	b.n	801640e <tcp_output+0xb2>
 801640c:	2300      	movs	r3, #0
 801640e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016410:	693b      	ldr	r3, [r7, #16]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d102      	bne.n	801641c <tcp_output+0xc0>
      return ERR_RTE;
 8016416:	f06f 0303 	mvn.w	r3, #3
 801641a:	e18e      	b.n	801673a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	681a      	ldr	r2, [r3, #0]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016426:	68db      	ldr	r3, [r3, #12]
 8016428:	685b      	ldr	r3, [r3, #4]
 801642a:	4618      	mov	r0, r3
 801642c:	f7f9 fd7c 	bl	800ff28 <lwip_htonl>
 8016430:	4602      	mov	r2, r0
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016436:	1ad3      	subs	r3, r2, r3
 8016438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801643a:	8912      	ldrh	r2, [r2, #8]
 801643c:	4413      	add	r3, r2
 801643e:	69ba      	ldr	r2, [r7, #24]
 8016440:	429a      	cmp	r2, r3
 8016442:	d227      	bcs.n	8016494 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801644a:	461a      	mov	r2, r3
 801644c:	69bb      	ldr	r3, [r7, #24]
 801644e:	4293      	cmp	r3, r2
 8016450:	d114      	bne.n	801647c <tcp_output+0x120>
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016456:	2b00      	cmp	r3, #0
 8016458:	d110      	bne.n	801647c <tcp_output+0x120>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016460:	2b00      	cmp	r3, #0
 8016462:	d10b      	bne.n	801647c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2200      	movs	r2, #0
 8016468:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2201      	movs	r2, #1
 8016470:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2200      	movs	r2, #0
 8016478:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	8b5b      	ldrh	r3, [r3, #26]
 8016480:	f003 0302 	and.w	r3, r3, #2
 8016484:	2b00      	cmp	r3, #0
 8016486:	f000 814d 	beq.w	8016724 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	f000 fd6c 	bl	8016f68 <tcp_send_empty_ack>
 8016490:	4603      	mov	r3, r0
 8016492:	e152      	b.n	801673a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	2200      	movs	r2, #0
 8016498:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80164a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80164a2:	6a3b      	ldr	r3, [r7, #32]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	f000 811c 	beq.w	80166e2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80164aa:	e002      	b.n	80164b2 <tcp_output+0x156>
 80164ac:	6a3b      	ldr	r3, [r7, #32]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	623b      	str	r3, [r7, #32]
 80164b2:	6a3b      	ldr	r3, [r7, #32]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d1f8      	bne.n	80164ac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80164ba:	e112      	b.n	80166e2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80164bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164be:	68db      	ldr	r3, [r3, #12]
 80164c0:	899b      	ldrh	r3, [r3, #12]
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	4618      	mov	r0, r3
 80164c6:	f7f9 fd19 	bl	800fefc <lwip_htons>
 80164ca:	4603      	mov	r3, r0
 80164cc:	b2db      	uxtb	r3, r3
 80164ce:	f003 0304 	and.w	r3, r3, #4
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d006      	beq.n	80164e4 <tcp_output+0x188>
 80164d6:	4b2f      	ldr	r3, [pc, #188]	@ (8016594 <tcp_output+0x238>)
 80164d8:	f240 5236 	movw	r2, #1334	@ 0x536
 80164dc:	4932      	ldr	r1, [pc, #200]	@ (80165a8 <tcp_output+0x24c>)
 80164de:	482f      	ldr	r0, [pc, #188]	@ (801659c <tcp_output+0x240>)
 80164e0:	f004 fa00 	bl	801a8e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d01f      	beq.n	801652c <tcp_output+0x1d0>
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	8b5b      	ldrh	r3, [r3, #26]
 80164f0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d119      	bne.n	801652c <tcp_output+0x1d0>
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d00b      	beq.n	8016518 <tcp_output+0x1bc>
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d110      	bne.n	801652c <tcp_output+0x1d0>
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801650e:	891a      	ldrh	r2, [r3, #8]
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016514:	429a      	cmp	r2, r3
 8016516:	d209      	bcs.n	801652c <tcp_output+0x1d0>
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801651e:	2b00      	cmp	r3, #0
 8016520:	d004      	beq.n	801652c <tcp_output+0x1d0>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016528:	2b0f      	cmp	r3, #15
 801652a:	d901      	bls.n	8016530 <tcp_output+0x1d4>
 801652c:	2301      	movs	r3, #1
 801652e:	e000      	b.n	8016532 <tcp_output+0x1d6>
 8016530:	2300      	movs	r3, #0
 8016532:	2b00      	cmp	r3, #0
 8016534:	d106      	bne.n	8016544 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	8b5b      	ldrh	r3, [r3, #26]
 801653a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801653e:	2b00      	cmp	r3, #0
 8016540:	f000 80e4 	beq.w	801670c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	7d1b      	ldrb	r3, [r3, #20]
 8016548:	2b02      	cmp	r3, #2
 801654a:	d00d      	beq.n	8016568 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801654e:	68db      	ldr	r3, [r3, #12]
 8016550:	899b      	ldrh	r3, [r3, #12]
 8016552:	b29c      	uxth	r4, r3
 8016554:	2010      	movs	r0, #16
 8016556:	f7f9 fcd1 	bl	800fefc <lwip_htons>
 801655a:	4603      	mov	r3, r0
 801655c:	461a      	mov	r2, r3
 801655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016560:	68db      	ldr	r3, [r3, #12]
 8016562:	4322      	orrs	r2, r4
 8016564:	b292      	uxth	r2, r2
 8016566:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016568:	697a      	ldr	r2, [r7, #20]
 801656a:	6879      	ldr	r1, [r7, #4]
 801656c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801656e:	f000 f909 	bl	8016784 <tcp_output_segment>
 8016572:	4603      	mov	r3, r0
 8016574:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d016      	beq.n	80165ac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	8b5b      	ldrh	r3, [r3, #26]
 8016582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016586:	b29a      	uxth	r2, r3
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	835a      	strh	r2, [r3, #26]
      return err;
 801658c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016590:	e0d3      	b.n	801673a <tcp_output+0x3de>
 8016592:	bf00      	nop
 8016594:	0801d088 	.word	0x0801d088
 8016598:	0801d5cc 	.word	0x0801d5cc
 801659c:	0801d0dc 	.word	0x0801d0dc
 80165a0:	0801d5e4 	.word	0x0801d5e4
 80165a4:	24014bc8 	.word	0x24014bc8
 80165a8:	0801d60c 	.word	0x0801d60c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80165ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165ae:	681a      	ldr	r2, [r3, #0]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	7d1b      	ldrb	r3, [r3, #20]
 80165b8:	2b02      	cmp	r3, #2
 80165ba:	d006      	beq.n	80165ca <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	8b5b      	ldrh	r3, [r3, #26]
 80165c0:	f023 0303 	bic.w	r3, r3, #3
 80165c4:	b29a      	uxth	r2, r3
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80165ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165cc:	68db      	ldr	r3, [r3, #12]
 80165ce:	685b      	ldr	r3, [r3, #4]
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7f9 fca9 	bl	800ff28 <lwip_htonl>
 80165d6:	4604      	mov	r4, r0
 80165d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165da:	891b      	ldrh	r3, [r3, #8]
 80165dc:	461d      	mov	r5, r3
 80165de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e0:	68db      	ldr	r3, [r3, #12]
 80165e2:	899b      	ldrh	r3, [r3, #12]
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	4618      	mov	r0, r3
 80165e8:	f7f9 fc88 	bl	800fefc <lwip_htons>
 80165ec:	4603      	mov	r3, r0
 80165ee:	b2db      	uxtb	r3, r3
 80165f0:	f003 0303 	and.w	r3, r3, #3
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d001      	beq.n	80165fc <tcp_output+0x2a0>
 80165f8:	2301      	movs	r3, #1
 80165fa:	e000      	b.n	80165fe <tcp_output+0x2a2>
 80165fc:	2300      	movs	r3, #0
 80165fe:	442b      	add	r3, r5
 8016600:	4423      	add	r3, r4
 8016602:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	1ad3      	subs	r3, r2, r3
 801660c:	2b00      	cmp	r3, #0
 801660e:	da02      	bge.n	8016616 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	68ba      	ldr	r2, [r7, #8]
 8016614:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016618:	891b      	ldrh	r3, [r3, #8]
 801661a:	461c      	mov	r4, r3
 801661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801661e:	68db      	ldr	r3, [r3, #12]
 8016620:	899b      	ldrh	r3, [r3, #12]
 8016622:	b29b      	uxth	r3, r3
 8016624:	4618      	mov	r0, r3
 8016626:	f7f9 fc69 	bl	800fefc <lwip_htons>
 801662a:	4603      	mov	r3, r0
 801662c:	b2db      	uxtb	r3, r3
 801662e:	f003 0303 	and.w	r3, r3, #3
 8016632:	2b00      	cmp	r3, #0
 8016634:	d001      	beq.n	801663a <tcp_output+0x2de>
 8016636:	2301      	movs	r3, #1
 8016638:	e000      	b.n	801663c <tcp_output+0x2e0>
 801663a:	2300      	movs	r3, #0
 801663c:	4423      	add	r3, r4
 801663e:	2b00      	cmp	r3, #0
 8016640:	d049      	beq.n	80166d6 <tcp_output+0x37a>
      seg->next = NULL;
 8016642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016644:	2200      	movs	r2, #0
 8016646:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801664c:	2b00      	cmp	r3, #0
 801664e:	d105      	bne.n	801665c <tcp_output+0x300>
        pcb->unacked = seg;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016654:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016658:	623b      	str	r3, [r7, #32]
 801665a:	e03f      	b.n	80166dc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801665e:	68db      	ldr	r3, [r3, #12]
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	4618      	mov	r0, r3
 8016664:	f7f9 fc60 	bl	800ff28 <lwip_htonl>
 8016668:	4604      	mov	r4, r0
 801666a:	6a3b      	ldr	r3, [r7, #32]
 801666c:	68db      	ldr	r3, [r3, #12]
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	4618      	mov	r0, r3
 8016672:	f7f9 fc59 	bl	800ff28 <lwip_htonl>
 8016676:	4603      	mov	r3, r0
 8016678:	1ae3      	subs	r3, r4, r3
 801667a:	2b00      	cmp	r3, #0
 801667c:	da24      	bge.n	80166c8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	3370      	adds	r3, #112	@ 0x70
 8016682:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016684:	e002      	b.n	801668c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016686:	69fb      	ldr	r3, [r7, #28]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801668c:	69fb      	ldr	r3, [r7, #28]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d011      	beq.n	80166b8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016694:	69fb      	ldr	r3, [r7, #28]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	68db      	ldr	r3, [r3, #12]
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	4618      	mov	r0, r3
 801669e:	f7f9 fc43 	bl	800ff28 <lwip_htonl>
 80166a2:	4604      	mov	r4, r0
 80166a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a6:	68db      	ldr	r3, [r3, #12]
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7f9 fc3c 	bl	800ff28 <lwip_htonl>
 80166b0:	4603      	mov	r3, r0
 80166b2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	dbe6      	blt.n	8016686 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80166b8:	69fb      	ldr	r3, [r7, #28]
 80166ba:	681a      	ldr	r2, [r3, #0]
 80166bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166be:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80166c0:	69fb      	ldr	r3, [r7, #28]
 80166c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166c4:	601a      	str	r2, [r3, #0]
 80166c6:	e009      	b.n	80166dc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80166c8:	6a3b      	ldr	r3, [r7, #32]
 80166ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166cc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80166ce:	6a3b      	ldr	r3, [r7, #32]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	623b      	str	r3, [r7, #32]
 80166d4:	e002      	b.n	80166dc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80166d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80166d8:	f7fc fc43 	bl	8012f62 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80166e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d012      	beq.n	801670e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80166e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ea:	68db      	ldr	r3, [r3, #12]
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7f9 fc1a 	bl	800ff28 <lwip_htonl>
 80166f4:	4602      	mov	r2, r0
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166fa:	1ad3      	subs	r3, r2, r3
 80166fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166fe:	8912      	ldrh	r2, [r2, #8]
 8016700:	4413      	add	r3, r2
  while (seg != NULL &&
 8016702:	69ba      	ldr	r2, [r7, #24]
 8016704:	429a      	cmp	r2, r3
 8016706:	f4bf aed9 	bcs.w	80164bc <tcp_output+0x160>
 801670a:	e000      	b.n	801670e <tcp_output+0x3b2>
      break;
 801670c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016712:	2b00      	cmp	r3, #0
 8016714:	d108      	bne.n	8016728 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2200      	movs	r2, #0
 801671a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801671e:	e004      	b.n	801672a <tcp_output+0x3ce>
    goto output_done;
 8016720:	bf00      	nop
 8016722:	e002      	b.n	801672a <tcp_output+0x3ce>
    goto output_done;
 8016724:	bf00      	nop
 8016726:	e000      	b.n	801672a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016728:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	8b5b      	ldrh	r3, [r3, #26]
 801672e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016732:	b29a      	uxth	r2, r3
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016738:	2300      	movs	r3, #0
}
 801673a:	4618      	mov	r0, r3
 801673c:	3728      	adds	r7, #40	@ 0x28
 801673e:	46bd      	mov	sp, r7
 8016740:	bdb0      	pop	{r4, r5, r7, pc}
 8016742:	bf00      	nop

08016744 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d106      	bne.n	8016760 <tcp_output_segment_busy+0x1c>
 8016752:	4b09      	ldr	r3, [pc, #36]	@ (8016778 <tcp_output_segment_busy+0x34>)
 8016754:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016758:	4908      	ldr	r1, [pc, #32]	@ (801677c <tcp_output_segment_busy+0x38>)
 801675a:	4809      	ldr	r0, [pc, #36]	@ (8016780 <tcp_output_segment_busy+0x3c>)
 801675c:	f004 f8c2 	bl	801a8e4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	685b      	ldr	r3, [r3, #4]
 8016764:	7b9b      	ldrb	r3, [r3, #14]
 8016766:	2b01      	cmp	r3, #1
 8016768:	d001      	beq.n	801676e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801676a:	2301      	movs	r3, #1
 801676c:	e000      	b.n	8016770 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801676e:	2300      	movs	r3, #0
}
 8016770:	4618      	mov	r0, r3
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}
 8016778:	0801d088 	.word	0x0801d088
 801677c:	0801d624 	.word	0x0801d624
 8016780:	0801d0dc 	.word	0x0801d0dc

08016784 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016784:	b5b0      	push	{r4, r5, r7, lr}
 8016786:	b08c      	sub	sp, #48	@ 0x30
 8016788:	af04      	add	r7, sp, #16
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d106      	bne.n	80167a4 <tcp_output_segment+0x20>
 8016796:	4b64      	ldr	r3, [pc, #400]	@ (8016928 <tcp_output_segment+0x1a4>)
 8016798:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801679c:	4963      	ldr	r1, [pc, #396]	@ (801692c <tcp_output_segment+0x1a8>)
 801679e:	4864      	ldr	r0, [pc, #400]	@ (8016930 <tcp_output_segment+0x1ac>)
 80167a0:	f004 f8a0 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d106      	bne.n	80167b8 <tcp_output_segment+0x34>
 80167aa:	4b5f      	ldr	r3, [pc, #380]	@ (8016928 <tcp_output_segment+0x1a4>)
 80167ac:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80167b0:	4960      	ldr	r1, [pc, #384]	@ (8016934 <tcp_output_segment+0x1b0>)
 80167b2:	485f      	ldr	r0, [pc, #380]	@ (8016930 <tcp_output_segment+0x1ac>)
 80167b4:	f004 f896 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d106      	bne.n	80167cc <tcp_output_segment+0x48>
 80167be:	4b5a      	ldr	r3, [pc, #360]	@ (8016928 <tcp_output_segment+0x1a4>)
 80167c0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80167c4:	495c      	ldr	r1, [pc, #368]	@ (8016938 <tcp_output_segment+0x1b4>)
 80167c6:	485a      	ldr	r0, [pc, #360]	@ (8016930 <tcp_output_segment+0x1ac>)
 80167c8:	f004 f88c 	bl	801a8e4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80167cc:	68f8      	ldr	r0, [r7, #12]
 80167ce:	f7ff ffb9 	bl	8016744 <tcp_output_segment_busy>
 80167d2:	4603      	mov	r3, r0
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d001      	beq.n	80167dc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80167d8:	2300      	movs	r3, #0
 80167da:	e0a1      	b.n	8016920 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	68dc      	ldr	r4, [r3, #12]
 80167e4:	4610      	mov	r0, r2
 80167e6:	f7f9 fb9f 	bl	800ff28 <lwip_htonl>
 80167ea:	4603      	mov	r3, r0
 80167ec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	68dc      	ldr	r4, [r3, #12]
 80167f6:	4610      	mov	r0, r2
 80167f8:	f7f9 fb80 	bl	800fefc <lwip_htons>
 80167fc:	4603      	mov	r3, r0
 80167fe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016804:	68ba      	ldr	r2, [r7, #8]
 8016806:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016808:	441a      	add	r2, r3
 801680a:	68bb      	ldr	r3, [r7, #8]
 801680c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	68db      	ldr	r3, [r3, #12]
 8016812:	3314      	adds	r3, #20
 8016814:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	7a9b      	ldrb	r3, [r3, #10]
 801681a:	f003 0301 	and.w	r3, r3, #1
 801681e:	2b00      	cmp	r3, #0
 8016820:	d015      	beq.n	801684e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	3304      	adds	r3, #4
 8016826:	461a      	mov	r2, r3
 8016828:	6879      	ldr	r1, [r7, #4]
 801682a:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801682e:	f7fc fe8f 	bl	8013550 <tcp_eff_send_mss_netif>
 8016832:	4603      	mov	r3, r0
 8016834:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016836:	8b7b      	ldrh	r3, [r7, #26]
 8016838:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801683c:	4618      	mov	r0, r3
 801683e:	f7f9 fb73 	bl	800ff28 <lwip_htonl>
 8016842:	4602      	mov	r2, r0
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016848:	69fb      	ldr	r3, [r7, #28]
 801684a:	3304      	adds	r3, #4
 801684c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016854:	2b00      	cmp	r3, #0
 8016856:	da02      	bge.n	801685e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	2200      	movs	r2, #0
 801685c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016862:	2b00      	cmp	r3, #0
 8016864:	d10c      	bne.n	8016880 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016866:	4b35      	ldr	r3, [pc, #212]	@ (801693c <tcp_output_segment+0x1b8>)
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	68db      	ldr	r3, [r3, #12]
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	4618      	mov	r0, r3
 8016876:	f7f9 fb57 	bl	800ff28 <lwip_htonl>
 801687a:	4602      	mov	r2, r0
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	68da      	ldr	r2, [r3, #12]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	1ad3      	subs	r3, r2, r3
 801688c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	685b      	ldr	r3, [r3, #4]
 8016892:	8959      	ldrh	r1, [r3, #10]
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	685b      	ldr	r3, [r3, #4]
 8016898:	8b3a      	ldrh	r2, [r7, #24]
 801689a:	1a8a      	subs	r2, r1, r2
 801689c:	b292      	uxth	r2, r2
 801689e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	8919      	ldrh	r1, [r3, #8]
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	8b3a      	ldrh	r2, [r7, #24]
 80168ac:	1a8a      	subs	r2, r1, r2
 80168ae:	b292      	uxth	r2, r2
 80168b0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	685b      	ldr	r3, [r3, #4]
 80168b6:	68fa      	ldr	r2, [r7, #12]
 80168b8:	68d2      	ldr	r2, [r2, #12]
 80168ba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	68db      	ldr	r3, [r3, #12]
 80168c0:	2200      	movs	r2, #0
 80168c2:	741a      	strb	r2, [r3, #16]
 80168c4:	2200      	movs	r2, #0
 80168c6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	68da      	ldr	r2, [r3, #12]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	7a9b      	ldrb	r3, [r3, #10]
 80168d0:	f003 0301 	and.w	r3, r3, #1
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d001      	beq.n	80168dc <tcp_output_segment+0x158>
 80168d8:	2318      	movs	r3, #24
 80168da:	e000      	b.n	80168de <tcp_output_segment+0x15a>
 80168dc:	2314      	movs	r3, #20
 80168de:	4413      	add	r3, r2
 80168e0:	69fa      	ldr	r2, [r7, #28]
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d006      	beq.n	80168f4 <tcp_output_segment+0x170>
 80168e6:	4b10      	ldr	r3, [pc, #64]	@ (8016928 <tcp_output_segment+0x1a4>)
 80168e8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80168ec:	4914      	ldr	r1, [pc, #80]	@ (8016940 <tcp_output_segment+0x1bc>)
 80168ee:	4810      	ldr	r0, [pc, #64]	@ (8016930 <tcp_output_segment+0x1ac>)
 80168f0:	f003 fff8 	bl	801a8e4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	6858      	ldr	r0, [r3, #4]
 80168f8:	68b9      	ldr	r1, [r7, #8]
 80168fa:	68bb      	ldr	r3, [r7, #8]
 80168fc:	1d1c      	adds	r4, r3, #4
 80168fe:	68bb      	ldr	r3, [r7, #8]
 8016900:	7add      	ldrb	r5, [r3, #11]
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	7a9b      	ldrb	r3, [r3, #10]
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	9202      	str	r2, [sp, #8]
 801690a:	2206      	movs	r2, #6
 801690c:	9201      	str	r2, [sp, #4]
 801690e:	9300      	str	r3, [sp, #0]
 8016910:	462b      	mov	r3, r5
 8016912:	4622      	mov	r2, r4
 8016914:	f002 fdc6 	bl	80194a4 <ip4_output_if>
 8016918:	4603      	mov	r3, r0
 801691a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801691c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016920:	4618      	mov	r0, r3
 8016922:	3720      	adds	r7, #32
 8016924:	46bd      	mov	sp, r7
 8016926:	bdb0      	pop	{r4, r5, r7, pc}
 8016928:	0801d088 	.word	0x0801d088
 801692c:	0801d64c 	.word	0x0801d64c
 8016930:	0801d0dc 	.word	0x0801d0dc
 8016934:	0801d66c 	.word	0x0801d66c
 8016938:	0801d68c 	.word	0x0801d68c
 801693c:	24014b7c 	.word	0x24014b7c
 8016940:	0801d6b0 	.word	0x0801d6b0

08016944 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016944:	b5b0      	push	{r4, r5, r7, lr}
 8016946:	b084      	sub	sp, #16
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d106      	bne.n	8016960 <tcp_rexmit_rto_prepare+0x1c>
 8016952:	4b31      	ldr	r3, [pc, #196]	@ (8016a18 <tcp_rexmit_rto_prepare+0xd4>)
 8016954:	f240 6263 	movw	r2, #1635	@ 0x663
 8016958:	4930      	ldr	r1, [pc, #192]	@ (8016a1c <tcp_rexmit_rto_prepare+0xd8>)
 801695a:	4831      	ldr	r0, [pc, #196]	@ (8016a20 <tcp_rexmit_rto_prepare+0xdc>)
 801695c:	f003 ffc2 	bl	801a8e4 <iprintf>

  if (pcb->unacked == NULL) {
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016964:	2b00      	cmp	r3, #0
 8016966:	d102      	bne.n	801696e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016968:	f06f 0305 	mvn.w	r3, #5
 801696c:	e050      	b.n	8016a10 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016972:	60fb      	str	r3, [r7, #12]
 8016974:	e00b      	b.n	801698e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f7ff fee4 	bl	8016744 <tcp_output_segment_busy>
 801697c:	4603      	mov	r3, r0
 801697e:	2b00      	cmp	r3, #0
 8016980:	d002      	beq.n	8016988 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016982:	f06f 0305 	mvn.w	r3, #5
 8016986:	e043      	b.n	8016a10 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	60fb      	str	r3, [r7, #12]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d1ef      	bne.n	8016976 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016996:	68f8      	ldr	r0, [r7, #12]
 8016998:	f7ff fed4 	bl	8016744 <tcp_output_segment_busy>
 801699c:	4603      	mov	r3, r0
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d002      	beq.n	80169a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80169a2:	f06f 0305 	mvn.w	r3, #5
 80169a6:	e033      	b.n	8016a10 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2200      	movs	r2, #0
 80169bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	8b5b      	ldrh	r3, [r3, #26]
 80169c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80169c6:	b29a      	uxth	r2, r3
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	68db      	ldr	r3, [r3, #12]
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7f9 faa8 	bl	800ff28 <lwip_htonl>
 80169d8:	4604      	mov	r4, r0
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	891b      	ldrh	r3, [r3, #8]
 80169de:	461d      	mov	r5, r3
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	68db      	ldr	r3, [r3, #12]
 80169e4:	899b      	ldrh	r3, [r3, #12]
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7f9 fa87 	bl	800fefc <lwip_htons>
 80169ee:	4603      	mov	r3, r0
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	f003 0303 	and.w	r3, r3, #3
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d001      	beq.n	80169fe <tcp_rexmit_rto_prepare+0xba>
 80169fa:	2301      	movs	r3, #1
 80169fc:	e000      	b.n	8016a00 <tcp_rexmit_rto_prepare+0xbc>
 80169fe:	2300      	movs	r3, #0
 8016a00:	442b      	add	r3, r5
 8016a02:	18e2      	adds	r2, r4, r3
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8016a0e:	2300      	movs	r3, #0
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	3710      	adds	r7, #16
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bdb0      	pop	{r4, r5, r7, pc}
 8016a18:	0801d088 	.word	0x0801d088
 8016a1c:	0801d6c4 	.word	0x0801d6c4
 8016a20:	0801d0dc 	.word	0x0801d0dc

08016a24 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b082      	sub	sp, #8
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d106      	bne.n	8016a40 <tcp_rexmit_rto_commit+0x1c>
 8016a32:	4b0d      	ldr	r3, [pc, #52]	@ (8016a68 <tcp_rexmit_rto_commit+0x44>)
 8016a34:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016a38:	490c      	ldr	r1, [pc, #48]	@ (8016a6c <tcp_rexmit_rto_commit+0x48>)
 8016a3a:	480d      	ldr	r0, [pc, #52]	@ (8016a70 <tcp_rexmit_rto_commit+0x4c>)
 8016a3c:	f003 ff52 	bl	801a8e4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016a46:	2bff      	cmp	r3, #255	@ 0xff
 8016a48:	d007      	beq.n	8016a5a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016a50:	3301      	adds	r3, #1
 8016a52:	b2da      	uxtb	r2, r3
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f7ff fc7e 	bl	801635c <tcp_output>
}
 8016a60:	bf00      	nop
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	0801d088 	.word	0x0801d088
 8016a6c:	0801d6e8 	.word	0x0801d6e8
 8016a70:	0801d0dc 	.word	0x0801d0dc

08016a74 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b082      	sub	sp, #8
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d106      	bne.n	8016a90 <tcp_rexmit_rto+0x1c>
 8016a82:	4b0a      	ldr	r3, [pc, #40]	@ (8016aac <tcp_rexmit_rto+0x38>)
 8016a84:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8016a88:	4909      	ldr	r1, [pc, #36]	@ (8016ab0 <tcp_rexmit_rto+0x3c>)
 8016a8a:	480a      	ldr	r0, [pc, #40]	@ (8016ab4 <tcp_rexmit_rto+0x40>)
 8016a8c:	f003 ff2a 	bl	801a8e4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f7ff ff57 	bl	8016944 <tcp_rexmit_rto_prepare>
 8016a96:	4603      	mov	r3, r0
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d102      	bne.n	8016aa2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f7ff ffc1 	bl	8016a24 <tcp_rexmit_rto_commit>
  }
}
 8016aa2:	bf00      	nop
 8016aa4:	3708      	adds	r7, #8
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	0801d088 	.word	0x0801d088
 8016ab0:	0801d70c 	.word	0x0801d70c
 8016ab4:	0801d0dc 	.word	0x0801d0dc

08016ab8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016ab8:	b590      	push	{r4, r7, lr}
 8016aba:	b085      	sub	sp, #20
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d106      	bne.n	8016ad4 <tcp_rexmit+0x1c>
 8016ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8016b84 <tcp_rexmit+0xcc>)
 8016ac8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8016acc:	492e      	ldr	r1, [pc, #184]	@ (8016b88 <tcp_rexmit+0xd0>)
 8016ace:	482f      	ldr	r0, [pc, #188]	@ (8016b8c <tcp_rexmit+0xd4>)
 8016ad0:	f003 ff08 	bl	801a8e4 <iprintf>

  if (pcb->unacked == NULL) {
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d102      	bne.n	8016ae2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016adc:	f06f 0305 	mvn.w	r3, #5
 8016ae0:	e04c      	b.n	8016b7c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ae6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016ae8:	68b8      	ldr	r0, [r7, #8]
 8016aea:	f7ff fe2b 	bl	8016744 <tcp_output_segment_busy>
 8016aee:	4603      	mov	r3, r0
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d002      	beq.n	8016afa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016af4:	f06f 0305 	mvn.w	r3, #5
 8016af8:	e040      	b.n	8016b7c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	681a      	ldr	r2, [r3, #0]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	336c      	adds	r3, #108	@ 0x6c
 8016b06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016b08:	e002      	b.n	8016b10 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d011      	beq.n	8016b3c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	685b      	ldr	r3, [r3, #4]
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7f9 fa01 	bl	800ff28 <lwip_htonl>
 8016b26:	4604      	mov	r4, r0
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	68db      	ldr	r3, [r3, #12]
 8016b2c:	685b      	ldr	r3, [r3, #4]
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7f9 f9fa 	bl	800ff28 <lwip_htonl>
 8016b34:	4603      	mov	r3, r0
 8016b36:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	dbe6      	blt.n	8016b0a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	681a      	ldr	r2, [r3, #0]
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	68ba      	ldr	r2, [r7, #8]
 8016b48:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d103      	bne.n	8016b5a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2200      	movs	r2, #0
 8016b56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016b60:	2bff      	cmp	r3, #255	@ 0xff
 8016b62:	d007      	beq.n	8016b74 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	b2da      	uxtb	r2, r3
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2200      	movs	r2, #0
 8016b78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016b7a:	2300      	movs	r3, #0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3714      	adds	r7, #20
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd90      	pop	{r4, r7, pc}
 8016b84:	0801d088 	.word	0x0801d088
 8016b88:	0801d728 	.word	0x0801d728
 8016b8c:	0801d0dc 	.word	0x0801d0dc

08016b90 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b082      	sub	sp, #8
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d106      	bne.n	8016bac <tcp_rexmit_fast+0x1c>
 8016b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8016c48 <tcp_rexmit_fast+0xb8>)
 8016ba0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8016ba4:	4929      	ldr	r1, [pc, #164]	@ (8016c4c <tcp_rexmit_fast+0xbc>)
 8016ba6:	482a      	ldr	r0, [pc, #168]	@ (8016c50 <tcp_rexmit_fast+0xc0>)
 8016ba8:	f003 fe9c 	bl	801a8e4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d045      	beq.n	8016c40 <tcp_rexmit_fast+0xb0>
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	8b5b      	ldrh	r3, [r3, #26]
 8016bb8:	f003 0304 	and.w	r3, r3, #4
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d13f      	bne.n	8016c40 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f7ff ff79 	bl	8016ab8 <tcp_rexmit>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d139      	bne.n	8016c40 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016bd8:	4293      	cmp	r3, r2
 8016bda:	bf28      	it	cs
 8016bdc:	4613      	movcs	r3, r2
 8016bde:	b29b      	uxth	r3, r3
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	da00      	bge.n	8016be6 <tcp_rexmit_fast+0x56>
 8016be4:	3301      	adds	r3, #1
 8016be6:	105b      	asrs	r3, r3, #1
 8016be8:	b29a      	uxth	r2, r3
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016bfc:	005b      	lsls	r3, r3, #1
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d206      	bcs.n	8016c10 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c06:	005b      	lsls	r3, r3, #1
 8016c08:	b29a      	uxth	r2, r3
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	0049      	lsls	r1, r1, #1
 8016c1e:	440b      	add	r3, r1
 8016c20:	b29b      	uxth	r3, r3
 8016c22:	4413      	add	r3, r2
 8016c24:	b29a      	uxth	r2, r3
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	8b5b      	ldrh	r3, [r3, #26]
 8016c30:	f043 0304 	orr.w	r3, r3, #4
 8016c34:	b29a      	uxth	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8016c40:	bf00      	nop
 8016c42:	3708      	adds	r7, #8
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}
 8016c48:	0801d088 	.word	0x0801d088
 8016c4c:	0801d740 	.word	0x0801d740
 8016c50:	0801d0dc 	.word	0x0801d0dc

08016c54 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	60f8      	str	r0, [r7, #12]
 8016c5c:	607b      	str	r3, [r7, #4]
 8016c5e:	460b      	mov	r3, r1
 8016c60:	817b      	strh	r3, [r7, #10]
 8016c62:	4613      	mov	r3, r2
 8016c64:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016c66:	897a      	ldrh	r2, [r7, #10]
 8016c68:	893b      	ldrh	r3, [r7, #8]
 8016c6a:	4413      	add	r3, r2
 8016c6c:	b29b      	uxth	r3, r3
 8016c6e:	3314      	adds	r3, #20
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016c76:	4619      	mov	r1, r3
 8016c78:	2022      	movs	r0, #34	@ 0x22
 8016c7a:	f7fa fb09 	bl	8011290 <pbuf_alloc>
 8016c7e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d04d      	beq.n	8016d22 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016c86:	897b      	ldrh	r3, [r7, #10]
 8016c88:	3313      	adds	r3, #19
 8016c8a:	697a      	ldr	r2, [r7, #20]
 8016c8c:	8952      	ldrh	r2, [r2, #10]
 8016c8e:	4293      	cmp	r3, r2
 8016c90:	db06      	blt.n	8016ca0 <tcp_output_alloc_header_common+0x4c>
 8016c92:	4b26      	ldr	r3, [pc, #152]	@ (8016d2c <tcp_output_alloc_header_common+0xd8>)
 8016c94:	f240 7223 	movw	r2, #1827	@ 0x723
 8016c98:	4925      	ldr	r1, [pc, #148]	@ (8016d30 <tcp_output_alloc_header_common+0xdc>)
 8016c9a:	4826      	ldr	r0, [pc, #152]	@ (8016d34 <tcp_output_alloc_header_common+0xe0>)
 8016c9c:	f003 fe22 	bl	801a8e4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016ca0:	697b      	ldr	r3, [r7, #20]
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016ca6:	8c3b      	ldrh	r3, [r7, #32]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7f9 f927 	bl	800fefc <lwip_htons>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016cb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016cb8:	4618      	mov	r0, r3
 8016cba:	f7f9 f91f 	bl	800fefc <lwip_htons>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	687a      	ldr	r2, [r7, #4]
 8016cca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016ccc:	68f8      	ldr	r0, [r7, #12]
 8016cce:	f7f9 f92b 	bl	800ff28 <lwip_htonl>
 8016cd2:	4602      	mov	r2, r0
 8016cd4:	693b      	ldr	r3, [r7, #16]
 8016cd6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016cd8:	897b      	ldrh	r3, [r7, #10]
 8016cda:	089b      	lsrs	r3, r3, #2
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	3305      	adds	r3, #5
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	031b      	lsls	r3, r3, #12
 8016ce4:	b29a      	uxth	r2, r3
 8016ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016cea:	b29b      	uxth	r3, r3
 8016cec:	4313      	orrs	r3, r2
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7f9 f903 	bl	800fefc <lwip_htons>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	461a      	mov	r2, r3
 8016cfa:	693b      	ldr	r3, [r7, #16]
 8016cfc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016cfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7f9 f8fb 	bl	800fefc <lwip_htons>
 8016d06:	4603      	mov	r3, r0
 8016d08:	461a      	mov	r2, r3
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	2200      	movs	r2, #0
 8016d12:	741a      	strb	r2, [r3, #16]
 8016d14:	2200      	movs	r2, #0
 8016d16:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016d18:	693b      	ldr	r3, [r7, #16]
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	749a      	strb	r2, [r3, #18]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016d22:	697b      	ldr	r3, [r7, #20]
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	3718      	adds	r7, #24
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}
 8016d2c:	0801d088 	.word	0x0801d088
 8016d30:	0801d760 	.word	0x0801d760
 8016d34:	0801d0dc 	.word	0x0801d0dc

08016d38 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016d38:	b5b0      	push	{r4, r5, r7, lr}
 8016d3a:	b08a      	sub	sp, #40	@ 0x28
 8016d3c:	af04      	add	r7, sp, #16
 8016d3e:	60f8      	str	r0, [r7, #12]
 8016d40:	607b      	str	r3, [r7, #4]
 8016d42:	460b      	mov	r3, r1
 8016d44:	817b      	strh	r3, [r7, #10]
 8016d46:	4613      	mov	r3, r2
 8016d48:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d106      	bne.n	8016d5e <tcp_output_alloc_header+0x26>
 8016d50:	4b15      	ldr	r3, [pc, #84]	@ (8016da8 <tcp_output_alloc_header+0x70>)
 8016d52:	f240 7242 	movw	r2, #1858	@ 0x742
 8016d56:	4915      	ldr	r1, [pc, #84]	@ (8016dac <tcp_output_alloc_header+0x74>)
 8016d58:	4815      	ldr	r0, [pc, #84]	@ (8016db0 <tcp_output_alloc_header+0x78>)
 8016d5a:	f003 fdc3 	bl	801a8e4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	8adb      	ldrh	r3, [r3, #22]
 8016d66:	68fa      	ldr	r2, [r7, #12]
 8016d68:	8b12      	ldrh	r2, [r2, #24]
 8016d6a:	68f9      	ldr	r1, [r7, #12]
 8016d6c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8016d6e:	893d      	ldrh	r5, [r7, #8]
 8016d70:	897c      	ldrh	r4, [r7, #10]
 8016d72:	9103      	str	r1, [sp, #12]
 8016d74:	2110      	movs	r1, #16
 8016d76:	9102      	str	r1, [sp, #8]
 8016d78:	9201      	str	r2, [sp, #4]
 8016d7a:	9300      	str	r3, [sp, #0]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	462a      	mov	r2, r5
 8016d80:	4621      	mov	r1, r4
 8016d82:	f7ff ff67 	bl	8016c54 <tcp_output_alloc_header_common>
 8016d86:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d006      	beq.n	8016d9c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d92:	68fa      	ldr	r2, [r7, #12]
 8016d94:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016d96:	441a      	add	r2, r3
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8016d9c:	697b      	ldr	r3, [r7, #20]
}
 8016d9e:	4618      	mov	r0, r3
 8016da0:	3718      	adds	r7, #24
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bdb0      	pop	{r4, r5, r7, pc}
 8016da6:	bf00      	nop
 8016da8:	0801d088 	.word	0x0801d088
 8016dac:	0801d790 	.word	0x0801d790
 8016db0:	0801d0dc 	.word	0x0801d0dc

08016db4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b088      	sub	sp, #32
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	60b9      	str	r1, [r7, #8]
 8016dbe:	4611      	mov	r1, r2
 8016dc0:	461a      	mov	r2, r3
 8016dc2:	460b      	mov	r3, r1
 8016dc4:	71fb      	strb	r3, [r7, #7]
 8016dc6:	4613      	mov	r3, r2
 8016dc8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016dca:	2300      	movs	r3, #0
 8016dcc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d106      	bne.n	8016de2 <tcp_output_fill_options+0x2e>
 8016dd4:	4b12      	ldr	r3, [pc, #72]	@ (8016e20 <tcp_output_fill_options+0x6c>)
 8016dd6:	f240 7256 	movw	r2, #1878	@ 0x756
 8016dda:	4912      	ldr	r1, [pc, #72]	@ (8016e24 <tcp_output_fill_options+0x70>)
 8016ddc:	4812      	ldr	r0, [pc, #72]	@ (8016e28 <tcp_output_fill_options+0x74>)
 8016dde:	f003 fd81 	bl	801a8e4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	685b      	ldr	r3, [r3, #4]
 8016de6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016de8:	69bb      	ldr	r3, [r7, #24]
 8016dea:	3314      	adds	r3, #20
 8016dec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016dee:	8bfb      	ldrh	r3, [r7, #30]
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	461a      	mov	r2, r3
 8016df4:	79fb      	ldrb	r3, [r7, #7]
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	f003 0304 	and.w	r3, r3, #4
 8016dfc:	4413      	add	r3, r2
 8016dfe:	3314      	adds	r3, #20
 8016e00:	69ba      	ldr	r2, [r7, #24]
 8016e02:	4413      	add	r3, r2
 8016e04:	697a      	ldr	r2, [r7, #20]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d006      	beq.n	8016e18 <tcp_output_fill_options+0x64>
 8016e0a:	4b05      	ldr	r3, [pc, #20]	@ (8016e20 <tcp_output_fill_options+0x6c>)
 8016e0c:	f240 7275 	movw	r2, #1909	@ 0x775
 8016e10:	4906      	ldr	r1, [pc, #24]	@ (8016e2c <tcp_output_fill_options+0x78>)
 8016e12:	4805      	ldr	r0, [pc, #20]	@ (8016e28 <tcp_output_fill_options+0x74>)
 8016e14:	f003 fd66 	bl	801a8e4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016e18:	bf00      	nop
 8016e1a:	3720      	adds	r7, #32
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	0801d088 	.word	0x0801d088
 8016e24:	0801d7b8 	.word	0x0801d7b8
 8016e28:	0801d0dc 	.word	0x0801d0dc
 8016e2c:	0801d6b0 	.word	0x0801d6b0

08016e30 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b08a      	sub	sp, #40	@ 0x28
 8016e34:	af04      	add	r7, sp, #16
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	607a      	str	r2, [r7, #4]
 8016e3c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d106      	bne.n	8016e52 <tcp_output_control_segment+0x22>
 8016e44:	4b1c      	ldr	r3, [pc, #112]	@ (8016eb8 <tcp_output_control_segment+0x88>)
 8016e46:	f240 7287 	movw	r2, #1927	@ 0x787
 8016e4a:	491c      	ldr	r1, [pc, #112]	@ (8016ebc <tcp_output_control_segment+0x8c>)
 8016e4c:	481c      	ldr	r0, [pc, #112]	@ (8016ec0 <tcp_output_control_segment+0x90>)
 8016e4e:	f003 fd49 	bl	801a8e4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016e52:	683a      	ldr	r2, [r7, #0]
 8016e54:	6879      	ldr	r1, [r7, #4]
 8016e56:	68f8      	ldr	r0, [r7, #12]
 8016e58:	f7fe ff42 	bl	8015ce0 <tcp_route>
 8016e5c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016e5e:	693b      	ldr	r3, [r7, #16]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d102      	bne.n	8016e6a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016e64:	23fc      	movs	r3, #252	@ 0xfc
 8016e66:	75fb      	strb	r3, [r7, #23]
 8016e68:	e01c      	b.n	8016ea4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d006      	beq.n	8016e7e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	7adb      	ldrb	r3, [r3, #11]
 8016e74:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	7a9b      	ldrb	r3, [r3, #10]
 8016e7a:	757b      	strb	r3, [r7, #21]
 8016e7c:	e003      	b.n	8016e86 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016e7e:	23ff      	movs	r3, #255	@ 0xff
 8016e80:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016e82:	2300      	movs	r3, #0
 8016e84:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016e86:	7dba      	ldrb	r2, [r7, #22]
 8016e88:	693b      	ldr	r3, [r7, #16]
 8016e8a:	9302      	str	r3, [sp, #8]
 8016e8c:	2306      	movs	r3, #6
 8016e8e:	9301      	str	r3, [sp, #4]
 8016e90:	7d7b      	ldrb	r3, [r7, #21]
 8016e92:	9300      	str	r3, [sp, #0]
 8016e94:	4613      	mov	r3, r2
 8016e96:	683a      	ldr	r2, [r7, #0]
 8016e98:	6879      	ldr	r1, [r7, #4]
 8016e9a:	68b8      	ldr	r0, [r7, #8]
 8016e9c:	f002 fb02 	bl	80194a4 <ip4_output_if>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016ea4:	68b8      	ldr	r0, [r7, #8]
 8016ea6:	f7fa fcdb 	bl	8011860 <pbuf_free>
  return err;
 8016eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3718      	adds	r7, #24
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
 8016eb6:	bf00      	nop
 8016eb8:	0801d088 	.word	0x0801d088
 8016ebc:	0801d7e0 	.word	0x0801d7e0
 8016ec0:	0801d0dc 	.word	0x0801d0dc

08016ec4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016ec4:	b590      	push	{r4, r7, lr}
 8016ec6:	b08b      	sub	sp, #44	@ 0x2c
 8016ec8:	af04      	add	r7, sp, #16
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	60b9      	str	r1, [r7, #8]
 8016ece:	607a      	str	r2, [r7, #4]
 8016ed0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d106      	bne.n	8016ee6 <tcp_rst+0x22>
 8016ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8016f58 <tcp_rst+0x94>)
 8016eda:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8016ede:	491f      	ldr	r1, [pc, #124]	@ (8016f5c <tcp_rst+0x98>)
 8016ee0:	481f      	ldr	r0, [pc, #124]	@ (8016f60 <tcp_rst+0x9c>)
 8016ee2:	f003 fcff 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d106      	bne.n	8016efa <tcp_rst+0x36>
 8016eec:	4b1a      	ldr	r3, [pc, #104]	@ (8016f58 <tcp_rst+0x94>)
 8016eee:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8016ef2:	491c      	ldr	r1, [pc, #112]	@ (8016f64 <tcp_rst+0xa0>)
 8016ef4:	481a      	ldr	r0, [pc, #104]	@ (8016f60 <tcp_rst+0x9c>)
 8016ef6:	f003 fcf5 	bl	801a8e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016efa:	2300      	movs	r3, #0
 8016efc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016efe:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8016f02:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
 8016f06:	b29c      	uxth	r4, r3
 8016f08:	68b8      	ldr	r0, [r7, #8]
 8016f0a:	f7f9 f80d 	bl	800ff28 <lwip_htonl>
 8016f0e:	4602      	mov	r2, r0
 8016f10:	8abb      	ldrh	r3, [r7, #20]
 8016f12:	9303      	str	r3, [sp, #12]
 8016f14:	2314      	movs	r3, #20
 8016f16:	9302      	str	r3, [sp, #8]
 8016f18:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016f1a:	9301      	str	r3, [sp, #4]
 8016f1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016f1e:	9300      	str	r3, [sp, #0]
 8016f20:	4613      	mov	r3, r2
 8016f22:	2200      	movs	r2, #0
 8016f24:	4621      	mov	r1, r4
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f7ff fe94 	bl	8016c54 <tcp_output_alloc_header_common>
 8016f2c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016f2e:	693b      	ldr	r3, [r7, #16]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d00c      	beq.n	8016f4e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016f34:	7dfb      	ldrb	r3, [r7, #23]
 8016f36:	2200      	movs	r2, #0
 8016f38:	6939      	ldr	r1, [r7, #16]
 8016f3a:	68f8      	ldr	r0, [r7, #12]
 8016f3c:	f7ff ff3a 	bl	8016db4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f42:	683a      	ldr	r2, [r7, #0]
 8016f44:	6939      	ldr	r1, [r7, #16]
 8016f46:	68f8      	ldr	r0, [r7, #12]
 8016f48:	f7ff ff72 	bl	8016e30 <tcp_output_control_segment>
 8016f4c:	e000      	b.n	8016f50 <tcp_rst+0x8c>
    return;
 8016f4e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016f50:	371c      	adds	r7, #28
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd90      	pop	{r4, r7, pc}
 8016f56:	bf00      	nop
 8016f58:	0801d088 	.word	0x0801d088
 8016f5c:	0801d80c 	.word	0x0801d80c
 8016f60:	0801d0dc 	.word	0x0801d0dc
 8016f64:	0801d828 	.word	0x0801d828

08016f68 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016f68:	b590      	push	{r4, r7, lr}
 8016f6a:	b087      	sub	sp, #28
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016f70:	2300      	movs	r3, #0
 8016f72:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016f74:	2300      	movs	r3, #0
 8016f76:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d106      	bne.n	8016f8c <tcp_send_empty_ack+0x24>
 8016f7e:	4b28      	ldr	r3, [pc, #160]	@ (8017020 <tcp_send_empty_ack+0xb8>)
 8016f80:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8016f84:	4927      	ldr	r1, [pc, #156]	@ (8017024 <tcp_send_empty_ack+0xbc>)
 8016f86:	4828      	ldr	r0, [pc, #160]	@ (8017028 <tcp_send_empty_ack+0xc0>)
 8016f88:	f003 fcac 	bl	801a8e4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016f8c:	7dfb      	ldrb	r3, [r7, #23]
 8016f8e:	009b      	lsls	r3, r3, #2
 8016f90:	b2db      	uxtb	r3, r3
 8016f92:	f003 0304 	and.w	r3, r3, #4
 8016f96:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016f98:	7d7b      	ldrb	r3, [r7, #21]
 8016f9a:	b29c      	uxth	r4, r3
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f7f8 ffc1 	bl	800ff28 <lwip_htonl>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	2200      	movs	r2, #0
 8016faa:	4621      	mov	r1, r4
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f7ff fec3 	bl	8016d38 <tcp_output_alloc_header>
 8016fb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016fb4:	693b      	ldr	r3, [r7, #16]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d109      	bne.n	8016fce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	8b5b      	ldrh	r3, [r3, #26]
 8016fbe:	f043 0303 	orr.w	r3, r3, #3
 8016fc2:	b29a      	uxth	r2, r3
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016fc8:	f06f 0301 	mvn.w	r3, #1
 8016fcc:	e023      	b.n	8017016 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016fce:	7dbb      	ldrb	r3, [r7, #22]
 8016fd0:	7dfa      	ldrb	r2, [r7, #23]
 8016fd2:	6939      	ldr	r1, [r7, #16]
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f7ff feed 	bl	8016db4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	3304      	adds	r3, #4
 8016fe0:	6939      	ldr	r1, [r7, #16]
 8016fe2:	6878      	ldr	r0, [r7, #4]
 8016fe4:	f7ff ff24 	bl	8016e30 <tcp_output_control_segment>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d007      	beq.n	8017004 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	8b5b      	ldrh	r3, [r3, #26]
 8016ff8:	f043 0303 	orr.w	r3, r3, #3
 8016ffc:	b29a      	uxth	r2, r3
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	835a      	strh	r2, [r3, #26]
 8017002:	e006      	b.n	8017012 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	8b5b      	ldrh	r3, [r3, #26]
 8017008:	f023 0303 	bic.w	r3, r3, #3
 801700c:	b29a      	uxth	r2, r3
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017016:	4618      	mov	r0, r3
 8017018:	371c      	adds	r7, #28
 801701a:	46bd      	mov	sp, r7
 801701c:	bd90      	pop	{r4, r7, pc}
 801701e:	bf00      	nop
 8017020:	0801d088 	.word	0x0801d088
 8017024:	0801d844 	.word	0x0801d844
 8017028:	0801d0dc 	.word	0x0801d0dc

0801702c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801702c:	b590      	push	{r4, r7, lr}
 801702e:	b087      	sub	sp, #28
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017034:	2300      	movs	r3, #0
 8017036:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d106      	bne.n	801704c <tcp_keepalive+0x20>
 801703e:	4b18      	ldr	r3, [pc, #96]	@ (80170a0 <tcp_keepalive+0x74>)
 8017040:	f640 0224 	movw	r2, #2084	@ 0x824
 8017044:	4917      	ldr	r1, [pc, #92]	@ (80170a4 <tcp_keepalive+0x78>)
 8017046:	4818      	ldr	r0, [pc, #96]	@ (80170a8 <tcp_keepalive+0x7c>)
 8017048:	f003 fc4c 	bl	801a8e4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801704c:	7dfb      	ldrb	r3, [r7, #23]
 801704e:	b29c      	uxth	r4, r3
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017054:	3b01      	subs	r3, #1
 8017056:	4618      	mov	r0, r3
 8017058:	f7f8 ff66 	bl	800ff28 <lwip_htonl>
 801705c:	4603      	mov	r3, r0
 801705e:	2200      	movs	r2, #0
 8017060:	4621      	mov	r1, r4
 8017062:	6878      	ldr	r0, [r7, #4]
 8017064:	f7ff fe68 	bl	8016d38 <tcp_output_alloc_header>
 8017068:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801706a:	693b      	ldr	r3, [r7, #16]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d102      	bne.n	8017076 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017070:	f04f 33ff 	mov.w	r3, #4294967295
 8017074:	e010      	b.n	8017098 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017076:	7dfb      	ldrb	r3, [r7, #23]
 8017078:	2200      	movs	r2, #0
 801707a:	6939      	ldr	r1, [r7, #16]
 801707c:	6878      	ldr	r0, [r7, #4]
 801707e:	f7ff fe99 	bl	8016db4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017082:	687a      	ldr	r2, [r7, #4]
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	3304      	adds	r3, #4
 8017088:	6939      	ldr	r1, [r7, #16]
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f7ff fed0 	bl	8016e30 <tcp_output_control_segment>
 8017090:	4603      	mov	r3, r0
 8017092:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017098:	4618      	mov	r0, r3
 801709a:	371c      	adds	r7, #28
 801709c:	46bd      	mov	sp, r7
 801709e:	bd90      	pop	{r4, r7, pc}
 80170a0:	0801d088 	.word	0x0801d088
 80170a4:	0801d864 	.word	0x0801d864
 80170a8:	0801d0dc 	.word	0x0801d0dc

080170ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80170ac:	b590      	push	{r4, r7, lr}
 80170ae:	b08b      	sub	sp, #44	@ 0x2c
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80170b4:	2300      	movs	r3, #0
 80170b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d106      	bne.n	80170ce <tcp_zero_window_probe+0x22>
 80170c0:	4b4c      	ldr	r3, [pc, #304]	@ (80171f4 <tcp_zero_window_probe+0x148>)
 80170c2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80170c6:	494c      	ldr	r1, [pc, #304]	@ (80171f8 <tcp_zero_window_probe+0x14c>)
 80170c8:	484c      	ldr	r0, [pc, #304]	@ (80171fc <tcp_zero_window_probe+0x150>)
 80170ca:	f003 fc0b 	bl	801a8e4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80170d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80170d4:	6a3b      	ldr	r3, [r7, #32]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d101      	bne.n	80170de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80170da:	2300      	movs	r3, #0
 80170dc:	e086      	b.n	80171ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80170e4:	2bff      	cmp	r3, #255	@ 0xff
 80170e6:	d007      	beq.n	80170f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80170ee:	3301      	adds	r3, #1
 80170f0:	b2da      	uxtb	r2, r3
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80170f8:	6a3b      	ldr	r3, [r7, #32]
 80170fa:	68db      	ldr	r3, [r3, #12]
 80170fc:	899b      	ldrh	r3, [r3, #12]
 80170fe:	b29b      	uxth	r3, r3
 8017100:	4618      	mov	r0, r3
 8017102:	f7f8 fefb 	bl	800fefc <lwip_htons>
 8017106:	4603      	mov	r3, r0
 8017108:	b2db      	uxtb	r3, r3
 801710a:	f003 0301 	and.w	r3, r3, #1
 801710e:	2b00      	cmp	r3, #0
 8017110:	d005      	beq.n	801711e <tcp_zero_window_probe+0x72>
 8017112:	6a3b      	ldr	r3, [r7, #32]
 8017114:	891b      	ldrh	r3, [r3, #8]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d101      	bne.n	801711e <tcp_zero_window_probe+0x72>
 801711a:	2301      	movs	r3, #1
 801711c:	e000      	b.n	8017120 <tcp_zero_window_probe+0x74>
 801711e:	2300      	movs	r3, #0
 8017120:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017122:	7ffb      	ldrb	r3, [r7, #31]
 8017124:	2b00      	cmp	r3, #0
 8017126:	bf0c      	ite	eq
 8017128:	2301      	moveq	r3, #1
 801712a:	2300      	movne	r3, #0
 801712c:	b2db      	uxtb	r3, r3
 801712e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017134:	b299      	uxth	r1, r3
 8017136:	6a3b      	ldr	r3, [r7, #32]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	685b      	ldr	r3, [r3, #4]
 801713c:	8bba      	ldrh	r2, [r7, #28]
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f7ff fdfa 	bl	8016d38 <tcp_output_alloc_header>
 8017144:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d102      	bne.n	8017152 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801714c:	f04f 33ff 	mov.w	r3, #4294967295
 8017150:	e04c      	b.n	80171ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	685b      	ldr	r3, [r3, #4]
 8017156:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017158:	7ffb      	ldrb	r3, [r7, #31]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d011      	beq.n	8017182 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	899b      	ldrh	r3, [r3, #12]
 8017162:	b29b      	uxth	r3, r3
 8017164:	b21b      	sxth	r3, r3
 8017166:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801716a:	b21c      	sxth	r4, r3
 801716c:	2011      	movs	r0, #17
 801716e:	f7f8 fec5 	bl	800fefc <lwip_htons>
 8017172:	4603      	mov	r3, r0
 8017174:	b21b      	sxth	r3, r3
 8017176:	4323      	orrs	r3, r4
 8017178:	b21b      	sxth	r3, r3
 801717a:	b29a      	uxth	r2, r3
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	819a      	strh	r2, [r3, #12]
 8017180:	e010      	b.n	80171a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017182:	69bb      	ldr	r3, [r7, #24]
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	3314      	adds	r3, #20
 8017188:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801718a:	6a3b      	ldr	r3, [r7, #32]
 801718c:	6858      	ldr	r0, [r3, #4]
 801718e:	6a3b      	ldr	r3, [r7, #32]
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	891a      	ldrh	r2, [r3, #8]
 8017194:	6a3b      	ldr	r3, [r7, #32]
 8017196:	891b      	ldrh	r3, [r3, #8]
 8017198:	1ad3      	subs	r3, r2, r3
 801719a:	b29b      	uxth	r3, r3
 801719c:	2201      	movs	r2, #1
 801719e:	6939      	ldr	r1, [r7, #16]
 80171a0:	f7fa fd64 	bl	8011c6c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80171a4:	6a3b      	ldr	r3, [r7, #32]
 80171a6:	68db      	ldr	r3, [r3, #12]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	4618      	mov	r0, r3
 80171ac:	f7f8 febc 	bl	800ff28 <lwip_htonl>
 80171b0:	4603      	mov	r3, r0
 80171b2:	3301      	adds	r3, #1
 80171b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	1ad3      	subs	r3, r2, r3
 80171be:	2b00      	cmp	r3, #0
 80171c0:	da02      	bge.n	80171c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	68fa      	ldr	r2, [r7, #12]
 80171c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80171c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80171cc:	2200      	movs	r2, #0
 80171ce:	69b9      	ldr	r1, [r7, #24]
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f7ff fdef 	bl	8016db4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80171d6:	687a      	ldr	r2, [r7, #4]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	3304      	adds	r3, #4
 80171dc:	69b9      	ldr	r1, [r7, #24]
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f7ff fe26 	bl	8016e30 <tcp_output_control_segment>
 80171e4:	4603      	mov	r3, r0
 80171e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80171e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	372c      	adds	r7, #44	@ 0x2c
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd90      	pop	{r4, r7, pc}
 80171f4:	0801d088 	.word	0x0801d088
 80171f8:	0801d880 	.word	0x0801d880
 80171fc:	0801d0dc 	.word	0x0801d0dc

08017200 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017208:	f7fa ff0a 	bl	8012020 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801720c:	4b0a      	ldr	r3, [pc, #40]	@ (8017238 <tcpip_tcp_timer+0x38>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d103      	bne.n	801721c <tcpip_tcp_timer+0x1c>
 8017214:	4b09      	ldr	r3, [pc, #36]	@ (801723c <tcpip_tcp_timer+0x3c>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d005      	beq.n	8017228 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801721c:	2200      	movs	r2, #0
 801721e:	4908      	ldr	r1, [pc, #32]	@ (8017240 <tcpip_tcp_timer+0x40>)
 8017220:	20fa      	movs	r0, #250	@ 0xfa
 8017222:	f000 f8f3 	bl	801740c <sys_timeout>
 8017226:	e003      	b.n	8017230 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017228:	4b06      	ldr	r3, [pc, #24]	@ (8017244 <tcpip_tcp_timer+0x44>)
 801722a:	2200      	movs	r2, #0
 801722c:	601a      	str	r2, [r3, #0]
  }
}
 801722e:	bf00      	nop
 8017230:	bf00      	nop
 8017232:	3708      	adds	r7, #8
 8017234:	46bd      	mov	sp, r7
 8017236:	bd80      	pop	{r7, pc}
 8017238:	24014b88 	.word	0x24014b88
 801723c:	24014b8c 	.word	0x24014b8c
 8017240:	08017201 	.word	0x08017201
 8017244:	24014bd4 	.word	0x24014bd4

08017248 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017248:	b580      	push	{r7, lr}
 801724a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801724c:	4b0a      	ldr	r3, [pc, #40]	@ (8017278 <tcp_timer_needed+0x30>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d10f      	bne.n	8017274 <tcp_timer_needed+0x2c>
 8017254:	4b09      	ldr	r3, [pc, #36]	@ (801727c <tcp_timer_needed+0x34>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d103      	bne.n	8017264 <tcp_timer_needed+0x1c>
 801725c:	4b08      	ldr	r3, [pc, #32]	@ (8017280 <tcp_timer_needed+0x38>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d007      	beq.n	8017274 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017264:	4b04      	ldr	r3, [pc, #16]	@ (8017278 <tcp_timer_needed+0x30>)
 8017266:	2201      	movs	r2, #1
 8017268:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801726a:	2200      	movs	r2, #0
 801726c:	4905      	ldr	r1, [pc, #20]	@ (8017284 <tcp_timer_needed+0x3c>)
 801726e:	20fa      	movs	r0, #250	@ 0xfa
 8017270:	f000 f8cc 	bl	801740c <sys_timeout>
  }
}
 8017274:	bf00      	nop
 8017276:	bd80      	pop	{r7, pc}
 8017278:	24014bd4 	.word	0x24014bd4
 801727c:	24014b88 	.word	0x24014b88
 8017280:	24014b8c 	.word	0x24014b8c
 8017284:	08017201 	.word	0x08017201

08017288 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b086      	sub	sp, #24
 801728c:	af00      	add	r7, sp, #0
 801728e:	60f8      	str	r0, [r7, #12]
 8017290:	60b9      	str	r1, [r7, #8]
 8017292:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017294:	200b      	movs	r0, #11
 8017296:	f7f9 fbc1 	bl	8010a1c <memp_malloc>
 801729a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d109      	bne.n	80172b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d151      	bne.n	801734c <sys_timeout_abs+0xc4>
 80172a8:	4b2a      	ldr	r3, [pc, #168]	@ (8017354 <sys_timeout_abs+0xcc>)
 80172aa:	22be      	movs	r2, #190	@ 0xbe
 80172ac:	492a      	ldr	r1, [pc, #168]	@ (8017358 <sys_timeout_abs+0xd0>)
 80172ae:	482b      	ldr	r0, [pc, #172]	@ (801735c <sys_timeout_abs+0xd4>)
 80172b0:	f003 fb18 	bl	801a8e4 <iprintf>
    return;
 80172b4:	e04a      	b.n	801734c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80172b6:	693b      	ldr	r3, [r7, #16]
 80172b8:	2200      	movs	r2, #0
 80172ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	68ba      	ldr	r2, [r7, #8]
 80172c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	687a      	ldr	r2, [r7, #4]
 80172c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	68fa      	ldr	r2, [r7, #12]
 80172cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80172ce:	4b24      	ldr	r3, [pc, #144]	@ (8017360 <sys_timeout_abs+0xd8>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d103      	bne.n	80172de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80172d6:	4a22      	ldr	r2, [pc, #136]	@ (8017360 <sys_timeout_abs+0xd8>)
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	6013      	str	r3, [r2, #0]
    return;
 80172dc:	e037      	b.n	801734e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80172de:	693b      	ldr	r3, [r7, #16]
 80172e0:	685a      	ldr	r2, [r3, #4]
 80172e2:	4b1f      	ldr	r3, [pc, #124]	@ (8017360 <sys_timeout_abs+0xd8>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	1ad3      	subs	r3, r2, r3
 80172ea:	0fdb      	lsrs	r3, r3, #31
 80172ec:	f003 0301 	and.w	r3, r3, #1
 80172f0:	b2db      	uxtb	r3, r3
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d007      	beq.n	8017306 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80172f6:	4b1a      	ldr	r3, [pc, #104]	@ (8017360 <sys_timeout_abs+0xd8>)
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80172fe:	4a18      	ldr	r2, [pc, #96]	@ (8017360 <sys_timeout_abs+0xd8>)
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	6013      	str	r3, [r2, #0]
 8017304:	e023      	b.n	801734e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017306:	4b16      	ldr	r3, [pc, #88]	@ (8017360 <sys_timeout_abs+0xd8>)
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	617b      	str	r3, [r7, #20]
 801730c:	e01a      	b.n	8017344 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d00b      	beq.n	801732e <sys_timeout_abs+0xa6>
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	685a      	ldr	r2, [r3, #4]
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	1ad3      	subs	r3, r2, r3
 8017322:	0fdb      	lsrs	r3, r3, #31
 8017324:	f003 0301 	and.w	r3, r3, #1
 8017328:	b2db      	uxtb	r3, r3
 801732a:	2b00      	cmp	r3, #0
 801732c:	d007      	beq.n	801733e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801732e:	697b      	ldr	r3, [r7, #20]
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	693a      	ldr	r2, [r7, #16]
 801733a:	601a      	str	r2, [r3, #0]
        break;
 801733c:	e007      	b.n	801734e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	617b      	str	r3, [r7, #20]
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d1e1      	bne.n	801730e <sys_timeout_abs+0x86>
 801734a:	e000      	b.n	801734e <sys_timeout_abs+0xc6>
    return;
 801734c:	bf00      	nop
      }
    }
  }
}
 801734e:	3718      	adds	r7, #24
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}
 8017354:	0801d8a4 	.word	0x0801d8a4
 8017358:	0801d8d8 	.word	0x0801d8d8
 801735c:	0801d918 	.word	0x0801d918
 8017360:	24014bcc 	.word	0x24014bcc

08017364 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b086      	sub	sp, #24
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	685b      	ldr	r3, [r3, #4]
 8017374:	4798      	blx	r3

  now = sys_now();
 8017376:	f7f4 f9f5 	bl	800b764 <sys_now>
 801737a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801737c:	697b      	ldr	r3, [r7, #20]
 801737e:	681a      	ldr	r2, [r3, #0]
 8017380:	4b0f      	ldr	r3, [pc, #60]	@ (80173c0 <lwip_cyclic_timer+0x5c>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	4413      	add	r3, r2
 8017386:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017388:	68fa      	ldr	r2, [r7, #12]
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	0fdb      	lsrs	r3, r3, #31
 8017390:	f003 0301 	and.w	r3, r3, #1
 8017394:	b2db      	uxtb	r3, r3
 8017396:	2b00      	cmp	r3, #0
 8017398:	d009      	beq.n	80173ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	681a      	ldr	r2, [r3, #0]
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	4413      	add	r3, r2
 80173a2:	687a      	ldr	r2, [r7, #4]
 80173a4:	4907      	ldr	r1, [pc, #28]	@ (80173c4 <lwip_cyclic_timer+0x60>)
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7ff ff6e 	bl	8017288 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80173ac:	e004      	b.n	80173b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80173ae:	687a      	ldr	r2, [r7, #4]
 80173b0:	4904      	ldr	r1, [pc, #16]	@ (80173c4 <lwip_cyclic_timer+0x60>)
 80173b2:	68f8      	ldr	r0, [r7, #12]
 80173b4:	f7ff ff68 	bl	8017288 <sys_timeout_abs>
}
 80173b8:	bf00      	nop
 80173ba:	3718      	adds	r7, #24
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	24014bd0 	.word	0x24014bd0
 80173c4:	08017365 	.word	0x08017365

080173c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b082      	sub	sp, #8
 80173cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80173ce:	2301      	movs	r3, #1
 80173d0:	607b      	str	r3, [r7, #4]
 80173d2:	e00e      	b.n	80173f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80173d4:	4a0b      	ldr	r2, [pc, #44]	@ (8017404 <sys_timeouts_init+0x3c>)
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	00db      	lsls	r3, r3, #3
 80173e0:	4a08      	ldr	r2, [pc, #32]	@ (8017404 <sys_timeouts_init+0x3c>)
 80173e2:	4413      	add	r3, r2
 80173e4:	461a      	mov	r2, r3
 80173e6:	4908      	ldr	r1, [pc, #32]	@ (8017408 <sys_timeouts_init+0x40>)
 80173e8:	f000 f810 	bl	801740c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	3301      	adds	r3, #1
 80173f0:	607b      	str	r3, [r7, #4]
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	2b02      	cmp	r3, #2
 80173f6:	d9ed      	bls.n	80173d4 <sys_timeouts_init+0xc>
  }
}
 80173f8:	bf00      	nop
 80173fa:	bf00      	nop
 80173fc:	3708      	adds	r7, #8
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
 8017402:	bf00      	nop
 8017404:	0801e528 	.word	0x0801e528
 8017408:	08017365 	.word	0x08017365

0801740c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b086      	sub	sp, #24
 8017410:	af00      	add	r7, sp, #0
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	60b9      	str	r1, [r7, #8]
 8017416:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801741e:	d306      	bcc.n	801742e <sys_timeout+0x22>
 8017420:	4b0a      	ldr	r3, [pc, #40]	@ (801744c <sys_timeout+0x40>)
 8017422:	f240 1229 	movw	r2, #297	@ 0x129
 8017426:	490a      	ldr	r1, [pc, #40]	@ (8017450 <sys_timeout+0x44>)
 8017428:	480a      	ldr	r0, [pc, #40]	@ (8017454 <sys_timeout+0x48>)
 801742a:	f003 fa5b 	bl	801a8e4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801742e:	f7f4 f999 	bl	800b764 <sys_now>
 8017432:	4602      	mov	r2, r0
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	4413      	add	r3, r2
 8017438:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	68b9      	ldr	r1, [r7, #8]
 801743e:	6978      	ldr	r0, [r7, #20]
 8017440:	f7ff ff22 	bl	8017288 <sys_timeout_abs>
#endif
}
 8017444:	bf00      	nop
 8017446:	3718      	adds	r7, #24
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}
 801744c:	0801d8a4 	.word	0x0801d8a4
 8017450:	0801d940 	.word	0x0801d940
 8017454:	0801d918 	.word	0x0801d918

08017458 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801745e:	f7f4 f981 	bl	800b764 <sys_now>
 8017462:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017464:	4b17      	ldr	r3, [pc, #92]	@ (80174c4 <sys_check_timeouts+0x6c>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801746a:	68bb      	ldr	r3, [r7, #8]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d022      	beq.n	80174b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	685b      	ldr	r3, [r3, #4]
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	1ad3      	subs	r3, r2, r3
 8017478:	0fdb      	lsrs	r3, r3, #31
 801747a:	f003 0301 	and.w	r3, r3, #1
 801747e:	b2db      	uxtb	r3, r3
 8017480:	2b00      	cmp	r3, #0
 8017482:	d11a      	bne.n	80174ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4a0e      	ldr	r2, [pc, #56]	@ (80174c4 <sys_check_timeouts+0x6c>)
 801748a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	689b      	ldr	r3, [r3, #8]
 8017490:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	68db      	ldr	r3, [r3, #12]
 8017496:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	685b      	ldr	r3, [r3, #4]
 801749c:	4a0a      	ldr	r2, [pc, #40]	@ (80174c8 <sys_check_timeouts+0x70>)
 801749e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80174a0:	68b9      	ldr	r1, [r7, #8]
 80174a2:	200b      	movs	r0, #11
 80174a4:	f7f9 fb30 	bl	8010b08 <memp_free>
    if (handler != NULL) {
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d0da      	beq.n	8017464 <sys_check_timeouts+0xc>
      handler(arg);
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6838      	ldr	r0, [r7, #0]
 80174b2:	4798      	blx	r3
  do {
 80174b4:	e7d6      	b.n	8017464 <sys_check_timeouts+0xc>
      return;
 80174b6:	bf00      	nop
 80174b8:	e000      	b.n	80174bc <sys_check_timeouts+0x64>
      return;
 80174ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80174bc:	3710      	adds	r7, #16
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	bf00      	nop
 80174c4:	24014bcc 	.word	0x24014bcc
 80174c8:	24014bd0 	.word	0x24014bd0

080174cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b082      	sub	sp, #8
 80174d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80174d2:	4b16      	ldr	r3, [pc, #88]	@ (801752c <sys_timeouts_sleeptime+0x60>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d102      	bne.n	80174e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80174da:	f04f 33ff 	mov.w	r3, #4294967295
 80174de:	e020      	b.n	8017522 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80174e0:	f7f4 f940 	bl	800b764 <sys_now>
 80174e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80174e6:	4b11      	ldr	r3, [pc, #68]	@ (801752c <sys_timeouts_sleeptime+0x60>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	685a      	ldr	r2, [r3, #4]
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	1ad3      	subs	r3, r2, r3
 80174f0:	0fdb      	lsrs	r3, r3, #31
 80174f2:	f003 0301 	and.w	r3, r3, #1
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d001      	beq.n	8017500 <sys_timeouts_sleeptime+0x34>
    return 0;
 80174fc:	2300      	movs	r3, #0
 80174fe:	e010      	b.n	8017522 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017500:	4b0a      	ldr	r3, [pc, #40]	@ (801752c <sys_timeouts_sleeptime+0x60>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	685a      	ldr	r2, [r3, #4]
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	1ad3      	subs	r3, r2, r3
 801750a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	2b00      	cmp	r3, #0
 8017510:	da06      	bge.n	8017520 <sys_timeouts_sleeptime+0x54>
 8017512:	4b07      	ldr	r3, [pc, #28]	@ (8017530 <sys_timeouts_sleeptime+0x64>)
 8017514:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017518:	4906      	ldr	r1, [pc, #24]	@ (8017534 <sys_timeouts_sleeptime+0x68>)
 801751a:	4807      	ldr	r0, [pc, #28]	@ (8017538 <sys_timeouts_sleeptime+0x6c>)
 801751c:	f003 f9e2 	bl	801a8e4 <iprintf>
    return ret;
 8017520:	683b      	ldr	r3, [r7, #0]
  }
}
 8017522:	4618      	mov	r0, r3
 8017524:	3708      	adds	r7, #8
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	24014bcc 	.word	0x24014bcc
 8017530:	0801d8a4 	.word	0x0801d8a4
 8017534:	0801d978 	.word	0x0801d978
 8017538:	0801d918 	.word	0x0801d918

0801753c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017540:	f003 f8d0 	bl	801a6e4 <rand>
 8017544:	4603      	mov	r3, r0
 8017546:	b29b      	uxth	r3, r3
 8017548:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801754c:	b29b      	uxth	r3, r3
 801754e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017552:	b29a      	uxth	r2, r3
 8017554:	4b01      	ldr	r3, [pc, #4]	@ (801755c <udp_init+0x20>)
 8017556:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017558:	bf00      	nop
 801755a:	bd80      	pop	{r7, pc}
 801755c:	240049c0 	.word	0x240049c0

08017560 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017560:	b480      	push	{r7}
 8017562:	b083      	sub	sp, #12
 8017564:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017566:	2300      	movs	r3, #0
 8017568:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801756a:	4b17      	ldr	r3, [pc, #92]	@ (80175c8 <udp_new_port+0x68>)
 801756c:	881b      	ldrh	r3, [r3, #0]
 801756e:	1c5a      	adds	r2, r3, #1
 8017570:	b291      	uxth	r1, r2
 8017572:	4a15      	ldr	r2, [pc, #84]	@ (80175c8 <udp_new_port+0x68>)
 8017574:	8011      	strh	r1, [r2, #0]
 8017576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801757a:	4293      	cmp	r3, r2
 801757c:	d103      	bne.n	8017586 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801757e:	4b12      	ldr	r3, [pc, #72]	@ (80175c8 <udp_new_port+0x68>)
 8017580:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017584:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017586:	4b11      	ldr	r3, [pc, #68]	@ (80175cc <udp_new_port+0x6c>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	603b      	str	r3, [r7, #0]
 801758c:	e011      	b.n	80175b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	8a5a      	ldrh	r2, [r3, #18]
 8017592:	4b0d      	ldr	r3, [pc, #52]	@ (80175c8 <udp_new_port+0x68>)
 8017594:	881b      	ldrh	r3, [r3, #0]
 8017596:	429a      	cmp	r2, r3
 8017598:	d108      	bne.n	80175ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801759a:	88fb      	ldrh	r3, [r7, #6]
 801759c:	3301      	adds	r3, #1
 801759e:	80fb      	strh	r3, [r7, #6]
 80175a0:	88fb      	ldrh	r3, [r7, #6]
 80175a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80175a6:	d3e0      	bcc.n	801756a <udp_new_port+0xa>
        return 0;
 80175a8:	2300      	movs	r3, #0
 80175aa:	e007      	b.n	80175bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	68db      	ldr	r3, [r3, #12]
 80175b0:	603b      	str	r3, [r7, #0]
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d1ea      	bne.n	801758e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80175b8:	4b03      	ldr	r3, [pc, #12]	@ (80175c8 <udp_new_port+0x68>)
 80175ba:	881b      	ldrh	r3, [r3, #0]
}
 80175bc:	4618      	mov	r0, r3
 80175be:	370c      	adds	r7, #12
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr
 80175c8:	240049c0 	.word	0x240049c0
 80175cc:	24014bd8 	.word	0x24014bd8

080175d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b084      	sub	sp, #16
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	60f8      	str	r0, [r7, #12]
 80175d8:	60b9      	str	r1, [r7, #8]
 80175da:	4613      	mov	r3, r2
 80175dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d105      	bne.n	80175f0 <udp_input_local_match+0x20>
 80175e4:	4b27      	ldr	r3, [pc, #156]	@ (8017684 <udp_input_local_match+0xb4>)
 80175e6:	2287      	movs	r2, #135	@ 0x87
 80175e8:	4927      	ldr	r1, [pc, #156]	@ (8017688 <udp_input_local_match+0xb8>)
 80175ea:	4828      	ldr	r0, [pc, #160]	@ (801768c <udp_input_local_match+0xbc>)
 80175ec:	f003 f97a 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d105      	bne.n	8017602 <udp_input_local_match+0x32>
 80175f6:	4b23      	ldr	r3, [pc, #140]	@ (8017684 <udp_input_local_match+0xb4>)
 80175f8:	2288      	movs	r2, #136	@ 0x88
 80175fa:	4925      	ldr	r1, [pc, #148]	@ (8017690 <udp_input_local_match+0xc0>)
 80175fc:	4823      	ldr	r0, [pc, #140]	@ (801768c <udp_input_local_match+0xbc>)
 80175fe:	f003 f971 	bl	801a8e4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	7a1b      	ldrb	r3, [r3, #8]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d00b      	beq.n	8017622 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	7a1a      	ldrb	r2, [r3, #8]
 801760e:	4b21      	ldr	r3, [pc, #132]	@ (8017694 <udp_input_local_match+0xc4>)
 8017610:	685b      	ldr	r3, [r3, #4]
 8017612:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017616:	3301      	adds	r3, #1
 8017618:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801761a:	429a      	cmp	r2, r3
 801761c:	d001      	beq.n	8017622 <udp_input_local_match+0x52>
    return 0;
 801761e:	2300      	movs	r3, #0
 8017620:	e02b      	b.n	801767a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017622:	79fb      	ldrb	r3, [r7, #7]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d018      	beq.n	801765a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d013      	beq.n	8017656 <udp_input_local_match+0x86>
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d00f      	beq.n	8017656 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017636:	4b17      	ldr	r3, [pc, #92]	@ (8017694 <udp_input_local_match+0xc4>)
 8017638:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801763e:	d00a      	beq.n	8017656 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	4b13      	ldr	r3, [pc, #76]	@ (8017694 <udp_input_local_match+0xc4>)
 8017646:	695b      	ldr	r3, [r3, #20]
 8017648:	405a      	eors	r2, r3
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	3308      	adds	r3, #8
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017652:	2b00      	cmp	r3, #0
 8017654:	d110      	bne.n	8017678 <udp_input_local_match+0xa8>
          return 1;
 8017656:	2301      	movs	r3, #1
 8017658:	e00f      	b.n	801767a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d009      	beq.n	8017674 <udp_input_local_match+0xa4>
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d005      	beq.n	8017674 <udp_input_local_match+0xa4>
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	4b09      	ldr	r3, [pc, #36]	@ (8017694 <udp_input_local_match+0xc4>)
 801766e:	695b      	ldr	r3, [r3, #20]
 8017670:	429a      	cmp	r2, r3
 8017672:	d101      	bne.n	8017678 <udp_input_local_match+0xa8>
        return 1;
 8017674:	2301      	movs	r3, #1
 8017676:	e000      	b.n	801767a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017678:	2300      	movs	r3, #0
}
 801767a:	4618      	mov	r0, r3
 801767c:	3710      	adds	r7, #16
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	0801d98c 	.word	0x0801d98c
 8017688:	0801d9bc 	.word	0x0801d9bc
 801768c:	0801d9e0 	.word	0x0801d9e0
 8017690:	0801da08 	.word	0x0801da08
 8017694:	2400e040 	.word	0x2400e040

08017698 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017698:	b590      	push	{r4, r7, lr}
 801769a:	b08d      	sub	sp, #52	@ 0x34
 801769c:	af02      	add	r7, sp, #8
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80176a2:	2300      	movs	r3, #0
 80176a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d105      	bne.n	80176b8 <udp_input+0x20>
 80176ac:	4b7c      	ldr	r3, [pc, #496]	@ (80178a0 <udp_input+0x208>)
 80176ae:	22cf      	movs	r2, #207	@ 0xcf
 80176b0:	497c      	ldr	r1, [pc, #496]	@ (80178a4 <udp_input+0x20c>)
 80176b2:	487d      	ldr	r0, [pc, #500]	@ (80178a8 <udp_input+0x210>)
 80176b4:	f003 f916 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80176b8:	683b      	ldr	r3, [r7, #0]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d105      	bne.n	80176ca <udp_input+0x32>
 80176be:	4b78      	ldr	r3, [pc, #480]	@ (80178a0 <udp_input+0x208>)
 80176c0:	22d0      	movs	r2, #208	@ 0xd0
 80176c2:	497a      	ldr	r1, [pc, #488]	@ (80178ac <udp_input+0x214>)
 80176c4:	4878      	ldr	r0, [pc, #480]	@ (80178a8 <udp_input+0x210>)
 80176c6:	f003 f90d 	bl	801a8e4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	895b      	ldrh	r3, [r3, #10]
 80176ce:	2b07      	cmp	r3, #7
 80176d0:	d803      	bhi.n	80176da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f7fa f8c4 	bl	8011860 <pbuf_free>
    goto end;
 80176d8:	e0de      	b.n	8017898 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80176e0:	4b73      	ldr	r3, [pc, #460]	@ (80178b0 <udp_input+0x218>)
 80176e2:	695b      	ldr	r3, [r3, #20]
 80176e4:	4a72      	ldr	r2, [pc, #456]	@ (80178b0 <udp_input+0x218>)
 80176e6:	6812      	ldr	r2, [r2, #0]
 80176e8:	4611      	mov	r1, r2
 80176ea:	4618      	mov	r0, r3
 80176ec:	f001 ffb2 	bl	8019654 <ip4_addr_isbroadcast_u32>
 80176f0:	4603      	mov	r3, r0
 80176f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	881b      	ldrh	r3, [r3, #0]
 80176f8:	b29b      	uxth	r3, r3
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7f8 fbfe 	bl	800fefc <lwip_htons>
 8017700:	4603      	mov	r3, r0
 8017702:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017704:	697b      	ldr	r3, [r7, #20]
 8017706:	885b      	ldrh	r3, [r3, #2]
 8017708:	b29b      	uxth	r3, r3
 801770a:	4618      	mov	r0, r3
 801770c:	f7f8 fbf6 	bl	800fefc <lwip_htons>
 8017710:	4603      	mov	r3, r0
 8017712:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017714:	2300      	movs	r3, #0
 8017716:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017718:	2300      	movs	r3, #0
 801771a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801771c:	2300      	movs	r3, #0
 801771e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017720:	4b64      	ldr	r3, [pc, #400]	@ (80178b4 <udp_input+0x21c>)
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	627b      	str	r3, [r7, #36]	@ 0x24
 8017726:	e054      	b.n	80177d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801772a:	8a5b      	ldrh	r3, [r3, #18]
 801772c:	89fa      	ldrh	r2, [r7, #14]
 801772e:	429a      	cmp	r2, r3
 8017730:	d14a      	bne.n	80177c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017732:	7cfb      	ldrb	r3, [r7, #19]
 8017734:	461a      	mov	r2, r3
 8017736:	6839      	ldr	r1, [r7, #0]
 8017738:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801773a:	f7ff ff49 	bl	80175d0 <udp_input_local_match>
 801773e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017740:	2b00      	cmp	r3, #0
 8017742:	d041      	beq.n	80177c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017746:	7c1b      	ldrb	r3, [r3, #16]
 8017748:	f003 0304 	and.w	r3, r3, #4
 801774c:	2b00      	cmp	r3, #0
 801774e:	d11d      	bne.n	801778c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017750:	69fb      	ldr	r3, [r7, #28]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d102      	bne.n	801775c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017758:	61fb      	str	r3, [r7, #28]
 801775a:	e017      	b.n	801778c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801775c:	7cfb      	ldrb	r3, [r7, #19]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d014      	beq.n	801778c <udp_input+0xf4>
 8017762:	4b53      	ldr	r3, [pc, #332]	@ (80178b0 <udp_input+0x218>)
 8017764:	695b      	ldr	r3, [r3, #20]
 8017766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801776a:	d10f      	bne.n	801778c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801776c:	69fb      	ldr	r3, [r7, #28]
 801776e:	681a      	ldr	r2, [r3, #0]
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	3304      	adds	r3, #4
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	429a      	cmp	r2, r3
 8017778:	d008      	beq.n	801778c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801777c:	681a      	ldr	r2, [r3, #0]
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	3304      	adds	r3, #4
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	429a      	cmp	r2, r3
 8017786:	d101      	bne.n	801778c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801778a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801778e:	8a9b      	ldrh	r3, [r3, #20]
 8017790:	8a3a      	ldrh	r2, [r7, #16]
 8017792:	429a      	cmp	r2, r3
 8017794:	d118      	bne.n	80177c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017798:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801779a:	2b00      	cmp	r3, #0
 801779c:	d005      	beq.n	80177aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177a0:	685a      	ldr	r2, [r3, #4]
 80177a2:	4b43      	ldr	r3, [pc, #268]	@ (80178b0 <udp_input+0x218>)
 80177a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d10e      	bne.n	80177c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80177aa:	6a3b      	ldr	r3, [r7, #32]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d014      	beq.n	80177da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80177b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177b2:	68da      	ldr	r2, [r3, #12]
 80177b4:	6a3b      	ldr	r3, [r7, #32]
 80177b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80177b8:	4b3e      	ldr	r3, [pc, #248]	@ (80178b4 <udp_input+0x21c>)
 80177ba:	681a      	ldr	r2, [r3, #0]
 80177bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80177c0:	4a3c      	ldr	r2, [pc, #240]	@ (80178b4 <udp_input+0x21c>)
 80177c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80177c6:	e008      	b.n	80177da <udp_input+0x142>
      }
    }

    prev = pcb;
 80177c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80177cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80177d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d1a7      	bne.n	8017728 <udp_input+0x90>
 80177d8:	e000      	b.n	80177dc <udp_input+0x144>
        break;
 80177da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80177dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d101      	bne.n	80177e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80177e2:	69fb      	ldr	r3, [r7, #28]
 80177e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80177e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d002      	beq.n	80177f2 <udp_input+0x15a>
    for_us = 1;
 80177ec:	2301      	movs	r3, #1
 80177ee:	76fb      	strb	r3, [r7, #27]
 80177f0:	e00a      	b.n	8017808 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	3304      	adds	r3, #4
 80177f6:	681a      	ldr	r2, [r3, #0]
 80177f8:	4b2d      	ldr	r3, [pc, #180]	@ (80178b0 <udp_input+0x218>)
 80177fa:	695b      	ldr	r3, [r3, #20]
 80177fc:	429a      	cmp	r2, r3
 80177fe:	bf0c      	ite	eq
 8017800:	2301      	moveq	r3, #1
 8017802:	2300      	movne	r3, #0
 8017804:	b2db      	uxtb	r3, r3
 8017806:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017808:	7efb      	ldrb	r3, [r7, #27]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d041      	beq.n	8017892 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801780e:	2108      	movs	r1, #8
 8017810:	6878      	ldr	r0, [r7, #4]
 8017812:	f7f9 ff9f 	bl	8011754 <pbuf_remove_header>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d00a      	beq.n	8017832 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801781c:	4b20      	ldr	r3, [pc, #128]	@ (80178a0 <udp_input+0x208>)
 801781e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017822:	4925      	ldr	r1, [pc, #148]	@ (80178b8 <udp_input+0x220>)
 8017824:	4820      	ldr	r0, [pc, #128]	@ (80178a8 <udp_input+0x210>)
 8017826:	f003 f85d 	bl	801a8e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801782a:	6878      	ldr	r0, [r7, #4]
 801782c:	f7fa f818 	bl	8011860 <pbuf_free>
      goto end;
 8017830:	e032      	b.n	8017898 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017834:	2b00      	cmp	r3, #0
 8017836:	d012      	beq.n	801785e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801783a:	699b      	ldr	r3, [r3, #24]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d00a      	beq.n	8017856 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017842:	699c      	ldr	r4, [r3, #24]
 8017844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017846:	69d8      	ldr	r0, [r3, #28]
 8017848:	8a3b      	ldrh	r3, [r7, #16]
 801784a:	9300      	str	r3, [sp, #0]
 801784c:	4b1b      	ldr	r3, [pc, #108]	@ (80178bc <udp_input+0x224>)
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017852:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017854:	e021      	b.n	801789a <udp_input+0x202>
        pbuf_free(p);
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f7fa f802 	bl	8011860 <pbuf_free>
        goto end;
 801785c:	e01c      	b.n	8017898 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801785e:	7cfb      	ldrb	r3, [r7, #19]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d112      	bne.n	801788a <udp_input+0x1f2>
 8017864:	4b12      	ldr	r3, [pc, #72]	@ (80178b0 <udp_input+0x218>)
 8017866:	695b      	ldr	r3, [r3, #20]
 8017868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801786c:	2be0      	cmp	r3, #224	@ 0xe0
 801786e:	d00c      	beq.n	801788a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017870:	4b0f      	ldr	r3, [pc, #60]	@ (80178b0 <udp_input+0x218>)
 8017872:	899b      	ldrh	r3, [r3, #12]
 8017874:	3308      	adds	r3, #8
 8017876:	b29b      	uxth	r3, r3
 8017878:	b21b      	sxth	r3, r3
 801787a:	4619      	mov	r1, r3
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f7f9 ffdc 	bl	801183a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017882:	2103      	movs	r1, #3
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f001 fbaf 	bl	8018fe8 <icmp_dest_unreach>
      pbuf_free(p);
 801788a:	6878      	ldr	r0, [r7, #4]
 801788c:	f7f9 ffe8 	bl	8011860 <pbuf_free>
  return;
 8017890:	e003      	b.n	801789a <udp_input+0x202>
    pbuf_free(p);
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7f9 ffe4 	bl	8011860 <pbuf_free>
  return;
 8017898:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801789a:	372c      	adds	r7, #44	@ 0x2c
 801789c:	46bd      	mov	sp, r7
 801789e:	bd90      	pop	{r4, r7, pc}
 80178a0:	0801d98c 	.word	0x0801d98c
 80178a4:	0801da30 	.word	0x0801da30
 80178a8:	0801d9e0 	.word	0x0801d9e0
 80178ac:	0801da48 	.word	0x0801da48
 80178b0:	2400e040 	.word	0x2400e040
 80178b4:	24014bd8 	.word	0x24014bd8
 80178b8:	0801da64 	.word	0x0801da64
 80178bc:	2400e050 	.word	0x2400e050

080178c0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d109      	bne.n	80178e4 <udp_send+0x24>
 80178d0:	4b11      	ldr	r3, [pc, #68]	@ (8017918 <udp_send+0x58>)
 80178d2:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80178d6:	4911      	ldr	r1, [pc, #68]	@ (801791c <udp_send+0x5c>)
 80178d8:	4811      	ldr	r0, [pc, #68]	@ (8017920 <udp_send+0x60>)
 80178da:	f003 f803 	bl	801a8e4 <iprintf>
 80178de:	f06f 030f 	mvn.w	r3, #15
 80178e2:	e015      	b.n	8017910 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d109      	bne.n	80178fe <udp_send+0x3e>
 80178ea:	4b0b      	ldr	r3, [pc, #44]	@ (8017918 <udp_send+0x58>)
 80178ec:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80178f0:	490c      	ldr	r1, [pc, #48]	@ (8017924 <udp_send+0x64>)
 80178f2:	480b      	ldr	r0, [pc, #44]	@ (8017920 <udp_send+0x60>)
 80178f4:	f002 fff6 	bl	801a8e4 <iprintf>
 80178f8:	f06f 030f 	mvn.w	r3, #15
 80178fc:	e008      	b.n	8017910 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	1d1a      	adds	r2, r3, #4
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	8a9b      	ldrh	r3, [r3, #20]
 8017906:	6839      	ldr	r1, [r7, #0]
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	f000 f80d 	bl	8017928 <udp_sendto>
 801790e:	4603      	mov	r3, r0
}
 8017910:	4618      	mov	r0, r3
 8017912:	3708      	adds	r7, #8
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}
 8017918:	0801d98c 	.word	0x0801d98c
 801791c:	0801da80 	.word	0x0801da80
 8017920:	0801d9e0 	.word	0x0801d9e0
 8017924:	0801da98 	.word	0x0801da98

08017928 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b088      	sub	sp, #32
 801792c:	af02      	add	r7, sp, #8
 801792e:	60f8      	str	r0, [r7, #12]
 8017930:	60b9      	str	r1, [r7, #8]
 8017932:	607a      	str	r2, [r7, #4]
 8017934:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d109      	bne.n	8017950 <udp_sendto+0x28>
 801793c:	4b23      	ldr	r3, [pc, #140]	@ (80179cc <udp_sendto+0xa4>)
 801793e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017942:	4923      	ldr	r1, [pc, #140]	@ (80179d0 <udp_sendto+0xa8>)
 8017944:	4823      	ldr	r0, [pc, #140]	@ (80179d4 <udp_sendto+0xac>)
 8017946:	f002 ffcd 	bl	801a8e4 <iprintf>
 801794a:	f06f 030f 	mvn.w	r3, #15
 801794e:	e038      	b.n	80179c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d109      	bne.n	801796a <udp_sendto+0x42>
 8017956:	4b1d      	ldr	r3, [pc, #116]	@ (80179cc <udp_sendto+0xa4>)
 8017958:	f240 2219 	movw	r2, #537	@ 0x219
 801795c:	491e      	ldr	r1, [pc, #120]	@ (80179d8 <udp_sendto+0xb0>)
 801795e:	481d      	ldr	r0, [pc, #116]	@ (80179d4 <udp_sendto+0xac>)
 8017960:	f002 ffc0 	bl	801a8e4 <iprintf>
 8017964:	f06f 030f 	mvn.w	r3, #15
 8017968:	e02b      	b.n	80179c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d109      	bne.n	8017984 <udp_sendto+0x5c>
 8017970:	4b16      	ldr	r3, [pc, #88]	@ (80179cc <udp_sendto+0xa4>)
 8017972:	f240 221a 	movw	r2, #538	@ 0x21a
 8017976:	4919      	ldr	r1, [pc, #100]	@ (80179dc <udp_sendto+0xb4>)
 8017978:	4816      	ldr	r0, [pc, #88]	@ (80179d4 <udp_sendto+0xac>)
 801797a:	f002 ffb3 	bl	801a8e4 <iprintf>
 801797e:	f06f 030f 	mvn.w	r3, #15
 8017982:	e01e      	b.n	80179c2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	7a1b      	ldrb	r3, [r3, #8]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d006      	beq.n	801799a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	7a1b      	ldrb	r3, [r3, #8]
 8017990:	4618      	mov	r0, r3
 8017992:	f7f9 fbd3 	bl	801113c <netif_get_by_index>
 8017996:	6178      	str	r0, [r7, #20]
 8017998:	e003      	b.n	80179a2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f001 fbb8 	bl	8019110 <ip4_route>
 80179a0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d102      	bne.n	80179ae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80179a8:	f06f 0303 	mvn.w	r3, #3
 80179ac:	e009      	b.n	80179c2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80179ae:	887a      	ldrh	r2, [r7, #2]
 80179b0:	697b      	ldr	r3, [r7, #20]
 80179b2:	9300      	str	r3, [sp, #0]
 80179b4:	4613      	mov	r3, r2
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	68b9      	ldr	r1, [r7, #8]
 80179ba:	68f8      	ldr	r0, [r7, #12]
 80179bc:	f000 f810 	bl	80179e0 <udp_sendto_if>
 80179c0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3718      	adds	r7, #24
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}
 80179ca:	bf00      	nop
 80179cc:	0801d98c 	.word	0x0801d98c
 80179d0:	0801dab0 	.word	0x0801dab0
 80179d4:	0801d9e0 	.word	0x0801d9e0
 80179d8:	0801dac8 	.word	0x0801dac8
 80179dc:	0801dae4 	.word	0x0801dae4

080179e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b088      	sub	sp, #32
 80179e4:	af02      	add	r7, sp, #8
 80179e6:	60f8      	str	r0, [r7, #12]
 80179e8:	60b9      	str	r1, [r7, #8]
 80179ea:	607a      	str	r2, [r7, #4]
 80179ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d109      	bne.n	8017a08 <udp_sendto_if+0x28>
 80179f4:	4b2e      	ldr	r3, [pc, #184]	@ (8017ab0 <udp_sendto_if+0xd0>)
 80179f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80179fa:	492e      	ldr	r1, [pc, #184]	@ (8017ab4 <udp_sendto_if+0xd4>)
 80179fc:	482e      	ldr	r0, [pc, #184]	@ (8017ab8 <udp_sendto_if+0xd8>)
 80179fe:	f002 ff71 	bl	801a8e4 <iprintf>
 8017a02:	f06f 030f 	mvn.w	r3, #15
 8017a06:	e04f      	b.n	8017aa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d109      	bne.n	8017a22 <udp_sendto_if+0x42>
 8017a0e:	4b28      	ldr	r3, [pc, #160]	@ (8017ab0 <udp_sendto_if+0xd0>)
 8017a10:	f240 2281 	movw	r2, #641	@ 0x281
 8017a14:	4929      	ldr	r1, [pc, #164]	@ (8017abc <udp_sendto_if+0xdc>)
 8017a16:	4828      	ldr	r0, [pc, #160]	@ (8017ab8 <udp_sendto_if+0xd8>)
 8017a18:	f002 ff64 	bl	801a8e4 <iprintf>
 8017a1c:	f06f 030f 	mvn.w	r3, #15
 8017a20:	e042      	b.n	8017aa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d109      	bne.n	8017a3c <udp_sendto_if+0x5c>
 8017a28:	4b21      	ldr	r3, [pc, #132]	@ (8017ab0 <udp_sendto_if+0xd0>)
 8017a2a:	f240 2282 	movw	r2, #642	@ 0x282
 8017a2e:	4924      	ldr	r1, [pc, #144]	@ (8017ac0 <udp_sendto_if+0xe0>)
 8017a30:	4821      	ldr	r0, [pc, #132]	@ (8017ab8 <udp_sendto_if+0xd8>)
 8017a32:	f002 ff57 	bl	801a8e4 <iprintf>
 8017a36:	f06f 030f 	mvn.w	r3, #15
 8017a3a:	e035      	b.n	8017aa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d109      	bne.n	8017a56 <udp_sendto_if+0x76>
 8017a42:	4b1b      	ldr	r3, [pc, #108]	@ (8017ab0 <udp_sendto_if+0xd0>)
 8017a44:	f240 2283 	movw	r2, #643	@ 0x283
 8017a48:	491e      	ldr	r1, [pc, #120]	@ (8017ac4 <udp_sendto_if+0xe4>)
 8017a4a:	481b      	ldr	r0, [pc, #108]	@ (8017ab8 <udp_sendto_if+0xd8>)
 8017a4c:	f002 ff4a 	bl	801a8e4 <iprintf>
 8017a50:	f06f 030f 	mvn.w	r3, #15
 8017a54:	e028      	b.n	8017aa8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d009      	beq.n	8017a70 <udp_sendto_if+0x90>
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d005      	beq.n	8017a70 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017a6c:	2be0      	cmp	r3, #224	@ 0xe0
 8017a6e:	d103      	bne.n	8017a78 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017a70:	6a3b      	ldr	r3, [r7, #32]
 8017a72:	3304      	adds	r3, #4
 8017a74:	617b      	str	r3, [r7, #20]
 8017a76:	e00b      	b.n	8017a90 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	681a      	ldr	r2, [r3, #0]
 8017a7c:	6a3b      	ldr	r3, [r7, #32]
 8017a7e:	3304      	adds	r3, #4
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d002      	beq.n	8017a8c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017a86:	f06f 0303 	mvn.w	r3, #3
 8017a8a:	e00d      	b.n	8017aa8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017a90:	887a      	ldrh	r2, [r7, #2]
 8017a92:	697b      	ldr	r3, [r7, #20]
 8017a94:	9301      	str	r3, [sp, #4]
 8017a96:	6a3b      	ldr	r3, [r7, #32]
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	4613      	mov	r3, r2
 8017a9c:	687a      	ldr	r2, [r7, #4]
 8017a9e:	68b9      	ldr	r1, [r7, #8]
 8017aa0:	68f8      	ldr	r0, [r7, #12]
 8017aa2:	f000 f811 	bl	8017ac8 <udp_sendto_if_src>
 8017aa6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3718      	adds	r7, #24
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}
 8017ab0:	0801d98c 	.word	0x0801d98c
 8017ab4:	0801db00 	.word	0x0801db00
 8017ab8:	0801d9e0 	.word	0x0801d9e0
 8017abc:	0801db1c 	.word	0x0801db1c
 8017ac0:	0801db38 	.word	0x0801db38
 8017ac4:	0801db58 	.word	0x0801db58

08017ac8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b08c      	sub	sp, #48	@ 0x30
 8017acc:	af04      	add	r7, sp, #16
 8017ace:	60f8      	str	r0, [r7, #12]
 8017ad0:	60b9      	str	r1, [r7, #8]
 8017ad2:	607a      	str	r2, [r7, #4]
 8017ad4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d109      	bne.n	8017af0 <udp_sendto_if_src+0x28>
 8017adc:	4b65      	ldr	r3, [pc, #404]	@ (8017c74 <udp_sendto_if_src+0x1ac>)
 8017ade:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017ae2:	4965      	ldr	r1, [pc, #404]	@ (8017c78 <udp_sendto_if_src+0x1b0>)
 8017ae4:	4865      	ldr	r0, [pc, #404]	@ (8017c7c <udp_sendto_if_src+0x1b4>)
 8017ae6:	f002 fefd 	bl	801a8e4 <iprintf>
 8017aea:	f06f 030f 	mvn.w	r3, #15
 8017aee:	e0bc      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d109      	bne.n	8017b0a <udp_sendto_if_src+0x42>
 8017af6:	4b5f      	ldr	r3, [pc, #380]	@ (8017c74 <udp_sendto_if_src+0x1ac>)
 8017af8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8017afc:	4960      	ldr	r1, [pc, #384]	@ (8017c80 <udp_sendto_if_src+0x1b8>)
 8017afe:	485f      	ldr	r0, [pc, #380]	@ (8017c7c <udp_sendto_if_src+0x1b4>)
 8017b00:	f002 fef0 	bl	801a8e4 <iprintf>
 8017b04:	f06f 030f 	mvn.w	r3, #15
 8017b08:	e0af      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d109      	bne.n	8017b24 <udp_sendto_if_src+0x5c>
 8017b10:	4b58      	ldr	r3, [pc, #352]	@ (8017c74 <udp_sendto_if_src+0x1ac>)
 8017b12:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017b16:	495b      	ldr	r1, [pc, #364]	@ (8017c84 <udp_sendto_if_src+0x1bc>)
 8017b18:	4858      	ldr	r0, [pc, #352]	@ (8017c7c <udp_sendto_if_src+0x1b4>)
 8017b1a:	f002 fee3 	bl	801a8e4 <iprintf>
 8017b1e:	f06f 030f 	mvn.w	r3, #15
 8017b22:	e0a2      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d109      	bne.n	8017b3e <udp_sendto_if_src+0x76>
 8017b2a:	4b52      	ldr	r3, [pc, #328]	@ (8017c74 <udp_sendto_if_src+0x1ac>)
 8017b2c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017b30:	4955      	ldr	r1, [pc, #340]	@ (8017c88 <udp_sendto_if_src+0x1c0>)
 8017b32:	4852      	ldr	r0, [pc, #328]	@ (8017c7c <udp_sendto_if_src+0x1b4>)
 8017b34:	f002 fed6 	bl	801a8e4 <iprintf>
 8017b38:	f06f 030f 	mvn.w	r3, #15
 8017b3c:	e095      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d109      	bne.n	8017b58 <udp_sendto_if_src+0x90>
 8017b44:	4b4b      	ldr	r3, [pc, #300]	@ (8017c74 <udp_sendto_if_src+0x1ac>)
 8017b46:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8017b4a:	4950      	ldr	r1, [pc, #320]	@ (8017c8c <udp_sendto_if_src+0x1c4>)
 8017b4c:	484b      	ldr	r0, [pc, #300]	@ (8017c7c <udp_sendto_if_src+0x1b4>)
 8017b4e:	f002 fec9 	bl	801a8e4 <iprintf>
 8017b52:	f06f 030f 	mvn.w	r3, #15
 8017b56:	e088      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	8a5b      	ldrh	r3, [r3, #18]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d10f      	bne.n	8017b80 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017b60:	68f9      	ldr	r1, [r7, #12]
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	8a5b      	ldrh	r3, [r3, #18]
 8017b66:	461a      	mov	r2, r3
 8017b68:	68f8      	ldr	r0, [r7, #12]
 8017b6a:	f000 f893 	bl	8017c94 <udp_bind>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017b72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d002      	beq.n	8017b80 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017b7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017b7e:	e074      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	891b      	ldrh	r3, [r3, #8]
 8017b84:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017b88:	4293      	cmp	r3, r2
 8017b8a:	d902      	bls.n	8017b92 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b90:	e06b      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017b92:	2108      	movs	r1, #8
 8017b94:	68b8      	ldr	r0, [r7, #8]
 8017b96:	f7f9 fdcd 	bl	8011734 <pbuf_add_header>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d015      	beq.n	8017bcc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017ba0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017ba4:	2108      	movs	r1, #8
 8017ba6:	2022      	movs	r0, #34	@ 0x22
 8017ba8:	f7f9 fb72 	bl	8011290 <pbuf_alloc>
 8017bac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017bae:	69fb      	ldr	r3, [r7, #28]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d102      	bne.n	8017bba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bb8:	e057      	b.n	8017c6a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	891b      	ldrh	r3, [r3, #8]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d006      	beq.n	8017bd0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017bc2:	68b9      	ldr	r1, [r7, #8]
 8017bc4:	69f8      	ldr	r0, [r7, #28]
 8017bc6:	f7f9 ff6f 	bl	8011aa8 <pbuf_chain>
 8017bca:	e001      	b.n	8017bd0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017bcc:	68bb      	ldr	r3, [r7, #8]
 8017bce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	895b      	ldrh	r3, [r3, #10]
 8017bd4:	2b07      	cmp	r3, #7
 8017bd6:	d806      	bhi.n	8017be6 <udp_sendto_if_src+0x11e>
 8017bd8:	4b26      	ldr	r3, [pc, #152]	@ (8017c74 <udp_sendto_if_src+0x1ac>)
 8017bda:	f240 320d 	movw	r2, #781	@ 0x30d
 8017bde:	492c      	ldr	r1, [pc, #176]	@ (8017c90 <udp_sendto_if_src+0x1c8>)
 8017be0:	4826      	ldr	r0, [pc, #152]	@ (8017c7c <udp_sendto_if_src+0x1b4>)
 8017be2:	f002 fe7f 	bl	801a8e4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017be6:	69fb      	ldr	r3, [r7, #28]
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	8a5b      	ldrh	r3, [r3, #18]
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7f8 f983 	bl	800fefc <lwip_htons>
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	461a      	mov	r2, r3
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017bfe:	887b      	ldrh	r3, [r7, #2]
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7f8 f97b 	bl	800fefc <lwip_htons>
 8017c06:	4603      	mov	r3, r0
 8017c08:	461a      	mov	r2, r3
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017c0e:	697b      	ldr	r3, [r7, #20]
 8017c10:	2200      	movs	r2, #0
 8017c12:	719a      	strb	r2, [r3, #6]
 8017c14:	2200      	movs	r2, #0
 8017c16:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017c18:	69fb      	ldr	r3, [r7, #28]
 8017c1a:	891b      	ldrh	r3, [r3, #8]
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7f8 f96d 	bl	800fefc <lwip_htons>
 8017c22:	4603      	mov	r3, r0
 8017c24:	461a      	mov	r2, r3
 8017c26:	697b      	ldr	r3, [r7, #20]
 8017c28:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017c2a:	2311      	movs	r3, #17
 8017c2c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	7adb      	ldrb	r3, [r3, #11]
 8017c32:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	7a9b      	ldrb	r3, [r3, #10]
 8017c38:	7cb9      	ldrb	r1, [r7, #18]
 8017c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017c3c:	9202      	str	r2, [sp, #8]
 8017c3e:	7cfa      	ldrb	r2, [r7, #19]
 8017c40:	9201      	str	r2, [sp, #4]
 8017c42:	9300      	str	r3, [sp, #0]
 8017c44:	460b      	mov	r3, r1
 8017c46:	687a      	ldr	r2, [r7, #4]
 8017c48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017c4a:	69f8      	ldr	r0, [r7, #28]
 8017c4c:	f001 fc54 	bl	80194f8 <ip4_output_if_src>
 8017c50:	4603      	mov	r3, r0
 8017c52:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017c54:	69fa      	ldr	r2, [r7, #28]
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d004      	beq.n	8017c66 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017c5c:	69f8      	ldr	r0, [r7, #28]
 8017c5e:	f7f9 fdff 	bl	8011860 <pbuf_free>
    q = NULL;
 8017c62:	2300      	movs	r3, #0
 8017c64:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017c66:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3720      	adds	r7, #32
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	0801d98c 	.word	0x0801d98c
 8017c78:	0801db78 	.word	0x0801db78
 8017c7c:	0801d9e0 	.word	0x0801d9e0
 8017c80:	0801db98 	.word	0x0801db98
 8017c84:	0801dbb8 	.word	0x0801dbb8
 8017c88:	0801dbdc 	.word	0x0801dbdc
 8017c8c:	0801dc00 	.word	0x0801dc00
 8017c90:	0801dc24 	.word	0x0801dc24

08017c94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b086      	sub	sp, #24
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	60f8      	str	r0, [r7, #12]
 8017c9c:	60b9      	str	r1, [r7, #8]
 8017c9e:	4613      	mov	r3, r2
 8017ca0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d101      	bne.n	8017cac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017ca8:	4b39      	ldr	r3, [pc, #228]	@ (8017d90 <udp_bind+0xfc>)
 8017caa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d109      	bne.n	8017cc6 <udp_bind+0x32>
 8017cb2:	4b38      	ldr	r3, [pc, #224]	@ (8017d94 <udp_bind+0x100>)
 8017cb4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8017cb8:	4937      	ldr	r1, [pc, #220]	@ (8017d98 <udp_bind+0x104>)
 8017cba:	4838      	ldr	r0, [pc, #224]	@ (8017d9c <udp_bind+0x108>)
 8017cbc:	f002 fe12 	bl	801a8e4 <iprintf>
 8017cc0:	f06f 030f 	mvn.w	r3, #15
 8017cc4:	e060      	b.n	8017d88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017cca:	4b35      	ldr	r3, [pc, #212]	@ (8017da0 <udp_bind+0x10c>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	617b      	str	r3, [r7, #20]
 8017cd0:	e009      	b.n	8017ce6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017cd2:	68fa      	ldr	r2, [r7, #12]
 8017cd4:	697b      	ldr	r3, [r7, #20]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d102      	bne.n	8017ce0 <udp_bind+0x4c>
      rebind = 1;
 8017cda:	2301      	movs	r3, #1
 8017cdc:	74fb      	strb	r3, [r7, #19]
      break;
 8017cde:	e005      	b.n	8017cec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017ce0:	697b      	ldr	r3, [r7, #20]
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	617b      	str	r3, [r7, #20]
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d1f2      	bne.n	8017cd2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017cec:	88fb      	ldrh	r3, [r7, #6]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d109      	bne.n	8017d06 <udp_bind+0x72>
    port = udp_new_port();
 8017cf2:	f7ff fc35 	bl	8017560 <udp_new_port>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017cfa:	88fb      	ldrh	r3, [r7, #6]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d12c      	bne.n	8017d5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017d00:	f06f 0307 	mvn.w	r3, #7
 8017d04:	e040      	b.n	8017d88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017d06:	4b26      	ldr	r3, [pc, #152]	@ (8017da0 <udp_bind+0x10c>)
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	617b      	str	r3, [r7, #20]
 8017d0c:	e022      	b.n	8017d54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017d0e:	68fa      	ldr	r2, [r7, #12]
 8017d10:	697b      	ldr	r3, [r7, #20]
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d01b      	beq.n	8017d4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017d16:	697b      	ldr	r3, [r7, #20]
 8017d18:	8a5b      	ldrh	r3, [r3, #18]
 8017d1a:	88fa      	ldrh	r2, [r7, #6]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d116      	bne.n	8017d4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017d20:	697b      	ldr	r3, [r7, #20]
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d00d      	beq.n	8017d48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d00a      	beq.n	8017d48 <udp_bind+0xb4>
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d006      	beq.n	8017d48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017d3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d003      	beq.n	8017d48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017d40:	697b      	ldr	r3, [r7, #20]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d102      	bne.n	8017d4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017d48:	f06f 0307 	mvn.w	r3, #7
 8017d4c:	e01c      	b.n	8017d88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017d4e:	697b      	ldr	r3, [r7, #20]
 8017d50:	68db      	ldr	r3, [r3, #12]
 8017d52:	617b      	str	r3, [r7, #20]
 8017d54:	697b      	ldr	r3, [r7, #20]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d1d9      	bne.n	8017d0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d002      	beq.n	8017d66 <udp_bind+0xd2>
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	e000      	b.n	8017d68 <udp_bind+0xd4>
 8017d66:	2300      	movs	r3, #0
 8017d68:	68fa      	ldr	r2, [r7, #12]
 8017d6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	88fa      	ldrh	r2, [r7, #6]
 8017d70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017d72:	7cfb      	ldrb	r3, [r7, #19]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d106      	bne.n	8017d86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017d78:	4b09      	ldr	r3, [pc, #36]	@ (8017da0 <udp_bind+0x10c>)
 8017d7a:	681a      	ldr	r2, [r3, #0]
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017d80:	4a07      	ldr	r2, [pc, #28]	@ (8017da0 <udp_bind+0x10c>)
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017d86:	2300      	movs	r3, #0
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	3718      	adds	r7, #24
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}
 8017d90:	0801e540 	.word	0x0801e540
 8017d94:	0801d98c 	.word	0x0801d98c
 8017d98:	0801dc54 	.word	0x0801dc54
 8017d9c:	0801d9e0 	.word	0x0801d9e0
 8017da0:	24014bd8 	.word	0x24014bd8

08017da4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b086      	sub	sp, #24
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	60b9      	str	r1, [r7, #8]
 8017dae:	4613      	mov	r3, r2
 8017db0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d109      	bne.n	8017dcc <udp_connect+0x28>
 8017db8:	4b2c      	ldr	r3, [pc, #176]	@ (8017e6c <udp_connect+0xc8>)
 8017dba:	f240 4235 	movw	r2, #1077	@ 0x435
 8017dbe:	492c      	ldr	r1, [pc, #176]	@ (8017e70 <udp_connect+0xcc>)
 8017dc0:	482c      	ldr	r0, [pc, #176]	@ (8017e74 <udp_connect+0xd0>)
 8017dc2:	f002 fd8f 	bl	801a8e4 <iprintf>
 8017dc6:	f06f 030f 	mvn.w	r3, #15
 8017dca:	e04b      	b.n	8017e64 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d109      	bne.n	8017de6 <udp_connect+0x42>
 8017dd2:	4b26      	ldr	r3, [pc, #152]	@ (8017e6c <udp_connect+0xc8>)
 8017dd4:	f240 4236 	movw	r2, #1078	@ 0x436
 8017dd8:	4927      	ldr	r1, [pc, #156]	@ (8017e78 <udp_connect+0xd4>)
 8017dda:	4826      	ldr	r0, [pc, #152]	@ (8017e74 <udp_connect+0xd0>)
 8017ddc:	f002 fd82 	bl	801a8e4 <iprintf>
 8017de0:	f06f 030f 	mvn.w	r3, #15
 8017de4:	e03e      	b.n	8017e64 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	8a5b      	ldrh	r3, [r3, #18]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d10f      	bne.n	8017e0e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017dee:	68f9      	ldr	r1, [r7, #12]
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	8a5b      	ldrh	r3, [r3, #18]
 8017df4:	461a      	mov	r2, r3
 8017df6:	68f8      	ldr	r0, [r7, #12]
 8017df8:	f7ff ff4c 	bl	8017c94 <udp_bind>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017e00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d002      	beq.n	8017e0e <udp_connect+0x6a>
      return err;
 8017e08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e0c:	e02a      	b.n	8017e64 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d002      	beq.n	8017e1a <udp_connect+0x76>
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	e000      	b.n	8017e1c <udp_connect+0x78>
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	68fa      	ldr	r2, [r7, #12]
 8017e1e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	88fa      	ldrh	r2, [r7, #6]
 8017e24:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	7c1b      	ldrb	r3, [r3, #16]
 8017e2a:	f043 0304 	orr.w	r3, r3, #4
 8017e2e:	b2da      	uxtb	r2, r3
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017e34:	4b11      	ldr	r3, [pc, #68]	@ (8017e7c <udp_connect+0xd8>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	617b      	str	r3, [r7, #20]
 8017e3a:	e008      	b.n	8017e4e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017e3c:	68fa      	ldr	r2, [r7, #12]
 8017e3e:	697b      	ldr	r3, [r7, #20]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d101      	bne.n	8017e48 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017e44:	2300      	movs	r3, #0
 8017e46:	e00d      	b.n	8017e64 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017e48:	697b      	ldr	r3, [r7, #20]
 8017e4a:	68db      	ldr	r3, [r3, #12]
 8017e4c:	617b      	str	r3, [r7, #20]
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d1f3      	bne.n	8017e3c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017e54:	4b09      	ldr	r3, [pc, #36]	@ (8017e7c <udp_connect+0xd8>)
 8017e56:	681a      	ldr	r2, [r3, #0]
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017e5c:	4a07      	ldr	r2, [pc, #28]	@ (8017e7c <udp_connect+0xd8>)
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017e62:	2300      	movs	r3, #0
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	3718      	adds	r7, #24
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	0801d98c 	.word	0x0801d98c
 8017e70:	0801dc6c 	.word	0x0801dc6c
 8017e74:	0801d9e0 	.word	0x0801d9e0
 8017e78:	0801dc88 	.word	0x0801dc88
 8017e7c:	24014bd8 	.word	0x24014bd8

08017e80 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017e86:	2001      	movs	r0, #1
 8017e88:	f7f8 fdc8 	bl	8010a1c <memp_malloc>
 8017e8c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d007      	beq.n	8017ea4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017e94:	2220      	movs	r2, #32
 8017e96:	2100      	movs	r1, #0
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f002 fd88 	bl	801a9ae <memset>
    pcb->ttl = UDP_TTL;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	22ff      	movs	r2, #255	@ 0xff
 8017ea2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017ea4:	687b      	ldr	r3, [r7, #4]
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3708      	adds	r7, #8
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}
	...

08017eb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017eb0:	b480      	push	{r7}
 8017eb2:	b085      	sub	sp, #20
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
 8017eb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d01e      	beq.n	8017efe <udp_netif_ip_addr_changed+0x4e>
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d01a      	beq.n	8017efe <udp_netif_ip_addr_changed+0x4e>
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d017      	beq.n	8017efe <udp_netif_ip_addr_changed+0x4e>
 8017ece:	683b      	ldr	r3, [r7, #0]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d013      	beq.n	8017efe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8017f0c <udp_netif_ip_addr_changed+0x5c>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	60fb      	str	r3, [r7, #12]
 8017edc:	e00c      	b.n	8017ef8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	681a      	ldr	r2, [r3, #0]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d103      	bne.n	8017ef2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017eea:	683b      	ldr	r3, [r7, #0]
 8017eec:	681a      	ldr	r2, [r3, #0]
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	68db      	ldr	r3, [r3, #12]
 8017ef6:	60fb      	str	r3, [r7, #12]
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d1ef      	bne.n	8017ede <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017efe:	bf00      	nop
 8017f00:	3714      	adds	r7, #20
 8017f02:	46bd      	mov	sp, r7
 8017f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f08:	4770      	bx	lr
 8017f0a:	bf00      	nop
 8017f0c:	24014bd8 	.word	0x24014bd8

08017f10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b082      	sub	sp, #8
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017f18:	4915      	ldr	r1, [pc, #84]	@ (8017f70 <etharp_free_entry+0x60>)
 8017f1a:	687a      	ldr	r2, [r7, #4]
 8017f1c:	4613      	mov	r3, r2
 8017f1e:	005b      	lsls	r3, r3, #1
 8017f20:	4413      	add	r3, r2
 8017f22:	00db      	lsls	r3, r3, #3
 8017f24:	440b      	add	r3, r1
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d013      	beq.n	8017f54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017f2c:	4910      	ldr	r1, [pc, #64]	@ (8017f70 <etharp_free_entry+0x60>)
 8017f2e:	687a      	ldr	r2, [r7, #4]
 8017f30:	4613      	mov	r3, r2
 8017f32:	005b      	lsls	r3, r3, #1
 8017f34:	4413      	add	r3, r2
 8017f36:	00db      	lsls	r3, r3, #3
 8017f38:	440b      	add	r3, r1
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7f9 fc8f 	bl	8011860 <pbuf_free>
    arp_table[i].q = NULL;
 8017f42:	490b      	ldr	r1, [pc, #44]	@ (8017f70 <etharp_free_entry+0x60>)
 8017f44:	687a      	ldr	r2, [r7, #4]
 8017f46:	4613      	mov	r3, r2
 8017f48:	005b      	lsls	r3, r3, #1
 8017f4a:	4413      	add	r3, r2
 8017f4c:	00db      	lsls	r3, r3, #3
 8017f4e:	440b      	add	r3, r1
 8017f50:	2200      	movs	r2, #0
 8017f52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017f54:	4906      	ldr	r1, [pc, #24]	@ (8017f70 <etharp_free_entry+0x60>)
 8017f56:	687a      	ldr	r2, [r7, #4]
 8017f58:	4613      	mov	r3, r2
 8017f5a:	005b      	lsls	r3, r3, #1
 8017f5c:	4413      	add	r3, r2
 8017f5e:	00db      	lsls	r3, r3, #3
 8017f60:	440b      	add	r3, r1
 8017f62:	3314      	adds	r3, #20
 8017f64:	2200      	movs	r2, #0
 8017f66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017f68:	bf00      	nop
 8017f6a:	3708      	adds	r7, #8
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}
 8017f70:	24014bdc 	.word	0x24014bdc

08017f74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b082      	sub	sp, #8
 8017f78:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	607b      	str	r3, [r7, #4]
 8017f7e:	e096      	b.n	80180ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017f80:	494f      	ldr	r1, [pc, #316]	@ (80180c0 <etharp_tmr+0x14c>)
 8017f82:	687a      	ldr	r2, [r7, #4]
 8017f84:	4613      	mov	r3, r2
 8017f86:	005b      	lsls	r3, r3, #1
 8017f88:	4413      	add	r3, r2
 8017f8a:	00db      	lsls	r3, r3, #3
 8017f8c:	440b      	add	r3, r1
 8017f8e:	3314      	adds	r3, #20
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017f94:	78fb      	ldrb	r3, [r7, #3]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	f000 8086 	beq.w	80180a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017f9c:	4948      	ldr	r1, [pc, #288]	@ (80180c0 <etharp_tmr+0x14c>)
 8017f9e:	687a      	ldr	r2, [r7, #4]
 8017fa0:	4613      	mov	r3, r2
 8017fa2:	005b      	lsls	r3, r3, #1
 8017fa4:	4413      	add	r3, r2
 8017fa6:	00db      	lsls	r3, r3, #3
 8017fa8:	440b      	add	r3, r1
 8017faa:	3312      	adds	r3, #18
 8017fac:	881b      	ldrh	r3, [r3, #0]
 8017fae:	3301      	adds	r3, #1
 8017fb0:	b298      	uxth	r0, r3
 8017fb2:	4943      	ldr	r1, [pc, #268]	@ (80180c0 <etharp_tmr+0x14c>)
 8017fb4:	687a      	ldr	r2, [r7, #4]
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	005b      	lsls	r3, r3, #1
 8017fba:	4413      	add	r3, r2
 8017fbc:	00db      	lsls	r3, r3, #3
 8017fbe:	440b      	add	r3, r1
 8017fc0:	3312      	adds	r3, #18
 8017fc2:	4602      	mov	r2, r0
 8017fc4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017fc6:	493e      	ldr	r1, [pc, #248]	@ (80180c0 <etharp_tmr+0x14c>)
 8017fc8:	687a      	ldr	r2, [r7, #4]
 8017fca:	4613      	mov	r3, r2
 8017fcc:	005b      	lsls	r3, r3, #1
 8017fce:	4413      	add	r3, r2
 8017fd0:	00db      	lsls	r3, r3, #3
 8017fd2:	440b      	add	r3, r1
 8017fd4:	3312      	adds	r3, #18
 8017fd6:	881b      	ldrh	r3, [r3, #0]
 8017fd8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8017fdc:	d215      	bcs.n	801800a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017fde:	4938      	ldr	r1, [pc, #224]	@ (80180c0 <etharp_tmr+0x14c>)
 8017fe0:	687a      	ldr	r2, [r7, #4]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	005b      	lsls	r3, r3, #1
 8017fe6:	4413      	add	r3, r2
 8017fe8:	00db      	lsls	r3, r3, #3
 8017fea:	440b      	add	r3, r1
 8017fec:	3314      	adds	r3, #20
 8017fee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017ff0:	2b01      	cmp	r3, #1
 8017ff2:	d10e      	bne.n	8018012 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017ff4:	4932      	ldr	r1, [pc, #200]	@ (80180c0 <etharp_tmr+0x14c>)
 8017ff6:	687a      	ldr	r2, [r7, #4]
 8017ff8:	4613      	mov	r3, r2
 8017ffa:	005b      	lsls	r3, r3, #1
 8017ffc:	4413      	add	r3, r2
 8017ffe:	00db      	lsls	r3, r3, #3
 8018000:	440b      	add	r3, r1
 8018002:	3312      	adds	r3, #18
 8018004:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018006:	2b04      	cmp	r3, #4
 8018008:	d903      	bls.n	8018012 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801800a:	6878      	ldr	r0, [r7, #4]
 801800c:	f7ff ff80 	bl	8017f10 <etharp_free_entry>
 8018010:	e04a      	b.n	80180a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018012:	492b      	ldr	r1, [pc, #172]	@ (80180c0 <etharp_tmr+0x14c>)
 8018014:	687a      	ldr	r2, [r7, #4]
 8018016:	4613      	mov	r3, r2
 8018018:	005b      	lsls	r3, r3, #1
 801801a:	4413      	add	r3, r2
 801801c:	00db      	lsls	r3, r3, #3
 801801e:	440b      	add	r3, r1
 8018020:	3314      	adds	r3, #20
 8018022:	781b      	ldrb	r3, [r3, #0]
 8018024:	2b03      	cmp	r3, #3
 8018026:	d10a      	bne.n	801803e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018028:	4925      	ldr	r1, [pc, #148]	@ (80180c0 <etharp_tmr+0x14c>)
 801802a:	687a      	ldr	r2, [r7, #4]
 801802c:	4613      	mov	r3, r2
 801802e:	005b      	lsls	r3, r3, #1
 8018030:	4413      	add	r3, r2
 8018032:	00db      	lsls	r3, r3, #3
 8018034:	440b      	add	r3, r1
 8018036:	3314      	adds	r3, #20
 8018038:	2204      	movs	r2, #4
 801803a:	701a      	strb	r2, [r3, #0]
 801803c:	e034      	b.n	80180a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801803e:	4920      	ldr	r1, [pc, #128]	@ (80180c0 <etharp_tmr+0x14c>)
 8018040:	687a      	ldr	r2, [r7, #4]
 8018042:	4613      	mov	r3, r2
 8018044:	005b      	lsls	r3, r3, #1
 8018046:	4413      	add	r3, r2
 8018048:	00db      	lsls	r3, r3, #3
 801804a:	440b      	add	r3, r1
 801804c:	3314      	adds	r3, #20
 801804e:	781b      	ldrb	r3, [r3, #0]
 8018050:	2b04      	cmp	r3, #4
 8018052:	d10a      	bne.n	801806a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018054:	491a      	ldr	r1, [pc, #104]	@ (80180c0 <etharp_tmr+0x14c>)
 8018056:	687a      	ldr	r2, [r7, #4]
 8018058:	4613      	mov	r3, r2
 801805a:	005b      	lsls	r3, r3, #1
 801805c:	4413      	add	r3, r2
 801805e:	00db      	lsls	r3, r3, #3
 8018060:	440b      	add	r3, r1
 8018062:	3314      	adds	r3, #20
 8018064:	2202      	movs	r2, #2
 8018066:	701a      	strb	r2, [r3, #0]
 8018068:	e01e      	b.n	80180a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801806a:	4915      	ldr	r1, [pc, #84]	@ (80180c0 <etharp_tmr+0x14c>)
 801806c:	687a      	ldr	r2, [r7, #4]
 801806e:	4613      	mov	r3, r2
 8018070:	005b      	lsls	r3, r3, #1
 8018072:	4413      	add	r3, r2
 8018074:	00db      	lsls	r3, r3, #3
 8018076:	440b      	add	r3, r1
 8018078:	3314      	adds	r3, #20
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	2b01      	cmp	r3, #1
 801807e:	d113      	bne.n	80180a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018080:	490f      	ldr	r1, [pc, #60]	@ (80180c0 <etharp_tmr+0x14c>)
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	4613      	mov	r3, r2
 8018086:	005b      	lsls	r3, r3, #1
 8018088:	4413      	add	r3, r2
 801808a:	00db      	lsls	r3, r3, #3
 801808c:	440b      	add	r3, r1
 801808e:	3308      	adds	r3, #8
 8018090:	6818      	ldr	r0, [r3, #0]
 8018092:	687a      	ldr	r2, [r7, #4]
 8018094:	4613      	mov	r3, r2
 8018096:	005b      	lsls	r3, r3, #1
 8018098:	4413      	add	r3, r2
 801809a:	00db      	lsls	r3, r3, #3
 801809c:	4a08      	ldr	r2, [pc, #32]	@ (80180c0 <etharp_tmr+0x14c>)
 801809e:	4413      	add	r3, r2
 80180a0:	3304      	adds	r3, #4
 80180a2:	4619      	mov	r1, r3
 80180a4:	f000 fe6e 	bl	8018d84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	3301      	adds	r3, #1
 80180ac:	607b      	str	r3, [r7, #4]
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	2b09      	cmp	r3, #9
 80180b2:	f77f af65 	ble.w	8017f80 <etharp_tmr+0xc>
      }
    }
  }
}
 80180b6:	bf00      	nop
 80180b8:	bf00      	nop
 80180ba:	3708      	adds	r7, #8
 80180bc:	46bd      	mov	sp, r7
 80180be:	bd80      	pop	{r7, pc}
 80180c0:	24014bdc 	.word	0x24014bdc

080180c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b08a      	sub	sp, #40	@ 0x28
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	60f8      	str	r0, [r7, #12]
 80180cc:	460b      	mov	r3, r1
 80180ce:	607a      	str	r2, [r7, #4]
 80180d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80180d2:	230a      	movs	r3, #10
 80180d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80180d6:	230a      	movs	r3, #10
 80180d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80180da:	230a      	movs	r3, #10
 80180dc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80180de:	2300      	movs	r3, #0
 80180e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80180e2:	230a      	movs	r3, #10
 80180e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80180e6:	2300      	movs	r3, #0
 80180e8:	83bb      	strh	r3, [r7, #28]
 80180ea:	2300      	movs	r3, #0
 80180ec:	837b      	strh	r3, [r7, #26]
 80180ee:	2300      	movs	r3, #0
 80180f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80180f2:	2300      	movs	r3, #0
 80180f4:	843b      	strh	r3, [r7, #32]
 80180f6:	e0ae      	b.n	8018256 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80180f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80180fc:	49a6      	ldr	r1, [pc, #664]	@ (8018398 <etharp_find_entry+0x2d4>)
 80180fe:	4613      	mov	r3, r2
 8018100:	005b      	lsls	r3, r3, #1
 8018102:	4413      	add	r3, r2
 8018104:	00db      	lsls	r3, r3, #3
 8018106:	440b      	add	r3, r1
 8018108:	3314      	adds	r3, #20
 801810a:	781b      	ldrb	r3, [r3, #0]
 801810c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801810e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018112:	2b0a      	cmp	r3, #10
 8018114:	d105      	bne.n	8018122 <etharp_find_entry+0x5e>
 8018116:	7dfb      	ldrb	r3, [r7, #23]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d102      	bne.n	8018122 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801811c:	8c3b      	ldrh	r3, [r7, #32]
 801811e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8018120:	e095      	b.n	801824e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018122:	7dfb      	ldrb	r3, [r7, #23]
 8018124:	2b00      	cmp	r3, #0
 8018126:	f000 8092 	beq.w	801824e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801812a:	7dfb      	ldrb	r3, [r7, #23]
 801812c:	2b01      	cmp	r3, #1
 801812e:	d009      	beq.n	8018144 <etharp_find_entry+0x80>
 8018130:	7dfb      	ldrb	r3, [r7, #23]
 8018132:	2b01      	cmp	r3, #1
 8018134:	d806      	bhi.n	8018144 <etharp_find_entry+0x80>
 8018136:	4b99      	ldr	r3, [pc, #612]	@ (801839c <etharp_find_entry+0x2d8>)
 8018138:	f240 1223 	movw	r2, #291	@ 0x123
 801813c:	4998      	ldr	r1, [pc, #608]	@ (80183a0 <etharp_find_entry+0x2dc>)
 801813e:	4899      	ldr	r0, [pc, #612]	@ (80183a4 <etharp_find_entry+0x2e0>)
 8018140:	f002 fbd0 	bl	801a8e4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d020      	beq.n	801818c <etharp_find_entry+0xc8>
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	6819      	ldr	r1, [r3, #0]
 801814e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018152:	4891      	ldr	r0, [pc, #580]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018154:	4613      	mov	r3, r2
 8018156:	005b      	lsls	r3, r3, #1
 8018158:	4413      	add	r3, r2
 801815a:	00db      	lsls	r3, r3, #3
 801815c:	4403      	add	r3, r0
 801815e:	3304      	adds	r3, #4
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	4299      	cmp	r1, r3
 8018164:	d112      	bne.n	801818c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d00c      	beq.n	8018186 <etharp_find_entry+0xc2>
 801816c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018170:	4989      	ldr	r1, [pc, #548]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018172:	4613      	mov	r3, r2
 8018174:	005b      	lsls	r3, r3, #1
 8018176:	4413      	add	r3, r2
 8018178:	00db      	lsls	r3, r3, #3
 801817a:	440b      	add	r3, r1
 801817c:	3308      	adds	r3, #8
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	687a      	ldr	r2, [r7, #4]
 8018182:	429a      	cmp	r2, r3
 8018184:	d102      	bne.n	801818c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018186:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801818a:	e100      	b.n	801838e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801818c:	7dfb      	ldrb	r3, [r7, #23]
 801818e:	2b01      	cmp	r3, #1
 8018190:	d140      	bne.n	8018214 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018196:	4980      	ldr	r1, [pc, #512]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018198:	4613      	mov	r3, r2
 801819a:	005b      	lsls	r3, r3, #1
 801819c:	4413      	add	r3, r2
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	440b      	add	r3, r1
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d01a      	beq.n	80181de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80181a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181ac:	497a      	ldr	r1, [pc, #488]	@ (8018398 <etharp_find_entry+0x2d4>)
 80181ae:	4613      	mov	r3, r2
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	4413      	add	r3, r2
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	440b      	add	r3, r1
 80181b8:	3312      	adds	r3, #18
 80181ba:	881b      	ldrh	r3, [r3, #0]
 80181bc:	8bba      	ldrh	r2, [r7, #28]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d845      	bhi.n	801824e <etharp_find_entry+0x18a>
            old_queue = i;
 80181c2:	8c3b      	ldrh	r3, [r7, #32]
 80181c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80181c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181ca:	4973      	ldr	r1, [pc, #460]	@ (8018398 <etharp_find_entry+0x2d4>)
 80181cc:	4613      	mov	r3, r2
 80181ce:	005b      	lsls	r3, r3, #1
 80181d0:	4413      	add	r3, r2
 80181d2:	00db      	lsls	r3, r3, #3
 80181d4:	440b      	add	r3, r1
 80181d6:	3312      	adds	r3, #18
 80181d8:	881b      	ldrh	r3, [r3, #0]
 80181da:	83bb      	strh	r3, [r7, #28]
 80181dc:	e037      	b.n	801824e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80181de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181e2:	496d      	ldr	r1, [pc, #436]	@ (8018398 <etharp_find_entry+0x2d4>)
 80181e4:	4613      	mov	r3, r2
 80181e6:	005b      	lsls	r3, r3, #1
 80181e8:	4413      	add	r3, r2
 80181ea:	00db      	lsls	r3, r3, #3
 80181ec:	440b      	add	r3, r1
 80181ee:	3312      	adds	r3, #18
 80181f0:	881b      	ldrh	r3, [r3, #0]
 80181f2:	8b7a      	ldrh	r2, [r7, #26]
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d82a      	bhi.n	801824e <etharp_find_entry+0x18a>
            old_pending = i;
 80181f8:	8c3b      	ldrh	r3, [r7, #32]
 80181fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80181fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018200:	4965      	ldr	r1, [pc, #404]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018202:	4613      	mov	r3, r2
 8018204:	005b      	lsls	r3, r3, #1
 8018206:	4413      	add	r3, r2
 8018208:	00db      	lsls	r3, r3, #3
 801820a:	440b      	add	r3, r1
 801820c:	3312      	adds	r3, #18
 801820e:	881b      	ldrh	r3, [r3, #0]
 8018210:	837b      	strh	r3, [r7, #26]
 8018212:	e01c      	b.n	801824e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018214:	7dfb      	ldrb	r3, [r7, #23]
 8018216:	2b01      	cmp	r3, #1
 8018218:	d919      	bls.n	801824e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801821a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801821e:	495e      	ldr	r1, [pc, #376]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018220:	4613      	mov	r3, r2
 8018222:	005b      	lsls	r3, r3, #1
 8018224:	4413      	add	r3, r2
 8018226:	00db      	lsls	r3, r3, #3
 8018228:	440b      	add	r3, r1
 801822a:	3312      	adds	r3, #18
 801822c:	881b      	ldrh	r3, [r3, #0]
 801822e:	8b3a      	ldrh	r2, [r7, #24]
 8018230:	429a      	cmp	r2, r3
 8018232:	d80c      	bhi.n	801824e <etharp_find_entry+0x18a>
            old_stable = i;
 8018234:	8c3b      	ldrh	r3, [r7, #32]
 8018236:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8018238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801823c:	4956      	ldr	r1, [pc, #344]	@ (8018398 <etharp_find_entry+0x2d4>)
 801823e:	4613      	mov	r3, r2
 8018240:	005b      	lsls	r3, r3, #1
 8018242:	4413      	add	r3, r2
 8018244:	00db      	lsls	r3, r3, #3
 8018246:	440b      	add	r3, r1
 8018248:	3312      	adds	r3, #18
 801824a:	881b      	ldrh	r3, [r3, #0]
 801824c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801824e:	8c3b      	ldrh	r3, [r7, #32]
 8018250:	3301      	adds	r3, #1
 8018252:	b29b      	uxth	r3, r3
 8018254:	843b      	strh	r3, [r7, #32]
 8018256:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801825a:	2b09      	cmp	r3, #9
 801825c:	f77f af4c 	ble.w	80180f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018260:	7afb      	ldrb	r3, [r7, #11]
 8018262:	f003 0302 	and.w	r3, r3, #2
 8018266:	2b00      	cmp	r3, #0
 8018268:	d108      	bne.n	801827c <etharp_find_entry+0x1b8>
 801826a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801826e:	2b0a      	cmp	r3, #10
 8018270:	d107      	bne.n	8018282 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018272:	7afb      	ldrb	r3, [r7, #11]
 8018274:	f003 0301 	and.w	r3, r3, #1
 8018278:	2b00      	cmp	r3, #0
 801827a:	d102      	bne.n	8018282 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801827c:	f04f 33ff 	mov.w	r3, #4294967295
 8018280:	e085      	b.n	801838e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018282:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018286:	2b09      	cmp	r3, #9
 8018288:	dc02      	bgt.n	8018290 <etharp_find_entry+0x1cc>
    i = empty;
 801828a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801828c:	843b      	strh	r3, [r7, #32]
 801828e:	e039      	b.n	8018304 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018290:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018294:	2b09      	cmp	r3, #9
 8018296:	dc14      	bgt.n	80182c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801829a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801829c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182a0:	493d      	ldr	r1, [pc, #244]	@ (8018398 <etharp_find_entry+0x2d4>)
 80182a2:	4613      	mov	r3, r2
 80182a4:	005b      	lsls	r3, r3, #1
 80182a6:	4413      	add	r3, r2
 80182a8:	00db      	lsls	r3, r3, #3
 80182aa:	440b      	add	r3, r1
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d018      	beq.n	80182e4 <etharp_find_entry+0x220>
 80182b2:	4b3a      	ldr	r3, [pc, #232]	@ (801839c <etharp_find_entry+0x2d8>)
 80182b4:	f240 126d 	movw	r2, #365	@ 0x16d
 80182b8:	493b      	ldr	r1, [pc, #236]	@ (80183a8 <etharp_find_entry+0x2e4>)
 80182ba:	483a      	ldr	r0, [pc, #232]	@ (80183a4 <etharp_find_entry+0x2e0>)
 80182bc:	f002 fb12 	bl	801a8e4 <iprintf>
 80182c0:	e010      	b.n	80182e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80182c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80182c6:	2b09      	cmp	r3, #9
 80182c8:	dc02      	bgt.n	80182d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80182ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80182cc:	843b      	strh	r3, [r7, #32]
 80182ce:	e009      	b.n	80182e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80182d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80182d4:	2b09      	cmp	r3, #9
 80182d6:	dc02      	bgt.n	80182de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80182d8:	8bfb      	ldrh	r3, [r7, #30]
 80182da:	843b      	strh	r3, [r7, #32]
 80182dc:	e002      	b.n	80182e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80182de:	f04f 33ff 	mov.w	r3, #4294967295
 80182e2:	e054      	b.n	801838e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80182e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182e8:	2b09      	cmp	r3, #9
 80182ea:	dd06      	ble.n	80182fa <etharp_find_entry+0x236>
 80182ec:	4b2b      	ldr	r3, [pc, #172]	@ (801839c <etharp_find_entry+0x2d8>)
 80182ee:	f240 127f 	movw	r2, #383	@ 0x17f
 80182f2:	492e      	ldr	r1, [pc, #184]	@ (80183ac <etharp_find_entry+0x2e8>)
 80182f4:	482b      	ldr	r0, [pc, #172]	@ (80183a4 <etharp_find_entry+0x2e0>)
 80182f6:	f002 faf5 	bl	801a8e4 <iprintf>
    etharp_free_entry(i);
 80182fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182fe:	4618      	mov	r0, r3
 8018300:	f7ff fe06 	bl	8017f10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018304:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018308:	2b09      	cmp	r3, #9
 801830a:	dd06      	ble.n	801831a <etharp_find_entry+0x256>
 801830c:	4b23      	ldr	r3, [pc, #140]	@ (801839c <etharp_find_entry+0x2d8>)
 801830e:	f240 1283 	movw	r2, #387	@ 0x183
 8018312:	4926      	ldr	r1, [pc, #152]	@ (80183ac <etharp_find_entry+0x2e8>)
 8018314:	4823      	ldr	r0, [pc, #140]	@ (80183a4 <etharp_find_entry+0x2e0>)
 8018316:	f002 fae5 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801831a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801831e:	491e      	ldr	r1, [pc, #120]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018320:	4613      	mov	r3, r2
 8018322:	005b      	lsls	r3, r3, #1
 8018324:	4413      	add	r3, r2
 8018326:	00db      	lsls	r3, r3, #3
 8018328:	440b      	add	r3, r1
 801832a:	3314      	adds	r3, #20
 801832c:	781b      	ldrb	r3, [r3, #0]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d006      	beq.n	8018340 <etharp_find_entry+0x27c>
 8018332:	4b1a      	ldr	r3, [pc, #104]	@ (801839c <etharp_find_entry+0x2d8>)
 8018334:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018338:	491d      	ldr	r1, [pc, #116]	@ (80183b0 <etharp_find_entry+0x2ec>)
 801833a:	481a      	ldr	r0, [pc, #104]	@ (80183a4 <etharp_find_entry+0x2e0>)
 801833c:	f002 fad2 	bl	801a8e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d00b      	beq.n	801835e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	6819      	ldr	r1, [r3, #0]
 801834e:	4812      	ldr	r0, [pc, #72]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018350:	4613      	mov	r3, r2
 8018352:	005b      	lsls	r3, r3, #1
 8018354:	4413      	add	r3, r2
 8018356:	00db      	lsls	r3, r3, #3
 8018358:	4403      	add	r3, r0
 801835a:	3304      	adds	r3, #4
 801835c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801835e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018362:	490d      	ldr	r1, [pc, #52]	@ (8018398 <etharp_find_entry+0x2d4>)
 8018364:	4613      	mov	r3, r2
 8018366:	005b      	lsls	r3, r3, #1
 8018368:	4413      	add	r3, r2
 801836a:	00db      	lsls	r3, r3, #3
 801836c:	440b      	add	r3, r1
 801836e:	3312      	adds	r3, #18
 8018370:	2200      	movs	r2, #0
 8018372:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018378:	4907      	ldr	r1, [pc, #28]	@ (8018398 <etharp_find_entry+0x2d4>)
 801837a:	4613      	mov	r3, r2
 801837c:	005b      	lsls	r3, r3, #1
 801837e:	4413      	add	r3, r2
 8018380:	00db      	lsls	r3, r3, #3
 8018382:	440b      	add	r3, r1
 8018384:	3308      	adds	r3, #8
 8018386:	687a      	ldr	r2, [r7, #4]
 8018388:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801838a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801838e:	4618      	mov	r0, r3
 8018390:	3728      	adds	r7, #40	@ 0x28
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}
 8018396:	bf00      	nop
 8018398:	24014bdc 	.word	0x24014bdc
 801839c:	0801dcf0 	.word	0x0801dcf0
 80183a0:	0801dd28 	.word	0x0801dd28
 80183a4:	0801dd68 	.word	0x0801dd68
 80183a8:	0801dd90 	.word	0x0801dd90
 80183ac:	0801dda8 	.word	0x0801dda8
 80183b0:	0801ddbc 	.word	0x0801ddbc

080183b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b088      	sub	sp, #32
 80183b8:	af02      	add	r7, sp, #8
 80183ba:	60f8      	str	r0, [r7, #12]
 80183bc:	60b9      	str	r1, [r7, #8]
 80183be:	607a      	str	r2, [r7, #4]
 80183c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80183c8:	2b06      	cmp	r3, #6
 80183ca:	d006      	beq.n	80183da <etharp_update_arp_entry+0x26>
 80183cc:	4b48      	ldr	r3, [pc, #288]	@ (80184f0 <etharp_update_arp_entry+0x13c>)
 80183ce:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80183d2:	4948      	ldr	r1, [pc, #288]	@ (80184f4 <etharp_update_arp_entry+0x140>)
 80183d4:	4848      	ldr	r0, [pc, #288]	@ (80184f8 <etharp_update_arp_entry+0x144>)
 80183d6:	f002 fa85 	bl	801a8e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d012      	beq.n	8018406 <etharp_update_arp_entry+0x52>
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d00e      	beq.n	8018406 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80183e8:	68bb      	ldr	r3, [r7, #8]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	68f9      	ldr	r1, [r7, #12]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f001 f930 	bl	8019654 <ip4_addr_isbroadcast_u32>
 80183f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d105      	bne.n	8018406 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80183fa:	68bb      	ldr	r3, [r7, #8]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018402:	2be0      	cmp	r3, #224	@ 0xe0
 8018404:	d102      	bne.n	801840c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018406:	f06f 030f 	mvn.w	r3, #15
 801840a:	e06c      	b.n	80184e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801840c:	78fb      	ldrb	r3, [r7, #3]
 801840e:	68fa      	ldr	r2, [r7, #12]
 8018410:	4619      	mov	r1, r3
 8018412:	68b8      	ldr	r0, [r7, #8]
 8018414:	f7ff fe56 	bl	80180c4 <etharp_find_entry>
 8018418:	4603      	mov	r3, r0
 801841a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801841c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018420:	2b00      	cmp	r3, #0
 8018422:	da02      	bge.n	801842a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018424:	8afb      	ldrh	r3, [r7, #22]
 8018426:	b25b      	sxtb	r3, r3
 8018428:	e05d      	b.n	80184e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801842a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801842e:	4933      	ldr	r1, [pc, #204]	@ (80184fc <etharp_update_arp_entry+0x148>)
 8018430:	4613      	mov	r3, r2
 8018432:	005b      	lsls	r3, r3, #1
 8018434:	4413      	add	r3, r2
 8018436:	00db      	lsls	r3, r3, #3
 8018438:	440b      	add	r3, r1
 801843a:	3314      	adds	r3, #20
 801843c:	2202      	movs	r2, #2
 801843e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018440:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018444:	492d      	ldr	r1, [pc, #180]	@ (80184fc <etharp_update_arp_entry+0x148>)
 8018446:	4613      	mov	r3, r2
 8018448:	005b      	lsls	r3, r3, #1
 801844a:	4413      	add	r3, r2
 801844c:	00db      	lsls	r3, r3, #3
 801844e:	440b      	add	r3, r1
 8018450:	3308      	adds	r3, #8
 8018452:	68fa      	ldr	r2, [r7, #12]
 8018454:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018456:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801845a:	4613      	mov	r3, r2
 801845c:	005b      	lsls	r3, r3, #1
 801845e:	4413      	add	r3, r2
 8018460:	00db      	lsls	r3, r3, #3
 8018462:	3308      	adds	r3, #8
 8018464:	4a25      	ldr	r2, [pc, #148]	@ (80184fc <etharp_update_arp_entry+0x148>)
 8018466:	4413      	add	r3, r2
 8018468:	3304      	adds	r3, #4
 801846a:	2206      	movs	r2, #6
 801846c:	6879      	ldr	r1, [r7, #4]
 801846e:	4618      	mov	r0, r3
 8018470:	f002 fb71 	bl	801ab56 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018478:	4920      	ldr	r1, [pc, #128]	@ (80184fc <etharp_update_arp_entry+0x148>)
 801847a:	4613      	mov	r3, r2
 801847c:	005b      	lsls	r3, r3, #1
 801847e:	4413      	add	r3, r2
 8018480:	00db      	lsls	r3, r3, #3
 8018482:	440b      	add	r3, r1
 8018484:	3312      	adds	r3, #18
 8018486:	2200      	movs	r2, #0
 8018488:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801848a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801848e:	491b      	ldr	r1, [pc, #108]	@ (80184fc <etharp_update_arp_entry+0x148>)
 8018490:	4613      	mov	r3, r2
 8018492:	005b      	lsls	r3, r3, #1
 8018494:	4413      	add	r3, r2
 8018496:	00db      	lsls	r3, r3, #3
 8018498:	440b      	add	r3, r1
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d021      	beq.n	80184e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80184a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80184a4:	4915      	ldr	r1, [pc, #84]	@ (80184fc <etharp_update_arp_entry+0x148>)
 80184a6:	4613      	mov	r3, r2
 80184a8:	005b      	lsls	r3, r3, #1
 80184aa:	4413      	add	r3, r2
 80184ac:	00db      	lsls	r3, r3, #3
 80184ae:	440b      	add	r3, r1
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80184b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80184b8:	4910      	ldr	r1, [pc, #64]	@ (80184fc <etharp_update_arp_entry+0x148>)
 80184ba:	4613      	mov	r3, r2
 80184bc:	005b      	lsls	r3, r3, #1
 80184be:	4413      	add	r3, r2
 80184c0:	00db      	lsls	r3, r3, #3
 80184c2:	440b      	add	r3, r1
 80184c4:	2200      	movs	r2, #0
 80184c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80184ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80184d2:	9300      	str	r3, [sp, #0]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6939      	ldr	r1, [r7, #16]
 80184d8:	68f8      	ldr	r0, [r7, #12]
 80184da:	f001 ffc9 	bl	801a470 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80184de:	6938      	ldr	r0, [r7, #16]
 80184e0:	f7f9 f9be 	bl	8011860 <pbuf_free>
  }
  return ERR_OK;
 80184e4:	2300      	movs	r3, #0
}
 80184e6:	4618      	mov	r0, r3
 80184e8:	3718      	adds	r7, #24
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bd80      	pop	{r7, pc}
 80184ee:	bf00      	nop
 80184f0:	0801dcf0 	.word	0x0801dcf0
 80184f4:	0801dde8 	.word	0x0801dde8
 80184f8:	0801dd68 	.word	0x0801dd68
 80184fc:	24014bdc 	.word	0x24014bdc

08018500 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b084      	sub	sp, #16
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018508:	2300      	movs	r3, #0
 801850a:	60fb      	str	r3, [r7, #12]
 801850c:	e01e      	b.n	801854c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801850e:	4913      	ldr	r1, [pc, #76]	@ (801855c <etharp_cleanup_netif+0x5c>)
 8018510:	68fa      	ldr	r2, [r7, #12]
 8018512:	4613      	mov	r3, r2
 8018514:	005b      	lsls	r3, r3, #1
 8018516:	4413      	add	r3, r2
 8018518:	00db      	lsls	r3, r3, #3
 801851a:	440b      	add	r3, r1
 801851c:	3314      	adds	r3, #20
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018522:	7afb      	ldrb	r3, [r7, #11]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d00e      	beq.n	8018546 <etharp_cleanup_netif+0x46>
 8018528:	490c      	ldr	r1, [pc, #48]	@ (801855c <etharp_cleanup_netif+0x5c>)
 801852a:	68fa      	ldr	r2, [r7, #12]
 801852c:	4613      	mov	r3, r2
 801852e:	005b      	lsls	r3, r3, #1
 8018530:	4413      	add	r3, r2
 8018532:	00db      	lsls	r3, r3, #3
 8018534:	440b      	add	r3, r1
 8018536:	3308      	adds	r3, #8
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	687a      	ldr	r2, [r7, #4]
 801853c:	429a      	cmp	r2, r3
 801853e:	d102      	bne.n	8018546 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018540:	68f8      	ldr	r0, [r7, #12]
 8018542:	f7ff fce5 	bl	8017f10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	3301      	adds	r3, #1
 801854a:	60fb      	str	r3, [r7, #12]
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2b09      	cmp	r3, #9
 8018550:	dddd      	ble.n	801850e <etharp_cleanup_netif+0xe>
    }
  }
}
 8018552:	bf00      	nop
 8018554:	bf00      	nop
 8018556:	3710      	adds	r7, #16
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	24014bdc 	.word	0x24014bdc

08018560 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018560:	b5b0      	push	{r4, r5, r7, lr}
 8018562:	b08a      	sub	sp, #40	@ 0x28
 8018564:	af04      	add	r7, sp, #16
 8018566:	6078      	str	r0, [r7, #4]
 8018568:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d107      	bne.n	8018580 <etharp_input+0x20>
 8018570:	4b3d      	ldr	r3, [pc, #244]	@ (8018668 <etharp_input+0x108>)
 8018572:	f240 228a 	movw	r2, #650	@ 0x28a
 8018576:	493d      	ldr	r1, [pc, #244]	@ (801866c <etharp_input+0x10c>)
 8018578:	483d      	ldr	r0, [pc, #244]	@ (8018670 <etharp_input+0x110>)
 801857a:	f002 f9b3 	bl	801a8e4 <iprintf>
 801857e:	e06f      	b.n	8018660 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	685b      	ldr	r3, [r3, #4]
 8018584:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018586:	693b      	ldr	r3, [r7, #16]
 8018588:	881b      	ldrh	r3, [r3, #0]
 801858a:	b29b      	uxth	r3, r3
 801858c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018590:	d10c      	bne.n	80185ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018592:	693b      	ldr	r3, [r7, #16]
 8018594:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018596:	2b06      	cmp	r3, #6
 8018598:	d108      	bne.n	80185ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801859a:	693b      	ldr	r3, [r7, #16]
 801859c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801859e:	2b04      	cmp	r3, #4
 80185a0:	d104      	bne.n	80185ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80185a2:	693b      	ldr	r3, [r7, #16]
 80185a4:	885b      	ldrh	r3, [r3, #2]
 80185a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80185a8:	2b08      	cmp	r3, #8
 80185aa:	d003      	beq.n	80185b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80185ac:	6878      	ldr	r0, [r7, #4]
 80185ae:	f7f9 f957 	bl	8011860 <pbuf_free>
    return;
 80185b2:	e055      	b.n	8018660 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80185b4:	693b      	ldr	r3, [r7, #16]
 80185b6:	330e      	adds	r3, #14
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80185bc:	693b      	ldr	r3, [r7, #16]
 80185be:	3318      	adds	r3, #24
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	3304      	adds	r3, #4
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d102      	bne.n	80185d4 <etharp_input+0x74>
    for_us = 0;
 80185ce:	2300      	movs	r3, #0
 80185d0:	75fb      	strb	r3, [r7, #23]
 80185d2:	e009      	b.n	80185e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80185d4:	68ba      	ldr	r2, [r7, #8]
 80185d6:	683b      	ldr	r3, [r7, #0]
 80185d8:	3304      	adds	r3, #4
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	429a      	cmp	r2, r3
 80185de:	bf0c      	ite	eq
 80185e0:	2301      	moveq	r3, #1
 80185e2:	2300      	movne	r3, #0
 80185e4:	b2db      	uxtb	r3, r3
 80185e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80185e8:	693b      	ldr	r3, [r7, #16]
 80185ea:	f103 0208 	add.w	r2, r3, #8
 80185ee:	7dfb      	ldrb	r3, [r7, #23]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d001      	beq.n	80185f8 <etharp_input+0x98>
 80185f4:	2301      	movs	r3, #1
 80185f6:	e000      	b.n	80185fa <etharp_input+0x9a>
 80185f8:	2302      	movs	r3, #2
 80185fa:	f107 010c 	add.w	r1, r7, #12
 80185fe:	6838      	ldr	r0, [r7, #0]
 8018600:	f7ff fed8 	bl	80183b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	88db      	ldrh	r3, [r3, #6]
 8018608:	b29b      	uxth	r3, r3
 801860a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801860e:	d003      	beq.n	8018618 <etharp_input+0xb8>
 8018610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018614:	d01e      	beq.n	8018654 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018616:	e020      	b.n	801865a <etharp_input+0xfa>
      if (for_us) {
 8018618:	7dfb      	ldrb	r3, [r7, #23]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d01c      	beq.n	8018658 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8018624:	693b      	ldr	r3, [r7, #16]
 8018626:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018634:	693a      	ldr	r2, [r7, #16]
 8018636:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018638:	2102      	movs	r1, #2
 801863a:	9103      	str	r1, [sp, #12]
 801863c:	f107 010c 	add.w	r1, r7, #12
 8018640:	9102      	str	r1, [sp, #8]
 8018642:	9201      	str	r2, [sp, #4]
 8018644:	9300      	str	r3, [sp, #0]
 8018646:	462b      	mov	r3, r5
 8018648:	4622      	mov	r2, r4
 801864a:	4601      	mov	r1, r0
 801864c:	6838      	ldr	r0, [r7, #0]
 801864e:	f000 faeb 	bl	8018c28 <etharp_raw>
      break;
 8018652:	e001      	b.n	8018658 <etharp_input+0xf8>
      break;
 8018654:	bf00      	nop
 8018656:	e000      	b.n	801865a <etharp_input+0xfa>
      break;
 8018658:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801865a:	6878      	ldr	r0, [r7, #4]
 801865c:	f7f9 f900 	bl	8011860 <pbuf_free>
}
 8018660:	3718      	adds	r7, #24
 8018662:	46bd      	mov	sp, r7
 8018664:	bdb0      	pop	{r4, r5, r7, pc}
 8018666:	bf00      	nop
 8018668:	0801dcf0 	.word	0x0801dcf0
 801866c:	0801de40 	.word	0x0801de40
 8018670:	0801dd68 	.word	0x0801dd68

08018674 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b086      	sub	sp, #24
 8018678:	af02      	add	r7, sp, #8
 801867a:	60f8      	str	r0, [r7, #12]
 801867c:	60b9      	str	r1, [r7, #8]
 801867e:	4613      	mov	r3, r2
 8018680:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018682:	79fa      	ldrb	r2, [r7, #7]
 8018684:	4944      	ldr	r1, [pc, #272]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 8018686:	4613      	mov	r3, r2
 8018688:	005b      	lsls	r3, r3, #1
 801868a:	4413      	add	r3, r2
 801868c:	00db      	lsls	r3, r3, #3
 801868e:	440b      	add	r3, r1
 8018690:	3314      	adds	r3, #20
 8018692:	781b      	ldrb	r3, [r3, #0]
 8018694:	2b01      	cmp	r3, #1
 8018696:	d806      	bhi.n	80186a6 <etharp_output_to_arp_index+0x32>
 8018698:	4b40      	ldr	r3, [pc, #256]	@ (801879c <etharp_output_to_arp_index+0x128>)
 801869a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801869e:	4940      	ldr	r1, [pc, #256]	@ (80187a0 <etharp_output_to_arp_index+0x12c>)
 80186a0:	4840      	ldr	r0, [pc, #256]	@ (80187a4 <etharp_output_to_arp_index+0x130>)
 80186a2:	f002 f91f 	bl	801a8e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80186a6:	79fa      	ldrb	r2, [r7, #7]
 80186a8:	493b      	ldr	r1, [pc, #236]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 80186aa:	4613      	mov	r3, r2
 80186ac:	005b      	lsls	r3, r3, #1
 80186ae:	4413      	add	r3, r2
 80186b0:	00db      	lsls	r3, r3, #3
 80186b2:	440b      	add	r3, r1
 80186b4:	3314      	adds	r3, #20
 80186b6:	781b      	ldrb	r3, [r3, #0]
 80186b8:	2b02      	cmp	r3, #2
 80186ba:	d153      	bne.n	8018764 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80186bc:	79fa      	ldrb	r2, [r7, #7]
 80186be:	4936      	ldr	r1, [pc, #216]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 80186c0:	4613      	mov	r3, r2
 80186c2:	005b      	lsls	r3, r3, #1
 80186c4:	4413      	add	r3, r2
 80186c6:	00db      	lsls	r3, r3, #3
 80186c8:	440b      	add	r3, r1
 80186ca:	3312      	adds	r3, #18
 80186cc:	881b      	ldrh	r3, [r3, #0]
 80186ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80186d2:	d919      	bls.n	8018708 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80186d4:	79fa      	ldrb	r2, [r7, #7]
 80186d6:	4613      	mov	r3, r2
 80186d8:	005b      	lsls	r3, r3, #1
 80186da:	4413      	add	r3, r2
 80186dc:	00db      	lsls	r3, r3, #3
 80186de:	4a2e      	ldr	r2, [pc, #184]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 80186e0:	4413      	add	r3, r2
 80186e2:	3304      	adds	r3, #4
 80186e4:	4619      	mov	r1, r3
 80186e6:	68f8      	ldr	r0, [r7, #12]
 80186e8:	f000 fb4c 	bl	8018d84 <etharp_request>
 80186ec:	4603      	mov	r3, r0
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d138      	bne.n	8018764 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80186f2:	79fa      	ldrb	r2, [r7, #7]
 80186f4:	4928      	ldr	r1, [pc, #160]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 80186f6:	4613      	mov	r3, r2
 80186f8:	005b      	lsls	r3, r3, #1
 80186fa:	4413      	add	r3, r2
 80186fc:	00db      	lsls	r3, r3, #3
 80186fe:	440b      	add	r3, r1
 8018700:	3314      	adds	r3, #20
 8018702:	2203      	movs	r2, #3
 8018704:	701a      	strb	r2, [r3, #0]
 8018706:	e02d      	b.n	8018764 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018708:	79fa      	ldrb	r2, [r7, #7]
 801870a:	4923      	ldr	r1, [pc, #140]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 801870c:	4613      	mov	r3, r2
 801870e:	005b      	lsls	r3, r3, #1
 8018710:	4413      	add	r3, r2
 8018712:	00db      	lsls	r3, r3, #3
 8018714:	440b      	add	r3, r1
 8018716:	3312      	adds	r3, #18
 8018718:	881b      	ldrh	r3, [r3, #0]
 801871a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801871e:	d321      	bcc.n	8018764 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018720:	79fa      	ldrb	r2, [r7, #7]
 8018722:	4613      	mov	r3, r2
 8018724:	005b      	lsls	r3, r3, #1
 8018726:	4413      	add	r3, r2
 8018728:	00db      	lsls	r3, r3, #3
 801872a:	4a1b      	ldr	r2, [pc, #108]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 801872c:	4413      	add	r3, r2
 801872e:	1d19      	adds	r1, r3, #4
 8018730:	79fa      	ldrb	r2, [r7, #7]
 8018732:	4613      	mov	r3, r2
 8018734:	005b      	lsls	r3, r3, #1
 8018736:	4413      	add	r3, r2
 8018738:	00db      	lsls	r3, r3, #3
 801873a:	3308      	adds	r3, #8
 801873c:	4a16      	ldr	r2, [pc, #88]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 801873e:	4413      	add	r3, r2
 8018740:	3304      	adds	r3, #4
 8018742:	461a      	mov	r2, r3
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	f000 fafb 	bl	8018d40 <etharp_request_dst>
 801874a:	4603      	mov	r3, r0
 801874c:	2b00      	cmp	r3, #0
 801874e:	d109      	bne.n	8018764 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018750:	79fa      	ldrb	r2, [r7, #7]
 8018752:	4911      	ldr	r1, [pc, #68]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 8018754:	4613      	mov	r3, r2
 8018756:	005b      	lsls	r3, r3, #1
 8018758:	4413      	add	r3, r2
 801875a:	00db      	lsls	r3, r3, #3
 801875c:	440b      	add	r3, r1
 801875e:	3314      	adds	r3, #20
 8018760:	2203      	movs	r2, #3
 8018762:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801876a:	79fa      	ldrb	r2, [r7, #7]
 801876c:	4613      	mov	r3, r2
 801876e:	005b      	lsls	r3, r3, #1
 8018770:	4413      	add	r3, r2
 8018772:	00db      	lsls	r3, r3, #3
 8018774:	3308      	adds	r3, #8
 8018776:	4a08      	ldr	r2, [pc, #32]	@ (8018798 <etharp_output_to_arp_index+0x124>)
 8018778:	4413      	add	r3, r2
 801877a:	3304      	adds	r3, #4
 801877c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018780:	9200      	str	r2, [sp, #0]
 8018782:	460a      	mov	r2, r1
 8018784:	68b9      	ldr	r1, [r7, #8]
 8018786:	68f8      	ldr	r0, [r7, #12]
 8018788:	f001 fe72 	bl	801a470 <ethernet_output>
 801878c:	4603      	mov	r3, r0
}
 801878e:	4618      	mov	r0, r3
 8018790:	3710      	adds	r7, #16
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
 8018796:	bf00      	nop
 8018798:	24014bdc 	.word	0x24014bdc
 801879c:	0801dcf0 	.word	0x0801dcf0
 80187a0:	0801de60 	.word	0x0801de60
 80187a4:	0801dd68 	.word	0x0801dd68

080187a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b08a      	sub	sp, #40	@ 0x28
 80187ac:	af02      	add	r7, sp, #8
 80187ae:	60f8      	str	r0, [r7, #12]
 80187b0:	60b9      	str	r1, [r7, #8]
 80187b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d106      	bne.n	80187cc <etharp_output+0x24>
 80187be:	4b73      	ldr	r3, [pc, #460]	@ (801898c <etharp_output+0x1e4>)
 80187c0:	f240 321e 	movw	r2, #798	@ 0x31e
 80187c4:	4972      	ldr	r1, [pc, #456]	@ (8018990 <etharp_output+0x1e8>)
 80187c6:	4873      	ldr	r0, [pc, #460]	@ (8018994 <etharp_output+0x1ec>)
 80187c8:	f002 f88c 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d106      	bne.n	80187e0 <etharp_output+0x38>
 80187d2:	4b6e      	ldr	r3, [pc, #440]	@ (801898c <etharp_output+0x1e4>)
 80187d4:	f240 321f 	movw	r2, #799	@ 0x31f
 80187d8:	496f      	ldr	r1, [pc, #444]	@ (8018998 <etharp_output+0x1f0>)
 80187da:	486e      	ldr	r0, [pc, #440]	@ (8018994 <etharp_output+0x1ec>)
 80187dc:	f002 f882 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d106      	bne.n	80187f4 <etharp_output+0x4c>
 80187e6:	4b69      	ldr	r3, [pc, #420]	@ (801898c <etharp_output+0x1e4>)
 80187e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80187ec:	496b      	ldr	r1, [pc, #428]	@ (801899c <etharp_output+0x1f4>)
 80187ee:	4869      	ldr	r0, [pc, #420]	@ (8018994 <etharp_output+0x1ec>)
 80187f0:	f002 f878 	bl	801a8e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	68f9      	ldr	r1, [r7, #12]
 80187fa:	4618      	mov	r0, r3
 80187fc:	f000 ff2a 	bl	8019654 <ip4_addr_isbroadcast_u32>
 8018800:	4603      	mov	r3, r0
 8018802:	2b00      	cmp	r3, #0
 8018804:	d002      	beq.n	801880c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018806:	4b66      	ldr	r3, [pc, #408]	@ (80189a0 <etharp_output+0x1f8>)
 8018808:	61fb      	str	r3, [r7, #28]
 801880a:	e0af      	b.n	801896c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018814:	2be0      	cmp	r3, #224	@ 0xe0
 8018816:	d118      	bne.n	801884a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018818:	2301      	movs	r3, #1
 801881a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801881c:	2300      	movs	r3, #0
 801881e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018820:	235e      	movs	r3, #94	@ 0x5e
 8018822:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	3301      	adds	r3, #1
 8018828:	781b      	ldrb	r3, [r3, #0]
 801882a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801882e:	b2db      	uxtb	r3, r3
 8018830:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	3302      	adds	r3, #2
 8018836:	781b      	ldrb	r3, [r3, #0]
 8018838:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	3303      	adds	r3, #3
 801883e:	781b      	ldrb	r3, [r3, #0]
 8018840:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018842:	f107 0310 	add.w	r3, r7, #16
 8018846:	61fb      	str	r3, [r7, #28]
 8018848:	e090      	b.n	801896c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681a      	ldr	r2, [r3, #0]
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	3304      	adds	r3, #4
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	405a      	eors	r2, r3
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	3308      	adds	r3, #8
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	4013      	ands	r3, r2
 801885e:	2b00      	cmp	r3, #0
 8018860:	d012      	beq.n	8018888 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018868:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801886c:	4293      	cmp	r3, r2
 801886e:	d00b      	beq.n	8018888 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	330c      	adds	r3, #12
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d003      	beq.n	8018882 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	330c      	adds	r3, #12
 801887e:	61bb      	str	r3, [r7, #24]
 8018880:	e002      	b.n	8018888 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018882:	f06f 0303 	mvn.w	r3, #3
 8018886:	e07d      	b.n	8018984 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018888:	4b46      	ldr	r3, [pc, #280]	@ (80189a4 <etharp_output+0x1fc>)
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	4619      	mov	r1, r3
 801888e:	4a46      	ldr	r2, [pc, #280]	@ (80189a8 <etharp_output+0x200>)
 8018890:	460b      	mov	r3, r1
 8018892:	005b      	lsls	r3, r3, #1
 8018894:	440b      	add	r3, r1
 8018896:	00db      	lsls	r3, r3, #3
 8018898:	4413      	add	r3, r2
 801889a:	3314      	adds	r3, #20
 801889c:	781b      	ldrb	r3, [r3, #0]
 801889e:	2b01      	cmp	r3, #1
 80188a0:	d925      	bls.n	80188ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80188a2:	4b40      	ldr	r3, [pc, #256]	@ (80189a4 <etharp_output+0x1fc>)
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	4619      	mov	r1, r3
 80188a8:	4a3f      	ldr	r2, [pc, #252]	@ (80189a8 <etharp_output+0x200>)
 80188aa:	460b      	mov	r3, r1
 80188ac:	005b      	lsls	r3, r3, #1
 80188ae:	440b      	add	r3, r1
 80188b0:	00db      	lsls	r3, r3, #3
 80188b2:	4413      	add	r3, r2
 80188b4:	3308      	adds	r3, #8
 80188b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80188b8:	68fa      	ldr	r2, [r7, #12]
 80188ba:	429a      	cmp	r2, r3
 80188bc:	d117      	bne.n	80188ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80188be:	69bb      	ldr	r3, [r7, #24]
 80188c0:	681a      	ldr	r2, [r3, #0]
 80188c2:	4b38      	ldr	r3, [pc, #224]	@ (80189a4 <etharp_output+0x1fc>)
 80188c4:	781b      	ldrb	r3, [r3, #0]
 80188c6:	4618      	mov	r0, r3
 80188c8:	4937      	ldr	r1, [pc, #220]	@ (80189a8 <etharp_output+0x200>)
 80188ca:	4603      	mov	r3, r0
 80188cc:	005b      	lsls	r3, r3, #1
 80188ce:	4403      	add	r3, r0
 80188d0:	00db      	lsls	r3, r3, #3
 80188d2:	440b      	add	r3, r1
 80188d4:	3304      	adds	r3, #4
 80188d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80188d8:	429a      	cmp	r2, r3
 80188da:	d108      	bne.n	80188ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80188dc:	4b31      	ldr	r3, [pc, #196]	@ (80189a4 <etharp_output+0x1fc>)
 80188de:	781b      	ldrb	r3, [r3, #0]
 80188e0:	461a      	mov	r2, r3
 80188e2:	68b9      	ldr	r1, [r7, #8]
 80188e4:	68f8      	ldr	r0, [r7, #12]
 80188e6:	f7ff fec5 	bl	8018674 <etharp_output_to_arp_index>
 80188ea:	4603      	mov	r3, r0
 80188ec:	e04a      	b.n	8018984 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80188ee:	2300      	movs	r3, #0
 80188f0:	75fb      	strb	r3, [r7, #23]
 80188f2:	e031      	b.n	8018958 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80188f4:	7dfa      	ldrb	r2, [r7, #23]
 80188f6:	492c      	ldr	r1, [pc, #176]	@ (80189a8 <etharp_output+0x200>)
 80188f8:	4613      	mov	r3, r2
 80188fa:	005b      	lsls	r3, r3, #1
 80188fc:	4413      	add	r3, r2
 80188fe:	00db      	lsls	r3, r3, #3
 8018900:	440b      	add	r3, r1
 8018902:	3314      	adds	r3, #20
 8018904:	781b      	ldrb	r3, [r3, #0]
 8018906:	2b01      	cmp	r3, #1
 8018908:	d923      	bls.n	8018952 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801890a:	7dfa      	ldrb	r2, [r7, #23]
 801890c:	4926      	ldr	r1, [pc, #152]	@ (80189a8 <etharp_output+0x200>)
 801890e:	4613      	mov	r3, r2
 8018910:	005b      	lsls	r3, r3, #1
 8018912:	4413      	add	r3, r2
 8018914:	00db      	lsls	r3, r3, #3
 8018916:	440b      	add	r3, r1
 8018918:	3308      	adds	r3, #8
 801891a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801891c:	68fa      	ldr	r2, [r7, #12]
 801891e:	429a      	cmp	r2, r3
 8018920:	d117      	bne.n	8018952 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018922:	69bb      	ldr	r3, [r7, #24]
 8018924:	6819      	ldr	r1, [r3, #0]
 8018926:	7dfa      	ldrb	r2, [r7, #23]
 8018928:	481f      	ldr	r0, [pc, #124]	@ (80189a8 <etharp_output+0x200>)
 801892a:	4613      	mov	r3, r2
 801892c:	005b      	lsls	r3, r3, #1
 801892e:	4413      	add	r3, r2
 8018930:	00db      	lsls	r3, r3, #3
 8018932:	4403      	add	r3, r0
 8018934:	3304      	adds	r3, #4
 8018936:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018938:	4299      	cmp	r1, r3
 801893a:	d10a      	bne.n	8018952 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801893c:	4a19      	ldr	r2, [pc, #100]	@ (80189a4 <etharp_output+0x1fc>)
 801893e:	7dfb      	ldrb	r3, [r7, #23]
 8018940:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018942:	7dfb      	ldrb	r3, [r7, #23]
 8018944:	461a      	mov	r2, r3
 8018946:	68b9      	ldr	r1, [r7, #8]
 8018948:	68f8      	ldr	r0, [r7, #12]
 801894a:	f7ff fe93 	bl	8018674 <etharp_output_to_arp_index>
 801894e:	4603      	mov	r3, r0
 8018950:	e018      	b.n	8018984 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018952:	7dfb      	ldrb	r3, [r7, #23]
 8018954:	3301      	adds	r3, #1
 8018956:	75fb      	strb	r3, [r7, #23]
 8018958:	7dfb      	ldrb	r3, [r7, #23]
 801895a:	2b09      	cmp	r3, #9
 801895c:	d9ca      	bls.n	80188f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801895e:	68ba      	ldr	r2, [r7, #8]
 8018960:	69b9      	ldr	r1, [r7, #24]
 8018962:	68f8      	ldr	r0, [r7, #12]
 8018964:	f000 f822 	bl	80189ac <etharp_query>
 8018968:	4603      	mov	r3, r0
 801896a:	e00b      	b.n	8018984 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8018972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018976:	9300      	str	r3, [sp, #0]
 8018978:	69fb      	ldr	r3, [r7, #28]
 801897a:	68b9      	ldr	r1, [r7, #8]
 801897c:	68f8      	ldr	r0, [r7, #12]
 801897e:	f001 fd77 	bl	801a470 <ethernet_output>
 8018982:	4603      	mov	r3, r0
}
 8018984:	4618      	mov	r0, r3
 8018986:	3720      	adds	r7, #32
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	0801dcf0 	.word	0x0801dcf0
 8018990:	0801de40 	.word	0x0801de40
 8018994:	0801dd68 	.word	0x0801dd68
 8018998:	0801de90 	.word	0x0801de90
 801899c:	0801de30 	.word	0x0801de30
 80189a0:	0801e544 	.word	0x0801e544
 80189a4:	24014ccc 	.word	0x24014ccc
 80189a8:	24014bdc 	.word	0x24014bdc

080189ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80189ac:	b580      	push	{r7, lr}
 80189ae:	b08c      	sub	sp, #48	@ 0x30
 80189b0:	af02      	add	r7, sp, #8
 80189b2:	60f8      	str	r0, [r7, #12]
 80189b4:	60b9      	str	r1, [r7, #8]
 80189b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	3326      	adds	r3, #38	@ 0x26
 80189bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80189be:	23ff      	movs	r3, #255	@ 0xff
 80189c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80189c4:	2300      	movs	r3, #0
 80189c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	68f9      	ldr	r1, [r7, #12]
 80189ce:	4618      	mov	r0, r3
 80189d0:	f000 fe40 	bl	8019654 <ip4_addr_isbroadcast_u32>
 80189d4:	4603      	mov	r3, r0
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d10c      	bne.n	80189f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80189e2:	2be0      	cmp	r3, #224	@ 0xe0
 80189e4:	d006      	beq.n	80189f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d003      	beq.n	80189f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d102      	bne.n	80189fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80189f4:	f06f 030f 	mvn.w	r3, #15
 80189f8:	e101      	b.n	8018bfe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80189fa:	68fa      	ldr	r2, [r7, #12]
 80189fc:	2101      	movs	r1, #1
 80189fe:	68b8      	ldr	r0, [r7, #8]
 8018a00:	f7ff fb60 	bl	80180c4 <etharp_find_entry>
 8018a04:	4603      	mov	r3, r0
 8018a06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018a08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	da02      	bge.n	8018a16 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018a10:	8a7b      	ldrh	r3, [r7, #18]
 8018a12:	b25b      	sxtb	r3, r3
 8018a14:	e0f3      	b.n	8018bfe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018a16:	8a7b      	ldrh	r3, [r7, #18]
 8018a18:	2b7e      	cmp	r3, #126	@ 0x7e
 8018a1a:	d906      	bls.n	8018a2a <etharp_query+0x7e>
 8018a1c:	4b7a      	ldr	r3, [pc, #488]	@ (8018c08 <etharp_query+0x25c>)
 8018a1e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8018a22:	497a      	ldr	r1, [pc, #488]	@ (8018c0c <etharp_query+0x260>)
 8018a24:	487a      	ldr	r0, [pc, #488]	@ (8018c10 <etharp_query+0x264>)
 8018a26:	f001 ff5d 	bl	801a8e4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018a2a:	8a7b      	ldrh	r3, [r7, #18]
 8018a2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018a2e:	7c7a      	ldrb	r2, [r7, #17]
 8018a30:	4978      	ldr	r1, [pc, #480]	@ (8018c14 <etharp_query+0x268>)
 8018a32:	4613      	mov	r3, r2
 8018a34:	005b      	lsls	r3, r3, #1
 8018a36:	4413      	add	r3, r2
 8018a38:	00db      	lsls	r3, r3, #3
 8018a3a:	440b      	add	r3, r1
 8018a3c:	3314      	adds	r3, #20
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d115      	bne.n	8018a70 <etharp_query+0xc4>
    is_new_entry = 1;
 8018a44:	2301      	movs	r3, #1
 8018a46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018a48:	7c7a      	ldrb	r2, [r7, #17]
 8018a4a:	4972      	ldr	r1, [pc, #456]	@ (8018c14 <etharp_query+0x268>)
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	005b      	lsls	r3, r3, #1
 8018a50:	4413      	add	r3, r2
 8018a52:	00db      	lsls	r3, r3, #3
 8018a54:	440b      	add	r3, r1
 8018a56:	3314      	adds	r3, #20
 8018a58:	2201      	movs	r2, #1
 8018a5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018a5c:	7c7a      	ldrb	r2, [r7, #17]
 8018a5e:	496d      	ldr	r1, [pc, #436]	@ (8018c14 <etharp_query+0x268>)
 8018a60:	4613      	mov	r3, r2
 8018a62:	005b      	lsls	r3, r3, #1
 8018a64:	4413      	add	r3, r2
 8018a66:	00db      	lsls	r3, r3, #3
 8018a68:	440b      	add	r3, r1
 8018a6a:	3308      	adds	r3, #8
 8018a6c:	68fa      	ldr	r2, [r7, #12]
 8018a6e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018a70:	7c7a      	ldrb	r2, [r7, #17]
 8018a72:	4968      	ldr	r1, [pc, #416]	@ (8018c14 <etharp_query+0x268>)
 8018a74:	4613      	mov	r3, r2
 8018a76:	005b      	lsls	r3, r3, #1
 8018a78:	4413      	add	r3, r2
 8018a7a:	00db      	lsls	r3, r3, #3
 8018a7c:	440b      	add	r3, r1
 8018a7e:	3314      	adds	r3, #20
 8018a80:	781b      	ldrb	r3, [r3, #0]
 8018a82:	2b01      	cmp	r3, #1
 8018a84:	d011      	beq.n	8018aaa <etharp_query+0xfe>
 8018a86:	7c7a      	ldrb	r2, [r7, #17]
 8018a88:	4962      	ldr	r1, [pc, #392]	@ (8018c14 <etharp_query+0x268>)
 8018a8a:	4613      	mov	r3, r2
 8018a8c:	005b      	lsls	r3, r3, #1
 8018a8e:	4413      	add	r3, r2
 8018a90:	00db      	lsls	r3, r3, #3
 8018a92:	440b      	add	r3, r1
 8018a94:	3314      	adds	r3, #20
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	2b01      	cmp	r3, #1
 8018a9a:	d806      	bhi.n	8018aaa <etharp_query+0xfe>
 8018a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8018c08 <etharp_query+0x25c>)
 8018a9e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8018aa2:	495d      	ldr	r1, [pc, #372]	@ (8018c18 <etharp_query+0x26c>)
 8018aa4:	485a      	ldr	r0, [pc, #360]	@ (8018c10 <etharp_query+0x264>)
 8018aa6:	f001 ff1d 	bl	801a8e4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018aaa:	6a3b      	ldr	r3, [r7, #32]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d102      	bne.n	8018ab6 <etharp_query+0x10a>
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d10c      	bne.n	8018ad0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018ab6:	68b9      	ldr	r1, [r7, #8]
 8018ab8:	68f8      	ldr	r0, [r7, #12]
 8018aba:	f000 f963 	bl	8018d84 <etharp_request>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d102      	bne.n	8018ad0 <etharp_query+0x124>
      return result;
 8018aca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018ace:	e096      	b.n	8018bfe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d106      	bne.n	8018ae4 <etharp_query+0x138>
 8018ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8018c08 <etharp_query+0x25c>)
 8018ad8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8018adc:	494f      	ldr	r1, [pc, #316]	@ (8018c1c <etharp_query+0x270>)
 8018ade:	484c      	ldr	r0, [pc, #304]	@ (8018c10 <etharp_query+0x264>)
 8018ae0:	f001 ff00 	bl	801a8e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018ae4:	7c7a      	ldrb	r2, [r7, #17]
 8018ae6:	494b      	ldr	r1, [pc, #300]	@ (8018c14 <etharp_query+0x268>)
 8018ae8:	4613      	mov	r3, r2
 8018aea:	005b      	lsls	r3, r3, #1
 8018aec:	4413      	add	r3, r2
 8018aee:	00db      	lsls	r3, r3, #3
 8018af0:	440b      	add	r3, r1
 8018af2:	3314      	adds	r3, #20
 8018af4:	781b      	ldrb	r3, [r3, #0]
 8018af6:	2b01      	cmp	r3, #1
 8018af8:	d917      	bls.n	8018b2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018afa:	4a49      	ldr	r2, [pc, #292]	@ (8018c20 <etharp_query+0x274>)
 8018afc:	7c7b      	ldrb	r3, [r7, #17]
 8018afe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018b00:	7c7a      	ldrb	r2, [r7, #17]
 8018b02:	4613      	mov	r3, r2
 8018b04:	005b      	lsls	r3, r3, #1
 8018b06:	4413      	add	r3, r2
 8018b08:	00db      	lsls	r3, r3, #3
 8018b0a:	3308      	adds	r3, #8
 8018b0c:	4a41      	ldr	r2, [pc, #260]	@ (8018c14 <etharp_query+0x268>)
 8018b0e:	4413      	add	r3, r2
 8018b10:	3304      	adds	r3, #4
 8018b12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018b16:	9200      	str	r2, [sp, #0]
 8018b18:	697a      	ldr	r2, [r7, #20]
 8018b1a:	6879      	ldr	r1, [r7, #4]
 8018b1c:	68f8      	ldr	r0, [r7, #12]
 8018b1e:	f001 fca7 	bl	801a470 <ethernet_output>
 8018b22:	4603      	mov	r3, r0
 8018b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018b28:	e067      	b.n	8018bfa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018b2a:	7c7a      	ldrb	r2, [r7, #17]
 8018b2c:	4939      	ldr	r1, [pc, #228]	@ (8018c14 <etharp_query+0x268>)
 8018b2e:	4613      	mov	r3, r2
 8018b30:	005b      	lsls	r3, r3, #1
 8018b32:	4413      	add	r3, r2
 8018b34:	00db      	lsls	r3, r3, #3
 8018b36:	440b      	add	r3, r1
 8018b38:	3314      	adds	r3, #20
 8018b3a:	781b      	ldrb	r3, [r3, #0]
 8018b3c:	2b01      	cmp	r3, #1
 8018b3e:	d15c      	bne.n	8018bfa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018b40:	2300      	movs	r3, #0
 8018b42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018b48:	e01c      	b.n	8018b84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018b4a:	69fb      	ldr	r3, [r7, #28]
 8018b4c:	895a      	ldrh	r2, [r3, #10]
 8018b4e:	69fb      	ldr	r3, [r7, #28]
 8018b50:	891b      	ldrh	r3, [r3, #8]
 8018b52:	429a      	cmp	r2, r3
 8018b54:	d10a      	bne.n	8018b6c <etharp_query+0x1c0>
 8018b56:	69fb      	ldr	r3, [r7, #28]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d006      	beq.n	8018b6c <etharp_query+0x1c0>
 8018b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8018c08 <etharp_query+0x25c>)
 8018b60:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8018b64:	492f      	ldr	r1, [pc, #188]	@ (8018c24 <etharp_query+0x278>)
 8018b66:	482a      	ldr	r0, [pc, #168]	@ (8018c10 <etharp_query+0x264>)
 8018b68:	f001 febc 	bl	801a8e4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018b6c:	69fb      	ldr	r3, [r7, #28]
 8018b6e:	7b1b      	ldrb	r3, [r3, #12]
 8018b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d002      	beq.n	8018b7e <etharp_query+0x1d2>
        copy_needed = 1;
 8018b78:	2301      	movs	r3, #1
 8018b7a:	61bb      	str	r3, [r7, #24]
        break;
 8018b7c:	e005      	b.n	8018b8a <etharp_query+0x1de>
      }
      p = p->next;
 8018b7e:	69fb      	ldr	r3, [r7, #28]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018b84:	69fb      	ldr	r3, [r7, #28]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d1df      	bne.n	8018b4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018b8a:	69bb      	ldr	r3, [r7, #24]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d007      	beq.n	8018ba0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018b90:	687a      	ldr	r2, [r7, #4]
 8018b92:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8018b96:	200e      	movs	r0, #14
 8018b98:	f7f9 f8da 	bl	8011d50 <pbuf_clone>
 8018b9c:	61f8      	str	r0, [r7, #28]
 8018b9e:	e004      	b.n	8018baa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018ba4:	69f8      	ldr	r0, [r7, #28]
 8018ba6:	f7f8 ff01 	bl	80119ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018baa:	69fb      	ldr	r3, [r7, #28]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d021      	beq.n	8018bf4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018bb0:	7c7a      	ldrb	r2, [r7, #17]
 8018bb2:	4918      	ldr	r1, [pc, #96]	@ (8018c14 <etharp_query+0x268>)
 8018bb4:	4613      	mov	r3, r2
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	4413      	add	r3, r2
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	440b      	add	r3, r1
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d00a      	beq.n	8018bda <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018bc4:	7c7a      	ldrb	r2, [r7, #17]
 8018bc6:	4913      	ldr	r1, [pc, #76]	@ (8018c14 <etharp_query+0x268>)
 8018bc8:	4613      	mov	r3, r2
 8018bca:	005b      	lsls	r3, r3, #1
 8018bcc:	4413      	add	r3, r2
 8018bce:	00db      	lsls	r3, r3, #3
 8018bd0:	440b      	add	r3, r1
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7f8 fe43 	bl	8011860 <pbuf_free>
      }
      arp_table[i].q = p;
 8018bda:	7c7a      	ldrb	r2, [r7, #17]
 8018bdc:	490d      	ldr	r1, [pc, #52]	@ (8018c14 <etharp_query+0x268>)
 8018bde:	4613      	mov	r3, r2
 8018be0:	005b      	lsls	r3, r3, #1
 8018be2:	4413      	add	r3, r2
 8018be4:	00db      	lsls	r3, r3, #3
 8018be6:	440b      	add	r3, r1
 8018be8:	69fa      	ldr	r2, [r7, #28]
 8018bea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018bec:	2300      	movs	r3, #0
 8018bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018bf2:	e002      	b.n	8018bfa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018bf4:	23ff      	movs	r3, #255	@ 0xff
 8018bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8018bfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3728      	adds	r7, #40	@ 0x28
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	0801dcf0 	.word	0x0801dcf0
 8018c0c:	0801de9c 	.word	0x0801de9c
 8018c10:	0801dd68 	.word	0x0801dd68
 8018c14:	24014bdc 	.word	0x24014bdc
 8018c18:	0801deac 	.word	0x0801deac
 8018c1c:	0801de90 	.word	0x0801de90
 8018c20:	24014ccc 	.word	0x24014ccc
 8018c24:	0801ded4 	.word	0x0801ded4

08018c28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b08a      	sub	sp, #40	@ 0x28
 8018c2c:	af02      	add	r7, sp, #8
 8018c2e:	60f8      	str	r0, [r7, #12]
 8018c30:	60b9      	str	r1, [r7, #8]
 8018c32:	607a      	str	r2, [r7, #4]
 8018c34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018c36:	2300      	movs	r3, #0
 8018c38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d106      	bne.n	8018c4e <etharp_raw+0x26>
 8018c40:	4b3a      	ldr	r3, [pc, #232]	@ (8018d2c <etharp_raw+0x104>)
 8018c42:	f240 4257 	movw	r2, #1111	@ 0x457
 8018c46:	493a      	ldr	r1, [pc, #232]	@ (8018d30 <etharp_raw+0x108>)
 8018c48:	483a      	ldr	r0, [pc, #232]	@ (8018d34 <etharp_raw+0x10c>)
 8018c4a:	f001 fe4b 	bl	801a8e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018c4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018c52:	211c      	movs	r1, #28
 8018c54:	200e      	movs	r0, #14
 8018c56:	f7f8 fb1b 	bl	8011290 <pbuf_alloc>
 8018c5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018c5c:	69bb      	ldr	r3, [r7, #24]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d102      	bne.n	8018c68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018c62:	f04f 33ff 	mov.w	r3, #4294967295
 8018c66:	e05d      	b.n	8018d24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018c68:	69bb      	ldr	r3, [r7, #24]
 8018c6a:	895b      	ldrh	r3, [r3, #10]
 8018c6c:	2b1b      	cmp	r3, #27
 8018c6e:	d806      	bhi.n	8018c7e <etharp_raw+0x56>
 8018c70:	4b2e      	ldr	r3, [pc, #184]	@ (8018d2c <etharp_raw+0x104>)
 8018c72:	f240 4262 	movw	r2, #1122	@ 0x462
 8018c76:	4930      	ldr	r1, [pc, #192]	@ (8018d38 <etharp_raw+0x110>)
 8018c78:	482e      	ldr	r0, [pc, #184]	@ (8018d34 <etharp_raw+0x10c>)
 8018c7a:	f001 fe33 	bl	801a8e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018c7e:	69bb      	ldr	r3, [r7, #24]
 8018c80:	685b      	ldr	r3, [r3, #4]
 8018c82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018c84:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018c86:	4618      	mov	r0, r3
 8018c88:	f7f7 f938 	bl	800fefc <lwip_htons>
 8018c8c:	4603      	mov	r3, r0
 8018c8e:	461a      	mov	r2, r3
 8018c90:	697b      	ldr	r3, [r7, #20]
 8018c92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018c9a:	2b06      	cmp	r3, #6
 8018c9c:	d006      	beq.n	8018cac <etharp_raw+0x84>
 8018c9e:	4b23      	ldr	r3, [pc, #140]	@ (8018d2c <etharp_raw+0x104>)
 8018ca0:	f240 4269 	movw	r2, #1129	@ 0x469
 8018ca4:	4925      	ldr	r1, [pc, #148]	@ (8018d3c <etharp_raw+0x114>)
 8018ca6:	4823      	ldr	r0, [pc, #140]	@ (8018d34 <etharp_raw+0x10c>)
 8018ca8:	f001 fe1c 	bl	801a8e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	3308      	adds	r3, #8
 8018cb0:	2206      	movs	r2, #6
 8018cb2:	6839      	ldr	r1, [r7, #0]
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f001 ff4e 	bl	801ab56 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	3312      	adds	r3, #18
 8018cbe:	2206      	movs	r2, #6
 8018cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f001 ff47 	bl	801ab56 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	330e      	adds	r3, #14
 8018ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018cce:	6812      	ldr	r2, [r2, #0]
 8018cd0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018cd2:	697b      	ldr	r3, [r7, #20]
 8018cd4:	3318      	adds	r3, #24
 8018cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018cd8:	6812      	ldr	r2, [r2, #0]
 8018cda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018cdc:	697b      	ldr	r3, [r7, #20]
 8018cde:	2200      	movs	r2, #0
 8018ce0:	701a      	strb	r2, [r3, #0]
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	f042 0201 	orr.w	r2, r2, #1
 8018ce8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018cea:	697b      	ldr	r3, [r7, #20]
 8018cec:	2200      	movs	r2, #0
 8018cee:	f042 0208 	orr.w	r2, r2, #8
 8018cf2:	709a      	strb	r2, [r3, #2]
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	2206      	movs	r2, #6
 8018cfc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	2204      	movs	r2, #4
 8018d02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018d04:	f640 0306 	movw	r3, #2054	@ 0x806
 8018d08:	9300      	str	r3, [sp, #0]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	68ba      	ldr	r2, [r7, #8]
 8018d0e:	69b9      	ldr	r1, [r7, #24]
 8018d10:	68f8      	ldr	r0, [r7, #12]
 8018d12:	f001 fbad 	bl	801a470 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018d16:	69b8      	ldr	r0, [r7, #24]
 8018d18:	f7f8 fda2 	bl	8011860 <pbuf_free>
  p = NULL;
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018d20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018d24:	4618      	mov	r0, r3
 8018d26:	3720      	adds	r7, #32
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	bd80      	pop	{r7, pc}
 8018d2c:	0801dcf0 	.word	0x0801dcf0
 8018d30:	0801de40 	.word	0x0801de40
 8018d34:	0801dd68 	.word	0x0801dd68
 8018d38:	0801def0 	.word	0x0801def0
 8018d3c:	0801df24 	.word	0x0801df24

08018d40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b088      	sub	sp, #32
 8018d44:	af04      	add	r7, sp, #16
 8018d46:	60f8      	str	r0, [r7, #12]
 8018d48:	60b9      	str	r1, [r7, #8]
 8018d4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018d5c:	2201      	movs	r2, #1
 8018d5e:	9203      	str	r2, [sp, #12]
 8018d60:	68ba      	ldr	r2, [r7, #8]
 8018d62:	9202      	str	r2, [sp, #8]
 8018d64:	4a06      	ldr	r2, [pc, #24]	@ (8018d80 <etharp_request_dst+0x40>)
 8018d66:	9201      	str	r2, [sp, #4]
 8018d68:	9300      	str	r3, [sp, #0]
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	687a      	ldr	r2, [r7, #4]
 8018d6e:	68f8      	ldr	r0, [r7, #12]
 8018d70:	f7ff ff5a 	bl	8018c28 <etharp_raw>
 8018d74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018d76:	4618      	mov	r0, r3
 8018d78:	3710      	adds	r7, #16
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	0801e54c 	.word	0x0801e54c

08018d84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b082      	sub	sp, #8
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
 8018d8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018d8e:	4a05      	ldr	r2, [pc, #20]	@ (8018da4 <etharp_request+0x20>)
 8018d90:	6839      	ldr	r1, [r7, #0]
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f7ff ffd4 	bl	8018d40 <etharp_request_dst>
 8018d98:	4603      	mov	r3, r0
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3708      	adds	r7, #8
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd80      	pop	{r7, pc}
 8018da2:	bf00      	nop
 8018da4:	0801e544 	.word	0x0801e544

08018da8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b08e      	sub	sp, #56	@ 0x38
 8018dac:	af04      	add	r7, sp, #16
 8018dae:	6078      	str	r0, [r7, #4]
 8018db0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018db2:	4b87      	ldr	r3, [pc, #540]	@ (8018fd0 <icmp_input+0x228>)
 8018db4:	689b      	ldr	r3, [r3, #8]
 8018db6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	f003 030f 	and.w	r3, r3, #15
 8018dc0:	b2db      	uxtb	r3, r3
 8018dc2:	009b      	lsls	r3, r3, #2
 8018dc4:	b2db      	uxtb	r3, r3
 8018dc6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8018dc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018dca:	2b13      	cmp	r3, #19
 8018dcc:	f240 80e8 	bls.w	8018fa0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	895b      	ldrh	r3, [r3, #10]
 8018dd4:	2b03      	cmp	r3, #3
 8018dd6:	f240 80e5 	bls.w	8018fa4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	685b      	ldr	r3, [r3, #4]
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018de4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	f000 80d2 	beq.w	8018f92 <icmp_input+0x1ea>
 8018dee:	2b08      	cmp	r3, #8
 8018df0:	f040 80d2 	bne.w	8018f98 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018df4:	4b77      	ldr	r3, [pc, #476]	@ (8018fd4 <icmp_input+0x22c>)
 8018df6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018df8:	4b75      	ldr	r3, [pc, #468]	@ (8018fd0 <icmp_input+0x228>)
 8018dfa:	695b      	ldr	r3, [r3, #20]
 8018dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018e00:	2be0      	cmp	r3, #224	@ 0xe0
 8018e02:	f000 80d6 	beq.w	8018fb2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018e06:	4b72      	ldr	r3, [pc, #456]	@ (8018fd0 <icmp_input+0x228>)
 8018e08:	695b      	ldr	r3, [r3, #20]
 8018e0a:	4a71      	ldr	r2, [pc, #452]	@ (8018fd0 <icmp_input+0x228>)
 8018e0c:	6812      	ldr	r2, [r2, #0]
 8018e0e:	4611      	mov	r1, r2
 8018e10:	4618      	mov	r0, r3
 8018e12:	f000 fc1f 	bl	8019654 <ip4_addr_isbroadcast_u32>
 8018e16:	4603      	mov	r3, r0
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	f040 80cc 	bne.w	8018fb6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	891b      	ldrh	r3, [r3, #8]
 8018e22:	2b07      	cmp	r3, #7
 8018e24:	f240 80c0 	bls.w	8018fa8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018e28:	6878      	ldr	r0, [r7, #4]
 8018e2a:	f7f7 f905 	bl	8010038 <inet_chksum_pbuf>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d003      	beq.n	8018e3c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f7f8 fd13 	bl	8011860 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018e3a:	e0c5      	b.n	8018fc8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018e3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018e3e:	330e      	adds	r3, #14
 8018e40:	4619      	mov	r1, r3
 8018e42:	6878      	ldr	r0, [r7, #4]
 8018e44:	f7f8 fc76 	bl	8011734 <pbuf_add_header>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d04b      	beq.n	8018ee6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	891a      	ldrh	r2, [r3, #8]
 8018e52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018e54:	4413      	add	r3, r2
 8018e56:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	891b      	ldrh	r3, [r3, #8]
 8018e5c:	8b7a      	ldrh	r2, [r7, #26]
 8018e5e:	429a      	cmp	r2, r3
 8018e60:	f0c0 80ab 	bcc.w	8018fba <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018e64:	8b7b      	ldrh	r3, [r7, #26]
 8018e66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018e6a:	4619      	mov	r1, r3
 8018e6c:	200e      	movs	r0, #14
 8018e6e:	f7f8 fa0f 	bl	8011290 <pbuf_alloc>
 8018e72:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	f000 80a1 	beq.w	8018fbe <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	895b      	ldrh	r3, [r3, #10]
 8018e80:	461a      	mov	r2, r3
 8018e82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018e84:	3308      	adds	r3, #8
 8018e86:	429a      	cmp	r2, r3
 8018e88:	d203      	bcs.n	8018e92 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018e8a:	6978      	ldr	r0, [r7, #20]
 8018e8c:	f7f8 fce8 	bl	8011860 <pbuf_free>
          goto icmperr;
 8018e90:	e096      	b.n	8018fc0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f001 fe5b 	bl	801ab56 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018ea0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018ea2:	4619      	mov	r1, r3
 8018ea4:	6978      	ldr	r0, [r7, #20]
 8018ea6:	f7f8 fc55 	bl	8011754 <pbuf_remove_header>
 8018eaa:	4603      	mov	r3, r0
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d009      	beq.n	8018ec4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018eb0:	4b49      	ldr	r3, [pc, #292]	@ (8018fd8 <icmp_input+0x230>)
 8018eb2:	22b6      	movs	r2, #182	@ 0xb6
 8018eb4:	4949      	ldr	r1, [pc, #292]	@ (8018fdc <icmp_input+0x234>)
 8018eb6:	484a      	ldr	r0, [pc, #296]	@ (8018fe0 <icmp_input+0x238>)
 8018eb8:	f001 fd14 	bl	801a8e4 <iprintf>
          pbuf_free(r);
 8018ebc:	6978      	ldr	r0, [r7, #20]
 8018ebe:	f7f8 fccf 	bl	8011860 <pbuf_free>
          goto icmperr;
 8018ec2:	e07d      	b.n	8018fc0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018ec4:	6879      	ldr	r1, [r7, #4]
 8018ec6:	6978      	ldr	r0, [r7, #20]
 8018ec8:	f7f8 fdfe 	bl	8011ac8 <pbuf_copy>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d003      	beq.n	8018eda <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018ed2:	6978      	ldr	r0, [r7, #20]
 8018ed4:	f7f8 fcc4 	bl	8011860 <pbuf_free>
          goto icmperr;
 8018ed8:	e072      	b.n	8018fc0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f7f8 fcc0 	bl	8011860 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	607b      	str	r3, [r7, #4]
 8018ee4:	e00f      	b.n	8018f06 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018ee6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018ee8:	330e      	adds	r3, #14
 8018eea:	4619      	mov	r1, r3
 8018eec:	6878      	ldr	r0, [r7, #4]
 8018eee:	f7f8 fc31 	bl	8011754 <pbuf_remove_header>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d006      	beq.n	8018f06 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018ef8:	4b37      	ldr	r3, [pc, #220]	@ (8018fd8 <icmp_input+0x230>)
 8018efa:	22c7      	movs	r2, #199	@ 0xc7
 8018efc:	4939      	ldr	r1, [pc, #228]	@ (8018fe4 <icmp_input+0x23c>)
 8018efe:	4838      	ldr	r0, [pc, #224]	@ (8018fe0 <icmp_input+0x238>)
 8018f00:	f001 fcf0 	bl	801a8e4 <iprintf>
          goto icmperr;
 8018f04:	e05c      	b.n	8018fc0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	685b      	ldr	r3, [r3, #4]
 8018f0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018f0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018f0e:	4619      	mov	r1, r3
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	f7f8 fc0f 	bl	8011734 <pbuf_add_header>
 8018f16:	4603      	mov	r3, r0
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d13c      	bne.n	8018f96 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	685b      	ldr	r3, [r3, #4]
 8018f20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018f22:	69fb      	ldr	r3, [r7, #28]
 8018f24:	681a      	ldr	r2, [r3, #0]
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018f2a:	4b29      	ldr	r3, [pc, #164]	@ (8018fd0 <icmp_input+0x228>)
 8018f2c:	691a      	ldr	r2, [r3, #16]
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018f32:	693b      	ldr	r3, [r7, #16]
 8018f34:	2200      	movs	r2, #0
 8018f36:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8018f38:	693b      	ldr	r3, [r7, #16]
 8018f3a:	885b      	ldrh	r3, [r3, #2]
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018f42:	4293      	cmp	r3, r2
 8018f44:	d907      	bls.n	8018f56 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8018f46:	693b      	ldr	r3, [r7, #16]
 8018f48:	885b      	ldrh	r3, [r3, #2]
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	3309      	adds	r3, #9
 8018f4e:	b29a      	uxth	r2, r3
 8018f50:	693b      	ldr	r3, [r7, #16]
 8018f52:	805a      	strh	r2, [r3, #2]
 8018f54:	e006      	b.n	8018f64 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8018f56:	693b      	ldr	r3, [r7, #16]
 8018f58:	885b      	ldrh	r3, [r3, #2]
 8018f5a:	b29b      	uxth	r3, r3
 8018f5c:	3308      	adds	r3, #8
 8018f5e:	b29a      	uxth	r2, r3
 8018f60:	693b      	ldr	r3, [r7, #16]
 8018f62:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	22ff      	movs	r2, #255	@ 0xff
 8018f68:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	729a      	strb	r2, [r3, #10]
 8018f70:	2200      	movs	r2, #0
 8018f72:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	9302      	str	r3, [sp, #8]
 8018f78:	2301      	movs	r3, #1
 8018f7a:	9301      	str	r3, [sp, #4]
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	9300      	str	r3, [sp, #0]
 8018f80:	23ff      	movs	r3, #255	@ 0xff
 8018f82:	2200      	movs	r2, #0
 8018f84:	69f9      	ldr	r1, [r7, #28]
 8018f86:	6878      	ldr	r0, [r7, #4]
 8018f88:	f000 fa8c 	bl	80194a4 <ip4_output_if>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018f90:	e001      	b.n	8018f96 <icmp_input+0x1ee>
      break;
 8018f92:	bf00      	nop
 8018f94:	e000      	b.n	8018f98 <icmp_input+0x1f0>
      break;
 8018f96:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018f98:	6878      	ldr	r0, [r7, #4]
 8018f9a:	f7f8 fc61 	bl	8011860 <pbuf_free>
  return;
 8018f9e:	e013      	b.n	8018fc8 <icmp_input+0x220>
    goto lenerr;
 8018fa0:	bf00      	nop
 8018fa2:	e002      	b.n	8018faa <icmp_input+0x202>
    goto lenerr;
 8018fa4:	bf00      	nop
 8018fa6:	e000      	b.n	8018faa <icmp_input+0x202>
        goto lenerr;
 8018fa8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018faa:	6878      	ldr	r0, [r7, #4]
 8018fac:	f7f8 fc58 	bl	8011860 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018fb0:	e00a      	b.n	8018fc8 <icmp_input+0x220>
        goto icmperr;
 8018fb2:	bf00      	nop
 8018fb4:	e004      	b.n	8018fc0 <icmp_input+0x218>
        goto icmperr;
 8018fb6:	bf00      	nop
 8018fb8:	e002      	b.n	8018fc0 <icmp_input+0x218>
          goto icmperr;
 8018fba:	bf00      	nop
 8018fbc:	e000      	b.n	8018fc0 <icmp_input+0x218>
          goto icmperr;
 8018fbe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	f7f8 fc4d 	bl	8011860 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018fc6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018fc8:	3728      	adds	r7, #40	@ 0x28
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd80      	pop	{r7, pc}
 8018fce:	bf00      	nop
 8018fd0:	2400e040 	.word	0x2400e040
 8018fd4:	2400e054 	.word	0x2400e054
 8018fd8:	0801df68 	.word	0x0801df68
 8018fdc:	0801dfa0 	.word	0x0801dfa0
 8018fe0:	0801dfd8 	.word	0x0801dfd8
 8018fe4:	0801e000 	.word	0x0801e000

08018fe8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
 8018ff0:	460b      	mov	r3, r1
 8018ff2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018ff4:	78fb      	ldrb	r3, [r7, #3]
 8018ff6:	461a      	mov	r2, r3
 8018ff8:	2103      	movs	r1, #3
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f000 f814 	bl	8019028 <icmp_send_response>
}
 8019000:	bf00      	nop
 8019002:	3708      	adds	r7, #8
 8019004:	46bd      	mov	sp, r7
 8019006:	bd80      	pop	{r7, pc}

08019008 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
 8019010:	460b      	mov	r3, r1
 8019012:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019014:	78fb      	ldrb	r3, [r7, #3]
 8019016:	461a      	mov	r2, r3
 8019018:	210b      	movs	r1, #11
 801901a:	6878      	ldr	r0, [r7, #4]
 801901c:	f000 f804 	bl	8019028 <icmp_send_response>
}
 8019020:	bf00      	nop
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}

08019028 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b08c      	sub	sp, #48	@ 0x30
 801902c:	af04      	add	r7, sp, #16
 801902e:	6078      	str	r0, [r7, #4]
 8019030:	460b      	mov	r3, r1
 8019032:	70fb      	strb	r3, [r7, #3]
 8019034:	4613      	mov	r3, r2
 8019036:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019038:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801903c:	2124      	movs	r1, #36	@ 0x24
 801903e:	2022      	movs	r0, #34	@ 0x22
 8019040:	f7f8 f926 	bl	8011290 <pbuf_alloc>
 8019044:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019046:	69fb      	ldr	r3, [r7, #28]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d056      	beq.n	80190fa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801904c:	69fb      	ldr	r3, [r7, #28]
 801904e:	895b      	ldrh	r3, [r3, #10]
 8019050:	2b23      	cmp	r3, #35	@ 0x23
 8019052:	d806      	bhi.n	8019062 <icmp_send_response+0x3a>
 8019054:	4b2b      	ldr	r3, [pc, #172]	@ (8019104 <icmp_send_response+0xdc>)
 8019056:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801905a:	492b      	ldr	r1, [pc, #172]	@ (8019108 <icmp_send_response+0xe0>)
 801905c:	482b      	ldr	r0, [pc, #172]	@ (801910c <icmp_send_response+0xe4>)
 801905e:	f001 fc41 	bl	801a8e4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	685b      	ldr	r3, [r3, #4]
 8019066:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019068:	69fb      	ldr	r3, [r7, #28]
 801906a:	685b      	ldr	r3, [r3, #4]
 801906c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801906e:	697b      	ldr	r3, [r7, #20]
 8019070:	78fa      	ldrb	r2, [r7, #3]
 8019072:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019074:	697b      	ldr	r3, [r7, #20]
 8019076:	78ba      	ldrb	r2, [r7, #2]
 8019078:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	2200      	movs	r2, #0
 801907e:	711a      	strb	r2, [r3, #4]
 8019080:	2200      	movs	r2, #0
 8019082:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019084:	697b      	ldr	r3, [r7, #20]
 8019086:	2200      	movs	r2, #0
 8019088:	719a      	strb	r2, [r3, #6]
 801908a:	2200      	movs	r2, #0
 801908c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801908e:	69fb      	ldr	r3, [r7, #28]
 8019090:	685b      	ldr	r3, [r3, #4]
 8019092:	f103 0008 	add.w	r0, r3, #8
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	685b      	ldr	r3, [r3, #4]
 801909a:	221c      	movs	r2, #28
 801909c:	4619      	mov	r1, r3
 801909e:	f001 fd5a 	bl	801ab56 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80190a2:	69bb      	ldr	r3, [r7, #24]
 80190a4:	68db      	ldr	r3, [r3, #12]
 80190a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80190a8:	f107 030c 	add.w	r3, r7, #12
 80190ac:	4618      	mov	r0, r3
 80190ae:	f000 f82f 	bl	8019110 <ip4_route>
 80190b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80190b4:	693b      	ldr	r3, [r7, #16]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d01b      	beq.n	80190f2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80190ba:	697b      	ldr	r3, [r7, #20]
 80190bc:	2200      	movs	r2, #0
 80190be:	709a      	strb	r2, [r3, #2]
 80190c0:	2200      	movs	r2, #0
 80190c2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80190c4:	69fb      	ldr	r3, [r7, #28]
 80190c6:	895b      	ldrh	r3, [r3, #10]
 80190c8:	4619      	mov	r1, r3
 80190ca:	6978      	ldr	r0, [r7, #20]
 80190cc:	f7f6 ffa2 	bl	8010014 <inet_chksum>
 80190d0:	4603      	mov	r3, r0
 80190d2:	461a      	mov	r2, r3
 80190d4:	697b      	ldr	r3, [r7, #20]
 80190d6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80190d8:	f107 020c 	add.w	r2, r7, #12
 80190dc:	693b      	ldr	r3, [r7, #16]
 80190de:	9302      	str	r3, [sp, #8]
 80190e0:	2301      	movs	r3, #1
 80190e2:	9301      	str	r3, [sp, #4]
 80190e4:	2300      	movs	r3, #0
 80190e6:	9300      	str	r3, [sp, #0]
 80190e8:	23ff      	movs	r3, #255	@ 0xff
 80190ea:	2100      	movs	r1, #0
 80190ec:	69f8      	ldr	r0, [r7, #28]
 80190ee:	f000 f9d9 	bl	80194a4 <ip4_output_if>
  }
  pbuf_free(q);
 80190f2:	69f8      	ldr	r0, [r7, #28]
 80190f4:	f7f8 fbb4 	bl	8011860 <pbuf_free>
 80190f8:	e000      	b.n	80190fc <icmp_send_response+0xd4>
    return;
 80190fa:	bf00      	nop
}
 80190fc:	3720      	adds	r7, #32
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop
 8019104:	0801df68 	.word	0x0801df68
 8019108:	0801e034 	.word	0x0801e034
 801910c:	0801dfd8 	.word	0x0801dfd8

08019110 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019110:	b480      	push	{r7}
 8019112:	b085      	sub	sp, #20
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019118:	4b33      	ldr	r3, [pc, #204]	@ (80191e8 <ip4_route+0xd8>)
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	60fb      	str	r3, [r7, #12]
 801911e:	e036      	b.n	801918e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019126:	f003 0301 	and.w	r3, r3, #1
 801912a:	b2db      	uxtb	r3, r3
 801912c:	2b00      	cmp	r3, #0
 801912e:	d02b      	beq.n	8019188 <ip4_route+0x78>
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019136:	089b      	lsrs	r3, r3, #2
 8019138:	f003 0301 	and.w	r3, r3, #1
 801913c:	b2db      	uxtb	r3, r3
 801913e:	2b00      	cmp	r3, #0
 8019140:	d022      	beq.n	8019188 <ip4_route+0x78>
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	3304      	adds	r3, #4
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d01d      	beq.n	8019188 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	681a      	ldr	r2, [r3, #0]
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	3304      	adds	r3, #4
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	405a      	eors	r2, r3
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	3308      	adds	r3, #8
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	4013      	ands	r3, r2
 8019160:	2b00      	cmp	r3, #0
 8019162:	d101      	bne.n	8019168 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	e038      	b.n	80191da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801916e:	f003 0302 	and.w	r3, r3, #2
 8019172:	2b00      	cmp	r3, #0
 8019174:	d108      	bne.n	8019188 <ip4_route+0x78>
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	681a      	ldr	r2, [r3, #0]
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	330c      	adds	r3, #12
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	429a      	cmp	r2, r3
 8019182:	d101      	bne.n	8019188 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	e028      	b.n	80191da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	60fb      	str	r3, [r7, #12]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d1c5      	bne.n	8019120 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019194:	4b15      	ldr	r3, [pc, #84]	@ (80191ec <ip4_route+0xdc>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d01a      	beq.n	80191d2 <ip4_route+0xc2>
 801919c:	4b13      	ldr	r3, [pc, #76]	@ (80191ec <ip4_route+0xdc>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80191a4:	f003 0301 	and.w	r3, r3, #1
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d012      	beq.n	80191d2 <ip4_route+0xc2>
 80191ac:	4b0f      	ldr	r3, [pc, #60]	@ (80191ec <ip4_route+0xdc>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80191b4:	f003 0304 	and.w	r3, r3, #4
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d00a      	beq.n	80191d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80191bc:	4b0b      	ldr	r3, [pc, #44]	@ (80191ec <ip4_route+0xdc>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	3304      	adds	r3, #4
 80191c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d004      	beq.n	80191d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	b2db      	uxtb	r3, r3
 80191ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80191d0:	d101      	bne.n	80191d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80191d2:	2300      	movs	r3, #0
 80191d4:	e001      	b.n	80191da <ip4_route+0xca>
  }

  return netif_default;
 80191d6:	4b05      	ldr	r3, [pc, #20]	@ (80191ec <ip4_route+0xdc>)
 80191d8:	681b      	ldr	r3, [r3, #0]
}
 80191da:	4618      	mov	r0, r3
 80191dc:	3714      	adds	r7, #20
 80191de:	46bd      	mov	sp, r7
 80191e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e4:	4770      	bx	lr
 80191e6:	bf00      	nop
 80191e8:	24014b6c 	.word	0x24014b6c
 80191ec:	24014b70 	.word	0x24014b70

080191f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b082      	sub	sp, #8
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80191fe:	f003 0301 	and.w	r3, r3, #1
 8019202:	b2db      	uxtb	r3, r3
 8019204:	2b00      	cmp	r3, #0
 8019206:	d016      	beq.n	8019236 <ip4_input_accept+0x46>
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	3304      	adds	r3, #4
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d011      	beq.n	8019236 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019212:	4b0b      	ldr	r3, [pc, #44]	@ (8019240 <ip4_input_accept+0x50>)
 8019214:	695a      	ldr	r2, [r3, #20]
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	3304      	adds	r3, #4
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	429a      	cmp	r2, r3
 801921e:	d008      	beq.n	8019232 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019220:	4b07      	ldr	r3, [pc, #28]	@ (8019240 <ip4_input_accept+0x50>)
 8019222:	695b      	ldr	r3, [r3, #20]
 8019224:	6879      	ldr	r1, [r7, #4]
 8019226:	4618      	mov	r0, r3
 8019228:	f000 fa14 	bl	8019654 <ip4_addr_isbroadcast_u32>
 801922c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801922e:	2b00      	cmp	r3, #0
 8019230:	d001      	beq.n	8019236 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019232:	2301      	movs	r3, #1
 8019234:	e000      	b.n	8019238 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019236:	2300      	movs	r3, #0
}
 8019238:	4618      	mov	r0, r3
 801923a:	3708      	adds	r7, #8
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}
 8019240:	2400e040 	.word	0x2400e040

08019244 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b086      	sub	sp, #24
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
 801924c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	685b      	ldr	r3, [r3, #4]
 8019252:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019254:	697b      	ldr	r3, [r7, #20]
 8019256:	781b      	ldrb	r3, [r3, #0]
 8019258:	091b      	lsrs	r3, r3, #4
 801925a:	b2db      	uxtb	r3, r3
 801925c:	2b04      	cmp	r3, #4
 801925e:	d004      	beq.n	801926a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7f8 fafd 	bl	8011860 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019266:	2300      	movs	r3, #0
 8019268:	e113      	b.n	8019492 <ip4_input+0x24e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801926a:	697b      	ldr	r3, [r7, #20]
 801926c:	781b      	ldrb	r3, [r3, #0]
 801926e:	f003 030f 	and.w	r3, r3, #15
 8019272:	b2db      	uxtb	r3, r3
 8019274:	009b      	lsls	r3, r3, #2
 8019276:	b2db      	uxtb	r3, r3
 8019278:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801927a:	697b      	ldr	r3, [r7, #20]
 801927c:	885b      	ldrh	r3, [r3, #2]
 801927e:	b29b      	uxth	r3, r3
 8019280:	4618      	mov	r0, r3
 8019282:	f7f6 fe3b 	bl	800fefc <lwip_htons>
 8019286:	4603      	mov	r3, r0
 8019288:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	891b      	ldrh	r3, [r3, #8]
 801928e:	89ba      	ldrh	r2, [r7, #12]
 8019290:	429a      	cmp	r2, r3
 8019292:	d204      	bcs.n	801929e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019294:	89bb      	ldrh	r3, [r7, #12]
 8019296:	4619      	mov	r1, r3
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f7f8 f95b 	bl	8011554 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	895b      	ldrh	r3, [r3, #10]
 80192a2:	89fa      	ldrh	r2, [r7, #14]
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d807      	bhi.n	80192b8 <ip4_input+0x74>
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	891b      	ldrh	r3, [r3, #8]
 80192ac:	89ba      	ldrh	r2, [r7, #12]
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d802      	bhi.n	80192b8 <ip4_input+0x74>
 80192b2:	89fb      	ldrh	r3, [r7, #14]
 80192b4:	2b13      	cmp	r3, #19
 80192b6:	d804      	bhi.n	80192c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80192b8:	6878      	ldr	r0, [r7, #4]
 80192ba:	f7f8 fad1 	bl	8011860 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80192be:	2300      	movs	r3, #0
 80192c0:	e0e7      	b.n	8019492 <ip4_input+0x24e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80192c2:	697b      	ldr	r3, [r7, #20]
 80192c4:	691b      	ldr	r3, [r3, #16]
 80192c6:	4a75      	ldr	r2, [pc, #468]	@ (801949c <ip4_input+0x258>)
 80192c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80192ca:	697b      	ldr	r3, [r7, #20]
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	4a73      	ldr	r2, [pc, #460]	@ (801949c <ip4_input+0x258>)
 80192d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80192d2:	4b72      	ldr	r3, [pc, #456]	@ (801949c <ip4_input+0x258>)
 80192d4:	695b      	ldr	r3, [r3, #20]
 80192d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80192da:	2be0      	cmp	r3, #224	@ 0xe0
 80192dc:	d112      	bne.n	8019304 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80192de:	683b      	ldr	r3, [r7, #0]
 80192e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80192e4:	f003 0301 	and.w	r3, r3, #1
 80192e8:	b2db      	uxtb	r3, r3
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d007      	beq.n	80192fe <ip4_input+0xba>
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	3304      	adds	r3, #4
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d002      	beq.n	80192fe <ip4_input+0xba>
      netif = inp;
 80192f8:	683b      	ldr	r3, [r7, #0]
 80192fa:	613b      	str	r3, [r7, #16]
 80192fc:	e02a      	b.n	8019354 <ip4_input+0x110>
    } else {
      netif = NULL;
 80192fe:	2300      	movs	r3, #0
 8019300:	613b      	str	r3, [r7, #16]
 8019302:	e027      	b.n	8019354 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019304:	6838      	ldr	r0, [r7, #0]
 8019306:	f7ff ff73 	bl	80191f0 <ip4_input_accept>
 801930a:	4603      	mov	r3, r0
 801930c:	2b00      	cmp	r3, #0
 801930e:	d002      	beq.n	8019316 <ip4_input+0xd2>
      netif = inp;
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	613b      	str	r3, [r7, #16]
 8019314:	e01e      	b.n	8019354 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019316:	2300      	movs	r3, #0
 8019318:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801931a:	4b60      	ldr	r3, [pc, #384]	@ (801949c <ip4_input+0x258>)
 801931c:	695b      	ldr	r3, [r3, #20]
 801931e:	b2db      	uxtb	r3, r3
 8019320:	2b7f      	cmp	r3, #127	@ 0x7f
 8019322:	d017      	beq.n	8019354 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019324:	4b5e      	ldr	r3, [pc, #376]	@ (80194a0 <ip4_input+0x25c>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	613b      	str	r3, [r7, #16]
 801932a:	e00e      	b.n	801934a <ip4_input+0x106>
          if (netif == inp) {
 801932c:	693a      	ldr	r2, [r7, #16]
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	429a      	cmp	r2, r3
 8019332:	d006      	beq.n	8019342 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019334:	6938      	ldr	r0, [r7, #16]
 8019336:	f7ff ff5b 	bl	80191f0 <ip4_input_accept>
 801933a:	4603      	mov	r3, r0
 801933c:	2b00      	cmp	r3, #0
 801933e:	d108      	bne.n	8019352 <ip4_input+0x10e>
 8019340:	e000      	b.n	8019344 <ip4_input+0x100>
            continue;
 8019342:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019344:	693b      	ldr	r3, [r7, #16]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	613b      	str	r3, [r7, #16]
 801934a:	693b      	ldr	r3, [r7, #16]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d1ed      	bne.n	801932c <ip4_input+0xe8>
 8019350:	e000      	b.n	8019354 <ip4_input+0x110>
            break;
 8019352:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019354:	4b51      	ldr	r3, [pc, #324]	@ (801949c <ip4_input+0x258>)
 8019356:	691b      	ldr	r3, [r3, #16]
 8019358:	6839      	ldr	r1, [r7, #0]
 801935a:	4618      	mov	r0, r3
 801935c:	f000 f97a 	bl	8019654 <ip4_addr_isbroadcast_u32>
 8019360:	4603      	mov	r3, r0
 8019362:	2b00      	cmp	r3, #0
 8019364:	d105      	bne.n	8019372 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019366:	4b4d      	ldr	r3, [pc, #308]	@ (801949c <ip4_input+0x258>)
 8019368:	691b      	ldr	r3, [r3, #16]
 801936a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801936e:	2be0      	cmp	r3, #224	@ 0xe0
 8019370:	d104      	bne.n	801937c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019372:	6878      	ldr	r0, [r7, #4]
 8019374:	f7f8 fa74 	bl	8011860 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019378:	2300      	movs	r3, #0
 801937a:	e08a      	b.n	8019492 <ip4_input+0x24e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801937c:	693b      	ldr	r3, [r7, #16]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d104      	bne.n	801938c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019382:	6878      	ldr	r0, [r7, #4]
 8019384:	f7f8 fa6c 	bl	8011860 <pbuf_free>
    return ERR_OK;
 8019388:	2300      	movs	r3, #0
 801938a:	e082      	b.n	8019492 <ip4_input+0x24e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	88db      	ldrh	r3, [r3, #6]
 8019390:	b29b      	uxth	r3, r3
 8019392:	461a      	mov	r2, r3
 8019394:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019398:	4013      	ands	r3, r2
 801939a:	2b00      	cmp	r3, #0
 801939c:	d00b      	beq.n	80193b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	f000 fc9e 	bl	8019ce0 <ip4_reass>
 80193a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d101      	bne.n	80193b0 <ip4_input+0x16c>
      return ERR_OK;
 80193ac:	2300      	movs	r3, #0
 80193ae:	e070      	b.n	8019492 <ip4_input+0x24e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80193b6:	4a39      	ldr	r2, [pc, #228]	@ (801949c <ip4_input+0x258>)
 80193b8:	693b      	ldr	r3, [r7, #16]
 80193ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80193bc:	4a37      	ldr	r2, [pc, #220]	@ (801949c <ip4_input+0x258>)
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80193c2:	4a36      	ldr	r2, [pc, #216]	@ (801949c <ip4_input+0x258>)
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	f003 030f 	and.w	r3, r3, #15
 80193d0:	b2db      	uxtb	r3, r3
 80193d2:	009b      	lsls	r3, r3, #2
 80193d4:	b2db      	uxtb	r3, r3
 80193d6:	461a      	mov	r2, r3
 80193d8:	4b30      	ldr	r3, [pc, #192]	@ (801949c <ip4_input+0x258>)
 80193da:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 80193dc:	6839      	ldr	r1, [r7, #0]
 80193de:	6878      	ldr	r0, [r7, #4]
 80193e0:	f7f8 fd22 	bl	8011e28 <raw_input>
 80193e4:	4603      	mov	r3, r0
 80193e6:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 80193e8:	7afb      	ldrb	r3, [r7, #11]
 80193ea:	2b01      	cmp	r3, #1
 80193ec:	d03e      	beq.n	801946c <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80193ee:	89fb      	ldrh	r3, [r7, #14]
 80193f0:	4619      	mov	r1, r3
 80193f2:	6878      	ldr	r0, [r7, #4]
 80193f4:	f7f8 f9ae 	bl	8011754 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80193f8:	697b      	ldr	r3, [r7, #20]
 80193fa:	7a5b      	ldrb	r3, [r3, #9]
 80193fc:	2b11      	cmp	r3, #17
 80193fe:	d006      	beq.n	801940e <ip4_input+0x1ca>
 8019400:	2b11      	cmp	r3, #17
 8019402:	dc13      	bgt.n	801942c <ip4_input+0x1e8>
 8019404:	2b01      	cmp	r3, #1
 8019406:	d00c      	beq.n	8019422 <ip4_input+0x1de>
 8019408:	2b06      	cmp	r3, #6
 801940a:	d005      	beq.n	8019418 <ip4_input+0x1d4>
 801940c:	e00e      	b.n	801942c <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801940e:	6839      	ldr	r1, [r7, #0]
 8019410:	6878      	ldr	r0, [r7, #4]
 8019412:	f7fe f941 	bl	8017698 <udp_input>
        break;
 8019416:	e029      	b.n	801946c <ip4_input+0x228>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019418:	6839      	ldr	r1, [r7, #0]
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	f7fa f956 	bl	80136cc <tcp_input>
        break;
 8019420:	e024      	b.n	801946c <ip4_input+0x228>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019422:	6839      	ldr	r1, [r7, #0]
 8019424:	6878      	ldr	r0, [r7, #4]
 8019426:	f7ff fcbf 	bl	8018da8 <icmp_input>
        break;
 801942a:	e01f      	b.n	801946c <ip4_input+0x228>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 801942c:	7afb      	ldrb	r3, [r7, #11]
 801942e:	2b02      	cmp	r3, #2
 8019430:	d018      	beq.n	8019464 <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019432:	4b1a      	ldr	r3, [pc, #104]	@ (801949c <ip4_input+0x258>)
 8019434:	695b      	ldr	r3, [r3, #20]
 8019436:	6939      	ldr	r1, [r7, #16]
 8019438:	4618      	mov	r0, r3
 801943a:	f000 f90b 	bl	8019654 <ip4_addr_isbroadcast_u32>
 801943e:	4603      	mov	r3, r0
 8019440:	2b00      	cmp	r3, #0
 8019442:	d10f      	bne.n	8019464 <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019444:	4b15      	ldr	r3, [pc, #84]	@ (801949c <ip4_input+0x258>)
 8019446:	695b      	ldr	r3, [r3, #20]
 8019448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801944c:	2be0      	cmp	r3, #224	@ 0xe0
 801944e:	d009      	beq.n	8019464 <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019454:	4619      	mov	r1, r3
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f7f8 f9ef 	bl	801183a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801945c:	2102      	movs	r1, #2
 801945e:	6878      	ldr	r0, [r7, #4]
 8019460:	f7ff fdc2 	bl	8018fe8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019464:	6878      	ldr	r0, [r7, #4]
 8019466:	f7f8 f9fb 	bl	8011860 <pbuf_free>
        break;
 801946a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801946c:	4b0b      	ldr	r3, [pc, #44]	@ (801949c <ip4_input+0x258>)
 801946e:	2200      	movs	r2, #0
 8019470:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019472:	4b0a      	ldr	r3, [pc, #40]	@ (801949c <ip4_input+0x258>)
 8019474:	2200      	movs	r2, #0
 8019476:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019478:	4b08      	ldr	r3, [pc, #32]	@ (801949c <ip4_input+0x258>)
 801947a:	2200      	movs	r2, #0
 801947c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801947e:	4b07      	ldr	r3, [pc, #28]	@ (801949c <ip4_input+0x258>)
 8019480:	2200      	movs	r2, #0
 8019482:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019484:	4b05      	ldr	r3, [pc, #20]	@ (801949c <ip4_input+0x258>)
 8019486:	2200      	movs	r2, #0
 8019488:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801948a:	4b04      	ldr	r3, [pc, #16]	@ (801949c <ip4_input+0x258>)
 801948c:	2200      	movs	r2, #0
 801948e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019490:	2300      	movs	r3, #0
}
 8019492:	4618      	mov	r0, r3
 8019494:	3718      	adds	r7, #24
 8019496:	46bd      	mov	sp, r7
 8019498:	bd80      	pop	{r7, pc}
 801949a:	bf00      	nop
 801949c:	2400e040 	.word	0x2400e040
 80194a0:	24014b6c 	.word	0x24014b6c

080194a4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b08a      	sub	sp, #40	@ 0x28
 80194a8:	af04      	add	r7, sp, #16
 80194aa:	60f8      	str	r0, [r7, #12]
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	607a      	str	r2, [r7, #4]
 80194b0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d009      	beq.n	80194d0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80194bc:	68bb      	ldr	r3, [r7, #8]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d003      	beq.n	80194ca <ip4_output_if+0x26>
 80194c2:	68bb      	ldr	r3, [r7, #8]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d102      	bne.n	80194d0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80194ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194cc:	3304      	adds	r3, #4
 80194ce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80194d0:	78fa      	ldrb	r2, [r7, #3]
 80194d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194d4:	9302      	str	r3, [sp, #8]
 80194d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80194da:	9301      	str	r3, [sp, #4]
 80194dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80194e0:	9300      	str	r3, [sp, #0]
 80194e2:	4613      	mov	r3, r2
 80194e4:	687a      	ldr	r2, [r7, #4]
 80194e6:	6979      	ldr	r1, [r7, #20]
 80194e8:	68f8      	ldr	r0, [r7, #12]
 80194ea:	f000 f805 	bl	80194f8 <ip4_output_if_src>
 80194ee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	3718      	adds	r7, #24
 80194f4:	46bd      	mov	sp, r7
 80194f6:	bd80      	pop	{r7, pc}

080194f8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b088      	sub	sp, #32
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	60f8      	str	r0, [r7, #12]
 8019500:	60b9      	str	r1, [r7, #8]
 8019502:	607a      	str	r2, [r7, #4]
 8019504:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	7b9b      	ldrb	r3, [r3, #14]
 801950a:	2b01      	cmp	r3, #1
 801950c:	d006      	beq.n	801951c <ip4_output_if_src+0x24>
 801950e:	4b4b      	ldr	r3, [pc, #300]	@ (801963c <ip4_output_if_src+0x144>)
 8019510:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8019514:	494a      	ldr	r1, [pc, #296]	@ (8019640 <ip4_output_if_src+0x148>)
 8019516:	484b      	ldr	r0, [pc, #300]	@ (8019644 <ip4_output_if_src+0x14c>)
 8019518:	f001 f9e4 	bl	801a8e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d060      	beq.n	80195e4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019522:	2314      	movs	r3, #20
 8019524:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019526:	2114      	movs	r1, #20
 8019528:	68f8      	ldr	r0, [r7, #12]
 801952a:	f7f8 f903 	bl	8011734 <pbuf_add_header>
 801952e:	4603      	mov	r3, r0
 8019530:	2b00      	cmp	r3, #0
 8019532:	d002      	beq.n	801953a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019534:	f06f 0301 	mvn.w	r3, #1
 8019538:	e07c      	b.n	8019634 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	685b      	ldr	r3, [r3, #4]
 801953e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	895b      	ldrh	r3, [r3, #10]
 8019544:	2b13      	cmp	r3, #19
 8019546:	d806      	bhi.n	8019556 <ip4_output_if_src+0x5e>
 8019548:	4b3c      	ldr	r3, [pc, #240]	@ (801963c <ip4_output_if_src+0x144>)
 801954a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801954e:	493e      	ldr	r1, [pc, #248]	@ (8019648 <ip4_output_if_src+0x150>)
 8019550:	483c      	ldr	r0, [pc, #240]	@ (8019644 <ip4_output_if_src+0x14c>)
 8019552:	f001 f9c7 	bl	801a8e4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019556:	69fb      	ldr	r3, [r7, #28]
 8019558:	78fa      	ldrb	r2, [r7, #3]
 801955a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801955c:	69fb      	ldr	r3, [r7, #28]
 801955e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019562:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681a      	ldr	r2, [r3, #0]
 8019568:	69fb      	ldr	r3, [r7, #28]
 801956a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801956c:	8b7b      	ldrh	r3, [r7, #26]
 801956e:	089b      	lsrs	r3, r3, #2
 8019570:	b29b      	uxth	r3, r3
 8019572:	b2db      	uxtb	r3, r3
 8019574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019578:	b2da      	uxtb	r2, r3
 801957a:	69fb      	ldr	r3, [r7, #28]
 801957c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801957e:	69fb      	ldr	r3, [r7, #28]
 8019580:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019584:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	891b      	ldrh	r3, [r3, #8]
 801958a:	4618      	mov	r0, r3
 801958c:	f7f6 fcb6 	bl	800fefc <lwip_htons>
 8019590:	4603      	mov	r3, r0
 8019592:	461a      	mov	r2, r3
 8019594:	69fb      	ldr	r3, [r7, #28]
 8019596:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019598:	69fb      	ldr	r3, [r7, #28]
 801959a:	2200      	movs	r2, #0
 801959c:	719a      	strb	r2, [r3, #6]
 801959e:	2200      	movs	r2, #0
 80195a0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80195a2:	4b2a      	ldr	r3, [pc, #168]	@ (801964c <ip4_output_if_src+0x154>)
 80195a4:	881b      	ldrh	r3, [r3, #0]
 80195a6:	4618      	mov	r0, r3
 80195a8:	f7f6 fca8 	bl	800fefc <lwip_htons>
 80195ac:	4603      	mov	r3, r0
 80195ae:	461a      	mov	r2, r3
 80195b0:	69fb      	ldr	r3, [r7, #28]
 80195b2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80195b4:	4b25      	ldr	r3, [pc, #148]	@ (801964c <ip4_output_if_src+0x154>)
 80195b6:	881b      	ldrh	r3, [r3, #0]
 80195b8:	3301      	adds	r3, #1
 80195ba:	b29a      	uxth	r2, r3
 80195bc:	4b23      	ldr	r3, [pc, #140]	@ (801964c <ip4_output_if_src+0x154>)
 80195be:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80195c0:	68bb      	ldr	r3, [r7, #8]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d104      	bne.n	80195d0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80195c6:	4b22      	ldr	r3, [pc, #136]	@ (8019650 <ip4_output_if_src+0x158>)
 80195c8:	681a      	ldr	r2, [r3, #0]
 80195ca:	69fb      	ldr	r3, [r7, #28]
 80195cc:	60da      	str	r2, [r3, #12]
 80195ce:	e003      	b.n	80195d8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	681a      	ldr	r2, [r3, #0]
 80195d4:	69fb      	ldr	r3, [r7, #28]
 80195d6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80195d8:	69fb      	ldr	r3, [r7, #28]
 80195da:	2200      	movs	r2, #0
 80195dc:	729a      	strb	r2, [r3, #10]
 80195de:	2200      	movs	r2, #0
 80195e0:	72da      	strb	r2, [r3, #11]
 80195e2:	e00f      	b.n	8019604 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	895b      	ldrh	r3, [r3, #10]
 80195e8:	2b13      	cmp	r3, #19
 80195ea:	d802      	bhi.n	80195f2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80195ec:	f06f 0301 	mvn.w	r3, #1
 80195f0:	e020      	b.n	8019634 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	685b      	ldr	r3, [r3, #4]
 80195f6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80195f8:	69fb      	ldr	r3, [r7, #28]
 80195fa:	691b      	ldr	r3, [r3, #16]
 80195fc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80195fe:	f107 0314 	add.w	r3, r7, #20
 8019602:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019606:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019608:	2b00      	cmp	r3, #0
 801960a:	d00c      	beq.n	8019626 <ip4_output_if_src+0x12e>
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	891a      	ldrh	r2, [r3, #8]
 8019610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019612:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019614:	429a      	cmp	r2, r3
 8019616:	d906      	bls.n	8019626 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019618:	687a      	ldr	r2, [r7, #4]
 801961a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f000 fd53 	bl	801a0c8 <ip4_frag>
 8019622:	4603      	mov	r3, r0
 8019624:	e006      	b.n	8019634 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019628:	695b      	ldr	r3, [r3, #20]
 801962a:	687a      	ldr	r2, [r7, #4]
 801962c:	68f9      	ldr	r1, [r7, #12]
 801962e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019630:	4798      	blx	r3
 8019632:	4603      	mov	r3, r0
}
 8019634:	4618      	mov	r0, r3
 8019636:	3720      	adds	r7, #32
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}
 801963c:	0801e060 	.word	0x0801e060
 8019640:	0801e094 	.word	0x0801e094
 8019644:	0801e0a0 	.word	0x0801e0a0
 8019648:	0801e0c8 	.word	0x0801e0c8
 801964c:	24014cce 	.word	0x24014cce
 8019650:	0801e540 	.word	0x0801e540

08019654 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019654:	b480      	push	{r7}
 8019656:	b085      	sub	sp, #20
 8019658:	af00      	add	r7, sp, #0
 801965a:	6078      	str	r0, [r7, #4]
 801965c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019668:	d002      	beq.n	8019670 <ip4_addr_isbroadcast_u32+0x1c>
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d101      	bne.n	8019674 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019670:	2301      	movs	r3, #1
 8019672:	e02a      	b.n	80196ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019674:	683b      	ldr	r3, [r7, #0]
 8019676:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801967a:	f003 0302 	and.w	r3, r3, #2
 801967e:	2b00      	cmp	r3, #0
 8019680:	d101      	bne.n	8019686 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019682:	2300      	movs	r3, #0
 8019684:	e021      	b.n	80196ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019686:	683b      	ldr	r3, [r7, #0]
 8019688:	3304      	adds	r3, #4
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	687a      	ldr	r2, [r7, #4]
 801968e:	429a      	cmp	r2, r3
 8019690:	d101      	bne.n	8019696 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019692:	2300      	movs	r3, #0
 8019694:	e019      	b.n	80196ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019696:	68fa      	ldr	r2, [r7, #12]
 8019698:	683b      	ldr	r3, [r7, #0]
 801969a:	3304      	adds	r3, #4
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	405a      	eors	r2, r3
 80196a0:	683b      	ldr	r3, [r7, #0]
 80196a2:	3308      	adds	r3, #8
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	4013      	ands	r3, r2
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d10d      	bne.n	80196c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80196ac:	683b      	ldr	r3, [r7, #0]
 80196ae:	3308      	adds	r3, #8
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	43da      	mvns	r2, r3
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80196b8:	683b      	ldr	r3, [r7, #0]
 80196ba:	3308      	adds	r3, #8
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80196c0:	429a      	cmp	r2, r3
 80196c2:	d101      	bne.n	80196c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80196c4:	2301      	movs	r3, #1
 80196c6:	e000      	b.n	80196ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80196c8:	2300      	movs	r3, #0
  }
}
 80196ca:	4618      	mov	r0, r3
 80196cc:	3714      	adds	r7, #20
 80196ce:	46bd      	mov	sp, r7
 80196d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d4:	4770      	bx	lr
	...

080196d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b084      	sub	sp, #16
 80196dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80196de:	2300      	movs	r3, #0
 80196e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80196e2:	4b12      	ldr	r3, [pc, #72]	@ (801972c <ip_reass_tmr+0x54>)
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80196e8:	e018      	b.n	801971c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	7fdb      	ldrb	r3, [r3, #31]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d00b      	beq.n	801970a <ip_reass_tmr+0x32>
      r->timer--;
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	7fdb      	ldrb	r3, [r3, #31]
 80196f6:	3b01      	subs	r3, #1
 80196f8:	b2da      	uxtb	r2, r3
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	60fb      	str	r3, [r7, #12]
 8019708:	e008      	b.n	801971c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019714:	68b9      	ldr	r1, [r7, #8]
 8019716:	6878      	ldr	r0, [r7, #4]
 8019718:	f000 f80a 	bl	8019730 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d1e3      	bne.n	80196ea <ip_reass_tmr+0x12>
    }
  }
}
 8019722:	bf00      	nop
 8019724:	bf00      	nop
 8019726:	3710      	adds	r7, #16
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	24014cd0 	.word	0x24014cd0

08019730 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b088      	sub	sp, #32
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
 8019738:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801973a:	2300      	movs	r3, #0
 801973c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801973e:	683a      	ldr	r2, [r7, #0]
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	429a      	cmp	r2, r3
 8019744:	d105      	bne.n	8019752 <ip_reass_free_complete_datagram+0x22>
 8019746:	4b45      	ldr	r3, [pc, #276]	@ (801985c <ip_reass_free_complete_datagram+0x12c>)
 8019748:	22ab      	movs	r2, #171	@ 0xab
 801974a:	4945      	ldr	r1, [pc, #276]	@ (8019860 <ip_reass_free_complete_datagram+0x130>)
 801974c:	4845      	ldr	r0, [pc, #276]	@ (8019864 <ip_reass_free_complete_datagram+0x134>)
 801974e:	f001 f8c9 	bl	801a8e4 <iprintf>
  if (prev != NULL) {
 8019752:	683b      	ldr	r3, [r7, #0]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d00a      	beq.n	801976e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	687a      	ldr	r2, [r7, #4]
 801975e:	429a      	cmp	r2, r3
 8019760:	d005      	beq.n	801976e <ip_reass_free_complete_datagram+0x3e>
 8019762:	4b3e      	ldr	r3, [pc, #248]	@ (801985c <ip_reass_free_complete_datagram+0x12c>)
 8019764:	22ad      	movs	r2, #173	@ 0xad
 8019766:	4940      	ldr	r1, [pc, #256]	@ (8019868 <ip_reass_free_complete_datagram+0x138>)
 8019768:	483e      	ldr	r0, [pc, #248]	@ (8019864 <ip_reass_free_complete_datagram+0x134>)
 801976a:	f001 f8bb 	bl	801a8e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	685b      	ldr	r3, [r3, #4]
 8019772:	685b      	ldr	r3, [r3, #4]
 8019774:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019776:	697b      	ldr	r3, [r7, #20]
 8019778:	889b      	ldrh	r3, [r3, #4]
 801977a:	b29b      	uxth	r3, r3
 801977c:	2b00      	cmp	r3, #0
 801977e:	d12a      	bne.n	80197d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	685b      	ldr	r3, [r3, #4]
 8019784:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019786:	697b      	ldr	r3, [r7, #20]
 8019788:	681a      	ldr	r2, [r3, #0]
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801978e:	69bb      	ldr	r3, [r7, #24]
 8019790:	6858      	ldr	r0, [r3, #4]
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	3308      	adds	r3, #8
 8019796:	2214      	movs	r2, #20
 8019798:	4619      	mov	r1, r3
 801979a:	f001 f9dc 	bl	801ab56 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801979e:	2101      	movs	r1, #1
 80197a0:	69b8      	ldr	r0, [r7, #24]
 80197a2:	f7ff fc31 	bl	8019008 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80197a6:	69b8      	ldr	r0, [r7, #24]
 80197a8:	f7f8 f8e8 	bl	801197c <pbuf_clen>
 80197ac:	4603      	mov	r3, r0
 80197ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80197b0:	8bfa      	ldrh	r2, [r7, #30]
 80197b2:	8a7b      	ldrh	r3, [r7, #18]
 80197b4:	4413      	add	r3, r2
 80197b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80197ba:	db05      	blt.n	80197c8 <ip_reass_free_complete_datagram+0x98>
 80197bc:	4b27      	ldr	r3, [pc, #156]	@ (801985c <ip_reass_free_complete_datagram+0x12c>)
 80197be:	22bc      	movs	r2, #188	@ 0xbc
 80197c0:	492a      	ldr	r1, [pc, #168]	@ (801986c <ip_reass_free_complete_datagram+0x13c>)
 80197c2:	4828      	ldr	r0, [pc, #160]	@ (8019864 <ip_reass_free_complete_datagram+0x134>)
 80197c4:	f001 f88e 	bl	801a8e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80197c8:	8bfa      	ldrh	r2, [r7, #30]
 80197ca:	8a7b      	ldrh	r3, [r7, #18]
 80197cc:	4413      	add	r3, r2
 80197ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80197d0:	69b8      	ldr	r0, [r7, #24]
 80197d2:	f7f8 f845 	bl	8011860 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	685b      	ldr	r3, [r3, #4]
 80197da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80197dc:	e01f      	b.n	801981e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80197de:	69bb      	ldr	r3, [r7, #24]
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80197e4:	69bb      	ldr	r3, [r7, #24]
 80197e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80197ee:	68f8      	ldr	r0, [r7, #12]
 80197f0:	f7f8 f8c4 	bl	801197c <pbuf_clen>
 80197f4:	4603      	mov	r3, r0
 80197f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80197f8:	8bfa      	ldrh	r2, [r7, #30]
 80197fa:	8a7b      	ldrh	r3, [r7, #18]
 80197fc:	4413      	add	r3, r2
 80197fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019802:	db05      	blt.n	8019810 <ip_reass_free_complete_datagram+0xe0>
 8019804:	4b15      	ldr	r3, [pc, #84]	@ (801985c <ip_reass_free_complete_datagram+0x12c>)
 8019806:	22cc      	movs	r2, #204	@ 0xcc
 8019808:	4918      	ldr	r1, [pc, #96]	@ (801986c <ip_reass_free_complete_datagram+0x13c>)
 801980a:	4816      	ldr	r0, [pc, #88]	@ (8019864 <ip_reass_free_complete_datagram+0x134>)
 801980c:	f001 f86a 	bl	801a8e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019810:	8bfa      	ldrh	r2, [r7, #30]
 8019812:	8a7b      	ldrh	r3, [r7, #18]
 8019814:	4413      	add	r3, r2
 8019816:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019818:	68f8      	ldr	r0, [r7, #12]
 801981a:	f7f8 f821 	bl	8011860 <pbuf_free>
  while (p != NULL) {
 801981e:	69bb      	ldr	r3, [r7, #24]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d1dc      	bne.n	80197de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019824:	6839      	ldr	r1, [r7, #0]
 8019826:	6878      	ldr	r0, [r7, #4]
 8019828:	f000 f8c2 	bl	80199b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801982c:	4b10      	ldr	r3, [pc, #64]	@ (8019870 <ip_reass_free_complete_datagram+0x140>)
 801982e:	881b      	ldrh	r3, [r3, #0]
 8019830:	8bfa      	ldrh	r2, [r7, #30]
 8019832:	429a      	cmp	r2, r3
 8019834:	d905      	bls.n	8019842 <ip_reass_free_complete_datagram+0x112>
 8019836:	4b09      	ldr	r3, [pc, #36]	@ (801985c <ip_reass_free_complete_datagram+0x12c>)
 8019838:	22d2      	movs	r2, #210	@ 0xd2
 801983a:	490e      	ldr	r1, [pc, #56]	@ (8019874 <ip_reass_free_complete_datagram+0x144>)
 801983c:	4809      	ldr	r0, [pc, #36]	@ (8019864 <ip_reass_free_complete_datagram+0x134>)
 801983e:	f001 f851 	bl	801a8e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019842:	4b0b      	ldr	r3, [pc, #44]	@ (8019870 <ip_reass_free_complete_datagram+0x140>)
 8019844:	881a      	ldrh	r2, [r3, #0]
 8019846:	8bfb      	ldrh	r3, [r7, #30]
 8019848:	1ad3      	subs	r3, r2, r3
 801984a:	b29a      	uxth	r2, r3
 801984c:	4b08      	ldr	r3, [pc, #32]	@ (8019870 <ip_reass_free_complete_datagram+0x140>)
 801984e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019850:	8bfb      	ldrh	r3, [r7, #30]
}
 8019852:	4618      	mov	r0, r3
 8019854:	3720      	adds	r7, #32
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
 801985a:	bf00      	nop
 801985c:	0801e0f8 	.word	0x0801e0f8
 8019860:	0801e134 	.word	0x0801e134
 8019864:	0801e140 	.word	0x0801e140
 8019868:	0801e168 	.word	0x0801e168
 801986c:	0801e17c 	.word	0x0801e17c
 8019870:	24014cd4 	.word	0x24014cd4
 8019874:	0801e19c 	.word	0x0801e19c

08019878 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b08a      	sub	sp, #40	@ 0x28
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019882:	2300      	movs	r3, #0
 8019884:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019886:	2300      	movs	r3, #0
 8019888:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801988a:	2300      	movs	r3, #0
 801988c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801988e:	2300      	movs	r3, #0
 8019890:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019892:	2300      	movs	r3, #0
 8019894:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019896:	4b28      	ldr	r3, [pc, #160]	@ (8019938 <ip_reass_remove_oldest_datagram+0xc0>)
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801989c:	e030      	b.n	8019900 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198a0:	695a      	ldr	r2, [r3, #20]
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	68db      	ldr	r3, [r3, #12]
 80198a6:	429a      	cmp	r2, r3
 80198a8:	d10c      	bne.n	80198c4 <ip_reass_remove_oldest_datagram+0x4c>
 80198aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198ac:	699a      	ldr	r2, [r3, #24]
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	691b      	ldr	r3, [r3, #16]
 80198b2:	429a      	cmp	r2, r3
 80198b4:	d106      	bne.n	80198c4 <ip_reass_remove_oldest_datagram+0x4c>
 80198b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198b8:	899a      	ldrh	r2, [r3, #12]
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	889b      	ldrh	r3, [r3, #4]
 80198be:	b29b      	uxth	r3, r3
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d014      	beq.n	80198ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80198c4:	693b      	ldr	r3, [r7, #16]
 80198c6:	3301      	adds	r3, #1
 80198c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80198ca:	6a3b      	ldr	r3, [r7, #32]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d104      	bne.n	80198da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80198d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80198d4:	69fb      	ldr	r3, [r7, #28]
 80198d6:	61bb      	str	r3, [r7, #24]
 80198d8:	e009      	b.n	80198ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80198da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198dc:	7fda      	ldrb	r2, [r3, #31]
 80198de:	6a3b      	ldr	r3, [r7, #32]
 80198e0:	7fdb      	ldrb	r3, [r3, #31]
 80198e2:	429a      	cmp	r2, r3
 80198e4:	d803      	bhi.n	80198ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80198e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80198ea:	69fb      	ldr	r3, [r7, #28]
 80198ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80198ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d001      	beq.n	80198fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80198f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80198fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019902:	2b00      	cmp	r3, #0
 8019904:	d1cb      	bne.n	801989e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019906:	6a3b      	ldr	r3, [r7, #32]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d008      	beq.n	801991e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801990c:	69b9      	ldr	r1, [r7, #24]
 801990e:	6a38      	ldr	r0, [r7, #32]
 8019910:	f7ff ff0e 	bl	8019730 <ip_reass_free_complete_datagram>
 8019914:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019916:	697a      	ldr	r2, [r7, #20]
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	4413      	add	r3, r2
 801991c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801991e:	697a      	ldr	r2, [r7, #20]
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	429a      	cmp	r2, r3
 8019924:	da02      	bge.n	801992c <ip_reass_remove_oldest_datagram+0xb4>
 8019926:	693b      	ldr	r3, [r7, #16]
 8019928:	2b01      	cmp	r3, #1
 801992a:	dcac      	bgt.n	8019886 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801992c:	697b      	ldr	r3, [r7, #20]
}
 801992e:	4618      	mov	r0, r3
 8019930:	3728      	adds	r7, #40	@ 0x28
 8019932:	46bd      	mov	sp, r7
 8019934:	bd80      	pop	{r7, pc}
 8019936:	bf00      	nop
 8019938:	24014cd0 	.word	0x24014cd0

0801993c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b084      	sub	sp, #16
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
 8019944:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019946:	2005      	movs	r0, #5
 8019948:	f7f7 f868 	bl	8010a1c <memp_malloc>
 801994c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d110      	bne.n	8019976 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019954:	6839      	ldr	r1, [r7, #0]
 8019956:	6878      	ldr	r0, [r7, #4]
 8019958:	f7ff ff8e 	bl	8019878 <ip_reass_remove_oldest_datagram>
 801995c:	4602      	mov	r2, r0
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	4293      	cmp	r3, r2
 8019962:	dc03      	bgt.n	801996c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019964:	2005      	movs	r0, #5
 8019966:	f7f7 f859 	bl	8010a1c <memp_malloc>
 801996a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	2b00      	cmp	r3, #0
 8019970:	d101      	bne.n	8019976 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019972:	2300      	movs	r3, #0
 8019974:	e016      	b.n	80199a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019976:	2220      	movs	r2, #32
 8019978:	2100      	movs	r1, #0
 801997a:	68f8      	ldr	r0, [r7, #12]
 801997c:	f001 f817 	bl	801a9ae <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	220f      	movs	r2, #15
 8019984:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019986:	4b09      	ldr	r3, [pc, #36]	@ (80199ac <ip_reass_enqueue_new_datagram+0x70>)
 8019988:	681a      	ldr	r2, [r3, #0]
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801998e:	4a07      	ldr	r2, [pc, #28]	@ (80199ac <ip_reass_enqueue_new_datagram+0x70>)
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	3308      	adds	r3, #8
 8019998:	2214      	movs	r2, #20
 801999a:	6879      	ldr	r1, [r7, #4]
 801999c:	4618      	mov	r0, r3
 801999e:	f001 f8da 	bl	801ab56 <memcpy>
  return ipr;
 80199a2:	68fb      	ldr	r3, [r7, #12]
}
 80199a4:	4618      	mov	r0, r3
 80199a6:	3710      	adds	r7, #16
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	24014cd0 	.word	0x24014cd0

080199b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80199ba:	4b10      	ldr	r3, [pc, #64]	@ (80199fc <ip_reass_dequeue_datagram+0x4c>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	687a      	ldr	r2, [r7, #4]
 80199c0:	429a      	cmp	r2, r3
 80199c2:	d104      	bne.n	80199ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	4a0c      	ldr	r2, [pc, #48]	@ (80199fc <ip_reass_dequeue_datagram+0x4c>)
 80199ca:	6013      	str	r3, [r2, #0]
 80199cc:	e00d      	b.n	80199ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80199ce:	683b      	ldr	r3, [r7, #0]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d106      	bne.n	80199e2 <ip_reass_dequeue_datagram+0x32>
 80199d4:	4b0a      	ldr	r3, [pc, #40]	@ (8019a00 <ip_reass_dequeue_datagram+0x50>)
 80199d6:	f240 1245 	movw	r2, #325	@ 0x145
 80199da:	490a      	ldr	r1, [pc, #40]	@ (8019a04 <ip_reass_dequeue_datagram+0x54>)
 80199dc:	480a      	ldr	r0, [pc, #40]	@ (8019a08 <ip_reass_dequeue_datagram+0x58>)
 80199de:	f000 ff81 	bl	801a8e4 <iprintf>
    prev->next = ipr->next;
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681a      	ldr	r2, [r3, #0]
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80199ea:	6879      	ldr	r1, [r7, #4]
 80199ec:	2005      	movs	r0, #5
 80199ee:	f7f7 f88b 	bl	8010b08 <memp_free>
}
 80199f2:	bf00      	nop
 80199f4:	3708      	adds	r7, #8
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd80      	pop	{r7, pc}
 80199fa:	bf00      	nop
 80199fc:	24014cd0 	.word	0x24014cd0
 8019a00:	0801e0f8 	.word	0x0801e0f8
 8019a04:	0801e1c0 	.word	0x0801e1c0
 8019a08:	0801e140 	.word	0x0801e140

08019a0c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b08c      	sub	sp, #48	@ 0x30
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	60f8      	str	r0, [r7, #12]
 8019a14:	60b9      	str	r1, [r7, #8]
 8019a16:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019a18:	2300      	movs	r3, #0
 8019a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019a1c:	2301      	movs	r3, #1
 8019a1e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019a20:	68bb      	ldr	r3, [r7, #8]
 8019a22:	685b      	ldr	r3, [r3, #4]
 8019a24:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019a26:	69fb      	ldr	r3, [r7, #28]
 8019a28:	885b      	ldrh	r3, [r3, #2]
 8019a2a:	b29b      	uxth	r3, r3
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f7f6 fa65 	bl	800fefc <lwip_htons>
 8019a32:	4603      	mov	r3, r0
 8019a34:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019a36:	69fb      	ldr	r3, [r7, #28]
 8019a38:	781b      	ldrb	r3, [r3, #0]
 8019a3a:	f003 030f 	and.w	r3, r3, #15
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	009b      	lsls	r3, r3, #2
 8019a42:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019a44:	7e7b      	ldrb	r3, [r7, #25]
 8019a46:	b29b      	uxth	r3, r3
 8019a48:	8b7a      	ldrh	r2, [r7, #26]
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	d202      	bcs.n	8019a54 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8019a52:	e135      	b.n	8019cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019a54:	7e7b      	ldrb	r3, [r7, #25]
 8019a56:	b29b      	uxth	r3, r3
 8019a58:	8b7a      	ldrh	r2, [r7, #26]
 8019a5a:	1ad3      	subs	r3, r2, r3
 8019a5c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019a5e:	69fb      	ldr	r3, [r7, #28]
 8019a60:	88db      	ldrh	r3, [r3, #6]
 8019a62:	b29b      	uxth	r3, r3
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7f6 fa49 	bl	800fefc <lwip_htons>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	00db      	lsls	r3, r3, #3
 8019a74:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019a76:	68bb      	ldr	r3, [r7, #8]
 8019a78:	685b      	ldr	r3, [r3, #4]
 8019a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8019a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a7e:	2200      	movs	r2, #0
 8019a80:	701a      	strb	r2, [r3, #0]
 8019a82:	2200      	movs	r2, #0
 8019a84:	705a      	strb	r2, [r3, #1]
 8019a86:	2200      	movs	r2, #0
 8019a88:	709a      	strb	r2, [r3, #2]
 8019a8a:	2200      	movs	r2, #0
 8019a8c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a90:	8afa      	ldrh	r2, [r7, #22]
 8019a92:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019a94:	8afa      	ldrh	r2, [r7, #22]
 8019a96:	8b7b      	ldrh	r3, [r7, #26]
 8019a98:	4413      	add	r3, r2
 8019a9a:	b29a      	uxth	r2, r3
 8019a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a9e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019aa2:	88db      	ldrh	r3, [r3, #6]
 8019aa4:	b29b      	uxth	r3, r3
 8019aa6:	8afa      	ldrh	r2, [r7, #22]
 8019aa8:	429a      	cmp	r2, r3
 8019aaa:	d902      	bls.n	8019ab2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019aac:	f04f 33ff 	mov.w	r3, #4294967295
 8019ab0:	e106      	b.n	8019cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	685b      	ldr	r3, [r3, #4]
 8019ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ab8:	e068      	b.n	8019b8c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019abc:	685b      	ldr	r3, [r3, #4]
 8019abe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ac2:	889b      	ldrh	r3, [r3, #4]
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	889b      	ldrh	r3, [r3, #4]
 8019aca:	b29b      	uxth	r3, r3
 8019acc:	429a      	cmp	r2, r3
 8019ace:	d235      	bcs.n	8019b3c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ad4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d020      	beq.n	8019b1e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ade:	889b      	ldrh	r3, [r3, #4]
 8019ae0:	b29a      	uxth	r2, r3
 8019ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ae4:	88db      	ldrh	r3, [r3, #6]
 8019ae6:	b29b      	uxth	r3, r3
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	d307      	bcc.n	8019afc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019aee:	88db      	ldrh	r3, [r3, #6]
 8019af0:	b29a      	uxth	r2, r3
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	889b      	ldrh	r3, [r3, #4]
 8019af6:	b29b      	uxth	r3, r3
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d902      	bls.n	8019b02 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019afc:	f04f 33ff 	mov.w	r3, #4294967295
 8019b00:	e0de      	b.n	8019cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b04:	68ba      	ldr	r2, [r7, #8]
 8019b06:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b0a:	88db      	ldrh	r3, [r3, #6]
 8019b0c:	b29a      	uxth	r2, r3
 8019b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b10:	889b      	ldrh	r3, [r3, #4]
 8019b12:	b29b      	uxth	r3, r3
 8019b14:	429a      	cmp	r2, r3
 8019b16:	d03d      	beq.n	8019b94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019b18:	2300      	movs	r3, #0
 8019b1a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019b1c:	e03a      	b.n	8019b94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b20:	88db      	ldrh	r3, [r3, #6]
 8019b22:	b29a      	uxth	r2, r3
 8019b24:	693b      	ldr	r3, [r7, #16]
 8019b26:	889b      	ldrh	r3, [r3, #4]
 8019b28:	b29b      	uxth	r3, r3
 8019b2a:	429a      	cmp	r2, r3
 8019b2c:	d902      	bls.n	8019b34 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b32:	e0c5      	b.n	8019cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	68ba      	ldr	r2, [r7, #8]
 8019b38:	605a      	str	r2, [r3, #4]
      break;
 8019b3a:	e02b      	b.n	8019b94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b3e:	889b      	ldrh	r3, [r3, #4]
 8019b40:	b29a      	uxth	r2, r3
 8019b42:	693b      	ldr	r3, [r7, #16]
 8019b44:	889b      	ldrh	r3, [r3, #4]
 8019b46:	b29b      	uxth	r3, r3
 8019b48:	429a      	cmp	r2, r3
 8019b4a:	d102      	bne.n	8019b52 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8019b50:	e0b6      	b.n	8019cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b54:	889b      	ldrh	r3, [r3, #4]
 8019b56:	b29a      	uxth	r2, r3
 8019b58:	693b      	ldr	r3, [r7, #16]
 8019b5a:	88db      	ldrh	r3, [r3, #6]
 8019b5c:	b29b      	uxth	r3, r3
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d202      	bcs.n	8019b68 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019b62:	f04f 33ff 	mov.w	r3, #4294967295
 8019b66:	e0ab      	b.n	8019cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d009      	beq.n	8019b82 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b70:	88db      	ldrh	r3, [r3, #6]
 8019b72:	b29a      	uxth	r2, r3
 8019b74:	693b      	ldr	r3, [r7, #16]
 8019b76:	889b      	ldrh	r3, [r3, #4]
 8019b78:	b29b      	uxth	r3, r3
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	d001      	beq.n	8019b82 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019b7e:	2300      	movs	r3, #0
 8019b80:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019b82:	693b      	ldr	r3, [r7, #16]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8019b88:	693b      	ldr	r3, [r7, #16]
 8019b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8019b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d193      	bne.n	8019aba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019b92:	e000      	b.n	8019b96 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019b94:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d12d      	bne.n	8019bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d01c      	beq.n	8019bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ba4:	88db      	ldrh	r3, [r3, #6]
 8019ba6:	b29a      	uxth	r2, r3
 8019ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019baa:	889b      	ldrh	r3, [r3, #4]
 8019bac:	b29b      	uxth	r3, r3
 8019bae:	429a      	cmp	r2, r3
 8019bb0:	d906      	bls.n	8019bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019bb2:	4b45      	ldr	r3, [pc, #276]	@ (8019cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019bb4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8019bb8:	4944      	ldr	r1, [pc, #272]	@ (8019ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019bba:	4845      	ldr	r0, [pc, #276]	@ (8019cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019bbc:	f000 fe92 	bl	801a8e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bc2:	68ba      	ldr	r2, [r7, #8]
 8019bc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bc8:	88db      	ldrh	r3, [r3, #6]
 8019bca:	b29a      	uxth	r2, r3
 8019bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bce:	889b      	ldrh	r3, [r3, #4]
 8019bd0:	b29b      	uxth	r3, r3
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	d010      	beq.n	8019bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	623b      	str	r3, [r7, #32]
 8019bda:	e00d      	b.n	8019bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d006      	beq.n	8019bf2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019be4:	4b38      	ldr	r3, [pc, #224]	@ (8019cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019be6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8019bea:	493a      	ldr	r1, [pc, #232]	@ (8019cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019bec:	4838      	ldr	r0, [pc, #224]	@ (8019cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019bee:	f000 fe79 	bl	801a8e4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	68ba      	ldr	r2, [r7, #8]
 8019bf6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d105      	bne.n	8019c0a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	7f9b      	ldrb	r3, [r3, #30]
 8019c02:	f003 0301 	and.w	r3, r3, #1
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d059      	beq.n	8019cbe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019c0a:	6a3b      	ldr	r3, [r7, #32]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d04f      	beq.n	8019cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	685b      	ldr	r3, [r3, #4]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d006      	beq.n	8019c26 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	685b      	ldr	r3, [r3, #4]
 8019c1c:	685b      	ldr	r3, [r3, #4]
 8019c1e:	889b      	ldrh	r3, [r3, #4]
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d002      	beq.n	8019c2c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019c26:	2300      	movs	r3, #0
 8019c28:	623b      	str	r3, [r7, #32]
 8019c2a:	e041      	b.n	8019cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8019c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019c36:	e012      	b.n	8019c5e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3a:	685b      	ldr	r3, [r3, #4]
 8019c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8019c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c40:	88db      	ldrh	r3, [r3, #6]
 8019c42:	b29a      	uxth	r2, r3
 8019c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c46:	889b      	ldrh	r3, [r3, #4]
 8019c48:	b29b      	uxth	r3, r3
 8019c4a:	429a      	cmp	r2, r3
 8019c4c:	d002      	beq.n	8019c54 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	623b      	str	r3, [r7, #32]
            break;
 8019c52:	e007      	b.n	8019c64 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c56:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8019c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d1e9      	bne.n	8019c38 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019c64:	6a3b      	ldr	r3, [r7, #32]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d022      	beq.n	8019cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	685b      	ldr	r3, [r3, #4]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d106      	bne.n	8019c80 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019c72:	4b15      	ldr	r3, [pc, #84]	@ (8019cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019c74:	f240 12df 	movw	r2, #479	@ 0x1df
 8019c78:	4917      	ldr	r1, [pc, #92]	@ (8019cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019c7a:	4815      	ldr	r0, [pc, #84]	@ (8019cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019c7c:	f000 fe32 	bl	801a8e4 <iprintf>
          LWIP_ASSERT("sanity check",
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	685b      	ldr	r3, [r3, #4]
 8019c84:	685b      	ldr	r3, [r3, #4]
 8019c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d106      	bne.n	8019c9a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8019cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019c8e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8019c92:	4911      	ldr	r1, [pc, #68]	@ (8019cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019c94:	480e      	ldr	r0, [pc, #56]	@ (8019cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019c96:	f000 fe25 	bl	801a8e4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d006      	beq.n	8019cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019ca2:	4b09      	ldr	r3, [pc, #36]	@ (8019cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ca4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8019ca8:	490c      	ldr	r1, [pc, #48]	@ (8019cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019caa:	4809      	ldr	r0, [pc, #36]	@ (8019cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019cac:	f000 fe1a 	bl	801a8e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019cb0:	6a3b      	ldr	r3, [r7, #32]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	bf14      	ite	ne
 8019cb6:	2301      	movne	r3, #1
 8019cb8:	2300      	moveq	r3, #0
 8019cba:	b2db      	uxtb	r3, r3
 8019cbc:	e000      	b.n	8019cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019cbe:	2300      	movs	r3, #0
}
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	3730      	adds	r7, #48	@ 0x30
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bd80      	pop	{r7, pc}
 8019cc8:	0801e0f8 	.word	0x0801e0f8
 8019ccc:	0801e1dc 	.word	0x0801e1dc
 8019cd0:	0801e140 	.word	0x0801e140
 8019cd4:	0801e1fc 	.word	0x0801e1fc
 8019cd8:	0801e234 	.word	0x0801e234
 8019cdc:	0801e244 	.word	0x0801e244

08019ce0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b08e      	sub	sp, #56	@ 0x38
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	685b      	ldr	r3, [r3, #4]
 8019cec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cf0:	781b      	ldrb	r3, [r3, #0]
 8019cf2:	f003 030f 	and.w	r3, r3, #15
 8019cf6:	b2db      	uxtb	r3, r3
 8019cf8:	009b      	lsls	r3, r3, #2
 8019cfa:	b2db      	uxtb	r3, r3
 8019cfc:	2b14      	cmp	r3, #20
 8019cfe:	f040 8171 	bne.w	8019fe4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d04:	88db      	ldrh	r3, [r3, #6]
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f7f6 f8f7 	bl	800fefc <lwip_htons>
 8019d0e:	4603      	mov	r3, r0
 8019d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d14:	b29b      	uxth	r3, r3
 8019d16:	00db      	lsls	r3, r3, #3
 8019d18:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d1c:	885b      	ldrh	r3, [r3, #2]
 8019d1e:	b29b      	uxth	r3, r3
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7f6 f8eb 	bl	800fefc <lwip_htons>
 8019d26:	4603      	mov	r3, r0
 8019d28:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d2c:	781b      	ldrb	r3, [r3, #0]
 8019d2e:	f003 030f 	and.w	r3, r3, #15
 8019d32:	b2db      	uxtb	r3, r3
 8019d34:	009b      	lsls	r3, r3, #2
 8019d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8019d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019d3e:	b29b      	uxth	r3, r3
 8019d40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019d42:	429a      	cmp	r2, r3
 8019d44:	f0c0 8150 	bcc.w	8019fe8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019d48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019d4c:	b29b      	uxth	r3, r3
 8019d4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019d50:	1ad3      	subs	r3, r2, r3
 8019d52:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f7f7 fe11 	bl	801197c <pbuf_clen>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019d5e:	4b8c      	ldr	r3, [pc, #560]	@ (8019f90 <ip4_reass+0x2b0>)
 8019d60:	881b      	ldrh	r3, [r3, #0]
 8019d62:	461a      	mov	r2, r3
 8019d64:	8c3b      	ldrh	r3, [r7, #32]
 8019d66:	4413      	add	r3, r2
 8019d68:	2b0a      	cmp	r3, #10
 8019d6a:	dd10      	ble.n	8019d8e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019d6c:	8c3b      	ldrh	r3, [r7, #32]
 8019d6e:	4619      	mov	r1, r3
 8019d70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019d72:	f7ff fd81 	bl	8019878 <ip_reass_remove_oldest_datagram>
 8019d76:	4603      	mov	r3, r0
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	f000 8137 	beq.w	8019fec <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019d7e:	4b84      	ldr	r3, [pc, #528]	@ (8019f90 <ip4_reass+0x2b0>)
 8019d80:	881b      	ldrh	r3, [r3, #0]
 8019d82:	461a      	mov	r2, r3
 8019d84:	8c3b      	ldrh	r3, [r7, #32]
 8019d86:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019d88:	2b0a      	cmp	r3, #10
 8019d8a:	f300 812f 	bgt.w	8019fec <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019d8e:	4b81      	ldr	r3, [pc, #516]	@ (8019f94 <ip4_reass+0x2b4>)
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d94:	e015      	b.n	8019dc2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d98:	695a      	ldr	r2, [r3, #20]
 8019d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d9c:	68db      	ldr	r3, [r3, #12]
 8019d9e:	429a      	cmp	r2, r3
 8019da0:	d10c      	bne.n	8019dbc <ip4_reass+0xdc>
 8019da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019da4:	699a      	ldr	r2, [r3, #24]
 8019da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019da8:	691b      	ldr	r3, [r3, #16]
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d106      	bne.n	8019dbc <ip4_reass+0xdc>
 8019dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019db0:	899a      	ldrh	r2, [r3, #12]
 8019db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019db4:	889b      	ldrh	r3, [r3, #4]
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	429a      	cmp	r2, r3
 8019dba:	d006      	beq.n	8019dca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d1e6      	bne.n	8019d96 <ip4_reass+0xb6>
 8019dc8:	e000      	b.n	8019dcc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019dca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d109      	bne.n	8019de6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019dd2:	8c3b      	ldrh	r3, [r7, #32]
 8019dd4:	4619      	mov	r1, r3
 8019dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019dd8:	f7ff fdb0 	bl	801993c <ip_reass_enqueue_new_datagram>
 8019ddc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d11c      	bne.n	8019e1e <ip4_reass+0x13e>
      goto nullreturn;
 8019de4:	e105      	b.n	8019ff2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019de8:	88db      	ldrh	r3, [r3, #6]
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	4618      	mov	r0, r3
 8019dee:	f7f6 f885 	bl	800fefc <lwip_htons>
 8019df2:	4603      	mov	r3, r0
 8019df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d110      	bne.n	8019e1e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dfe:	89db      	ldrh	r3, [r3, #14]
 8019e00:	4618      	mov	r0, r3
 8019e02:	f7f6 f87b 	bl	800fefc <lwip_htons>
 8019e06:	4603      	mov	r3, r0
 8019e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d006      	beq.n	8019e1e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e12:	3308      	adds	r3, #8
 8019e14:	2214      	movs	r2, #20
 8019e16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019e18:	4618      	mov	r0, r3
 8019e1a:	f000 fe9c 	bl	801ab56 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e20:	88db      	ldrh	r3, [r3, #6]
 8019e22:	b29b      	uxth	r3, r3
 8019e24:	f003 0320 	and.w	r3, r3, #32
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	bf0c      	ite	eq
 8019e2c:	2301      	moveq	r3, #1
 8019e2e:	2300      	movne	r3, #0
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019e34:	69fb      	ldr	r3, [r7, #28]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d00e      	beq.n	8019e58 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019e3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019e3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019e3e:	4413      	add	r3, r2
 8019e40:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019e42:	8b7a      	ldrh	r2, [r7, #26]
 8019e44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019e46:	429a      	cmp	r2, r3
 8019e48:	f0c0 80a0 	bcc.w	8019f8c <ip4_reass+0x2ac>
 8019e4c:	8b7b      	ldrh	r3, [r7, #26]
 8019e4e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8019e52:	4293      	cmp	r3, r2
 8019e54:	f200 809a 	bhi.w	8019f8c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019e58:	69fa      	ldr	r2, [r7, #28]
 8019e5a:	6879      	ldr	r1, [r7, #4]
 8019e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019e5e:	f7ff fdd5 	bl	8019a0c <ip_reass_chain_frag_into_datagram_and_validate>
 8019e62:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019e64:	697b      	ldr	r3, [r7, #20]
 8019e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e6a:	f000 809b 	beq.w	8019fa4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019e6e:	4b48      	ldr	r3, [pc, #288]	@ (8019f90 <ip4_reass+0x2b0>)
 8019e70:	881a      	ldrh	r2, [r3, #0]
 8019e72:	8c3b      	ldrh	r3, [r7, #32]
 8019e74:	4413      	add	r3, r2
 8019e76:	b29a      	uxth	r2, r3
 8019e78:	4b45      	ldr	r3, [pc, #276]	@ (8019f90 <ip4_reass+0x2b0>)
 8019e7a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019e7c:	69fb      	ldr	r3, [r7, #28]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d00d      	beq.n	8019e9e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019e82:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019e84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019e86:	4413      	add	r3, r2
 8019e88:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e8c:	8a7a      	ldrh	r2, [r7, #18]
 8019e8e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e92:	7f9b      	ldrb	r3, [r3, #30]
 8019e94:	f043 0301 	orr.w	r3, r3, #1
 8019e98:	b2da      	uxtb	r2, r3
 8019e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e9c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019e9e:	697b      	ldr	r3, [r7, #20]
 8019ea0:	2b01      	cmp	r3, #1
 8019ea2:	d171      	bne.n	8019f88 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ea6:	8b9b      	ldrh	r3, [r3, #28]
 8019ea8:	3314      	adds	r3, #20
 8019eaa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019eae:	685b      	ldr	r3, [r3, #4]
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019eb8:	685b      	ldr	r3, [r3, #4]
 8019eba:	685b      	ldr	r3, [r3, #4]
 8019ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ec0:	3308      	adds	r3, #8
 8019ec2:	2214      	movs	r2, #20
 8019ec4:	4619      	mov	r1, r3
 8019ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019ec8:	f000 fe45 	bl	801ab56 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019ecc:	8a3b      	ldrh	r3, [r7, #16]
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f7f6 f814 	bl	800fefc <lwip_htons>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	461a      	mov	r2, r3
 8019ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019eda:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ede:	2200      	movs	r2, #0
 8019ee0:	719a      	strb	r2, [r3, #6]
 8019ee2:	2200      	movs	r2, #0
 8019ee4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ee8:	2200      	movs	r2, #0
 8019eea:	729a      	strb	r2, [r3, #10]
 8019eec:	2200      	movs	r2, #0
 8019eee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019ef6:	e00d      	b.n	8019f14 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019efa:	685b      	ldr	r3, [r3, #4]
 8019efc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019efe:	2114      	movs	r1, #20
 8019f00:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019f02:	f7f7 fc27 	bl	8011754 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019f06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019f08:	6878      	ldr	r0, [r7, #4]
 8019f0a:	f7f7 fd77 	bl	80119fc <pbuf_cat>
      r = iprh->next_pbuf;
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8019f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d1ee      	bne.n	8019ef8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8019f94 <ip4_reass+0x2b4>)
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f20:	429a      	cmp	r2, r3
 8019f22:	d102      	bne.n	8019f2a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019f24:	2300      	movs	r3, #0
 8019f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019f28:	e010      	b.n	8019f4c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8019f94 <ip4_reass+0x2b4>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019f30:	e007      	b.n	8019f42 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d006      	beq.n	8019f4a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d1f4      	bne.n	8019f32 <ip4_reass+0x252>
 8019f48:	e000      	b.n	8019f4c <ip4_reass+0x26c>
          break;
 8019f4a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019f50:	f7ff fd2e 	bl	80199b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019f54:	6878      	ldr	r0, [r7, #4]
 8019f56:	f7f7 fd11 	bl	801197c <pbuf_clen>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8019f90 <ip4_reass+0x2b0>)
 8019f60:	881b      	ldrh	r3, [r3, #0]
 8019f62:	8c3a      	ldrh	r2, [r7, #32]
 8019f64:	429a      	cmp	r2, r3
 8019f66:	d906      	bls.n	8019f76 <ip4_reass+0x296>
 8019f68:	4b0b      	ldr	r3, [pc, #44]	@ (8019f98 <ip4_reass+0x2b8>)
 8019f6a:	f240 229b 	movw	r2, #667	@ 0x29b
 8019f6e:	490b      	ldr	r1, [pc, #44]	@ (8019f9c <ip4_reass+0x2bc>)
 8019f70:	480b      	ldr	r0, [pc, #44]	@ (8019fa0 <ip4_reass+0x2c0>)
 8019f72:	f000 fcb7 	bl	801a8e4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019f76:	4b06      	ldr	r3, [pc, #24]	@ (8019f90 <ip4_reass+0x2b0>)
 8019f78:	881a      	ldrh	r2, [r3, #0]
 8019f7a:	8c3b      	ldrh	r3, [r7, #32]
 8019f7c:	1ad3      	subs	r3, r2, r3
 8019f7e:	b29a      	uxth	r2, r3
 8019f80:	4b03      	ldr	r3, [pc, #12]	@ (8019f90 <ip4_reass+0x2b0>)
 8019f82:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	e038      	b.n	8019ffa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019f88:	2300      	movs	r3, #0
 8019f8a:	e036      	b.n	8019ffa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019f8c:	bf00      	nop
 8019f8e:	e00a      	b.n	8019fa6 <ip4_reass+0x2c6>
 8019f90:	24014cd4 	.word	0x24014cd4
 8019f94:	24014cd0 	.word	0x24014cd0
 8019f98:	0801e0f8 	.word	0x0801e0f8
 8019f9c:	0801e268 	.word	0x0801e268
 8019fa0:	0801e140 	.word	0x0801e140
    goto nullreturn_ipr;
 8019fa4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d106      	bne.n	8019fba <ip4_reass+0x2da>
 8019fac:	4b15      	ldr	r3, [pc, #84]	@ (801a004 <ip4_reass+0x324>)
 8019fae:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8019fb2:	4915      	ldr	r1, [pc, #84]	@ (801a008 <ip4_reass+0x328>)
 8019fb4:	4815      	ldr	r0, [pc, #84]	@ (801a00c <ip4_reass+0x32c>)
 8019fb6:	f000 fc95 	bl	801a8e4 <iprintf>
  if (ipr->p == NULL) {
 8019fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d116      	bne.n	8019ff0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019fc2:	4b13      	ldr	r3, [pc, #76]	@ (801a010 <ip4_reass+0x330>)
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	d006      	beq.n	8019fda <ip4_reass+0x2fa>
 8019fcc:	4b0d      	ldr	r3, [pc, #52]	@ (801a004 <ip4_reass+0x324>)
 8019fce:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019fd2:	4910      	ldr	r1, [pc, #64]	@ (801a014 <ip4_reass+0x334>)
 8019fd4:	480d      	ldr	r0, [pc, #52]	@ (801a00c <ip4_reass+0x32c>)
 8019fd6:	f000 fc85 	bl	801a8e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019fda:	2100      	movs	r1, #0
 8019fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019fde:	f7ff fce7 	bl	80199b0 <ip_reass_dequeue_datagram>
 8019fe2:	e006      	b.n	8019ff2 <ip4_reass+0x312>
    goto nullreturn;
 8019fe4:	bf00      	nop
 8019fe6:	e004      	b.n	8019ff2 <ip4_reass+0x312>
    goto nullreturn;
 8019fe8:	bf00      	nop
 8019fea:	e002      	b.n	8019ff2 <ip4_reass+0x312>
      goto nullreturn;
 8019fec:	bf00      	nop
 8019fee:	e000      	b.n	8019ff2 <ip4_reass+0x312>
  }

nullreturn:
 8019ff0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019ff2:	6878      	ldr	r0, [r7, #4]
 8019ff4:	f7f7 fc34 	bl	8011860 <pbuf_free>
  return NULL;
 8019ff8:	2300      	movs	r3, #0
}
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	3738      	adds	r7, #56	@ 0x38
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
 801a002:	bf00      	nop
 801a004:	0801e0f8 	.word	0x0801e0f8
 801a008:	0801e284 	.word	0x0801e284
 801a00c:	0801e140 	.word	0x0801e140
 801a010:	24014cd0 	.word	0x24014cd0
 801a014:	0801e290 	.word	0x0801e290

0801a018 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a018:	b580      	push	{r7, lr}
 801a01a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a01c:	2006      	movs	r0, #6
 801a01e:	f7f6 fcfd 	bl	8010a1c <memp_malloc>
 801a022:	4603      	mov	r3, r0
}
 801a024:	4618      	mov	r0, r3
 801a026:	bd80      	pop	{r7, pc}

0801a028 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b082      	sub	sp, #8
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d106      	bne.n	801a044 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a036:	4b07      	ldr	r3, [pc, #28]	@ (801a054 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a038:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801a03c:	4906      	ldr	r1, [pc, #24]	@ (801a058 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a03e:	4807      	ldr	r0, [pc, #28]	@ (801a05c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a040:	f000 fc50 	bl	801a8e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a044:	6879      	ldr	r1, [r7, #4]
 801a046:	2006      	movs	r0, #6
 801a048:	f7f6 fd5e 	bl	8010b08 <memp_free>
}
 801a04c:	bf00      	nop
 801a04e:	3708      	adds	r7, #8
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}
 801a054:	0801e0f8 	.word	0x0801e0f8
 801a058:	0801e2b0 	.word	0x0801e2b0
 801a05c:	0801e140 	.word	0x0801e140

0801a060 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b084      	sub	sp, #16
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d106      	bne.n	801a080 <ipfrag_free_pbuf_custom+0x20>
 801a072:	4b11      	ldr	r3, [pc, #68]	@ (801a0b8 <ipfrag_free_pbuf_custom+0x58>)
 801a074:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801a078:	4910      	ldr	r1, [pc, #64]	@ (801a0bc <ipfrag_free_pbuf_custom+0x5c>)
 801a07a:	4811      	ldr	r0, [pc, #68]	@ (801a0c0 <ipfrag_free_pbuf_custom+0x60>)
 801a07c:	f000 fc32 	bl	801a8e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a080:	68fa      	ldr	r2, [r7, #12]
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	429a      	cmp	r2, r3
 801a086:	d006      	beq.n	801a096 <ipfrag_free_pbuf_custom+0x36>
 801a088:	4b0b      	ldr	r3, [pc, #44]	@ (801a0b8 <ipfrag_free_pbuf_custom+0x58>)
 801a08a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801a08e:	490d      	ldr	r1, [pc, #52]	@ (801a0c4 <ipfrag_free_pbuf_custom+0x64>)
 801a090:	480b      	ldr	r0, [pc, #44]	@ (801a0c0 <ipfrag_free_pbuf_custom+0x60>)
 801a092:	f000 fc27 	bl	801a8e4 <iprintf>
  if (pcr->original != NULL) {
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	695b      	ldr	r3, [r3, #20]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d004      	beq.n	801a0a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	695b      	ldr	r3, [r3, #20]
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f7f7 fbdc 	bl	8011860 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a0a8:	68f8      	ldr	r0, [r7, #12]
 801a0aa:	f7ff ffbd 	bl	801a028 <ip_frag_free_pbuf_custom_ref>
}
 801a0ae:	bf00      	nop
 801a0b0:	3710      	adds	r7, #16
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
 801a0b6:	bf00      	nop
 801a0b8:	0801e0f8 	.word	0x0801e0f8
 801a0bc:	0801e2bc 	.word	0x0801e2bc
 801a0c0:	0801e140 	.word	0x0801e140
 801a0c4:	0801e2c8 	.word	0x0801e2c8

0801a0c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b094      	sub	sp, #80	@ 0x50
 801a0cc:	af02      	add	r7, sp, #8
 801a0ce:	60f8      	str	r0, [r7, #12]
 801a0d0:	60b9      	str	r1, [r7, #8]
 801a0d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a0da:	68bb      	ldr	r3, [r7, #8]
 801a0dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a0de:	3b14      	subs	r3, #20
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	da00      	bge.n	801a0e6 <ip4_frag+0x1e>
 801a0e4:	3307      	adds	r3, #7
 801a0e6:	10db      	asrs	r3, r3, #3
 801a0e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a0ea:	2314      	movs	r3, #20
 801a0ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	685b      	ldr	r3, [r3, #4]
 801a0f2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801a0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0fa:	781b      	ldrb	r3, [r3, #0]
 801a0fc:	f003 030f 	and.w	r3, r3, #15
 801a100:	b2db      	uxtb	r3, r3
 801a102:	009b      	lsls	r3, r3, #2
 801a104:	b2db      	uxtb	r3, r3
 801a106:	2b14      	cmp	r3, #20
 801a108:	d002      	beq.n	801a110 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a10a:	f06f 0305 	mvn.w	r3, #5
 801a10e:	e110      	b.n	801a332 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	895b      	ldrh	r3, [r3, #10]
 801a114:	2b13      	cmp	r3, #19
 801a116:	d809      	bhi.n	801a12c <ip4_frag+0x64>
 801a118:	4b88      	ldr	r3, [pc, #544]	@ (801a33c <ip4_frag+0x274>)
 801a11a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801a11e:	4988      	ldr	r1, [pc, #544]	@ (801a340 <ip4_frag+0x278>)
 801a120:	4888      	ldr	r0, [pc, #544]	@ (801a344 <ip4_frag+0x27c>)
 801a122:	f000 fbdf 	bl	801a8e4 <iprintf>
 801a126:	f06f 0305 	mvn.w	r3, #5
 801a12a:	e102      	b.n	801a332 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a12e:	88db      	ldrh	r3, [r3, #6]
 801a130:	b29b      	uxth	r3, r3
 801a132:	4618      	mov	r0, r3
 801a134:	f7f5 fee2 	bl	800fefc <lwip_htons>
 801a138:	4603      	mov	r3, r0
 801a13a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801a13c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a13e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a142:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a146:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a14c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	891b      	ldrh	r3, [r3, #8]
 801a152:	3b14      	subs	r3, #20
 801a154:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801a158:	e0e1      	b.n	801a31e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a15a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a15c:	00db      	lsls	r3, r3, #3
 801a15e:	b29b      	uxth	r3, r3
 801a160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a164:	4293      	cmp	r3, r2
 801a166:	bf28      	it	cs
 801a168:	4613      	movcs	r3, r2
 801a16a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a16c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a170:	2114      	movs	r1, #20
 801a172:	200e      	movs	r0, #14
 801a174:	f7f7 f88c 	bl	8011290 <pbuf_alloc>
 801a178:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801a17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	f000 80d5 	beq.w	801a32c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a184:	895b      	ldrh	r3, [r3, #10]
 801a186:	2b13      	cmp	r3, #19
 801a188:	d806      	bhi.n	801a198 <ip4_frag+0xd0>
 801a18a:	4b6c      	ldr	r3, [pc, #432]	@ (801a33c <ip4_frag+0x274>)
 801a18c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801a190:	496d      	ldr	r1, [pc, #436]	@ (801a348 <ip4_frag+0x280>)
 801a192:	486c      	ldr	r0, [pc, #432]	@ (801a344 <ip4_frag+0x27c>)
 801a194:	f000 fba6 	bl	801a8e4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a19a:	685b      	ldr	r3, [r3, #4]
 801a19c:	2214      	movs	r2, #20
 801a19e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f000 fcd8 	bl	801ab56 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1a8:	685b      	ldr	r3, [r3, #4]
 801a1aa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801a1ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a1ae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801a1b2:	e064      	b.n	801a27e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	895a      	ldrh	r2, [r3, #10]
 801a1b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a1ba:	1ad3      	subs	r3, r2, r3
 801a1bc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	895b      	ldrh	r3, [r3, #10]
 801a1c2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a1c4:	429a      	cmp	r2, r3
 801a1c6:	d906      	bls.n	801a1d6 <ip4_frag+0x10e>
 801a1c8:	4b5c      	ldr	r3, [pc, #368]	@ (801a33c <ip4_frag+0x274>)
 801a1ca:	f240 322d 	movw	r2, #813	@ 0x32d
 801a1ce:	495f      	ldr	r1, [pc, #380]	@ (801a34c <ip4_frag+0x284>)
 801a1d0:	485c      	ldr	r0, [pc, #368]	@ (801a344 <ip4_frag+0x27c>)
 801a1d2:	f000 fb87 	bl	801a8e4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a1d6:	8bfa      	ldrh	r2, [r7, #30]
 801a1d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a1dc:	4293      	cmp	r3, r2
 801a1de:	bf28      	it	cs
 801a1e0:	4613      	movcs	r3, r2
 801a1e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a1e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d105      	bne.n	801a1fa <ip4_frag+0x132>
        poff = 0;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	60fb      	str	r3, [r7, #12]
        continue;
 801a1f8:	e041      	b.n	801a27e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a1fa:	f7ff ff0d 	bl	801a018 <ip_frag_alloc_pbuf_custom_ref>
 801a1fe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a200:	69bb      	ldr	r3, [r7, #24]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d103      	bne.n	801a20e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a208:	f7f7 fb2a 	bl	8011860 <pbuf_free>
        goto memerr;
 801a20c:	e08f      	b.n	801a32e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a20e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a214:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a216:	4413      	add	r3, r2
 801a218:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801a21c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a220:	9201      	str	r2, [sp, #4]
 801a222:	9300      	str	r3, [sp, #0]
 801a224:	4603      	mov	r3, r0
 801a226:	2241      	movs	r2, #65	@ 0x41
 801a228:	2000      	movs	r0, #0
 801a22a:	f7f7 f95f 	bl	80114ec <pbuf_alloced_custom>
 801a22e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a230:	697b      	ldr	r3, [r7, #20]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d106      	bne.n	801a244 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a236:	69b8      	ldr	r0, [r7, #24]
 801a238:	f7ff fef6 	bl	801a028 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a23c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a23e:	f7f7 fb0f 	bl	8011860 <pbuf_free>
        goto memerr;
 801a242:	e074      	b.n	801a32e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a244:	68f8      	ldr	r0, [r7, #12]
 801a246:	f7f7 fbb1 	bl	80119ac <pbuf_ref>
      pcr->original = p;
 801a24a:	69bb      	ldr	r3, [r7, #24]
 801a24c:	68fa      	ldr	r2, [r7, #12]
 801a24e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a250:	69bb      	ldr	r3, [r7, #24]
 801a252:	4a3f      	ldr	r2, [pc, #252]	@ (801a350 <ip4_frag+0x288>)
 801a254:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a256:	6979      	ldr	r1, [r7, #20]
 801a258:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a25a:	f7f7 fbcf 	bl	80119fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a25e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801a262:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a266:	1ad3      	subs	r3, r2, r3
 801a268:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801a26c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a270:	2b00      	cmp	r3, #0
 801a272:	d004      	beq.n	801a27e <ip4_frag+0x1b6>
        poff = 0;
 801a274:	2300      	movs	r3, #0
 801a276:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a27e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a282:	2b00      	cmp	r3, #0
 801a284:	d196      	bne.n	801a1b4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a286:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a288:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a28c:	4413      	add	r3, r2
 801a28e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a294:	f1a3 0213 	sub.w	r2, r3, #19
 801a298:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a29c:	429a      	cmp	r2, r3
 801a29e:	bfcc      	ite	gt
 801a2a0:	2301      	movgt	r3, #1
 801a2a2:	2300      	movle	r3, #0
 801a2a4:	b2db      	uxtb	r3, r3
 801a2a6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a2a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a2ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a2b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801a2b2:	6a3b      	ldr	r3, [r7, #32]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d002      	beq.n	801a2be <ip4_frag+0x1f6>
 801a2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d003      	beq.n	801a2c6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a2be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a2c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a2c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a2c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f7f5 fe17 	bl	800fefc <lwip_htons>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	461a      	mov	r2, r3
 801a2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2d4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a2d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a2d8:	3314      	adds	r3, #20
 801a2da:	b29b      	uxth	r3, r3
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f7f5 fe0d 	bl	800fefc <lwip_htons>
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	461a      	mov	r2, r3
 801a2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2e8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	729a      	strb	r2, [r3, #10]
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a2f4:	68bb      	ldr	r3, [r7, #8]
 801a2f6:	695b      	ldr	r3, [r3, #20]
 801a2f8:	687a      	ldr	r2, [r7, #4]
 801a2fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a2fc:	68b8      	ldr	r0, [r7, #8]
 801a2fe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a300:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a302:	f7f7 faad 	bl	8011860 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a306:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a30a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a30c:	1ad3      	subs	r3, r2, r3
 801a30e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801a312:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801a316:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a318:	4413      	add	r3, r2
 801a31a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801a31e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a322:	2b00      	cmp	r3, #0
 801a324:	f47f af19 	bne.w	801a15a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a328:	2300      	movs	r3, #0
 801a32a:	e002      	b.n	801a332 <ip4_frag+0x26a>
      goto memerr;
 801a32c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a32e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a332:	4618      	mov	r0, r3
 801a334:	3748      	adds	r7, #72	@ 0x48
 801a336:	46bd      	mov	sp, r7
 801a338:	bd80      	pop	{r7, pc}
 801a33a:	bf00      	nop
 801a33c:	0801e0f8 	.word	0x0801e0f8
 801a340:	0801e2d4 	.word	0x0801e2d4
 801a344:	0801e140 	.word	0x0801e140
 801a348:	0801e2f0 	.word	0x0801e2f0
 801a34c:	0801e310 	.word	0x0801e310
 801a350:	0801a061 	.word	0x0801a061

0801a354 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b086      	sub	sp, #24
 801a358:	af00      	add	r7, sp, #0
 801a35a:	6078      	str	r0, [r7, #4]
 801a35c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a35e:	230e      	movs	r3, #14
 801a360:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	895b      	ldrh	r3, [r3, #10]
 801a366:	2b0e      	cmp	r3, #14
 801a368:	d96e      	bls.n	801a448 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	7bdb      	ldrb	r3, [r3, #15]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d106      	bne.n	801a380 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a378:	3301      	adds	r3, #1
 801a37a:	b2da      	uxtb	r2, r3
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	685b      	ldr	r3, [r3, #4]
 801a384:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a386:	693b      	ldr	r3, [r7, #16]
 801a388:	7b1a      	ldrb	r2, [r3, #12]
 801a38a:	7b5b      	ldrb	r3, [r3, #13]
 801a38c:	021b      	lsls	r3, r3, #8
 801a38e:	4313      	orrs	r3, r2
 801a390:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a392:	693b      	ldr	r3, [r7, #16]
 801a394:	781b      	ldrb	r3, [r3, #0]
 801a396:	f003 0301 	and.w	r3, r3, #1
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d023      	beq.n	801a3e6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a39e:	693b      	ldr	r3, [r7, #16]
 801a3a0:	781b      	ldrb	r3, [r3, #0]
 801a3a2:	2b01      	cmp	r3, #1
 801a3a4:	d10f      	bne.n	801a3c6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a3a6:	693b      	ldr	r3, [r7, #16]
 801a3a8:	785b      	ldrb	r3, [r3, #1]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d11b      	bne.n	801a3e6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a3ae:	693b      	ldr	r3, [r7, #16]
 801a3b0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a3b2:	2b5e      	cmp	r3, #94	@ 0x5e
 801a3b4:	d117      	bne.n	801a3e6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	7b5b      	ldrb	r3, [r3, #13]
 801a3ba:	f043 0310 	orr.w	r3, r3, #16
 801a3be:	b2da      	uxtb	r2, r3
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	735a      	strb	r2, [r3, #13]
 801a3c4:	e00f      	b.n	801a3e6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a3c6:	693b      	ldr	r3, [r7, #16]
 801a3c8:	2206      	movs	r2, #6
 801a3ca:	4928      	ldr	r1, [pc, #160]	@ (801a46c <ethernet_input+0x118>)
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f000 fade 	bl	801a98e <memcmp>
 801a3d2:	4603      	mov	r3, r0
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d106      	bne.n	801a3e6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	7b5b      	ldrb	r3, [r3, #13]
 801a3dc:	f043 0308 	orr.w	r3, r3, #8
 801a3e0:	b2da      	uxtb	r2, r3
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a3e6:	89fb      	ldrh	r3, [r7, #14]
 801a3e8:	2b08      	cmp	r3, #8
 801a3ea:	d003      	beq.n	801a3f4 <ethernet_input+0xa0>
 801a3ec:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801a3f0:	d014      	beq.n	801a41c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a3f2:	e032      	b.n	801a45a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a3f4:	683b      	ldr	r3, [r7, #0]
 801a3f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a3fa:	f003 0308 	and.w	r3, r3, #8
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d024      	beq.n	801a44c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a402:	8afb      	ldrh	r3, [r7, #22]
 801a404:	4619      	mov	r1, r3
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f7f7 f9a4 	bl	8011754 <pbuf_remove_header>
 801a40c:	4603      	mov	r3, r0
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d11e      	bne.n	801a450 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a412:	6839      	ldr	r1, [r7, #0]
 801a414:	6878      	ldr	r0, [r7, #4]
 801a416:	f7fe ff15 	bl	8019244 <ip4_input>
      break;
 801a41a:	e013      	b.n	801a444 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a41c:	683b      	ldr	r3, [r7, #0]
 801a41e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a422:	f003 0308 	and.w	r3, r3, #8
 801a426:	2b00      	cmp	r3, #0
 801a428:	d014      	beq.n	801a454 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a42a:	8afb      	ldrh	r3, [r7, #22]
 801a42c:	4619      	mov	r1, r3
 801a42e:	6878      	ldr	r0, [r7, #4]
 801a430:	f7f7 f990 	bl	8011754 <pbuf_remove_header>
 801a434:	4603      	mov	r3, r0
 801a436:	2b00      	cmp	r3, #0
 801a438:	d10e      	bne.n	801a458 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a43a:	6839      	ldr	r1, [r7, #0]
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	f7fe f88f 	bl	8018560 <etharp_input>
      break;
 801a442:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a444:	2300      	movs	r3, #0
 801a446:	e00c      	b.n	801a462 <ethernet_input+0x10e>
    goto free_and_return;
 801a448:	bf00      	nop
 801a44a:	e006      	b.n	801a45a <ethernet_input+0x106>
        goto free_and_return;
 801a44c:	bf00      	nop
 801a44e:	e004      	b.n	801a45a <ethernet_input+0x106>
        goto free_and_return;
 801a450:	bf00      	nop
 801a452:	e002      	b.n	801a45a <ethernet_input+0x106>
        goto free_and_return;
 801a454:	bf00      	nop
 801a456:	e000      	b.n	801a45a <ethernet_input+0x106>
        goto free_and_return;
 801a458:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a45a:	6878      	ldr	r0, [r7, #4]
 801a45c:	f7f7 fa00 	bl	8011860 <pbuf_free>
  return ERR_OK;
 801a460:	2300      	movs	r3, #0
}
 801a462:	4618      	mov	r0, r3
 801a464:	3718      	adds	r7, #24
 801a466:	46bd      	mov	sp, r7
 801a468:	bd80      	pop	{r7, pc}
 801a46a:	bf00      	nop
 801a46c:	0801e544 	.word	0x0801e544

0801a470 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a470:	b580      	push	{r7, lr}
 801a472:	b086      	sub	sp, #24
 801a474:	af00      	add	r7, sp, #0
 801a476:	60f8      	str	r0, [r7, #12]
 801a478:	60b9      	str	r1, [r7, #8]
 801a47a:	607a      	str	r2, [r7, #4]
 801a47c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a47e:	8c3b      	ldrh	r3, [r7, #32]
 801a480:	4618      	mov	r0, r3
 801a482:	f7f5 fd3b 	bl	800fefc <lwip_htons>
 801a486:	4603      	mov	r3, r0
 801a488:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a48a:	210e      	movs	r1, #14
 801a48c:	68b8      	ldr	r0, [r7, #8]
 801a48e:	f7f7 f951 	bl	8011734 <pbuf_add_header>
 801a492:	4603      	mov	r3, r0
 801a494:	2b00      	cmp	r3, #0
 801a496:	d125      	bne.n	801a4e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a49e:	693b      	ldr	r3, [r7, #16]
 801a4a0:	8afa      	ldrh	r2, [r7, #22]
 801a4a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a4a4:	693b      	ldr	r3, [r7, #16]
 801a4a6:	2206      	movs	r2, #6
 801a4a8:	6839      	ldr	r1, [r7, #0]
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f000 fb53 	bl	801ab56 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a4b0:	693b      	ldr	r3, [r7, #16]
 801a4b2:	3306      	adds	r3, #6
 801a4b4:	2206      	movs	r2, #6
 801a4b6:	6879      	ldr	r1, [r7, #4]
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	f000 fb4c 	bl	801ab56 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a4c4:	2b06      	cmp	r3, #6
 801a4c6:	d006      	beq.n	801a4d6 <ethernet_output+0x66>
 801a4c8:	4b0a      	ldr	r3, [pc, #40]	@ (801a4f4 <ethernet_output+0x84>)
 801a4ca:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801a4ce:	490a      	ldr	r1, [pc, #40]	@ (801a4f8 <ethernet_output+0x88>)
 801a4d0:	480a      	ldr	r0, [pc, #40]	@ (801a4fc <ethernet_output+0x8c>)
 801a4d2:	f000 fa07 	bl	801a8e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	699b      	ldr	r3, [r3, #24]
 801a4da:	68b9      	ldr	r1, [r7, #8]
 801a4dc:	68f8      	ldr	r0, [r7, #12]
 801a4de:	4798      	blx	r3
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	e002      	b.n	801a4ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a4e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a4e6:	f06f 0301 	mvn.w	r3, #1
}
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	3718      	adds	r7, #24
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	bd80      	pop	{r7, pc}
 801a4f2:	bf00      	nop
 801a4f4:	0801e320 	.word	0x0801e320
 801a4f8:	0801e358 	.word	0x0801e358
 801a4fc:	0801e38c 	.word	0x0801e38c

0801a500 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a500:	b580      	push	{r7, lr}
 801a502:	b082      	sub	sp, #8
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
 801a508:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	2200      	movs	r2, #0
 801a50e:	2104      	movs	r1, #4
 801a510:	4618      	mov	r0, r3
 801a512:	f7f1 ff03 	bl	800c31c <osMessageQueueNew>
 801a516:	4602      	mov	r2, r0
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d102      	bne.n	801a52a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801a524:	f04f 33ff 	mov.w	r3, #4294967295
 801a528:	e000      	b.n	801a52c <sys_mbox_new+0x2c>

  return ERR_OK;
 801a52a:	2300      	movs	r3, #0
}
 801a52c:	4618      	mov	r0, r3
 801a52e:	3708      	adds	r7, #8
 801a530:	46bd      	mov	sp, r7
 801a532:	bd80      	pop	{r7, pc}

0801a534 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b084      	sub	sp, #16
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6818      	ldr	r0, [r3, #0]
 801a542:	4639      	mov	r1, r7
 801a544:	2300      	movs	r3, #0
 801a546:	2200      	movs	r2, #0
 801a548:	f7f1 ff5c 	bl	800c404 <osMessageQueuePut>
 801a54c:	4603      	mov	r3, r0
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d102      	bne.n	801a558 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a552:	2300      	movs	r3, #0
 801a554:	73fb      	strb	r3, [r7, #15]
 801a556:	e001      	b.n	801a55c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a558:	23ff      	movs	r3, #255	@ 0xff
 801a55a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a560:	4618      	mov	r0, r3
 801a562:	3710      	adds	r7, #16
 801a564:	46bd      	mov	sp, r7
 801a566:	bd80      	pop	{r7, pc}

0801a568 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b086      	sub	sp, #24
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	60f8      	str	r0, [r7, #12]
 801a570:	60b9      	str	r1, [r7, #8]
 801a572:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a574:	f7f1 fbe2 	bl	800bd3c <osKernelGetTickCount>
 801a578:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d013      	beq.n	801a5a8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	6818      	ldr	r0, [r3, #0]
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2200      	movs	r2, #0
 801a588:	68b9      	ldr	r1, [r7, #8]
 801a58a:	f7f1 ff9b 	bl	800c4c4 <osMessageQueueGet>
 801a58e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d105      	bne.n	801a5a2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a596:	f7f1 fbd1 	bl	800bd3c <osKernelGetTickCount>
 801a59a:	4602      	mov	r2, r0
 801a59c:	697b      	ldr	r3, [r7, #20]
 801a59e:	1ad3      	subs	r3, r2, r3
 801a5a0:	e00f      	b.n	801a5c2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a5a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a5a6:	e00c      	b.n	801a5c2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	6818      	ldr	r0, [r3, #0]
 801a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	68b9      	ldr	r1, [r7, #8]
 801a5b4:	f7f1 ff86 	bl	800c4c4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a5b8:	f7f1 fbc0 	bl	800bd3c <osKernelGetTickCount>
 801a5bc:	4602      	mov	r2, r0
 801a5be:	697b      	ldr	r3, [r7, #20]
 801a5c0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	3718      	adds	r7, #24
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	bd80      	pop	{r7, pc}

0801a5ca <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a5ca:	b480      	push	{r7}
 801a5cc:	b083      	sub	sp, #12
 801a5ce:	af00      	add	r7, sp, #0
 801a5d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d101      	bne.n	801a5de <sys_mbox_valid+0x14>
    return 0;
 801a5da:	2300      	movs	r3, #0
 801a5dc:	e000      	b.n	801a5e0 <sys_mbox_valid+0x16>
  else
    return 1;
 801a5de:	2301      	movs	r3, #1
}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	370c      	adds	r7, #12
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ea:	4770      	bx	lr

0801a5ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801a5f0:	2000      	movs	r0, #0
 801a5f2:	f7f1 fc65 	bl	800bec0 <osMutexNew>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	4a01      	ldr	r2, [pc, #4]	@ (801a600 <sys_init+0x14>)
 801a5fa:	6013      	str	r3, [r2, #0]
#endif
}
 801a5fc:	bf00      	nop
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	24014cd8 	.word	0x24014cd8

0801a604 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a604:	b580      	push	{r7, lr}
 801a606:	b082      	sub	sp, #8
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801a60c:	2000      	movs	r0, #0
 801a60e:	f7f1 fc57 	bl	800bec0 <osMutexNew>
 801a612:	4602      	mov	r2, r0
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d102      	bne.n	801a626 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a620:	f04f 33ff 	mov.w	r3, #4294967295
 801a624:	e000      	b.n	801a628 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a626:	2300      	movs	r3, #0
}
 801a628:	4618      	mov	r0, r3
 801a62a:	3708      	adds	r7, #8
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}

0801a630 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b082      	sub	sp, #8
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	f04f 31ff 	mov.w	r1, #4294967295
 801a640:	4618      	mov	r0, r3
 801a642:	f7f1 fcc3 	bl	800bfcc <osMutexAcquire>
#endif
}
 801a646:	bf00      	nop
 801a648:	3708      	adds	r7, #8
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd80      	pop	{r7, pc}

0801a64e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a64e:	b580      	push	{r7, lr}
 801a650:	b082      	sub	sp, #8
 801a652:	af00      	add	r7, sp, #0
 801a654:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	4618      	mov	r0, r3
 801a65c:	f7f1 fd01 	bl	800c062 <osMutexRelease>
}
 801a660:	bf00      	nop
 801a662:	3708      	adds	r7, #8
 801a664:	46bd      	mov	sp, r7
 801a666:	bd80      	pop	{r7, pc}

0801a668 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b08e      	sub	sp, #56	@ 0x38
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	60f8      	str	r0, [r7, #12]
 801a670:	60b9      	str	r1, [r7, #8]
 801a672:	607a      	str	r2, [r7, #4]
 801a674:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801a676:	f107 0314 	add.w	r3, r7, #20
 801a67a:	2224      	movs	r2, #36	@ 0x24
 801a67c:	2100      	movs	r1, #0
 801a67e:	4618      	mov	r0, r3
 801a680:	f000 f995 	bl	801a9ae <memset>
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	617b      	str	r3, [r7, #20]
 801a688:	683b      	ldr	r3, [r7, #0]
 801a68a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a68c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801a690:	f107 0314 	add.w	r3, r7, #20
 801a694:	461a      	mov	r2, r3
 801a696:	6879      	ldr	r1, [r7, #4]
 801a698:	68b8      	ldr	r0, [r7, #8]
 801a69a:	f7f1 fb64 	bl	800bd66 <osThreadNew>
 801a69e:	4603      	mov	r3, r0
#endif
}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	3738      	adds	r7, #56	@ 0x38
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	bd80      	pop	{r7, pc}

0801a6a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801a6ac:	4b04      	ldr	r3, [pc, #16]	@ (801a6c0 <sys_arch_protect+0x18>)
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	f04f 31ff 	mov.w	r1, #4294967295
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	f7f1 fc89 	bl	800bfcc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801a6ba:	2301      	movs	r3, #1
}
 801a6bc:	4618      	mov	r0, r3
 801a6be:	bd80      	pop	{r7, pc}
 801a6c0:	24014cd8 	.word	0x24014cd8

0801a6c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	b082      	sub	sp, #8
 801a6c8:	af00      	add	r7, sp, #0
 801a6ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a6cc:	4b04      	ldr	r3, [pc, #16]	@ (801a6e0 <sys_arch_unprotect+0x1c>)
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f7f1 fcc6 	bl	800c062 <osMutexRelease>
}
 801a6d6:	bf00      	nop
 801a6d8:	3708      	adds	r7, #8
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	24014cd8 	.word	0x24014cd8

0801a6e4 <rand>:
 801a6e4:	4b16      	ldr	r3, [pc, #88]	@ (801a740 <rand+0x5c>)
 801a6e6:	b510      	push	{r4, lr}
 801a6e8:	681c      	ldr	r4, [r3, #0]
 801a6ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a6ec:	b9b3      	cbnz	r3, 801a71c <rand+0x38>
 801a6ee:	2018      	movs	r0, #24
 801a6f0:	f000 faa8 	bl	801ac44 <malloc>
 801a6f4:	4602      	mov	r2, r0
 801a6f6:	6320      	str	r0, [r4, #48]	@ 0x30
 801a6f8:	b920      	cbnz	r0, 801a704 <rand+0x20>
 801a6fa:	4b12      	ldr	r3, [pc, #72]	@ (801a744 <rand+0x60>)
 801a6fc:	4812      	ldr	r0, [pc, #72]	@ (801a748 <rand+0x64>)
 801a6fe:	2152      	movs	r1, #82	@ 0x52
 801a700:	f000 fa38 	bl	801ab74 <__assert_func>
 801a704:	4911      	ldr	r1, [pc, #68]	@ (801a74c <rand+0x68>)
 801a706:	4b12      	ldr	r3, [pc, #72]	@ (801a750 <rand+0x6c>)
 801a708:	e9c0 1300 	strd	r1, r3, [r0]
 801a70c:	4b11      	ldr	r3, [pc, #68]	@ (801a754 <rand+0x70>)
 801a70e:	6083      	str	r3, [r0, #8]
 801a710:	230b      	movs	r3, #11
 801a712:	8183      	strh	r3, [r0, #12]
 801a714:	2100      	movs	r1, #0
 801a716:	2001      	movs	r0, #1
 801a718:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a71c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a71e:	480e      	ldr	r0, [pc, #56]	@ (801a758 <rand+0x74>)
 801a720:	690b      	ldr	r3, [r1, #16]
 801a722:	694c      	ldr	r4, [r1, #20]
 801a724:	4a0d      	ldr	r2, [pc, #52]	@ (801a75c <rand+0x78>)
 801a726:	4358      	muls	r0, r3
 801a728:	fb02 0004 	mla	r0, r2, r4, r0
 801a72c:	fba3 3202 	umull	r3, r2, r3, r2
 801a730:	3301      	adds	r3, #1
 801a732:	eb40 0002 	adc.w	r0, r0, r2
 801a736:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a73a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a73e:	bd10      	pop	{r4, pc}
 801a740:	240049d0 	.word	0x240049d0
 801a744:	0801e552 	.word	0x0801e552
 801a748:	0801e569 	.word	0x0801e569
 801a74c:	abcd330e 	.word	0xabcd330e
 801a750:	e66d1234 	.word	0xe66d1234
 801a754:	0005deec 	.word	0x0005deec
 801a758:	5851f42d 	.word	0x5851f42d
 801a75c:	4c957f2d 	.word	0x4c957f2d

0801a760 <std>:
 801a760:	2300      	movs	r3, #0
 801a762:	b510      	push	{r4, lr}
 801a764:	4604      	mov	r4, r0
 801a766:	e9c0 3300 	strd	r3, r3, [r0]
 801a76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a76e:	6083      	str	r3, [r0, #8]
 801a770:	8181      	strh	r1, [r0, #12]
 801a772:	6643      	str	r3, [r0, #100]	@ 0x64
 801a774:	81c2      	strh	r2, [r0, #14]
 801a776:	6183      	str	r3, [r0, #24]
 801a778:	4619      	mov	r1, r3
 801a77a:	2208      	movs	r2, #8
 801a77c:	305c      	adds	r0, #92	@ 0x5c
 801a77e:	f000 f916 	bl	801a9ae <memset>
 801a782:	4b0d      	ldr	r3, [pc, #52]	@ (801a7b8 <std+0x58>)
 801a784:	6263      	str	r3, [r4, #36]	@ 0x24
 801a786:	4b0d      	ldr	r3, [pc, #52]	@ (801a7bc <std+0x5c>)
 801a788:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a78a:	4b0d      	ldr	r3, [pc, #52]	@ (801a7c0 <std+0x60>)
 801a78c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a78e:	4b0d      	ldr	r3, [pc, #52]	@ (801a7c4 <std+0x64>)
 801a790:	6323      	str	r3, [r4, #48]	@ 0x30
 801a792:	4b0d      	ldr	r3, [pc, #52]	@ (801a7c8 <std+0x68>)
 801a794:	6224      	str	r4, [r4, #32]
 801a796:	429c      	cmp	r4, r3
 801a798:	d006      	beq.n	801a7a8 <std+0x48>
 801a79a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a79e:	4294      	cmp	r4, r2
 801a7a0:	d002      	beq.n	801a7a8 <std+0x48>
 801a7a2:	33d0      	adds	r3, #208	@ 0xd0
 801a7a4:	429c      	cmp	r4, r3
 801a7a6:	d105      	bne.n	801a7b4 <std+0x54>
 801a7a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7b0:	f000 b9ce 	b.w	801ab50 <__retarget_lock_init_recursive>
 801a7b4:	bd10      	pop	{r4, pc}
 801a7b6:	bf00      	nop
 801a7b8:	0801a909 	.word	0x0801a909
 801a7bc:	0801a92b 	.word	0x0801a92b
 801a7c0:	0801a963 	.word	0x0801a963
 801a7c4:	0801a987 	.word	0x0801a987
 801a7c8:	24014cdc 	.word	0x24014cdc

0801a7cc <stdio_exit_handler>:
 801a7cc:	4a02      	ldr	r2, [pc, #8]	@ (801a7d8 <stdio_exit_handler+0xc>)
 801a7ce:	4903      	ldr	r1, [pc, #12]	@ (801a7dc <stdio_exit_handler+0x10>)
 801a7d0:	4803      	ldr	r0, [pc, #12]	@ (801a7e0 <stdio_exit_handler+0x14>)
 801a7d2:	f000 b869 	b.w	801a8a8 <_fwalk_sglue>
 801a7d6:	bf00      	nop
 801a7d8:	240049c4 	.word	0x240049c4
 801a7dc:	0801b455 	.word	0x0801b455
 801a7e0:	240049d4 	.word	0x240049d4

0801a7e4 <cleanup_stdio>:
 801a7e4:	6841      	ldr	r1, [r0, #4]
 801a7e6:	4b0c      	ldr	r3, [pc, #48]	@ (801a818 <cleanup_stdio+0x34>)
 801a7e8:	4299      	cmp	r1, r3
 801a7ea:	b510      	push	{r4, lr}
 801a7ec:	4604      	mov	r4, r0
 801a7ee:	d001      	beq.n	801a7f4 <cleanup_stdio+0x10>
 801a7f0:	f000 fe30 	bl	801b454 <_fflush_r>
 801a7f4:	68a1      	ldr	r1, [r4, #8]
 801a7f6:	4b09      	ldr	r3, [pc, #36]	@ (801a81c <cleanup_stdio+0x38>)
 801a7f8:	4299      	cmp	r1, r3
 801a7fa:	d002      	beq.n	801a802 <cleanup_stdio+0x1e>
 801a7fc:	4620      	mov	r0, r4
 801a7fe:	f000 fe29 	bl	801b454 <_fflush_r>
 801a802:	68e1      	ldr	r1, [r4, #12]
 801a804:	4b06      	ldr	r3, [pc, #24]	@ (801a820 <cleanup_stdio+0x3c>)
 801a806:	4299      	cmp	r1, r3
 801a808:	d004      	beq.n	801a814 <cleanup_stdio+0x30>
 801a80a:	4620      	mov	r0, r4
 801a80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a810:	f000 be20 	b.w	801b454 <_fflush_r>
 801a814:	bd10      	pop	{r4, pc}
 801a816:	bf00      	nop
 801a818:	24014cdc 	.word	0x24014cdc
 801a81c:	24014d44 	.word	0x24014d44
 801a820:	24014dac 	.word	0x24014dac

0801a824 <global_stdio_init.part.0>:
 801a824:	b510      	push	{r4, lr}
 801a826:	4b0b      	ldr	r3, [pc, #44]	@ (801a854 <global_stdio_init.part.0+0x30>)
 801a828:	4c0b      	ldr	r4, [pc, #44]	@ (801a858 <global_stdio_init.part.0+0x34>)
 801a82a:	4a0c      	ldr	r2, [pc, #48]	@ (801a85c <global_stdio_init.part.0+0x38>)
 801a82c:	601a      	str	r2, [r3, #0]
 801a82e:	4620      	mov	r0, r4
 801a830:	2200      	movs	r2, #0
 801a832:	2104      	movs	r1, #4
 801a834:	f7ff ff94 	bl	801a760 <std>
 801a838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a83c:	2201      	movs	r2, #1
 801a83e:	2109      	movs	r1, #9
 801a840:	f7ff ff8e 	bl	801a760 <std>
 801a844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a848:	2202      	movs	r2, #2
 801a84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a84e:	2112      	movs	r1, #18
 801a850:	f7ff bf86 	b.w	801a760 <std>
 801a854:	24014e14 	.word	0x24014e14
 801a858:	24014cdc 	.word	0x24014cdc
 801a85c:	0801a7cd 	.word	0x0801a7cd

0801a860 <__sfp_lock_acquire>:
 801a860:	4801      	ldr	r0, [pc, #4]	@ (801a868 <__sfp_lock_acquire+0x8>)
 801a862:	f000 b976 	b.w	801ab52 <__retarget_lock_acquire_recursive>
 801a866:	bf00      	nop
 801a868:	24014e1d 	.word	0x24014e1d

0801a86c <__sfp_lock_release>:
 801a86c:	4801      	ldr	r0, [pc, #4]	@ (801a874 <__sfp_lock_release+0x8>)
 801a86e:	f000 b971 	b.w	801ab54 <__retarget_lock_release_recursive>
 801a872:	bf00      	nop
 801a874:	24014e1d 	.word	0x24014e1d

0801a878 <__sinit>:
 801a878:	b510      	push	{r4, lr}
 801a87a:	4604      	mov	r4, r0
 801a87c:	f7ff fff0 	bl	801a860 <__sfp_lock_acquire>
 801a880:	6a23      	ldr	r3, [r4, #32]
 801a882:	b11b      	cbz	r3, 801a88c <__sinit+0x14>
 801a884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a888:	f7ff bff0 	b.w	801a86c <__sfp_lock_release>
 801a88c:	4b04      	ldr	r3, [pc, #16]	@ (801a8a0 <__sinit+0x28>)
 801a88e:	6223      	str	r3, [r4, #32]
 801a890:	4b04      	ldr	r3, [pc, #16]	@ (801a8a4 <__sinit+0x2c>)
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d1f5      	bne.n	801a884 <__sinit+0xc>
 801a898:	f7ff ffc4 	bl	801a824 <global_stdio_init.part.0>
 801a89c:	e7f2      	b.n	801a884 <__sinit+0xc>
 801a89e:	bf00      	nop
 801a8a0:	0801a7e5 	.word	0x0801a7e5
 801a8a4:	24014e14 	.word	0x24014e14

0801a8a8 <_fwalk_sglue>:
 801a8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8ac:	4607      	mov	r7, r0
 801a8ae:	4688      	mov	r8, r1
 801a8b0:	4614      	mov	r4, r2
 801a8b2:	2600      	movs	r6, #0
 801a8b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a8b8:	f1b9 0901 	subs.w	r9, r9, #1
 801a8bc:	d505      	bpl.n	801a8ca <_fwalk_sglue+0x22>
 801a8be:	6824      	ldr	r4, [r4, #0]
 801a8c0:	2c00      	cmp	r4, #0
 801a8c2:	d1f7      	bne.n	801a8b4 <_fwalk_sglue+0xc>
 801a8c4:	4630      	mov	r0, r6
 801a8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a8ca:	89ab      	ldrh	r3, [r5, #12]
 801a8cc:	2b01      	cmp	r3, #1
 801a8ce:	d907      	bls.n	801a8e0 <_fwalk_sglue+0x38>
 801a8d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a8d4:	3301      	adds	r3, #1
 801a8d6:	d003      	beq.n	801a8e0 <_fwalk_sglue+0x38>
 801a8d8:	4629      	mov	r1, r5
 801a8da:	4638      	mov	r0, r7
 801a8dc:	47c0      	blx	r8
 801a8de:	4306      	orrs	r6, r0
 801a8e0:	3568      	adds	r5, #104	@ 0x68
 801a8e2:	e7e9      	b.n	801a8b8 <_fwalk_sglue+0x10>

0801a8e4 <iprintf>:
 801a8e4:	b40f      	push	{r0, r1, r2, r3}
 801a8e6:	b507      	push	{r0, r1, r2, lr}
 801a8e8:	4906      	ldr	r1, [pc, #24]	@ (801a904 <iprintf+0x20>)
 801a8ea:	ab04      	add	r3, sp, #16
 801a8ec:	6808      	ldr	r0, [r1, #0]
 801a8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8f2:	6881      	ldr	r1, [r0, #8]
 801a8f4:	9301      	str	r3, [sp, #4]
 801a8f6:	f000 fa85 	bl	801ae04 <_vfiprintf_r>
 801a8fa:	b003      	add	sp, #12
 801a8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a900:	b004      	add	sp, #16
 801a902:	4770      	bx	lr
 801a904:	240049d0 	.word	0x240049d0

0801a908 <__sread>:
 801a908:	b510      	push	{r4, lr}
 801a90a:	460c      	mov	r4, r1
 801a90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a910:	f000 f8d6 	bl	801aac0 <_read_r>
 801a914:	2800      	cmp	r0, #0
 801a916:	bfab      	itete	ge
 801a918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a91a:	89a3      	ldrhlt	r3, [r4, #12]
 801a91c:	181b      	addge	r3, r3, r0
 801a91e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a922:	bfac      	ite	ge
 801a924:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a926:	81a3      	strhlt	r3, [r4, #12]
 801a928:	bd10      	pop	{r4, pc}

0801a92a <__swrite>:
 801a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a92e:	461f      	mov	r7, r3
 801a930:	898b      	ldrh	r3, [r1, #12]
 801a932:	05db      	lsls	r3, r3, #23
 801a934:	4605      	mov	r5, r0
 801a936:	460c      	mov	r4, r1
 801a938:	4616      	mov	r6, r2
 801a93a:	d505      	bpl.n	801a948 <__swrite+0x1e>
 801a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a940:	2302      	movs	r3, #2
 801a942:	2200      	movs	r2, #0
 801a944:	f000 f8aa 	bl	801aa9c <_lseek_r>
 801a948:	89a3      	ldrh	r3, [r4, #12]
 801a94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a94e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a952:	81a3      	strh	r3, [r4, #12]
 801a954:	4632      	mov	r2, r6
 801a956:	463b      	mov	r3, r7
 801a958:	4628      	mov	r0, r5
 801a95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a95e:	f000 b8c1 	b.w	801aae4 <_write_r>

0801a962 <__sseek>:
 801a962:	b510      	push	{r4, lr}
 801a964:	460c      	mov	r4, r1
 801a966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a96a:	f000 f897 	bl	801aa9c <_lseek_r>
 801a96e:	1c43      	adds	r3, r0, #1
 801a970:	89a3      	ldrh	r3, [r4, #12]
 801a972:	bf15      	itete	ne
 801a974:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a97a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a97e:	81a3      	strheq	r3, [r4, #12]
 801a980:	bf18      	it	ne
 801a982:	81a3      	strhne	r3, [r4, #12]
 801a984:	bd10      	pop	{r4, pc}

0801a986 <__sclose>:
 801a986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a98a:	f000 b819 	b.w	801a9c0 <_close_r>

0801a98e <memcmp>:
 801a98e:	b510      	push	{r4, lr}
 801a990:	3901      	subs	r1, #1
 801a992:	4402      	add	r2, r0
 801a994:	4290      	cmp	r0, r2
 801a996:	d101      	bne.n	801a99c <memcmp+0xe>
 801a998:	2000      	movs	r0, #0
 801a99a:	e005      	b.n	801a9a8 <memcmp+0x1a>
 801a99c:	7803      	ldrb	r3, [r0, #0]
 801a99e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a9a2:	42a3      	cmp	r3, r4
 801a9a4:	d001      	beq.n	801a9aa <memcmp+0x1c>
 801a9a6:	1b18      	subs	r0, r3, r4
 801a9a8:	bd10      	pop	{r4, pc}
 801a9aa:	3001      	adds	r0, #1
 801a9ac:	e7f2      	b.n	801a994 <memcmp+0x6>

0801a9ae <memset>:
 801a9ae:	4402      	add	r2, r0
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	4293      	cmp	r3, r2
 801a9b4:	d100      	bne.n	801a9b8 <memset+0xa>
 801a9b6:	4770      	bx	lr
 801a9b8:	f803 1b01 	strb.w	r1, [r3], #1
 801a9bc:	e7f9      	b.n	801a9b2 <memset+0x4>
	...

0801a9c0 <_close_r>:
 801a9c0:	b538      	push	{r3, r4, r5, lr}
 801a9c2:	4d06      	ldr	r5, [pc, #24]	@ (801a9dc <_close_r+0x1c>)
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	4604      	mov	r4, r0
 801a9c8:	4608      	mov	r0, r1
 801a9ca:	602b      	str	r3, [r5, #0]
 801a9cc:	f7e6 ff90 	bl	80018f0 <_close>
 801a9d0:	1c43      	adds	r3, r0, #1
 801a9d2:	d102      	bne.n	801a9da <_close_r+0x1a>
 801a9d4:	682b      	ldr	r3, [r5, #0]
 801a9d6:	b103      	cbz	r3, 801a9da <_close_r+0x1a>
 801a9d8:	6023      	str	r3, [r4, #0]
 801a9da:	bd38      	pop	{r3, r4, r5, pc}
 801a9dc:	24014e18 	.word	0x24014e18

0801a9e0 <_reclaim_reent>:
 801a9e0:	4b2d      	ldr	r3, [pc, #180]	@ (801aa98 <_reclaim_reent+0xb8>)
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	4283      	cmp	r3, r0
 801a9e6:	b570      	push	{r4, r5, r6, lr}
 801a9e8:	4604      	mov	r4, r0
 801a9ea:	d053      	beq.n	801aa94 <_reclaim_reent+0xb4>
 801a9ec:	69c3      	ldr	r3, [r0, #28]
 801a9ee:	b31b      	cbz	r3, 801aa38 <_reclaim_reent+0x58>
 801a9f0:	68db      	ldr	r3, [r3, #12]
 801a9f2:	b163      	cbz	r3, 801aa0e <_reclaim_reent+0x2e>
 801a9f4:	2500      	movs	r5, #0
 801a9f6:	69e3      	ldr	r3, [r4, #28]
 801a9f8:	68db      	ldr	r3, [r3, #12]
 801a9fa:	5959      	ldr	r1, [r3, r5]
 801a9fc:	b9b1      	cbnz	r1, 801aa2c <_reclaim_reent+0x4c>
 801a9fe:	3504      	adds	r5, #4
 801aa00:	2d80      	cmp	r5, #128	@ 0x80
 801aa02:	d1f8      	bne.n	801a9f6 <_reclaim_reent+0x16>
 801aa04:	69e3      	ldr	r3, [r4, #28]
 801aa06:	4620      	mov	r0, r4
 801aa08:	68d9      	ldr	r1, [r3, #12]
 801aa0a:	f000 f8d1 	bl	801abb0 <_free_r>
 801aa0e:	69e3      	ldr	r3, [r4, #28]
 801aa10:	6819      	ldr	r1, [r3, #0]
 801aa12:	b111      	cbz	r1, 801aa1a <_reclaim_reent+0x3a>
 801aa14:	4620      	mov	r0, r4
 801aa16:	f000 f8cb 	bl	801abb0 <_free_r>
 801aa1a:	69e3      	ldr	r3, [r4, #28]
 801aa1c:	689d      	ldr	r5, [r3, #8]
 801aa1e:	b15d      	cbz	r5, 801aa38 <_reclaim_reent+0x58>
 801aa20:	4629      	mov	r1, r5
 801aa22:	4620      	mov	r0, r4
 801aa24:	682d      	ldr	r5, [r5, #0]
 801aa26:	f000 f8c3 	bl	801abb0 <_free_r>
 801aa2a:	e7f8      	b.n	801aa1e <_reclaim_reent+0x3e>
 801aa2c:	680e      	ldr	r6, [r1, #0]
 801aa2e:	4620      	mov	r0, r4
 801aa30:	f000 f8be 	bl	801abb0 <_free_r>
 801aa34:	4631      	mov	r1, r6
 801aa36:	e7e1      	b.n	801a9fc <_reclaim_reent+0x1c>
 801aa38:	6961      	ldr	r1, [r4, #20]
 801aa3a:	b111      	cbz	r1, 801aa42 <_reclaim_reent+0x62>
 801aa3c:	4620      	mov	r0, r4
 801aa3e:	f000 f8b7 	bl	801abb0 <_free_r>
 801aa42:	69e1      	ldr	r1, [r4, #28]
 801aa44:	b111      	cbz	r1, 801aa4c <_reclaim_reent+0x6c>
 801aa46:	4620      	mov	r0, r4
 801aa48:	f000 f8b2 	bl	801abb0 <_free_r>
 801aa4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801aa4e:	b111      	cbz	r1, 801aa56 <_reclaim_reent+0x76>
 801aa50:	4620      	mov	r0, r4
 801aa52:	f000 f8ad 	bl	801abb0 <_free_r>
 801aa56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aa58:	b111      	cbz	r1, 801aa60 <_reclaim_reent+0x80>
 801aa5a:	4620      	mov	r0, r4
 801aa5c:	f000 f8a8 	bl	801abb0 <_free_r>
 801aa60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801aa62:	b111      	cbz	r1, 801aa6a <_reclaim_reent+0x8a>
 801aa64:	4620      	mov	r0, r4
 801aa66:	f000 f8a3 	bl	801abb0 <_free_r>
 801aa6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801aa6c:	b111      	cbz	r1, 801aa74 <_reclaim_reent+0x94>
 801aa6e:	4620      	mov	r0, r4
 801aa70:	f000 f89e 	bl	801abb0 <_free_r>
 801aa74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801aa76:	b111      	cbz	r1, 801aa7e <_reclaim_reent+0x9e>
 801aa78:	4620      	mov	r0, r4
 801aa7a:	f000 f899 	bl	801abb0 <_free_r>
 801aa7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801aa80:	b111      	cbz	r1, 801aa88 <_reclaim_reent+0xa8>
 801aa82:	4620      	mov	r0, r4
 801aa84:	f000 f894 	bl	801abb0 <_free_r>
 801aa88:	6a23      	ldr	r3, [r4, #32]
 801aa8a:	b11b      	cbz	r3, 801aa94 <_reclaim_reent+0xb4>
 801aa8c:	4620      	mov	r0, r4
 801aa8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa92:	4718      	bx	r3
 801aa94:	bd70      	pop	{r4, r5, r6, pc}
 801aa96:	bf00      	nop
 801aa98:	240049d0 	.word	0x240049d0

0801aa9c <_lseek_r>:
 801aa9c:	b538      	push	{r3, r4, r5, lr}
 801aa9e:	4d07      	ldr	r5, [pc, #28]	@ (801aabc <_lseek_r+0x20>)
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	4608      	mov	r0, r1
 801aaa4:	4611      	mov	r1, r2
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	602a      	str	r2, [r5, #0]
 801aaaa:	461a      	mov	r2, r3
 801aaac:	f7e6 ff47 	bl	800193e <_lseek>
 801aab0:	1c43      	adds	r3, r0, #1
 801aab2:	d102      	bne.n	801aaba <_lseek_r+0x1e>
 801aab4:	682b      	ldr	r3, [r5, #0]
 801aab6:	b103      	cbz	r3, 801aaba <_lseek_r+0x1e>
 801aab8:	6023      	str	r3, [r4, #0]
 801aaba:	bd38      	pop	{r3, r4, r5, pc}
 801aabc:	24014e18 	.word	0x24014e18

0801aac0 <_read_r>:
 801aac0:	b538      	push	{r3, r4, r5, lr}
 801aac2:	4d07      	ldr	r5, [pc, #28]	@ (801aae0 <_read_r+0x20>)
 801aac4:	4604      	mov	r4, r0
 801aac6:	4608      	mov	r0, r1
 801aac8:	4611      	mov	r1, r2
 801aaca:	2200      	movs	r2, #0
 801aacc:	602a      	str	r2, [r5, #0]
 801aace:	461a      	mov	r2, r3
 801aad0:	f7e6 fed5 	bl	800187e <_read>
 801aad4:	1c43      	adds	r3, r0, #1
 801aad6:	d102      	bne.n	801aade <_read_r+0x1e>
 801aad8:	682b      	ldr	r3, [r5, #0]
 801aada:	b103      	cbz	r3, 801aade <_read_r+0x1e>
 801aadc:	6023      	str	r3, [r4, #0]
 801aade:	bd38      	pop	{r3, r4, r5, pc}
 801aae0:	24014e18 	.word	0x24014e18

0801aae4 <_write_r>:
 801aae4:	b538      	push	{r3, r4, r5, lr}
 801aae6:	4d07      	ldr	r5, [pc, #28]	@ (801ab04 <_write_r+0x20>)
 801aae8:	4604      	mov	r4, r0
 801aaea:	4608      	mov	r0, r1
 801aaec:	4611      	mov	r1, r2
 801aaee:	2200      	movs	r2, #0
 801aaf0:	602a      	str	r2, [r5, #0]
 801aaf2:	461a      	mov	r2, r3
 801aaf4:	f7e6 fee0 	bl	80018b8 <_write>
 801aaf8:	1c43      	adds	r3, r0, #1
 801aafa:	d102      	bne.n	801ab02 <_write_r+0x1e>
 801aafc:	682b      	ldr	r3, [r5, #0]
 801aafe:	b103      	cbz	r3, 801ab02 <_write_r+0x1e>
 801ab00:	6023      	str	r3, [r4, #0]
 801ab02:	bd38      	pop	{r3, r4, r5, pc}
 801ab04:	24014e18 	.word	0x24014e18

0801ab08 <__libc_init_array>:
 801ab08:	b570      	push	{r4, r5, r6, lr}
 801ab0a:	4d0d      	ldr	r5, [pc, #52]	@ (801ab40 <__libc_init_array+0x38>)
 801ab0c:	4c0d      	ldr	r4, [pc, #52]	@ (801ab44 <__libc_init_array+0x3c>)
 801ab0e:	1b64      	subs	r4, r4, r5
 801ab10:	10a4      	asrs	r4, r4, #2
 801ab12:	2600      	movs	r6, #0
 801ab14:	42a6      	cmp	r6, r4
 801ab16:	d109      	bne.n	801ab2c <__libc_init_array+0x24>
 801ab18:	4d0b      	ldr	r5, [pc, #44]	@ (801ab48 <__libc_init_array+0x40>)
 801ab1a:	4c0c      	ldr	r4, [pc, #48]	@ (801ab4c <__libc_init_array+0x44>)
 801ab1c:	f000 fe48 	bl	801b7b0 <_init>
 801ab20:	1b64      	subs	r4, r4, r5
 801ab22:	10a4      	asrs	r4, r4, #2
 801ab24:	2600      	movs	r6, #0
 801ab26:	42a6      	cmp	r6, r4
 801ab28:	d105      	bne.n	801ab36 <__libc_init_array+0x2e>
 801ab2a:	bd70      	pop	{r4, r5, r6, pc}
 801ab2c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab30:	4798      	blx	r3
 801ab32:	3601      	adds	r6, #1
 801ab34:	e7ee      	b.n	801ab14 <__libc_init_array+0xc>
 801ab36:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab3a:	4798      	blx	r3
 801ab3c:	3601      	adds	r6, #1
 801ab3e:	e7f2      	b.n	801ab26 <__libc_init_array+0x1e>
 801ab40:	0801e638 	.word	0x0801e638
 801ab44:	0801e638 	.word	0x0801e638
 801ab48:	0801e638 	.word	0x0801e638
 801ab4c:	0801e63c 	.word	0x0801e63c

0801ab50 <__retarget_lock_init_recursive>:
 801ab50:	4770      	bx	lr

0801ab52 <__retarget_lock_acquire_recursive>:
 801ab52:	4770      	bx	lr

0801ab54 <__retarget_lock_release_recursive>:
 801ab54:	4770      	bx	lr

0801ab56 <memcpy>:
 801ab56:	440a      	add	r2, r1
 801ab58:	4291      	cmp	r1, r2
 801ab5a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ab5e:	d100      	bne.n	801ab62 <memcpy+0xc>
 801ab60:	4770      	bx	lr
 801ab62:	b510      	push	{r4, lr}
 801ab64:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab68:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ab6c:	4291      	cmp	r1, r2
 801ab6e:	d1f9      	bne.n	801ab64 <memcpy+0xe>
 801ab70:	bd10      	pop	{r4, pc}
	...

0801ab74 <__assert_func>:
 801ab74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab76:	4614      	mov	r4, r2
 801ab78:	461a      	mov	r2, r3
 801ab7a:	4b09      	ldr	r3, [pc, #36]	@ (801aba0 <__assert_func+0x2c>)
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	4605      	mov	r5, r0
 801ab80:	68d8      	ldr	r0, [r3, #12]
 801ab82:	b14c      	cbz	r4, 801ab98 <__assert_func+0x24>
 801ab84:	4b07      	ldr	r3, [pc, #28]	@ (801aba4 <__assert_func+0x30>)
 801ab86:	9100      	str	r1, [sp, #0]
 801ab88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ab8c:	4906      	ldr	r1, [pc, #24]	@ (801aba8 <__assert_func+0x34>)
 801ab8e:	462b      	mov	r3, r5
 801ab90:	f000 fc88 	bl	801b4a4 <fiprintf>
 801ab94:	f000 fd3c 	bl	801b610 <abort>
 801ab98:	4b04      	ldr	r3, [pc, #16]	@ (801abac <__assert_func+0x38>)
 801ab9a:	461c      	mov	r4, r3
 801ab9c:	e7f3      	b.n	801ab86 <__assert_func+0x12>
 801ab9e:	bf00      	nop
 801aba0:	240049d0 	.word	0x240049d0
 801aba4:	0801e5c1 	.word	0x0801e5c1
 801aba8:	0801e5ce 	.word	0x0801e5ce
 801abac:	0801e5fc 	.word	0x0801e5fc

0801abb0 <_free_r>:
 801abb0:	b538      	push	{r3, r4, r5, lr}
 801abb2:	4605      	mov	r5, r0
 801abb4:	2900      	cmp	r1, #0
 801abb6:	d041      	beq.n	801ac3c <_free_r+0x8c>
 801abb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801abbc:	1f0c      	subs	r4, r1, #4
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	bfb8      	it	lt
 801abc2:	18e4      	addlt	r4, r4, r3
 801abc4:	f000 f8e8 	bl	801ad98 <__malloc_lock>
 801abc8:	4a1d      	ldr	r2, [pc, #116]	@ (801ac40 <_free_r+0x90>)
 801abca:	6813      	ldr	r3, [r2, #0]
 801abcc:	b933      	cbnz	r3, 801abdc <_free_r+0x2c>
 801abce:	6063      	str	r3, [r4, #4]
 801abd0:	6014      	str	r4, [r2, #0]
 801abd2:	4628      	mov	r0, r5
 801abd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abd8:	f000 b8e4 	b.w	801ada4 <__malloc_unlock>
 801abdc:	42a3      	cmp	r3, r4
 801abde:	d908      	bls.n	801abf2 <_free_r+0x42>
 801abe0:	6820      	ldr	r0, [r4, #0]
 801abe2:	1821      	adds	r1, r4, r0
 801abe4:	428b      	cmp	r3, r1
 801abe6:	bf01      	itttt	eq
 801abe8:	6819      	ldreq	r1, [r3, #0]
 801abea:	685b      	ldreq	r3, [r3, #4]
 801abec:	1809      	addeq	r1, r1, r0
 801abee:	6021      	streq	r1, [r4, #0]
 801abf0:	e7ed      	b.n	801abce <_free_r+0x1e>
 801abf2:	461a      	mov	r2, r3
 801abf4:	685b      	ldr	r3, [r3, #4]
 801abf6:	b10b      	cbz	r3, 801abfc <_free_r+0x4c>
 801abf8:	42a3      	cmp	r3, r4
 801abfa:	d9fa      	bls.n	801abf2 <_free_r+0x42>
 801abfc:	6811      	ldr	r1, [r2, #0]
 801abfe:	1850      	adds	r0, r2, r1
 801ac00:	42a0      	cmp	r0, r4
 801ac02:	d10b      	bne.n	801ac1c <_free_r+0x6c>
 801ac04:	6820      	ldr	r0, [r4, #0]
 801ac06:	4401      	add	r1, r0
 801ac08:	1850      	adds	r0, r2, r1
 801ac0a:	4283      	cmp	r3, r0
 801ac0c:	6011      	str	r1, [r2, #0]
 801ac0e:	d1e0      	bne.n	801abd2 <_free_r+0x22>
 801ac10:	6818      	ldr	r0, [r3, #0]
 801ac12:	685b      	ldr	r3, [r3, #4]
 801ac14:	6053      	str	r3, [r2, #4]
 801ac16:	4408      	add	r0, r1
 801ac18:	6010      	str	r0, [r2, #0]
 801ac1a:	e7da      	b.n	801abd2 <_free_r+0x22>
 801ac1c:	d902      	bls.n	801ac24 <_free_r+0x74>
 801ac1e:	230c      	movs	r3, #12
 801ac20:	602b      	str	r3, [r5, #0]
 801ac22:	e7d6      	b.n	801abd2 <_free_r+0x22>
 801ac24:	6820      	ldr	r0, [r4, #0]
 801ac26:	1821      	adds	r1, r4, r0
 801ac28:	428b      	cmp	r3, r1
 801ac2a:	bf04      	itt	eq
 801ac2c:	6819      	ldreq	r1, [r3, #0]
 801ac2e:	685b      	ldreq	r3, [r3, #4]
 801ac30:	6063      	str	r3, [r4, #4]
 801ac32:	bf04      	itt	eq
 801ac34:	1809      	addeq	r1, r1, r0
 801ac36:	6021      	streq	r1, [r4, #0]
 801ac38:	6054      	str	r4, [r2, #4]
 801ac3a:	e7ca      	b.n	801abd2 <_free_r+0x22>
 801ac3c:	bd38      	pop	{r3, r4, r5, pc}
 801ac3e:	bf00      	nop
 801ac40:	24014e24 	.word	0x24014e24

0801ac44 <malloc>:
 801ac44:	4b02      	ldr	r3, [pc, #8]	@ (801ac50 <malloc+0xc>)
 801ac46:	4601      	mov	r1, r0
 801ac48:	6818      	ldr	r0, [r3, #0]
 801ac4a:	f000 b825 	b.w	801ac98 <_malloc_r>
 801ac4e:	bf00      	nop
 801ac50:	240049d0 	.word	0x240049d0

0801ac54 <sbrk_aligned>:
 801ac54:	b570      	push	{r4, r5, r6, lr}
 801ac56:	4e0f      	ldr	r6, [pc, #60]	@ (801ac94 <sbrk_aligned+0x40>)
 801ac58:	460c      	mov	r4, r1
 801ac5a:	6831      	ldr	r1, [r6, #0]
 801ac5c:	4605      	mov	r5, r0
 801ac5e:	b911      	cbnz	r1, 801ac66 <sbrk_aligned+0x12>
 801ac60:	f000 fcc6 	bl	801b5f0 <_sbrk_r>
 801ac64:	6030      	str	r0, [r6, #0]
 801ac66:	4621      	mov	r1, r4
 801ac68:	4628      	mov	r0, r5
 801ac6a:	f000 fcc1 	bl	801b5f0 <_sbrk_r>
 801ac6e:	1c43      	adds	r3, r0, #1
 801ac70:	d103      	bne.n	801ac7a <sbrk_aligned+0x26>
 801ac72:	f04f 34ff 	mov.w	r4, #4294967295
 801ac76:	4620      	mov	r0, r4
 801ac78:	bd70      	pop	{r4, r5, r6, pc}
 801ac7a:	1cc4      	adds	r4, r0, #3
 801ac7c:	f024 0403 	bic.w	r4, r4, #3
 801ac80:	42a0      	cmp	r0, r4
 801ac82:	d0f8      	beq.n	801ac76 <sbrk_aligned+0x22>
 801ac84:	1a21      	subs	r1, r4, r0
 801ac86:	4628      	mov	r0, r5
 801ac88:	f000 fcb2 	bl	801b5f0 <_sbrk_r>
 801ac8c:	3001      	adds	r0, #1
 801ac8e:	d1f2      	bne.n	801ac76 <sbrk_aligned+0x22>
 801ac90:	e7ef      	b.n	801ac72 <sbrk_aligned+0x1e>
 801ac92:	bf00      	nop
 801ac94:	24014e20 	.word	0x24014e20

0801ac98 <_malloc_r>:
 801ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac9c:	1ccd      	adds	r5, r1, #3
 801ac9e:	f025 0503 	bic.w	r5, r5, #3
 801aca2:	3508      	adds	r5, #8
 801aca4:	2d0c      	cmp	r5, #12
 801aca6:	bf38      	it	cc
 801aca8:	250c      	movcc	r5, #12
 801acaa:	2d00      	cmp	r5, #0
 801acac:	4606      	mov	r6, r0
 801acae:	db01      	blt.n	801acb4 <_malloc_r+0x1c>
 801acb0:	42a9      	cmp	r1, r5
 801acb2:	d904      	bls.n	801acbe <_malloc_r+0x26>
 801acb4:	230c      	movs	r3, #12
 801acb6:	6033      	str	r3, [r6, #0]
 801acb8:	2000      	movs	r0, #0
 801acba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ad94 <_malloc_r+0xfc>
 801acc2:	f000 f869 	bl	801ad98 <__malloc_lock>
 801acc6:	f8d8 3000 	ldr.w	r3, [r8]
 801acca:	461c      	mov	r4, r3
 801accc:	bb44      	cbnz	r4, 801ad20 <_malloc_r+0x88>
 801acce:	4629      	mov	r1, r5
 801acd0:	4630      	mov	r0, r6
 801acd2:	f7ff ffbf 	bl	801ac54 <sbrk_aligned>
 801acd6:	1c43      	adds	r3, r0, #1
 801acd8:	4604      	mov	r4, r0
 801acda:	d158      	bne.n	801ad8e <_malloc_r+0xf6>
 801acdc:	f8d8 4000 	ldr.w	r4, [r8]
 801ace0:	4627      	mov	r7, r4
 801ace2:	2f00      	cmp	r7, #0
 801ace4:	d143      	bne.n	801ad6e <_malloc_r+0xd6>
 801ace6:	2c00      	cmp	r4, #0
 801ace8:	d04b      	beq.n	801ad82 <_malloc_r+0xea>
 801acea:	6823      	ldr	r3, [r4, #0]
 801acec:	4639      	mov	r1, r7
 801acee:	4630      	mov	r0, r6
 801acf0:	eb04 0903 	add.w	r9, r4, r3
 801acf4:	f000 fc7c 	bl	801b5f0 <_sbrk_r>
 801acf8:	4581      	cmp	r9, r0
 801acfa:	d142      	bne.n	801ad82 <_malloc_r+0xea>
 801acfc:	6821      	ldr	r1, [r4, #0]
 801acfe:	1a6d      	subs	r5, r5, r1
 801ad00:	4629      	mov	r1, r5
 801ad02:	4630      	mov	r0, r6
 801ad04:	f7ff ffa6 	bl	801ac54 <sbrk_aligned>
 801ad08:	3001      	adds	r0, #1
 801ad0a:	d03a      	beq.n	801ad82 <_malloc_r+0xea>
 801ad0c:	6823      	ldr	r3, [r4, #0]
 801ad0e:	442b      	add	r3, r5
 801ad10:	6023      	str	r3, [r4, #0]
 801ad12:	f8d8 3000 	ldr.w	r3, [r8]
 801ad16:	685a      	ldr	r2, [r3, #4]
 801ad18:	bb62      	cbnz	r2, 801ad74 <_malloc_r+0xdc>
 801ad1a:	f8c8 7000 	str.w	r7, [r8]
 801ad1e:	e00f      	b.n	801ad40 <_malloc_r+0xa8>
 801ad20:	6822      	ldr	r2, [r4, #0]
 801ad22:	1b52      	subs	r2, r2, r5
 801ad24:	d420      	bmi.n	801ad68 <_malloc_r+0xd0>
 801ad26:	2a0b      	cmp	r2, #11
 801ad28:	d917      	bls.n	801ad5a <_malloc_r+0xc2>
 801ad2a:	1961      	adds	r1, r4, r5
 801ad2c:	42a3      	cmp	r3, r4
 801ad2e:	6025      	str	r5, [r4, #0]
 801ad30:	bf18      	it	ne
 801ad32:	6059      	strne	r1, [r3, #4]
 801ad34:	6863      	ldr	r3, [r4, #4]
 801ad36:	bf08      	it	eq
 801ad38:	f8c8 1000 	streq.w	r1, [r8]
 801ad3c:	5162      	str	r2, [r4, r5]
 801ad3e:	604b      	str	r3, [r1, #4]
 801ad40:	4630      	mov	r0, r6
 801ad42:	f000 f82f 	bl	801ada4 <__malloc_unlock>
 801ad46:	f104 000b 	add.w	r0, r4, #11
 801ad4a:	1d23      	adds	r3, r4, #4
 801ad4c:	f020 0007 	bic.w	r0, r0, #7
 801ad50:	1ac2      	subs	r2, r0, r3
 801ad52:	bf1c      	itt	ne
 801ad54:	1a1b      	subne	r3, r3, r0
 801ad56:	50a3      	strne	r3, [r4, r2]
 801ad58:	e7af      	b.n	801acba <_malloc_r+0x22>
 801ad5a:	6862      	ldr	r2, [r4, #4]
 801ad5c:	42a3      	cmp	r3, r4
 801ad5e:	bf0c      	ite	eq
 801ad60:	f8c8 2000 	streq.w	r2, [r8]
 801ad64:	605a      	strne	r2, [r3, #4]
 801ad66:	e7eb      	b.n	801ad40 <_malloc_r+0xa8>
 801ad68:	4623      	mov	r3, r4
 801ad6a:	6864      	ldr	r4, [r4, #4]
 801ad6c:	e7ae      	b.n	801accc <_malloc_r+0x34>
 801ad6e:	463c      	mov	r4, r7
 801ad70:	687f      	ldr	r7, [r7, #4]
 801ad72:	e7b6      	b.n	801ace2 <_malloc_r+0x4a>
 801ad74:	461a      	mov	r2, r3
 801ad76:	685b      	ldr	r3, [r3, #4]
 801ad78:	42a3      	cmp	r3, r4
 801ad7a:	d1fb      	bne.n	801ad74 <_malloc_r+0xdc>
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	6053      	str	r3, [r2, #4]
 801ad80:	e7de      	b.n	801ad40 <_malloc_r+0xa8>
 801ad82:	230c      	movs	r3, #12
 801ad84:	6033      	str	r3, [r6, #0]
 801ad86:	4630      	mov	r0, r6
 801ad88:	f000 f80c 	bl	801ada4 <__malloc_unlock>
 801ad8c:	e794      	b.n	801acb8 <_malloc_r+0x20>
 801ad8e:	6005      	str	r5, [r0, #0]
 801ad90:	e7d6      	b.n	801ad40 <_malloc_r+0xa8>
 801ad92:	bf00      	nop
 801ad94:	24014e24 	.word	0x24014e24

0801ad98 <__malloc_lock>:
 801ad98:	4801      	ldr	r0, [pc, #4]	@ (801ada0 <__malloc_lock+0x8>)
 801ad9a:	f7ff beda 	b.w	801ab52 <__retarget_lock_acquire_recursive>
 801ad9e:	bf00      	nop
 801ada0:	24014e1c 	.word	0x24014e1c

0801ada4 <__malloc_unlock>:
 801ada4:	4801      	ldr	r0, [pc, #4]	@ (801adac <__malloc_unlock+0x8>)
 801ada6:	f7ff bed5 	b.w	801ab54 <__retarget_lock_release_recursive>
 801adaa:	bf00      	nop
 801adac:	24014e1c 	.word	0x24014e1c

0801adb0 <__sfputc_r>:
 801adb0:	6893      	ldr	r3, [r2, #8]
 801adb2:	3b01      	subs	r3, #1
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	b410      	push	{r4}
 801adb8:	6093      	str	r3, [r2, #8]
 801adba:	da08      	bge.n	801adce <__sfputc_r+0x1e>
 801adbc:	6994      	ldr	r4, [r2, #24]
 801adbe:	42a3      	cmp	r3, r4
 801adc0:	db01      	blt.n	801adc6 <__sfputc_r+0x16>
 801adc2:	290a      	cmp	r1, #10
 801adc4:	d103      	bne.n	801adce <__sfputc_r+0x1e>
 801adc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adca:	f000 bb7d 	b.w	801b4c8 <__swbuf_r>
 801adce:	6813      	ldr	r3, [r2, #0]
 801add0:	1c58      	adds	r0, r3, #1
 801add2:	6010      	str	r0, [r2, #0]
 801add4:	7019      	strb	r1, [r3, #0]
 801add6:	4608      	mov	r0, r1
 801add8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801addc:	4770      	bx	lr

0801adde <__sfputs_r>:
 801adde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ade0:	4606      	mov	r6, r0
 801ade2:	460f      	mov	r7, r1
 801ade4:	4614      	mov	r4, r2
 801ade6:	18d5      	adds	r5, r2, r3
 801ade8:	42ac      	cmp	r4, r5
 801adea:	d101      	bne.n	801adf0 <__sfputs_r+0x12>
 801adec:	2000      	movs	r0, #0
 801adee:	e007      	b.n	801ae00 <__sfputs_r+0x22>
 801adf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adf4:	463a      	mov	r2, r7
 801adf6:	4630      	mov	r0, r6
 801adf8:	f7ff ffda 	bl	801adb0 <__sfputc_r>
 801adfc:	1c43      	adds	r3, r0, #1
 801adfe:	d1f3      	bne.n	801ade8 <__sfputs_r+0xa>
 801ae00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ae04 <_vfiprintf_r>:
 801ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae08:	460d      	mov	r5, r1
 801ae0a:	b09d      	sub	sp, #116	@ 0x74
 801ae0c:	4614      	mov	r4, r2
 801ae0e:	4698      	mov	r8, r3
 801ae10:	4606      	mov	r6, r0
 801ae12:	b118      	cbz	r0, 801ae1c <_vfiprintf_r+0x18>
 801ae14:	6a03      	ldr	r3, [r0, #32]
 801ae16:	b90b      	cbnz	r3, 801ae1c <_vfiprintf_r+0x18>
 801ae18:	f7ff fd2e 	bl	801a878 <__sinit>
 801ae1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ae1e:	07d9      	lsls	r1, r3, #31
 801ae20:	d405      	bmi.n	801ae2e <_vfiprintf_r+0x2a>
 801ae22:	89ab      	ldrh	r3, [r5, #12]
 801ae24:	059a      	lsls	r2, r3, #22
 801ae26:	d402      	bmi.n	801ae2e <_vfiprintf_r+0x2a>
 801ae28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ae2a:	f7ff fe92 	bl	801ab52 <__retarget_lock_acquire_recursive>
 801ae2e:	89ab      	ldrh	r3, [r5, #12]
 801ae30:	071b      	lsls	r3, r3, #28
 801ae32:	d501      	bpl.n	801ae38 <_vfiprintf_r+0x34>
 801ae34:	692b      	ldr	r3, [r5, #16]
 801ae36:	b99b      	cbnz	r3, 801ae60 <_vfiprintf_r+0x5c>
 801ae38:	4629      	mov	r1, r5
 801ae3a:	4630      	mov	r0, r6
 801ae3c:	f000 fb82 	bl	801b544 <__swsetup_r>
 801ae40:	b170      	cbz	r0, 801ae60 <_vfiprintf_r+0x5c>
 801ae42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ae44:	07dc      	lsls	r4, r3, #31
 801ae46:	d504      	bpl.n	801ae52 <_vfiprintf_r+0x4e>
 801ae48:	f04f 30ff 	mov.w	r0, #4294967295
 801ae4c:	b01d      	add	sp, #116	@ 0x74
 801ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae52:	89ab      	ldrh	r3, [r5, #12]
 801ae54:	0598      	lsls	r0, r3, #22
 801ae56:	d4f7      	bmi.n	801ae48 <_vfiprintf_r+0x44>
 801ae58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ae5a:	f7ff fe7b 	bl	801ab54 <__retarget_lock_release_recursive>
 801ae5e:	e7f3      	b.n	801ae48 <_vfiprintf_r+0x44>
 801ae60:	2300      	movs	r3, #0
 801ae62:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae64:	2320      	movs	r3, #32
 801ae66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ae6a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae6e:	2330      	movs	r3, #48	@ 0x30
 801ae70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b020 <_vfiprintf_r+0x21c>
 801ae74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ae78:	f04f 0901 	mov.w	r9, #1
 801ae7c:	4623      	mov	r3, r4
 801ae7e:	469a      	mov	sl, r3
 801ae80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae84:	b10a      	cbz	r2, 801ae8a <_vfiprintf_r+0x86>
 801ae86:	2a25      	cmp	r2, #37	@ 0x25
 801ae88:	d1f9      	bne.n	801ae7e <_vfiprintf_r+0x7a>
 801ae8a:	ebba 0b04 	subs.w	fp, sl, r4
 801ae8e:	d00b      	beq.n	801aea8 <_vfiprintf_r+0xa4>
 801ae90:	465b      	mov	r3, fp
 801ae92:	4622      	mov	r2, r4
 801ae94:	4629      	mov	r1, r5
 801ae96:	4630      	mov	r0, r6
 801ae98:	f7ff ffa1 	bl	801adde <__sfputs_r>
 801ae9c:	3001      	adds	r0, #1
 801ae9e:	f000 80a7 	beq.w	801aff0 <_vfiprintf_r+0x1ec>
 801aea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aea4:	445a      	add	r2, fp
 801aea6:	9209      	str	r2, [sp, #36]	@ 0x24
 801aea8:	f89a 3000 	ldrb.w	r3, [sl]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	f000 809f 	beq.w	801aff0 <_vfiprintf_r+0x1ec>
 801aeb2:	2300      	movs	r3, #0
 801aeb4:	f04f 32ff 	mov.w	r2, #4294967295
 801aeb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aebc:	f10a 0a01 	add.w	sl, sl, #1
 801aec0:	9304      	str	r3, [sp, #16]
 801aec2:	9307      	str	r3, [sp, #28]
 801aec4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801aec8:	931a      	str	r3, [sp, #104]	@ 0x68
 801aeca:	4654      	mov	r4, sl
 801aecc:	2205      	movs	r2, #5
 801aece:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aed2:	4853      	ldr	r0, [pc, #332]	@ (801b020 <_vfiprintf_r+0x21c>)
 801aed4:	f7e5 fa1c 	bl	8000310 <memchr>
 801aed8:	9a04      	ldr	r2, [sp, #16]
 801aeda:	b9d8      	cbnz	r0, 801af14 <_vfiprintf_r+0x110>
 801aedc:	06d1      	lsls	r1, r2, #27
 801aede:	bf44      	itt	mi
 801aee0:	2320      	movmi	r3, #32
 801aee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aee6:	0713      	lsls	r3, r2, #28
 801aee8:	bf44      	itt	mi
 801aeea:	232b      	movmi	r3, #43	@ 0x2b
 801aeec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aef0:	f89a 3000 	ldrb.w	r3, [sl]
 801aef4:	2b2a      	cmp	r3, #42	@ 0x2a
 801aef6:	d015      	beq.n	801af24 <_vfiprintf_r+0x120>
 801aef8:	9a07      	ldr	r2, [sp, #28]
 801aefa:	4654      	mov	r4, sl
 801aefc:	2000      	movs	r0, #0
 801aefe:	f04f 0c0a 	mov.w	ip, #10
 801af02:	4621      	mov	r1, r4
 801af04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af08:	3b30      	subs	r3, #48	@ 0x30
 801af0a:	2b09      	cmp	r3, #9
 801af0c:	d94b      	bls.n	801afa6 <_vfiprintf_r+0x1a2>
 801af0e:	b1b0      	cbz	r0, 801af3e <_vfiprintf_r+0x13a>
 801af10:	9207      	str	r2, [sp, #28]
 801af12:	e014      	b.n	801af3e <_vfiprintf_r+0x13a>
 801af14:	eba0 0308 	sub.w	r3, r0, r8
 801af18:	fa09 f303 	lsl.w	r3, r9, r3
 801af1c:	4313      	orrs	r3, r2
 801af1e:	9304      	str	r3, [sp, #16]
 801af20:	46a2      	mov	sl, r4
 801af22:	e7d2      	b.n	801aeca <_vfiprintf_r+0xc6>
 801af24:	9b03      	ldr	r3, [sp, #12]
 801af26:	1d19      	adds	r1, r3, #4
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	9103      	str	r1, [sp, #12]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	bfbb      	ittet	lt
 801af30:	425b      	neglt	r3, r3
 801af32:	f042 0202 	orrlt.w	r2, r2, #2
 801af36:	9307      	strge	r3, [sp, #28]
 801af38:	9307      	strlt	r3, [sp, #28]
 801af3a:	bfb8      	it	lt
 801af3c:	9204      	strlt	r2, [sp, #16]
 801af3e:	7823      	ldrb	r3, [r4, #0]
 801af40:	2b2e      	cmp	r3, #46	@ 0x2e
 801af42:	d10a      	bne.n	801af5a <_vfiprintf_r+0x156>
 801af44:	7863      	ldrb	r3, [r4, #1]
 801af46:	2b2a      	cmp	r3, #42	@ 0x2a
 801af48:	d132      	bne.n	801afb0 <_vfiprintf_r+0x1ac>
 801af4a:	9b03      	ldr	r3, [sp, #12]
 801af4c:	1d1a      	adds	r2, r3, #4
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	9203      	str	r2, [sp, #12]
 801af52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801af56:	3402      	adds	r4, #2
 801af58:	9305      	str	r3, [sp, #20]
 801af5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b030 <_vfiprintf_r+0x22c>
 801af5e:	7821      	ldrb	r1, [r4, #0]
 801af60:	2203      	movs	r2, #3
 801af62:	4650      	mov	r0, sl
 801af64:	f7e5 f9d4 	bl	8000310 <memchr>
 801af68:	b138      	cbz	r0, 801af7a <_vfiprintf_r+0x176>
 801af6a:	9b04      	ldr	r3, [sp, #16]
 801af6c:	eba0 000a 	sub.w	r0, r0, sl
 801af70:	2240      	movs	r2, #64	@ 0x40
 801af72:	4082      	lsls	r2, r0
 801af74:	4313      	orrs	r3, r2
 801af76:	3401      	adds	r4, #1
 801af78:	9304      	str	r3, [sp, #16]
 801af7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af7e:	4829      	ldr	r0, [pc, #164]	@ (801b024 <_vfiprintf_r+0x220>)
 801af80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801af84:	2206      	movs	r2, #6
 801af86:	f7e5 f9c3 	bl	8000310 <memchr>
 801af8a:	2800      	cmp	r0, #0
 801af8c:	d03f      	beq.n	801b00e <_vfiprintf_r+0x20a>
 801af8e:	4b26      	ldr	r3, [pc, #152]	@ (801b028 <_vfiprintf_r+0x224>)
 801af90:	bb1b      	cbnz	r3, 801afda <_vfiprintf_r+0x1d6>
 801af92:	9b03      	ldr	r3, [sp, #12]
 801af94:	3307      	adds	r3, #7
 801af96:	f023 0307 	bic.w	r3, r3, #7
 801af9a:	3308      	adds	r3, #8
 801af9c:	9303      	str	r3, [sp, #12]
 801af9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801afa0:	443b      	add	r3, r7
 801afa2:	9309      	str	r3, [sp, #36]	@ 0x24
 801afa4:	e76a      	b.n	801ae7c <_vfiprintf_r+0x78>
 801afa6:	fb0c 3202 	mla	r2, ip, r2, r3
 801afaa:	460c      	mov	r4, r1
 801afac:	2001      	movs	r0, #1
 801afae:	e7a8      	b.n	801af02 <_vfiprintf_r+0xfe>
 801afb0:	2300      	movs	r3, #0
 801afb2:	3401      	adds	r4, #1
 801afb4:	9305      	str	r3, [sp, #20]
 801afb6:	4619      	mov	r1, r3
 801afb8:	f04f 0c0a 	mov.w	ip, #10
 801afbc:	4620      	mov	r0, r4
 801afbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afc2:	3a30      	subs	r2, #48	@ 0x30
 801afc4:	2a09      	cmp	r2, #9
 801afc6:	d903      	bls.n	801afd0 <_vfiprintf_r+0x1cc>
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d0c6      	beq.n	801af5a <_vfiprintf_r+0x156>
 801afcc:	9105      	str	r1, [sp, #20]
 801afce:	e7c4      	b.n	801af5a <_vfiprintf_r+0x156>
 801afd0:	fb0c 2101 	mla	r1, ip, r1, r2
 801afd4:	4604      	mov	r4, r0
 801afd6:	2301      	movs	r3, #1
 801afd8:	e7f0      	b.n	801afbc <_vfiprintf_r+0x1b8>
 801afda:	ab03      	add	r3, sp, #12
 801afdc:	9300      	str	r3, [sp, #0]
 801afde:	462a      	mov	r2, r5
 801afe0:	4b12      	ldr	r3, [pc, #72]	@ (801b02c <_vfiprintf_r+0x228>)
 801afe2:	a904      	add	r1, sp, #16
 801afe4:	4630      	mov	r0, r6
 801afe6:	f3af 8000 	nop.w
 801afea:	4607      	mov	r7, r0
 801afec:	1c78      	adds	r0, r7, #1
 801afee:	d1d6      	bne.n	801af9e <_vfiprintf_r+0x19a>
 801aff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aff2:	07d9      	lsls	r1, r3, #31
 801aff4:	d405      	bmi.n	801b002 <_vfiprintf_r+0x1fe>
 801aff6:	89ab      	ldrh	r3, [r5, #12]
 801aff8:	059a      	lsls	r2, r3, #22
 801affa:	d402      	bmi.n	801b002 <_vfiprintf_r+0x1fe>
 801affc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801affe:	f7ff fda9 	bl	801ab54 <__retarget_lock_release_recursive>
 801b002:	89ab      	ldrh	r3, [r5, #12]
 801b004:	065b      	lsls	r3, r3, #25
 801b006:	f53f af1f 	bmi.w	801ae48 <_vfiprintf_r+0x44>
 801b00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b00c:	e71e      	b.n	801ae4c <_vfiprintf_r+0x48>
 801b00e:	ab03      	add	r3, sp, #12
 801b010:	9300      	str	r3, [sp, #0]
 801b012:	462a      	mov	r2, r5
 801b014:	4b05      	ldr	r3, [pc, #20]	@ (801b02c <_vfiprintf_r+0x228>)
 801b016:	a904      	add	r1, sp, #16
 801b018:	4630      	mov	r0, r6
 801b01a:	f000 f879 	bl	801b110 <_printf_i>
 801b01e:	e7e4      	b.n	801afea <_vfiprintf_r+0x1e6>
 801b020:	0801e5fd 	.word	0x0801e5fd
 801b024:	0801e607 	.word	0x0801e607
 801b028:	00000000 	.word	0x00000000
 801b02c:	0801addf 	.word	0x0801addf
 801b030:	0801e603 	.word	0x0801e603

0801b034 <_printf_common>:
 801b034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b038:	4616      	mov	r6, r2
 801b03a:	4698      	mov	r8, r3
 801b03c:	688a      	ldr	r2, [r1, #8]
 801b03e:	690b      	ldr	r3, [r1, #16]
 801b040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b044:	4293      	cmp	r3, r2
 801b046:	bfb8      	it	lt
 801b048:	4613      	movlt	r3, r2
 801b04a:	6033      	str	r3, [r6, #0]
 801b04c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b050:	4607      	mov	r7, r0
 801b052:	460c      	mov	r4, r1
 801b054:	b10a      	cbz	r2, 801b05a <_printf_common+0x26>
 801b056:	3301      	adds	r3, #1
 801b058:	6033      	str	r3, [r6, #0]
 801b05a:	6823      	ldr	r3, [r4, #0]
 801b05c:	0699      	lsls	r1, r3, #26
 801b05e:	bf42      	ittt	mi
 801b060:	6833      	ldrmi	r3, [r6, #0]
 801b062:	3302      	addmi	r3, #2
 801b064:	6033      	strmi	r3, [r6, #0]
 801b066:	6825      	ldr	r5, [r4, #0]
 801b068:	f015 0506 	ands.w	r5, r5, #6
 801b06c:	d106      	bne.n	801b07c <_printf_common+0x48>
 801b06e:	f104 0a19 	add.w	sl, r4, #25
 801b072:	68e3      	ldr	r3, [r4, #12]
 801b074:	6832      	ldr	r2, [r6, #0]
 801b076:	1a9b      	subs	r3, r3, r2
 801b078:	42ab      	cmp	r3, r5
 801b07a:	dc26      	bgt.n	801b0ca <_printf_common+0x96>
 801b07c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b080:	6822      	ldr	r2, [r4, #0]
 801b082:	3b00      	subs	r3, #0
 801b084:	bf18      	it	ne
 801b086:	2301      	movne	r3, #1
 801b088:	0692      	lsls	r2, r2, #26
 801b08a:	d42b      	bmi.n	801b0e4 <_printf_common+0xb0>
 801b08c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b090:	4641      	mov	r1, r8
 801b092:	4638      	mov	r0, r7
 801b094:	47c8      	blx	r9
 801b096:	3001      	adds	r0, #1
 801b098:	d01e      	beq.n	801b0d8 <_printf_common+0xa4>
 801b09a:	6823      	ldr	r3, [r4, #0]
 801b09c:	6922      	ldr	r2, [r4, #16]
 801b09e:	f003 0306 	and.w	r3, r3, #6
 801b0a2:	2b04      	cmp	r3, #4
 801b0a4:	bf02      	ittt	eq
 801b0a6:	68e5      	ldreq	r5, [r4, #12]
 801b0a8:	6833      	ldreq	r3, [r6, #0]
 801b0aa:	1aed      	subeq	r5, r5, r3
 801b0ac:	68a3      	ldr	r3, [r4, #8]
 801b0ae:	bf0c      	ite	eq
 801b0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b0b4:	2500      	movne	r5, #0
 801b0b6:	4293      	cmp	r3, r2
 801b0b8:	bfc4      	itt	gt
 801b0ba:	1a9b      	subgt	r3, r3, r2
 801b0bc:	18ed      	addgt	r5, r5, r3
 801b0be:	2600      	movs	r6, #0
 801b0c0:	341a      	adds	r4, #26
 801b0c2:	42b5      	cmp	r5, r6
 801b0c4:	d11a      	bne.n	801b0fc <_printf_common+0xc8>
 801b0c6:	2000      	movs	r0, #0
 801b0c8:	e008      	b.n	801b0dc <_printf_common+0xa8>
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	4652      	mov	r2, sl
 801b0ce:	4641      	mov	r1, r8
 801b0d0:	4638      	mov	r0, r7
 801b0d2:	47c8      	blx	r9
 801b0d4:	3001      	adds	r0, #1
 801b0d6:	d103      	bne.n	801b0e0 <_printf_common+0xac>
 801b0d8:	f04f 30ff 	mov.w	r0, #4294967295
 801b0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0e0:	3501      	adds	r5, #1
 801b0e2:	e7c6      	b.n	801b072 <_printf_common+0x3e>
 801b0e4:	18e1      	adds	r1, r4, r3
 801b0e6:	1c5a      	adds	r2, r3, #1
 801b0e8:	2030      	movs	r0, #48	@ 0x30
 801b0ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b0ee:	4422      	add	r2, r4
 801b0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b0f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b0f8:	3302      	adds	r3, #2
 801b0fa:	e7c7      	b.n	801b08c <_printf_common+0x58>
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	4622      	mov	r2, r4
 801b100:	4641      	mov	r1, r8
 801b102:	4638      	mov	r0, r7
 801b104:	47c8      	blx	r9
 801b106:	3001      	adds	r0, #1
 801b108:	d0e6      	beq.n	801b0d8 <_printf_common+0xa4>
 801b10a:	3601      	adds	r6, #1
 801b10c:	e7d9      	b.n	801b0c2 <_printf_common+0x8e>
	...

0801b110 <_printf_i>:
 801b110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b114:	7e0f      	ldrb	r7, [r1, #24]
 801b116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b118:	2f78      	cmp	r7, #120	@ 0x78
 801b11a:	4691      	mov	r9, r2
 801b11c:	4680      	mov	r8, r0
 801b11e:	460c      	mov	r4, r1
 801b120:	469a      	mov	sl, r3
 801b122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b126:	d807      	bhi.n	801b138 <_printf_i+0x28>
 801b128:	2f62      	cmp	r7, #98	@ 0x62
 801b12a:	d80a      	bhi.n	801b142 <_printf_i+0x32>
 801b12c:	2f00      	cmp	r7, #0
 801b12e:	f000 80d1 	beq.w	801b2d4 <_printf_i+0x1c4>
 801b132:	2f58      	cmp	r7, #88	@ 0x58
 801b134:	f000 80b8 	beq.w	801b2a8 <_printf_i+0x198>
 801b138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b13c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b140:	e03a      	b.n	801b1b8 <_printf_i+0xa8>
 801b142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b146:	2b15      	cmp	r3, #21
 801b148:	d8f6      	bhi.n	801b138 <_printf_i+0x28>
 801b14a:	a101      	add	r1, pc, #4	@ (adr r1, 801b150 <_printf_i+0x40>)
 801b14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b150:	0801b1a9 	.word	0x0801b1a9
 801b154:	0801b1bd 	.word	0x0801b1bd
 801b158:	0801b139 	.word	0x0801b139
 801b15c:	0801b139 	.word	0x0801b139
 801b160:	0801b139 	.word	0x0801b139
 801b164:	0801b139 	.word	0x0801b139
 801b168:	0801b1bd 	.word	0x0801b1bd
 801b16c:	0801b139 	.word	0x0801b139
 801b170:	0801b139 	.word	0x0801b139
 801b174:	0801b139 	.word	0x0801b139
 801b178:	0801b139 	.word	0x0801b139
 801b17c:	0801b2bb 	.word	0x0801b2bb
 801b180:	0801b1e7 	.word	0x0801b1e7
 801b184:	0801b275 	.word	0x0801b275
 801b188:	0801b139 	.word	0x0801b139
 801b18c:	0801b139 	.word	0x0801b139
 801b190:	0801b2dd 	.word	0x0801b2dd
 801b194:	0801b139 	.word	0x0801b139
 801b198:	0801b1e7 	.word	0x0801b1e7
 801b19c:	0801b139 	.word	0x0801b139
 801b1a0:	0801b139 	.word	0x0801b139
 801b1a4:	0801b27d 	.word	0x0801b27d
 801b1a8:	6833      	ldr	r3, [r6, #0]
 801b1aa:	1d1a      	adds	r2, r3, #4
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	6032      	str	r2, [r6, #0]
 801b1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b1b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	e09c      	b.n	801b2f6 <_printf_i+0x1e6>
 801b1bc:	6833      	ldr	r3, [r6, #0]
 801b1be:	6820      	ldr	r0, [r4, #0]
 801b1c0:	1d19      	adds	r1, r3, #4
 801b1c2:	6031      	str	r1, [r6, #0]
 801b1c4:	0606      	lsls	r6, r0, #24
 801b1c6:	d501      	bpl.n	801b1cc <_printf_i+0xbc>
 801b1c8:	681d      	ldr	r5, [r3, #0]
 801b1ca:	e003      	b.n	801b1d4 <_printf_i+0xc4>
 801b1cc:	0645      	lsls	r5, r0, #25
 801b1ce:	d5fb      	bpl.n	801b1c8 <_printf_i+0xb8>
 801b1d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b1d4:	2d00      	cmp	r5, #0
 801b1d6:	da03      	bge.n	801b1e0 <_printf_i+0xd0>
 801b1d8:	232d      	movs	r3, #45	@ 0x2d
 801b1da:	426d      	negs	r5, r5
 801b1dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b1e0:	4858      	ldr	r0, [pc, #352]	@ (801b344 <_printf_i+0x234>)
 801b1e2:	230a      	movs	r3, #10
 801b1e4:	e011      	b.n	801b20a <_printf_i+0xfa>
 801b1e6:	6821      	ldr	r1, [r4, #0]
 801b1e8:	6833      	ldr	r3, [r6, #0]
 801b1ea:	0608      	lsls	r0, r1, #24
 801b1ec:	f853 5b04 	ldr.w	r5, [r3], #4
 801b1f0:	d402      	bmi.n	801b1f8 <_printf_i+0xe8>
 801b1f2:	0649      	lsls	r1, r1, #25
 801b1f4:	bf48      	it	mi
 801b1f6:	b2ad      	uxthmi	r5, r5
 801b1f8:	2f6f      	cmp	r7, #111	@ 0x6f
 801b1fa:	4852      	ldr	r0, [pc, #328]	@ (801b344 <_printf_i+0x234>)
 801b1fc:	6033      	str	r3, [r6, #0]
 801b1fe:	bf14      	ite	ne
 801b200:	230a      	movne	r3, #10
 801b202:	2308      	moveq	r3, #8
 801b204:	2100      	movs	r1, #0
 801b206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b20a:	6866      	ldr	r6, [r4, #4]
 801b20c:	60a6      	str	r6, [r4, #8]
 801b20e:	2e00      	cmp	r6, #0
 801b210:	db05      	blt.n	801b21e <_printf_i+0x10e>
 801b212:	6821      	ldr	r1, [r4, #0]
 801b214:	432e      	orrs	r6, r5
 801b216:	f021 0104 	bic.w	r1, r1, #4
 801b21a:	6021      	str	r1, [r4, #0]
 801b21c:	d04b      	beq.n	801b2b6 <_printf_i+0x1a6>
 801b21e:	4616      	mov	r6, r2
 801b220:	fbb5 f1f3 	udiv	r1, r5, r3
 801b224:	fb03 5711 	mls	r7, r3, r1, r5
 801b228:	5dc7      	ldrb	r7, [r0, r7]
 801b22a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b22e:	462f      	mov	r7, r5
 801b230:	42bb      	cmp	r3, r7
 801b232:	460d      	mov	r5, r1
 801b234:	d9f4      	bls.n	801b220 <_printf_i+0x110>
 801b236:	2b08      	cmp	r3, #8
 801b238:	d10b      	bne.n	801b252 <_printf_i+0x142>
 801b23a:	6823      	ldr	r3, [r4, #0]
 801b23c:	07df      	lsls	r7, r3, #31
 801b23e:	d508      	bpl.n	801b252 <_printf_i+0x142>
 801b240:	6923      	ldr	r3, [r4, #16]
 801b242:	6861      	ldr	r1, [r4, #4]
 801b244:	4299      	cmp	r1, r3
 801b246:	bfde      	ittt	le
 801b248:	2330      	movle	r3, #48	@ 0x30
 801b24a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b24e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b252:	1b92      	subs	r2, r2, r6
 801b254:	6122      	str	r2, [r4, #16]
 801b256:	f8cd a000 	str.w	sl, [sp]
 801b25a:	464b      	mov	r3, r9
 801b25c:	aa03      	add	r2, sp, #12
 801b25e:	4621      	mov	r1, r4
 801b260:	4640      	mov	r0, r8
 801b262:	f7ff fee7 	bl	801b034 <_printf_common>
 801b266:	3001      	adds	r0, #1
 801b268:	d14a      	bne.n	801b300 <_printf_i+0x1f0>
 801b26a:	f04f 30ff 	mov.w	r0, #4294967295
 801b26e:	b004      	add	sp, #16
 801b270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b274:	6823      	ldr	r3, [r4, #0]
 801b276:	f043 0320 	orr.w	r3, r3, #32
 801b27a:	6023      	str	r3, [r4, #0]
 801b27c:	4832      	ldr	r0, [pc, #200]	@ (801b348 <_printf_i+0x238>)
 801b27e:	2778      	movs	r7, #120	@ 0x78
 801b280:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b284:	6823      	ldr	r3, [r4, #0]
 801b286:	6831      	ldr	r1, [r6, #0]
 801b288:	061f      	lsls	r7, r3, #24
 801b28a:	f851 5b04 	ldr.w	r5, [r1], #4
 801b28e:	d402      	bmi.n	801b296 <_printf_i+0x186>
 801b290:	065f      	lsls	r7, r3, #25
 801b292:	bf48      	it	mi
 801b294:	b2ad      	uxthmi	r5, r5
 801b296:	6031      	str	r1, [r6, #0]
 801b298:	07d9      	lsls	r1, r3, #31
 801b29a:	bf44      	itt	mi
 801b29c:	f043 0320 	orrmi.w	r3, r3, #32
 801b2a0:	6023      	strmi	r3, [r4, #0]
 801b2a2:	b11d      	cbz	r5, 801b2ac <_printf_i+0x19c>
 801b2a4:	2310      	movs	r3, #16
 801b2a6:	e7ad      	b.n	801b204 <_printf_i+0xf4>
 801b2a8:	4826      	ldr	r0, [pc, #152]	@ (801b344 <_printf_i+0x234>)
 801b2aa:	e7e9      	b.n	801b280 <_printf_i+0x170>
 801b2ac:	6823      	ldr	r3, [r4, #0]
 801b2ae:	f023 0320 	bic.w	r3, r3, #32
 801b2b2:	6023      	str	r3, [r4, #0]
 801b2b4:	e7f6      	b.n	801b2a4 <_printf_i+0x194>
 801b2b6:	4616      	mov	r6, r2
 801b2b8:	e7bd      	b.n	801b236 <_printf_i+0x126>
 801b2ba:	6833      	ldr	r3, [r6, #0]
 801b2bc:	6825      	ldr	r5, [r4, #0]
 801b2be:	6961      	ldr	r1, [r4, #20]
 801b2c0:	1d18      	adds	r0, r3, #4
 801b2c2:	6030      	str	r0, [r6, #0]
 801b2c4:	062e      	lsls	r6, r5, #24
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	d501      	bpl.n	801b2ce <_printf_i+0x1be>
 801b2ca:	6019      	str	r1, [r3, #0]
 801b2cc:	e002      	b.n	801b2d4 <_printf_i+0x1c4>
 801b2ce:	0668      	lsls	r0, r5, #25
 801b2d0:	d5fb      	bpl.n	801b2ca <_printf_i+0x1ba>
 801b2d2:	8019      	strh	r1, [r3, #0]
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	6123      	str	r3, [r4, #16]
 801b2d8:	4616      	mov	r6, r2
 801b2da:	e7bc      	b.n	801b256 <_printf_i+0x146>
 801b2dc:	6833      	ldr	r3, [r6, #0]
 801b2de:	1d1a      	adds	r2, r3, #4
 801b2e0:	6032      	str	r2, [r6, #0]
 801b2e2:	681e      	ldr	r6, [r3, #0]
 801b2e4:	6862      	ldr	r2, [r4, #4]
 801b2e6:	2100      	movs	r1, #0
 801b2e8:	4630      	mov	r0, r6
 801b2ea:	f7e5 f811 	bl	8000310 <memchr>
 801b2ee:	b108      	cbz	r0, 801b2f4 <_printf_i+0x1e4>
 801b2f0:	1b80      	subs	r0, r0, r6
 801b2f2:	6060      	str	r0, [r4, #4]
 801b2f4:	6863      	ldr	r3, [r4, #4]
 801b2f6:	6123      	str	r3, [r4, #16]
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b2fe:	e7aa      	b.n	801b256 <_printf_i+0x146>
 801b300:	6923      	ldr	r3, [r4, #16]
 801b302:	4632      	mov	r2, r6
 801b304:	4649      	mov	r1, r9
 801b306:	4640      	mov	r0, r8
 801b308:	47d0      	blx	sl
 801b30a:	3001      	adds	r0, #1
 801b30c:	d0ad      	beq.n	801b26a <_printf_i+0x15a>
 801b30e:	6823      	ldr	r3, [r4, #0]
 801b310:	079b      	lsls	r3, r3, #30
 801b312:	d413      	bmi.n	801b33c <_printf_i+0x22c>
 801b314:	68e0      	ldr	r0, [r4, #12]
 801b316:	9b03      	ldr	r3, [sp, #12]
 801b318:	4298      	cmp	r0, r3
 801b31a:	bfb8      	it	lt
 801b31c:	4618      	movlt	r0, r3
 801b31e:	e7a6      	b.n	801b26e <_printf_i+0x15e>
 801b320:	2301      	movs	r3, #1
 801b322:	4632      	mov	r2, r6
 801b324:	4649      	mov	r1, r9
 801b326:	4640      	mov	r0, r8
 801b328:	47d0      	blx	sl
 801b32a:	3001      	adds	r0, #1
 801b32c:	d09d      	beq.n	801b26a <_printf_i+0x15a>
 801b32e:	3501      	adds	r5, #1
 801b330:	68e3      	ldr	r3, [r4, #12]
 801b332:	9903      	ldr	r1, [sp, #12]
 801b334:	1a5b      	subs	r3, r3, r1
 801b336:	42ab      	cmp	r3, r5
 801b338:	dcf2      	bgt.n	801b320 <_printf_i+0x210>
 801b33a:	e7eb      	b.n	801b314 <_printf_i+0x204>
 801b33c:	2500      	movs	r5, #0
 801b33e:	f104 0619 	add.w	r6, r4, #25
 801b342:	e7f5      	b.n	801b330 <_printf_i+0x220>
 801b344:	0801e60e 	.word	0x0801e60e
 801b348:	0801e61f 	.word	0x0801e61f

0801b34c <__sflush_r>:
 801b34c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b354:	0716      	lsls	r6, r2, #28
 801b356:	4605      	mov	r5, r0
 801b358:	460c      	mov	r4, r1
 801b35a:	d454      	bmi.n	801b406 <__sflush_r+0xba>
 801b35c:	684b      	ldr	r3, [r1, #4]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	dc02      	bgt.n	801b368 <__sflush_r+0x1c>
 801b362:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b364:	2b00      	cmp	r3, #0
 801b366:	dd48      	ble.n	801b3fa <__sflush_r+0xae>
 801b368:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b36a:	2e00      	cmp	r6, #0
 801b36c:	d045      	beq.n	801b3fa <__sflush_r+0xae>
 801b36e:	2300      	movs	r3, #0
 801b370:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b374:	682f      	ldr	r7, [r5, #0]
 801b376:	6a21      	ldr	r1, [r4, #32]
 801b378:	602b      	str	r3, [r5, #0]
 801b37a:	d030      	beq.n	801b3de <__sflush_r+0x92>
 801b37c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b37e:	89a3      	ldrh	r3, [r4, #12]
 801b380:	0759      	lsls	r1, r3, #29
 801b382:	d505      	bpl.n	801b390 <__sflush_r+0x44>
 801b384:	6863      	ldr	r3, [r4, #4]
 801b386:	1ad2      	subs	r2, r2, r3
 801b388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b38a:	b10b      	cbz	r3, 801b390 <__sflush_r+0x44>
 801b38c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b38e:	1ad2      	subs	r2, r2, r3
 801b390:	2300      	movs	r3, #0
 801b392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b394:	6a21      	ldr	r1, [r4, #32]
 801b396:	4628      	mov	r0, r5
 801b398:	47b0      	blx	r6
 801b39a:	1c43      	adds	r3, r0, #1
 801b39c:	89a3      	ldrh	r3, [r4, #12]
 801b39e:	d106      	bne.n	801b3ae <__sflush_r+0x62>
 801b3a0:	6829      	ldr	r1, [r5, #0]
 801b3a2:	291d      	cmp	r1, #29
 801b3a4:	d82b      	bhi.n	801b3fe <__sflush_r+0xb2>
 801b3a6:	4a2a      	ldr	r2, [pc, #168]	@ (801b450 <__sflush_r+0x104>)
 801b3a8:	40ca      	lsrs	r2, r1
 801b3aa:	07d6      	lsls	r6, r2, #31
 801b3ac:	d527      	bpl.n	801b3fe <__sflush_r+0xb2>
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	6062      	str	r2, [r4, #4]
 801b3b2:	04d9      	lsls	r1, r3, #19
 801b3b4:	6922      	ldr	r2, [r4, #16]
 801b3b6:	6022      	str	r2, [r4, #0]
 801b3b8:	d504      	bpl.n	801b3c4 <__sflush_r+0x78>
 801b3ba:	1c42      	adds	r2, r0, #1
 801b3bc:	d101      	bne.n	801b3c2 <__sflush_r+0x76>
 801b3be:	682b      	ldr	r3, [r5, #0]
 801b3c0:	b903      	cbnz	r3, 801b3c4 <__sflush_r+0x78>
 801b3c2:	6560      	str	r0, [r4, #84]	@ 0x54
 801b3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b3c6:	602f      	str	r7, [r5, #0]
 801b3c8:	b1b9      	cbz	r1, 801b3fa <__sflush_r+0xae>
 801b3ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b3ce:	4299      	cmp	r1, r3
 801b3d0:	d002      	beq.n	801b3d8 <__sflush_r+0x8c>
 801b3d2:	4628      	mov	r0, r5
 801b3d4:	f7ff fbec 	bl	801abb0 <_free_r>
 801b3d8:	2300      	movs	r3, #0
 801b3da:	6363      	str	r3, [r4, #52]	@ 0x34
 801b3dc:	e00d      	b.n	801b3fa <__sflush_r+0xae>
 801b3de:	2301      	movs	r3, #1
 801b3e0:	4628      	mov	r0, r5
 801b3e2:	47b0      	blx	r6
 801b3e4:	4602      	mov	r2, r0
 801b3e6:	1c50      	adds	r0, r2, #1
 801b3e8:	d1c9      	bne.n	801b37e <__sflush_r+0x32>
 801b3ea:	682b      	ldr	r3, [r5, #0]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d0c6      	beq.n	801b37e <__sflush_r+0x32>
 801b3f0:	2b1d      	cmp	r3, #29
 801b3f2:	d001      	beq.n	801b3f8 <__sflush_r+0xac>
 801b3f4:	2b16      	cmp	r3, #22
 801b3f6:	d11e      	bne.n	801b436 <__sflush_r+0xea>
 801b3f8:	602f      	str	r7, [r5, #0]
 801b3fa:	2000      	movs	r0, #0
 801b3fc:	e022      	b.n	801b444 <__sflush_r+0xf8>
 801b3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b402:	b21b      	sxth	r3, r3
 801b404:	e01b      	b.n	801b43e <__sflush_r+0xf2>
 801b406:	690f      	ldr	r7, [r1, #16]
 801b408:	2f00      	cmp	r7, #0
 801b40a:	d0f6      	beq.n	801b3fa <__sflush_r+0xae>
 801b40c:	0793      	lsls	r3, r2, #30
 801b40e:	680e      	ldr	r6, [r1, #0]
 801b410:	bf08      	it	eq
 801b412:	694b      	ldreq	r3, [r1, #20]
 801b414:	600f      	str	r7, [r1, #0]
 801b416:	bf18      	it	ne
 801b418:	2300      	movne	r3, #0
 801b41a:	eba6 0807 	sub.w	r8, r6, r7
 801b41e:	608b      	str	r3, [r1, #8]
 801b420:	f1b8 0f00 	cmp.w	r8, #0
 801b424:	dde9      	ble.n	801b3fa <__sflush_r+0xae>
 801b426:	6a21      	ldr	r1, [r4, #32]
 801b428:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b42a:	4643      	mov	r3, r8
 801b42c:	463a      	mov	r2, r7
 801b42e:	4628      	mov	r0, r5
 801b430:	47b0      	blx	r6
 801b432:	2800      	cmp	r0, #0
 801b434:	dc08      	bgt.n	801b448 <__sflush_r+0xfc>
 801b436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b43e:	81a3      	strh	r3, [r4, #12]
 801b440:	f04f 30ff 	mov.w	r0, #4294967295
 801b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b448:	4407      	add	r7, r0
 801b44a:	eba8 0800 	sub.w	r8, r8, r0
 801b44e:	e7e7      	b.n	801b420 <__sflush_r+0xd4>
 801b450:	20400001 	.word	0x20400001

0801b454 <_fflush_r>:
 801b454:	b538      	push	{r3, r4, r5, lr}
 801b456:	690b      	ldr	r3, [r1, #16]
 801b458:	4605      	mov	r5, r0
 801b45a:	460c      	mov	r4, r1
 801b45c:	b913      	cbnz	r3, 801b464 <_fflush_r+0x10>
 801b45e:	2500      	movs	r5, #0
 801b460:	4628      	mov	r0, r5
 801b462:	bd38      	pop	{r3, r4, r5, pc}
 801b464:	b118      	cbz	r0, 801b46e <_fflush_r+0x1a>
 801b466:	6a03      	ldr	r3, [r0, #32]
 801b468:	b90b      	cbnz	r3, 801b46e <_fflush_r+0x1a>
 801b46a:	f7ff fa05 	bl	801a878 <__sinit>
 801b46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d0f3      	beq.n	801b45e <_fflush_r+0xa>
 801b476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b478:	07d0      	lsls	r0, r2, #31
 801b47a:	d404      	bmi.n	801b486 <_fflush_r+0x32>
 801b47c:	0599      	lsls	r1, r3, #22
 801b47e:	d402      	bmi.n	801b486 <_fflush_r+0x32>
 801b480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b482:	f7ff fb66 	bl	801ab52 <__retarget_lock_acquire_recursive>
 801b486:	4628      	mov	r0, r5
 801b488:	4621      	mov	r1, r4
 801b48a:	f7ff ff5f 	bl	801b34c <__sflush_r>
 801b48e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b490:	07da      	lsls	r2, r3, #31
 801b492:	4605      	mov	r5, r0
 801b494:	d4e4      	bmi.n	801b460 <_fflush_r+0xc>
 801b496:	89a3      	ldrh	r3, [r4, #12]
 801b498:	059b      	lsls	r3, r3, #22
 801b49a:	d4e1      	bmi.n	801b460 <_fflush_r+0xc>
 801b49c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b49e:	f7ff fb59 	bl	801ab54 <__retarget_lock_release_recursive>
 801b4a2:	e7dd      	b.n	801b460 <_fflush_r+0xc>

0801b4a4 <fiprintf>:
 801b4a4:	b40e      	push	{r1, r2, r3}
 801b4a6:	b503      	push	{r0, r1, lr}
 801b4a8:	4601      	mov	r1, r0
 801b4aa:	ab03      	add	r3, sp, #12
 801b4ac:	4805      	ldr	r0, [pc, #20]	@ (801b4c4 <fiprintf+0x20>)
 801b4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4b2:	6800      	ldr	r0, [r0, #0]
 801b4b4:	9301      	str	r3, [sp, #4]
 801b4b6:	f7ff fca5 	bl	801ae04 <_vfiprintf_r>
 801b4ba:	b002      	add	sp, #8
 801b4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b4c0:	b003      	add	sp, #12
 801b4c2:	4770      	bx	lr
 801b4c4:	240049d0 	.word	0x240049d0

0801b4c8 <__swbuf_r>:
 801b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ca:	460e      	mov	r6, r1
 801b4cc:	4614      	mov	r4, r2
 801b4ce:	4605      	mov	r5, r0
 801b4d0:	b118      	cbz	r0, 801b4da <__swbuf_r+0x12>
 801b4d2:	6a03      	ldr	r3, [r0, #32]
 801b4d4:	b90b      	cbnz	r3, 801b4da <__swbuf_r+0x12>
 801b4d6:	f7ff f9cf 	bl	801a878 <__sinit>
 801b4da:	69a3      	ldr	r3, [r4, #24]
 801b4dc:	60a3      	str	r3, [r4, #8]
 801b4de:	89a3      	ldrh	r3, [r4, #12]
 801b4e0:	071a      	lsls	r2, r3, #28
 801b4e2:	d501      	bpl.n	801b4e8 <__swbuf_r+0x20>
 801b4e4:	6923      	ldr	r3, [r4, #16]
 801b4e6:	b943      	cbnz	r3, 801b4fa <__swbuf_r+0x32>
 801b4e8:	4621      	mov	r1, r4
 801b4ea:	4628      	mov	r0, r5
 801b4ec:	f000 f82a 	bl	801b544 <__swsetup_r>
 801b4f0:	b118      	cbz	r0, 801b4fa <__swbuf_r+0x32>
 801b4f2:	f04f 37ff 	mov.w	r7, #4294967295
 801b4f6:	4638      	mov	r0, r7
 801b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4fa:	6823      	ldr	r3, [r4, #0]
 801b4fc:	6922      	ldr	r2, [r4, #16]
 801b4fe:	1a98      	subs	r0, r3, r2
 801b500:	6963      	ldr	r3, [r4, #20]
 801b502:	b2f6      	uxtb	r6, r6
 801b504:	4283      	cmp	r3, r0
 801b506:	4637      	mov	r7, r6
 801b508:	dc05      	bgt.n	801b516 <__swbuf_r+0x4e>
 801b50a:	4621      	mov	r1, r4
 801b50c:	4628      	mov	r0, r5
 801b50e:	f7ff ffa1 	bl	801b454 <_fflush_r>
 801b512:	2800      	cmp	r0, #0
 801b514:	d1ed      	bne.n	801b4f2 <__swbuf_r+0x2a>
 801b516:	68a3      	ldr	r3, [r4, #8]
 801b518:	3b01      	subs	r3, #1
 801b51a:	60a3      	str	r3, [r4, #8]
 801b51c:	6823      	ldr	r3, [r4, #0]
 801b51e:	1c5a      	adds	r2, r3, #1
 801b520:	6022      	str	r2, [r4, #0]
 801b522:	701e      	strb	r6, [r3, #0]
 801b524:	6962      	ldr	r2, [r4, #20]
 801b526:	1c43      	adds	r3, r0, #1
 801b528:	429a      	cmp	r2, r3
 801b52a:	d004      	beq.n	801b536 <__swbuf_r+0x6e>
 801b52c:	89a3      	ldrh	r3, [r4, #12]
 801b52e:	07db      	lsls	r3, r3, #31
 801b530:	d5e1      	bpl.n	801b4f6 <__swbuf_r+0x2e>
 801b532:	2e0a      	cmp	r6, #10
 801b534:	d1df      	bne.n	801b4f6 <__swbuf_r+0x2e>
 801b536:	4621      	mov	r1, r4
 801b538:	4628      	mov	r0, r5
 801b53a:	f7ff ff8b 	bl	801b454 <_fflush_r>
 801b53e:	2800      	cmp	r0, #0
 801b540:	d0d9      	beq.n	801b4f6 <__swbuf_r+0x2e>
 801b542:	e7d6      	b.n	801b4f2 <__swbuf_r+0x2a>

0801b544 <__swsetup_r>:
 801b544:	b538      	push	{r3, r4, r5, lr}
 801b546:	4b29      	ldr	r3, [pc, #164]	@ (801b5ec <__swsetup_r+0xa8>)
 801b548:	4605      	mov	r5, r0
 801b54a:	6818      	ldr	r0, [r3, #0]
 801b54c:	460c      	mov	r4, r1
 801b54e:	b118      	cbz	r0, 801b558 <__swsetup_r+0x14>
 801b550:	6a03      	ldr	r3, [r0, #32]
 801b552:	b90b      	cbnz	r3, 801b558 <__swsetup_r+0x14>
 801b554:	f7ff f990 	bl	801a878 <__sinit>
 801b558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b55c:	0719      	lsls	r1, r3, #28
 801b55e:	d422      	bmi.n	801b5a6 <__swsetup_r+0x62>
 801b560:	06da      	lsls	r2, r3, #27
 801b562:	d407      	bmi.n	801b574 <__swsetup_r+0x30>
 801b564:	2209      	movs	r2, #9
 801b566:	602a      	str	r2, [r5, #0]
 801b568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b56c:	81a3      	strh	r3, [r4, #12]
 801b56e:	f04f 30ff 	mov.w	r0, #4294967295
 801b572:	e033      	b.n	801b5dc <__swsetup_r+0x98>
 801b574:	0758      	lsls	r0, r3, #29
 801b576:	d512      	bpl.n	801b59e <__swsetup_r+0x5a>
 801b578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b57a:	b141      	cbz	r1, 801b58e <__swsetup_r+0x4a>
 801b57c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b580:	4299      	cmp	r1, r3
 801b582:	d002      	beq.n	801b58a <__swsetup_r+0x46>
 801b584:	4628      	mov	r0, r5
 801b586:	f7ff fb13 	bl	801abb0 <_free_r>
 801b58a:	2300      	movs	r3, #0
 801b58c:	6363      	str	r3, [r4, #52]	@ 0x34
 801b58e:	89a3      	ldrh	r3, [r4, #12]
 801b590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b594:	81a3      	strh	r3, [r4, #12]
 801b596:	2300      	movs	r3, #0
 801b598:	6063      	str	r3, [r4, #4]
 801b59a:	6923      	ldr	r3, [r4, #16]
 801b59c:	6023      	str	r3, [r4, #0]
 801b59e:	89a3      	ldrh	r3, [r4, #12]
 801b5a0:	f043 0308 	orr.w	r3, r3, #8
 801b5a4:	81a3      	strh	r3, [r4, #12]
 801b5a6:	6923      	ldr	r3, [r4, #16]
 801b5a8:	b94b      	cbnz	r3, 801b5be <__swsetup_r+0x7a>
 801b5aa:	89a3      	ldrh	r3, [r4, #12]
 801b5ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b5b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b5b4:	d003      	beq.n	801b5be <__swsetup_r+0x7a>
 801b5b6:	4621      	mov	r1, r4
 801b5b8:	4628      	mov	r0, r5
 801b5ba:	f000 f856 	bl	801b66a <__smakebuf_r>
 801b5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5c2:	f013 0201 	ands.w	r2, r3, #1
 801b5c6:	d00a      	beq.n	801b5de <__swsetup_r+0x9a>
 801b5c8:	2200      	movs	r2, #0
 801b5ca:	60a2      	str	r2, [r4, #8]
 801b5cc:	6962      	ldr	r2, [r4, #20]
 801b5ce:	4252      	negs	r2, r2
 801b5d0:	61a2      	str	r2, [r4, #24]
 801b5d2:	6922      	ldr	r2, [r4, #16]
 801b5d4:	b942      	cbnz	r2, 801b5e8 <__swsetup_r+0xa4>
 801b5d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b5da:	d1c5      	bne.n	801b568 <__swsetup_r+0x24>
 801b5dc:	bd38      	pop	{r3, r4, r5, pc}
 801b5de:	0799      	lsls	r1, r3, #30
 801b5e0:	bf58      	it	pl
 801b5e2:	6962      	ldrpl	r2, [r4, #20]
 801b5e4:	60a2      	str	r2, [r4, #8]
 801b5e6:	e7f4      	b.n	801b5d2 <__swsetup_r+0x8e>
 801b5e8:	2000      	movs	r0, #0
 801b5ea:	e7f7      	b.n	801b5dc <__swsetup_r+0x98>
 801b5ec:	240049d0 	.word	0x240049d0

0801b5f0 <_sbrk_r>:
 801b5f0:	b538      	push	{r3, r4, r5, lr}
 801b5f2:	4d06      	ldr	r5, [pc, #24]	@ (801b60c <_sbrk_r+0x1c>)
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	4604      	mov	r4, r0
 801b5f8:	4608      	mov	r0, r1
 801b5fa:	602b      	str	r3, [r5, #0]
 801b5fc:	f7e6 f9ac 	bl	8001958 <_sbrk>
 801b600:	1c43      	adds	r3, r0, #1
 801b602:	d102      	bne.n	801b60a <_sbrk_r+0x1a>
 801b604:	682b      	ldr	r3, [r5, #0]
 801b606:	b103      	cbz	r3, 801b60a <_sbrk_r+0x1a>
 801b608:	6023      	str	r3, [r4, #0]
 801b60a:	bd38      	pop	{r3, r4, r5, pc}
 801b60c:	24014e18 	.word	0x24014e18

0801b610 <abort>:
 801b610:	b508      	push	{r3, lr}
 801b612:	2006      	movs	r0, #6
 801b614:	f000 f88e 	bl	801b734 <raise>
 801b618:	2001      	movs	r0, #1
 801b61a:	f7e6 f925 	bl	8001868 <_exit>

0801b61e <__swhatbuf_r>:
 801b61e:	b570      	push	{r4, r5, r6, lr}
 801b620:	460c      	mov	r4, r1
 801b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b626:	2900      	cmp	r1, #0
 801b628:	b096      	sub	sp, #88	@ 0x58
 801b62a:	4615      	mov	r5, r2
 801b62c:	461e      	mov	r6, r3
 801b62e:	da0d      	bge.n	801b64c <__swhatbuf_r+0x2e>
 801b630:	89a3      	ldrh	r3, [r4, #12]
 801b632:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b636:	f04f 0100 	mov.w	r1, #0
 801b63a:	bf14      	ite	ne
 801b63c:	2340      	movne	r3, #64	@ 0x40
 801b63e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b642:	2000      	movs	r0, #0
 801b644:	6031      	str	r1, [r6, #0]
 801b646:	602b      	str	r3, [r5, #0]
 801b648:	b016      	add	sp, #88	@ 0x58
 801b64a:	bd70      	pop	{r4, r5, r6, pc}
 801b64c:	466a      	mov	r2, sp
 801b64e:	f000 f879 	bl	801b744 <_fstat_r>
 801b652:	2800      	cmp	r0, #0
 801b654:	dbec      	blt.n	801b630 <__swhatbuf_r+0x12>
 801b656:	9901      	ldr	r1, [sp, #4]
 801b658:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b65c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b660:	4259      	negs	r1, r3
 801b662:	4159      	adcs	r1, r3
 801b664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b668:	e7eb      	b.n	801b642 <__swhatbuf_r+0x24>

0801b66a <__smakebuf_r>:
 801b66a:	898b      	ldrh	r3, [r1, #12]
 801b66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b66e:	079d      	lsls	r5, r3, #30
 801b670:	4606      	mov	r6, r0
 801b672:	460c      	mov	r4, r1
 801b674:	d507      	bpl.n	801b686 <__smakebuf_r+0x1c>
 801b676:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b67a:	6023      	str	r3, [r4, #0]
 801b67c:	6123      	str	r3, [r4, #16]
 801b67e:	2301      	movs	r3, #1
 801b680:	6163      	str	r3, [r4, #20]
 801b682:	b003      	add	sp, #12
 801b684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b686:	ab01      	add	r3, sp, #4
 801b688:	466a      	mov	r2, sp
 801b68a:	f7ff ffc8 	bl	801b61e <__swhatbuf_r>
 801b68e:	9f00      	ldr	r7, [sp, #0]
 801b690:	4605      	mov	r5, r0
 801b692:	4639      	mov	r1, r7
 801b694:	4630      	mov	r0, r6
 801b696:	f7ff faff 	bl	801ac98 <_malloc_r>
 801b69a:	b948      	cbnz	r0, 801b6b0 <__smakebuf_r+0x46>
 801b69c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b6a0:	059a      	lsls	r2, r3, #22
 801b6a2:	d4ee      	bmi.n	801b682 <__smakebuf_r+0x18>
 801b6a4:	f023 0303 	bic.w	r3, r3, #3
 801b6a8:	f043 0302 	orr.w	r3, r3, #2
 801b6ac:	81a3      	strh	r3, [r4, #12]
 801b6ae:	e7e2      	b.n	801b676 <__smakebuf_r+0xc>
 801b6b0:	89a3      	ldrh	r3, [r4, #12]
 801b6b2:	6020      	str	r0, [r4, #0]
 801b6b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b6b8:	81a3      	strh	r3, [r4, #12]
 801b6ba:	9b01      	ldr	r3, [sp, #4]
 801b6bc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b6c0:	b15b      	cbz	r3, 801b6da <__smakebuf_r+0x70>
 801b6c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f000 f84e 	bl	801b768 <_isatty_r>
 801b6cc:	b128      	cbz	r0, 801b6da <__smakebuf_r+0x70>
 801b6ce:	89a3      	ldrh	r3, [r4, #12]
 801b6d0:	f023 0303 	bic.w	r3, r3, #3
 801b6d4:	f043 0301 	orr.w	r3, r3, #1
 801b6d8:	81a3      	strh	r3, [r4, #12]
 801b6da:	89a3      	ldrh	r3, [r4, #12]
 801b6dc:	431d      	orrs	r5, r3
 801b6de:	81a5      	strh	r5, [r4, #12]
 801b6e0:	e7cf      	b.n	801b682 <__smakebuf_r+0x18>

0801b6e2 <_raise_r>:
 801b6e2:	291f      	cmp	r1, #31
 801b6e4:	b538      	push	{r3, r4, r5, lr}
 801b6e6:	4605      	mov	r5, r0
 801b6e8:	460c      	mov	r4, r1
 801b6ea:	d904      	bls.n	801b6f6 <_raise_r+0x14>
 801b6ec:	2316      	movs	r3, #22
 801b6ee:	6003      	str	r3, [r0, #0]
 801b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 801b6f4:	bd38      	pop	{r3, r4, r5, pc}
 801b6f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b6f8:	b112      	cbz	r2, 801b700 <_raise_r+0x1e>
 801b6fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b6fe:	b94b      	cbnz	r3, 801b714 <_raise_r+0x32>
 801b700:	4628      	mov	r0, r5
 801b702:	f000 f853 	bl	801b7ac <_getpid_r>
 801b706:	4622      	mov	r2, r4
 801b708:	4601      	mov	r1, r0
 801b70a:	4628      	mov	r0, r5
 801b70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b710:	f000 b83a 	b.w	801b788 <_kill_r>
 801b714:	2b01      	cmp	r3, #1
 801b716:	d00a      	beq.n	801b72e <_raise_r+0x4c>
 801b718:	1c59      	adds	r1, r3, #1
 801b71a:	d103      	bne.n	801b724 <_raise_r+0x42>
 801b71c:	2316      	movs	r3, #22
 801b71e:	6003      	str	r3, [r0, #0]
 801b720:	2001      	movs	r0, #1
 801b722:	e7e7      	b.n	801b6f4 <_raise_r+0x12>
 801b724:	2100      	movs	r1, #0
 801b726:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b72a:	4620      	mov	r0, r4
 801b72c:	4798      	blx	r3
 801b72e:	2000      	movs	r0, #0
 801b730:	e7e0      	b.n	801b6f4 <_raise_r+0x12>
	...

0801b734 <raise>:
 801b734:	4b02      	ldr	r3, [pc, #8]	@ (801b740 <raise+0xc>)
 801b736:	4601      	mov	r1, r0
 801b738:	6818      	ldr	r0, [r3, #0]
 801b73a:	f7ff bfd2 	b.w	801b6e2 <_raise_r>
 801b73e:	bf00      	nop
 801b740:	240049d0 	.word	0x240049d0

0801b744 <_fstat_r>:
 801b744:	b538      	push	{r3, r4, r5, lr}
 801b746:	4d07      	ldr	r5, [pc, #28]	@ (801b764 <_fstat_r+0x20>)
 801b748:	2300      	movs	r3, #0
 801b74a:	4604      	mov	r4, r0
 801b74c:	4608      	mov	r0, r1
 801b74e:	4611      	mov	r1, r2
 801b750:	602b      	str	r3, [r5, #0]
 801b752:	f7e6 f8d9 	bl	8001908 <_fstat>
 801b756:	1c43      	adds	r3, r0, #1
 801b758:	d102      	bne.n	801b760 <_fstat_r+0x1c>
 801b75a:	682b      	ldr	r3, [r5, #0]
 801b75c:	b103      	cbz	r3, 801b760 <_fstat_r+0x1c>
 801b75e:	6023      	str	r3, [r4, #0]
 801b760:	bd38      	pop	{r3, r4, r5, pc}
 801b762:	bf00      	nop
 801b764:	24014e18 	.word	0x24014e18

0801b768 <_isatty_r>:
 801b768:	b538      	push	{r3, r4, r5, lr}
 801b76a:	4d06      	ldr	r5, [pc, #24]	@ (801b784 <_isatty_r+0x1c>)
 801b76c:	2300      	movs	r3, #0
 801b76e:	4604      	mov	r4, r0
 801b770:	4608      	mov	r0, r1
 801b772:	602b      	str	r3, [r5, #0]
 801b774:	f7e6 f8d8 	bl	8001928 <_isatty>
 801b778:	1c43      	adds	r3, r0, #1
 801b77a:	d102      	bne.n	801b782 <_isatty_r+0x1a>
 801b77c:	682b      	ldr	r3, [r5, #0]
 801b77e:	b103      	cbz	r3, 801b782 <_isatty_r+0x1a>
 801b780:	6023      	str	r3, [r4, #0]
 801b782:	bd38      	pop	{r3, r4, r5, pc}
 801b784:	24014e18 	.word	0x24014e18

0801b788 <_kill_r>:
 801b788:	b538      	push	{r3, r4, r5, lr}
 801b78a:	4d07      	ldr	r5, [pc, #28]	@ (801b7a8 <_kill_r+0x20>)
 801b78c:	2300      	movs	r3, #0
 801b78e:	4604      	mov	r4, r0
 801b790:	4608      	mov	r0, r1
 801b792:	4611      	mov	r1, r2
 801b794:	602b      	str	r3, [r5, #0]
 801b796:	f7e6 f855 	bl	8001844 <_kill>
 801b79a:	1c43      	adds	r3, r0, #1
 801b79c:	d102      	bne.n	801b7a4 <_kill_r+0x1c>
 801b79e:	682b      	ldr	r3, [r5, #0]
 801b7a0:	b103      	cbz	r3, 801b7a4 <_kill_r+0x1c>
 801b7a2:	6023      	str	r3, [r4, #0]
 801b7a4:	bd38      	pop	{r3, r4, r5, pc}
 801b7a6:	bf00      	nop
 801b7a8:	24014e18 	.word	0x24014e18

0801b7ac <_getpid_r>:
 801b7ac:	f7e6 b842 	b.w	8001834 <_getpid>

0801b7b0 <_init>:
 801b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7b2:	bf00      	nop
 801b7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7b6:	bc08      	pop	{r3}
 801b7b8:	469e      	mov	lr, r3
 801b7ba:	4770      	bx	lr

0801b7bc <_fini>:
 801b7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7be:	bf00      	nop
 801b7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7c2:	bc08      	pop	{r3}
 801b7c4:	469e      	mov	lr, r3
 801b7c6:	4770      	bx	lr
